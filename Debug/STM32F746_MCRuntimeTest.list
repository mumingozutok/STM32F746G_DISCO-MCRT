
STM32F746_MCRuntimeTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000100f4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002a8c  080102c4  080102c4  000202c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012d50  08012d50  00030110  2**0
                  CONTENTS
  4 .ARM          00000008  08012d50  08012d50  00022d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012d58  08012d58  00030110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012d58  08012d58  00022d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012d5c  08012d5c  00022d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  08012d60  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002aa8  20000110  08012e70  00030110  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002bb8  08012e70  00032bb8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030110  2**0
                  CONTENTS, READONLY
 12 .debug_info   000350db  00000000  00000000  0003013e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000081ca  00000000  00000000  00065219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002e00  00000000  00000000  0006d3e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000029d8  00000000  00000000  000701e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00031b0b  00000000  00000000  00072bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00033ad0  00000000  00000000  000a46cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011ab6b  00000000  00000000  000d819b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000009c  00000000  00000000  001f2d06  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c520  00000000  00000000  001f2da4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000110 	.word	0x20000110
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080102ac 	.word	0x080102ac

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000114 	.word	0x20000114
 800020c:	080102ac 	.word	0x080102ac

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <initiate_input_channels>:
static Digital_Channel outputChannel[4];

#define ANALOG_INPUT_CH_COUNT 2
static Analog_Input_Channel analog_input_channel[ANALOG_INPUT_CH_COUNT];

void initiate_input_channels(){
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
	inputChannel[0].port = GPIOB;
 80005ac:	4b0c      	ldr	r3, [pc, #48]	; (80005e0 <initiate_input_channels+0x38>)
 80005ae:	4a0d      	ldr	r2, [pc, #52]	; (80005e4 <initiate_input_channels+0x3c>)
 80005b0:	601a      	str	r2, [r3, #0]
	inputChannel[0].pin = GPIO_PIN_9; //EXT3
 80005b2:	4b0b      	ldr	r3, [pc, #44]	; (80005e0 <initiate_input_channels+0x38>)
 80005b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005b8:	605a      	str	r2, [r3, #4]

	inputChannel[1].port = GPIOB;
 80005ba:	4b09      	ldr	r3, [pc, #36]	; (80005e0 <initiate_input_channels+0x38>)
 80005bc:	4a09      	ldr	r2, [pc, #36]	; (80005e4 <initiate_input_channels+0x3c>)
 80005be:	609a      	str	r2, [r3, #8]
	inputChannel[1].pin = GPIO_PIN_8; //EXT5
 80005c0:	4b07      	ldr	r3, [pc, #28]	; (80005e0 <initiate_input_channels+0x38>)
 80005c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005c6:	60da      	str	r2, [r3, #12]

	inputChannel[2].port = GPIOF; //jOYSTİCK button
 80005c8:	4b05      	ldr	r3, [pc, #20]	; (80005e0 <initiate_input_channels+0x38>)
 80005ca:	4a07      	ldr	r2, [pc, #28]	; (80005e8 <initiate_input_channels+0x40>)
 80005cc:	611a      	str	r2, [r3, #16]
	inputChannel[2].pin = GPIO_PIN_9;
 80005ce:	4b04      	ldr	r3, [pc, #16]	; (80005e0 <initiate_input_channels+0x38>)
 80005d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005d4:	615a      	str	r2, [r3, #20]
}
 80005d6:	bf00      	nop
 80005d8:	46bd      	mov	sp, r7
 80005da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005de:	4770      	bx	lr
 80005e0:	2000012c 	.word	0x2000012c
 80005e4:	40020400 	.word	0x40020400
 80005e8:	40021400 	.word	0x40021400

080005ec <initiate_output_channels>:

void initiate_output_channels(){
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
	outputChannel[0].port = GPIOI;
 80005f2:	4b17      	ldr	r3, [pc, #92]	; (8000650 <initiate_output_channels+0x64>)
 80005f4:	4a17      	ldr	r2, [pc, #92]	; (8000654 <initiate_output_channels+0x68>)
 80005f6:	601a      	str	r2, [r3, #0]
	outputChannel[0].pin = GPIO_PIN_2;
 80005f8:	4b15      	ldr	r3, [pc, #84]	; (8000650 <initiate_output_channels+0x64>)
 80005fa:	2204      	movs	r2, #4
 80005fc:	605a      	str	r2, [r3, #4]

	outputChannel[1].port = GPIOA;
 80005fe:	4b14      	ldr	r3, [pc, #80]	; (8000650 <initiate_output_channels+0x64>)
 8000600:	4a15      	ldr	r2, [pc, #84]	; (8000658 <initiate_output_channels+0x6c>)
 8000602:	609a      	str	r2, [r3, #8]
	outputChannel[1].pin = GPIO_PIN_15;
 8000604:	4b12      	ldr	r3, [pc, #72]	; (8000650 <initiate_output_channels+0x64>)
 8000606:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800060a:	60da      	str	r2, [r3, #12]

	outputChannel[2].port = GPIOA;
 800060c:	4b10      	ldr	r3, [pc, #64]	; (8000650 <initiate_output_channels+0x64>)
 800060e:	4a12      	ldr	r2, [pc, #72]	; (8000658 <initiate_output_channels+0x6c>)
 8000610:	611a      	str	r2, [r3, #16]
	outputChannel[2].pin = GPIO_PIN_8;
 8000612:	4b0f      	ldr	r3, [pc, #60]	; (8000650 <initiate_output_channels+0x64>)
 8000614:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000618:	615a      	str	r2, [r3, #20]

	outputChannel[3].port = GPIOB;
 800061a:	4b0d      	ldr	r3, [pc, #52]	; (8000650 <initiate_output_channels+0x64>)
 800061c:	4a0f      	ldr	r2, [pc, #60]	; (800065c <initiate_output_channels+0x70>)
 800061e:	619a      	str	r2, [r3, #24]
	outputChannel[3].pin = GPIO_PIN_15;
 8000620:	4b0b      	ldr	r3, [pc, #44]	; (8000650 <initiate_output_channels+0x64>)
 8000622:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000626:	61da      	str	r2, [r3, #28]

	for(uint8_t i = 0; i<4;i++){
 8000628:	2300      	movs	r3, #0
 800062a:	71fb      	strb	r3, [r7, #7]
 800062c:	e007      	b.n	800063e <initiate_output_channels+0x52>
		hal_gpio_write_pin(i,0);
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f000 f82c 	bl	8000690 <hal_gpio_write_pin>
	for(uint8_t i = 0; i<4;i++){
 8000638:	79fb      	ldrb	r3, [r7, #7]
 800063a:	3301      	adds	r3, #1
 800063c:	71fb      	strb	r3, [r7, #7]
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	2b03      	cmp	r3, #3
 8000642:	d9f4      	bls.n	800062e <initiate_output_channels+0x42>
	}
}
 8000644:	bf00      	nop
 8000646:	bf00      	nop
 8000648:	3708      	adds	r7, #8
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	20000144 	.word	0x20000144
 8000654:	40022000 	.word	0x40022000
 8000658:	40020000 	.word	0x40020000
 800065c:	40020400 	.word	0x40020400

08000660 <initate_analog_channels>:

void initate_analog_channels(){
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
	analog_input_channel[0].ai = &adc_info;
 8000664:	4b08      	ldr	r3, [pc, #32]	; (8000688 <initate_analog_channels+0x28>)
 8000666:	4a09      	ldr	r2, [pc, #36]	; (800068c <initate_analog_channels+0x2c>)
 8000668:	605a      	str	r2, [r3, #4]
	analog_input_channel[0].data = 0;
 800066a:	4b07      	ldr	r3, [pc, #28]	; (8000688 <initate_analog_channels+0x28>)
 800066c:	2200      	movs	r2, #0
 800066e:	801a      	strh	r2, [r3, #0]

	analog_input_channel[1].ai = &adc_info;
 8000670:	4b05      	ldr	r3, [pc, #20]	; (8000688 <initate_analog_channels+0x28>)
 8000672:	4a06      	ldr	r2, [pc, #24]	; (800068c <initate_analog_channels+0x2c>)
 8000674:	60da      	str	r2, [r3, #12]
	analog_input_channel[1].data = 0;
 8000676:	4b04      	ldr	r3, [pc, #16]	; (8000688 <initate_analog_channels+0x28>)
 8000678:	2200      	movs	r2, #0
 800067a:	811a      	strh	r2, [r3, #8]

}
 800067c:	bf00      	nop
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	20000164 	.word	0x20000164
 800068c:	20000000 	.word	0x20000000

08000690 <hal_gpio_write_pin>:

uint8_t uart_rx_data;

//Leds are connected to: PF0-PF2-PF13
//Please write down GPIO output function in your hardware
void hal_gpio_write_pin(uint16_t chNum, uint8_t value){
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	460a      	mov	r2, r1
 800069a:	80fb      	strh	r3, [r7, #6]
 800069c:	4613      	mov	r3, r2
 800069e:	717b      	strb	r3, [r7, #5]
	HAL_GPIO_WritePin(outputChannel[chNum].port, outputChannel[chNum].pin, value);
 80006a0:	88fb      	ldrh	r3, [r7, #6]
 80006a2:	4a09      	ldr	r2, [pc, #36]	; (80006c8 <hal_gpio_write_pin+0x38>)
 80006a4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80006a8:	4618      	mov	r0, r3
 80006aa:	88fb      	ldrh	r3, [r7, #6]
 80006ac:	4a06      	ldr	r2, [pc, #24]	; (80006c8 <hal_gpio_write_pin+0x38>)
 80006ae:	00db      	lsls	r3, r3, #3
 80006b0:	4413      	add	r3, r2
 80006b2:	685b      	ldr	r3, [r3, #4]
 80006b4:	b29b      	uxth	r3, r3
 80006b6:	797a      	ldrb	r2, [r7, #5]
 80006b8:	4619      	mov	r1, r3
 80006ba:	f005 fe0d 	bl	80062d8 <HAL_GPIO_WritePin>
}
 80006be:	bf00      	nop
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20000144 	.word	0x20000144

080006cc <hal_gpio_read_pin>:

uint8_t  hal_gpio_read_pin(uint32_t chNum){
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
	//return values >= 2, depicts error
	return HAL_GPIO_ReadPin(inputChannel[chNum].port, inputChannel[chNum].pin);
 80006d4:	4a09      	ldr	r2, [pc, #36]	; (80006fc <hal_gpio_read_pin+0x30>)
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80006dc:	4618      	mov	r0, r3
 80006de:	4a07      	ldr	r2, [pc, #28]	; (80006fc <hal_gpio_read_pin+0x30>)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	00db      	lsls	r3, r3, #3
 80006e4:	4413      	add	r3, r2
 80006e6:	685b      	ldr	r3, [r3, #4]
 80006e8:	b29b      	uxth	r3, r3
 80006ea:	4619      	mov	r1, r3
 80006ec:	f005 fddc 	bl	80062a8 <HAL_GPIO_ReadPin>
 80006f0:	4603      	mov	r3, r0

}
 80006f2:	4618      	mov	r0, r3
 80006f4:	3708      	adds	r7, #8
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	2000012c 	.word	0x2000012c

08000700 <hal_read_analog_ch>:

//------------------ADC readings with DMA---------------------------------------
uint32_t counter_hal_dma = 0, counter_dma_callback = 0;

uint32_t hal_read_analog_ch(uint32_t chNum){
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
	Analog_Input_Channel* ch = &analog_input_channel[chNum];
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	00db      	lsls	r3, r3, #3
 800070c:	4a11      	ldr	r2, [pc, #68]	; (8000754 <hal_read_analog_ch+0x54>)
 800070e:	4413      	add	r3, r2
 8000710:	60fb      	str	r3, [r7, #12]
	ADC_Info* ai = ch->ai;
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	685b      	ldr	r3, [r3, #4]
 8000716:	60bb      	str	r3, [r7, #8]
	if(ai->ready_flag == 1){ //check for the conv finish
 8000718:	68bb      	ldr	r3, [r7, #8]
 800071a:	791b      	ldrb	r3, [r3, #4]
 800071c:	2b01      	cmp	r3, #1
 800071e:	d111      	bne.n	8000744 <hal_read_analog_ch+0x44>
		//Start DMA controlled ADC single convertion
		//this adc is working on two channels IN3 and IN10
		//so there will be two channel value after one conversion
		ai->ready_flag = 0; //disable the flag to notify there is an ongoing process
 8000720:	68bb      	ldr	r3, [r7, #8]
 8000722:	2200      	movs	r2, #0
 8000724:	711a      	strb	r2, [r3, #4]
		HAL_ADC_Start_DMA(ai->adc, (uint32_t*) &ai->data, ai->ch_count);
 8000726:	68bb      	ldr	r3, [r7, #8]
 8000728:	6818      	ldr	r0, [r3, #0]
 800072a:	68bb      	ldr	r3, [r7, #8]
 800072c:	1d99      	adds	r1, r3, #6
 800072e:	68bb      	ldr	r3, [r7, #8]
 8000730:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8000734:	461a      	mov	r2, r3
 8000736:	f003 fdd9 	bl	80042ec <HAL_ADC_Start_DMA>
		counter_hal_dma++;
 800073a:	4b07      	ldr	r3, [pc, #28]	; (8000758 <hal_read_analog_ch+0x58>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	3301      	adds	r3, #1
 8000740:	4a05      	ldr	r2, [pc, #20]	; (8000758 <hal_read_analog_ch+0x58>)
 8000742:	6013      	str	r3, [r2, #0]
	}

	return analog_input_channel[chNum].data;
 8000744:	4a03      	ldr	r2, [pc, #12]	; (8000754 <hal_read_analog_ch+0x54>)
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
}
 800074c:	4618      	mov	r0, r3
 800074e:	3710      	adds	r7, #16
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	20000164 	.word	0x20000164
 8000758:	20000174 	.word	0x20000174

0800075c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800075c:	b480      	push	{r7}
 800075e:	b087      	sub	sp, #28
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
	Analog_Input_Channel* ch;
	ADC_Info* ai;
	for(uint8_t i=0;i<ANALOG_INPUT_CH_COUNT;i++){
 8000764:	2300      	movs	r3, #0
 8000766:	75fb      	strb	r3, [r7, #23]
 8000768:	e01e      	b.n	80007a8 <HAL_ADC_ConvCpltCallback+0x4c>
		ch = &analog_input_channel[i];
 800076a:	7dfb      	ldrb	r3, [r7, #23]
 800076c:	00db      	lsls	r3, r3, #3
 800076e:	4a13      	ldr	r2, [pc, #76]	; (80007bc <HAL_ADC_ConvCpltCallback+0x60>)
 8000770:	4413      	add	r3, r2
 8000772:	613b      	str	r3, [r7, #16]
		ai = ch->ai;
 8000774:	693b      	ldr	r3, [r7, #16]
 8000776:	685b      	ldr	r3, [r3, #4]
 8000778:	60fb      	str	r3, [r7, #12]
		if(hadc == ai->adc){
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	687a      	ldr	r2, [r7, #4]
 8000780:	429a      	cmp	r2, r3
 8000782:	d10e      	bne.n	80007a2 <HAL_ADC_ConvCpltCallback+0x46>
			ch->data = ai->data[i];
 8000784:	7dfb      	ldrb	r3, [r7, #23]
 8000786:	68fa      	ldr	r2, [r7, #12]
 8000788:	005b      	lsls	r3, r3, #1
 800078a:	4413      	add	r3, r2
 800078c:	88da      	ldrh	r2, [r3, #6]
 800078e:	693b      	ldr	r3, [r7, #16]
 8000790:	801a      	strh	r2, [r3, #0]
			ai->ready_flag = 1;
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	2201      	movs	r2, #1
 8000796:	711a      	strb	r2, [r3, #4]
			counter_dma_callback++;
 8000798:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <HAL_ADC_ConvCpltCallback+0x64>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	3301      	adds	r3, #1
 800079e:	4a08      	ldr	r2, [pc, #32]	; (80007c0 <HAL_ADC_ConvCpltCallback+0x64>)
 80007a0:	6013      	str	r3, [r2, #0]
	for(uint8_t i=0;i<ANALOG_INPUT_CH_COUNT;i++){
 80007a2:	7dfb      	ldrb	r3, [r7, #23]
 80007a4:	3301      	adds	r3, #1
 80007a6:	75fb      	strb	r3, [r7, #23]
 80007a8:	7dfb      	ldrb	r3, [r7, #23]
 80007aa:	2b01      	cmp	r3, #1
 80007ac:	d9dd      	bls.n	800076a <HAL_ADC_ConvCpltCallback+0xe>
		}
	}
}
 80007ae:	bf00      	nop
 80007b0:	bf00      	nop
 80007b2:	371c      	adds	r7, #28
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr
 80007bc:	20000164 	.word	0x20000164
 80007c0:	20000178 	.word	0x20000178

080007c4 <hal_get_tick>:
//-------------------------------------------------------------------------------

//Please write down "get system tick" function in your hardware
uint32_t hal_get_tick(){
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 80007c8:	f003 fbda 	bl	8003f80 <HAL_GetTick>
 80007cc:	4603      	mov	r3, r0
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	bd80      	pop	{r7, pc}

080007d2 <hal_init_tick>:

void /*__attribute__((weak))*/ hal_init_tick(){
 80007d2:	b580      	push	{r7, lr}
 80007d4:	af00      	add	r7, sp, #0
	HAL_InitTick(0);
 80007d6:	2000      	movs	r0, #0
 80007d8:	f002 fae6 	bl	8002da8 <HAL_InitTick>
}
 80007dc:	bf00      	nop
 80007de:	bd80      	pop	{r7, pc}

080007e0 <init_comm_data_service>:

//Communication Channel Adaptation

//Please write down functions for your communication channel
//And put this function right after your initialisations
void init_comm_data_service(){
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(ra.comm_huart, &uart_rx_data, 1);
 80007e4:	4b04      	ldr	r3, [pc, #16]	; (80007f8 <init_comm_data_service+0x18>)
 80007e6:	685b      	ldr	r3, [r3, #4]
 80007e8:	2201      	movs	r2, #1
 80007ea:	4904      	ldr	r1, [pc, #16]	; (80007fc <init_comm_data_service+0x1c>)
 80007ec:	4618      	mov	r0, r3
 80007ee:	f009 fd2d 	bl	800a24c <HAL_UART_Receive_IT>
}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	20000028 	.word	0x20000028
 80007fc:	200015ab 	.word	0x200015ab

08000800 <init_comm_timing_service>:

//Please write down functions for communication timing services
//And put this function right after your initialisations
void init_comm_timing_service(){
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(ra.comm_htim);
 8000804:	4b05      	ldr	r3, [pc, #20]	; (800081c <init_comm_timing_service+0x1c>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4618      	mov	r0, r3
 800080a:	f008 fc45 	bl	8009098 <HAL_TIM_Base_Start_IT>
	stop_comm_timer(ra.comm_htim);
 800080e:	4b03      	ldr	r3, [pc, #12]	; (800081c <init_comm_timing_service+0x1c>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	4618      	mov	r0, r3
 8000814:	f000 f822 	bl	800085c <stop_comm_timer>
}
 8000818:	bf00      	nop
 800081a:	bd80      	pop	{r7, pc}
 800081c:	20000028 	.word	0x20000028

08000820 <start_comm_timer>:

void start_comm_timer(TIM_HandleTypeDef* htim){
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
	htim->Instance->CR1 &= ~0x01; //Stop Timer
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	681a      	ldr	r2, [r3, #0]
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	f022 0201 	bic.w	r2, r2, #1
 8000836:	601a      	str	r2, [r3, #0]
	htim->Instance->CNT = 0; //Reset Counter
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	2200      	movs	r2, #0
 800083e:	625a      	str	r2, [r3, #36]	; 0x24
	htim->Instance->CR1 |= 0x01; //Start Timer
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	681a      	ldr	r2, [r3, #0]
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	f042 0201 	orr.w	r2, r2, #1
 800084e:	601a      	str	r2, [r3, #0]
}
 8000850:	bf00      	nop
 8000852:	370c      	adds	r7, #12
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr

0800085c <stop_comm_timer>:

void stop_comm_timer(TIM_HandleTypeDef* htim){
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
	htim->Instance->CR1 &= ~0x01; //Stop Timer
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	681a      	ldr	r2, [r3, #0]
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	f022 0201 	bic.w	r2, r2, #1
 8000872:	601a      	str	r2, [r3, #0]
	htim->Instance->CNT = 0; //Reset Counter
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	2200      	movs	r2, #0
 800087a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800087c:	bf00      	nop
 800087e:	370c      	adds	r7, #12
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr

08000888 <HAL_UART_RxCpltCallback>:

//Callbacks
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(huart, &uart_rx_data, 1);
 8000890:	2201      	movs	r2, #1
 8000892:	4909      	ldr	r1, [pc, #36]	; (80008b8 <HAL_UART_RxCpltCallback+0x30>)
 8000894:	6878      	ldr	r0, [r7, #4]
 8000896:	f009 fcd9 	bl	800a24c <HAL_UART_Receive_IT>
	start_comm_timer(ra.comm_htim);
 800089a:	4b08      	ldr	r3, [pc, #32]	; (80008bc <HAL_UART_RxCpltCallback+0x34>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4618      	mov	r0, r3
 80008a0:	f7ff ffbe 	bl	8000820 <start_comm_timer>

	//When new data received copy this data to the runtime buffers
	Runtime_CommDataService_NewData_Received(0, &uart_rx_data, 1);
 80008a4:	2201      	movs	r2, #1
 80008a6:	4904      	ldr	r1, [pc, #16]	; (80008b8 <HAL_UART_RxCpltCallback+0x30>)
 80008a8:	2000      	movs	r0, #0
 80008aa:	f00b fa72 	bl	800bd92 <Runtime_CommDataService_NewData_Received>
	User_Callback_Function* ucf = get_ucf();
	if(ucf[MODBUS_UART_CALLBACK_FUNCTION_SLOT].f != 0){
		ucf[MODBUS_UART_CALLBACK_FUNCTION_SLOT].f(&uart_rx_data);
	}
	*/
}
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	200015ab 	.word	0x200015ab
 80008bc:	20000028 	.word	0x20000028

080008c0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
	  if (htim->Instance == TIM6) {
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a0b      	ldr	r2, [pc, #44]	; (80008fc <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d102      	bne.n	80008d8 <HAL_TIM_PeriodElapsedCallback+0x18>
	    HAL_IncTick();
 80008d2:	f003 fb41 	bl	8003f58 <HAL_IncTick>

		//External trigger makes runtime to process data
		//This trigging is needed for Modbus (3.5 Char)
		Runtime_CommDataService_Process_DataBuffer(0);
	  }
}
 80008d6:	e00c      	b.n	80008f2 <HAL_TIM_PeriodElapsedCallback+0x32>
	  else if(htim == ra.comm_htim){
 80008d8:	4b09      	ldr	r3, [pc, #36]	; (8000900 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	687a      	ldr	r2, [r7, #4]
 80008de:	429a      	cmp	r2, r3
 80008e0:	d107      	bne.n	80008f2 <HAL_TIM_PeriodElapsedCallback+0x32>
		stop_comm_timer(ra.comm_htim);
 80008e2:	4b07      	ldr	r3, [pc, #28]	; (8000900 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4618      	mov	r0, r3
 80008e8:	f7ff ffb8 	bl	800085c <stop_comm_timer>
		Runtime_CommDataService_Process_DataBuffer(0);
 80008ec:	2000      	movs	r0, #0
 80008ee:	f00b fa7b 	bl	800bde8 <Runtime_CommDataService_Process_DataBuffer>
}
 80008f2:	bf00      	nop
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40001000 	.word	0x40001000
 8000900:	20000028 	.word	0x20000028

08000904 <hal_modbus_uart_tx>:

//Modbus UART Transmit Functions
void /*__attribute__((weak))*/ hal_modbus_uart_tx(uint8_t* pData, uint16_t Size){
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
 800090c:	460b      	mov	r3, r1
 800090e:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit_IT(ra.comm_huart, pData, Size);
 8000910:	4b05      	ldr	r3, [pc, #20]	; (8000928 <hal_modbus_uart_tx+0x24>)
 8000912:	685b      	ldr	r3, [r3, #4]
 8000914:	887a      	ldrh	r2, [r7, #2]
 8000916:	6879      	ldr	r1, [r7, #4]
 8000918:	4618      	mov	r0, r3
 800091a:	f009 fc3b 	bl	800a194 <HAL_UART_Transmit_IT>
}
 800091e:	bf00      	nop
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	20000028 	.word	0x20000028

0800092c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
}
 8000934:	bf00      	nop
 8000936:	370c      	adds	r7, #12
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr

08000940 <get_uniqueid>:

//-----------------------UNIQUE ID-----------------------------------------
void get_uniqueid(uint8_t* id, uint16_t len){
 8000940:	b480      	push	{r7}
 8000942:	b085      	sub	sp, #20
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
 8000948:	460b      	mov	r3, r1
 800094a:	807b      	strh	r3, [r7, #2]
	uint32_t* buf = id;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	60fb      	str	r3, [r7, #12]
	buf[0] 	= (uint32_t) READ_REG(*((uint32_t *)UID_BASE));
 8000950:	4b09      	ldr	r3, [pc, #36]	; (8000978 <get_uniqueid+0x38>)
 8000952:	681a      	ldr	r2, [r3, #0]
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	601a      	str	r2, [r3, #0]
	buf[1] = (uint32_t) READ_REG(*((uint32_t *)(UID_BASE + 0x04U)));
 8000958:	4a08      	ldr	r2, [pc, #32]	; (800097c <get_uniqueid+0x3c>)
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	3304      	adds	r3, #4
 800095e:	6812      	ldr	r2, [r2, #0]
 8000960:	601a      	str	r2, [r3, #0]
	buf[2] = (uint32_t) READ_REG(*((uint32_t *)(UID_BASE + 0x14U)));
 8000962:	4a07      	ldr	r2, [pc, #28]	; (8000980 <get_uniqueid+0x40>)
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	3308      	adds	r3, #8
 8000968:	6812      	ldr	r2, [r2, #0]
 800096a:	601a      	str	r2, [r3, #0]
}
 800096c:	bf00      	nop
 800096e:	3714      	adds	r7, #20
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr
 8000978:	1ff0f420 	.word	0x1ff0f420
 800097c:	1ff0f424 	.word	0x1ff0f424
 8000980:	1ff0f434 	.word	0x1ff0f434

08000984 <get_flash_memory_info>:

//mem_id: 0 -> Function Blocks
//mem_id: 1 -> Static Parameters
//mem_id: 2 -> Dynamic Parameters
//mem_id: 3 -> Circular FIFO (Data Storage)
void get_flash_memory_info(uint32_t* start_addr, uint32_t* size, uint8_t mem_id){
 8000984:	b480      	push	{r7}
 8000986:	b085      	sub	sp, #20
 8000988:	af00      	add	r7, sp, #0
 800098a:	60f8      	str	r0, [r7, #12]
 800098c:	60b9      	str	r1, [r7, #8]
 800098e:	4613      	mov	r3, r2
 8000990:	71fb      	strb	r3, [r7, #7]
	case 3:
		*start_addr = ADDR_FLASH_SECTOR_20;
		*size = FLASH_MEMORY_SIZE;
		break;*/
	default:
		*start_addr = 0;
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
		*size = 0;
 8000998:	68bb      	ldr	r3, [r7, #8]
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
	}
}
 800099e:	bf00      	nop
 80009a0:	3714      	adds	r7, #20
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr

080009aa <write_to_flash>:

uint8_t write_to_flash(uint8_t* p, uint32_t start_addr, uint16_t size)
{
 80009aa:	b480      	push	{r7}
 80009ac:	b087      	sub	sp, #28
 80009ae:	af00      	add	r7, sp, #0
 80009b0:	60f8      	str	r0, [r7, #12]
 80009b2:	60b9      	str	r1, [r7, #8]
 80009b4:	4613      	mov	r3, r2
 80009b6:	80fb      	strh	r3, [r7, #6]
	uint8_t ret = 0;
 80009b8:	2300      	movs	r3, #0
 80009ba:	75fb      	strb	r3, [r7, #23]
		}
	}

	HAL_FLASH_Lock();
#endif
	return 0;
 80009bc:	2300      	movs	r3, #0
}
 80009be:	4618      	mov	r0, r3
 80009c0:	371c      	adds	r7, #28
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr

080009ca <erase_flash>:

uint8_t erase_flash(uint32_t start_addr, uint8_t mem_id)
{
 80009ca:	b480      	push	{r7}
 80009cc:	b085      	sub	sp, #20
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	6078      	str	r0, [r7, #4]
 80009d2:	460b      	mov	r3, r1
 80009d4:	70fb      	strb	r3, [r7, #3]
	uint8_t ret = 0;
 80009d6:	2300      	movs	r3, #0
 80009d8:	73fb      	strb	r3, [r7, #15]

	else ret = 0;

#endif

	return ret;
 80009da:	7bfb      	ldrb	r3, [r7, #15]
}
 80009dc:	4618      	mov	r0, r3
 80009de:	3714      	adds	r7, #20
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr

080009e8 <hal_get_encoder_value>:

//---------------------Encoder Function---------------------------------------------------
int8_t hal_get_encoder_value(uint8_t ch)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	71fb      	strb	r3, [r7, #7]
	if(ch==0){
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d105      	bne.n	8000a04 <hal_get_encoder_value+0x1c>
		return (htim1.Instance->CNT>>2);
 80009f8:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <hal_get_encoder_value+0x2c>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009fe:	089b      	lsrs	r3, r3, #2
 8000a00:	b25b      	sxtb	r3, r3
 8000a02:	e000      	b.n	8000a06 <hal_get_encoder_value+0x1e>
	}
	else{
		return 0;
 8000a04:	2300      	movs	r3, #0
	}
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	370c      	adds	r7, #12
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	20002504 	.word	0x20002504

08000a18 <Display_String>:
//---------------------Display FUnctions---------------------------------------------------

//Display Functions
void  Display_String(int32_t startX, int32_t startY,
												int32_t width, int32_t height,
													int32_t attr, char* str, uint16_t len){
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	60f8      	str	r0, [r7, #12]
 8000a20:	60b9      	str	r1, [r7, #8]
 8000a22:	607a      	str	r2, [r7, #4]
 8000a24:	603b      	str	r3, [r7, #0]

	BSP_LCD_SetFont(&Font16);
 8000a26:	4809      	ldr	r0, [pc, #36]	; (8000a4c <Display_String+0x34>)
 8000a28:	f002 fcaa 	bl	8003380 <BSP_LCD_SetFont>

	BSP_LCD_SetTextColor(LCD_COLOR_RED); //can gather from attr
 8000a2c:	4808      	ldr	r0, [pc, #32]	; (8000a50 <Display_String+0x38>)
 8000a2e:	f002 fc8f 	bl	8003350 <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAt(startX, startY, str, LEFT_MODE);
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	b298      	uxth	r0, r3
 8000a36:	68bb      	ldr	r3, [r7, #8]
 8000a38:	b299      	uxth	r1, r3
 8000a3a:	2303      	movs	r3, #3
 8000a3c:	69fa      	ldr	r2, [r7, #28]
 8000a3e:	f002 fd25 	bl	800348c <BSP_LCD_DisplayStringAt>
}
 8000a42:	bf00      	nop
 8000a44:	3710      	adds	r7, #16
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	2000003c 	.word	0x2000003c
 8000a50:	ffff0000 	.word	0xffff0000

08000a54 <Display_Number>:

void  Display_Number(int32_t startX, int32_t startY,
											int32_t width, int32_t height,
												int32_t attr, int32_t val){
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b088      	sub	sp, #32
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	60f8      	str	r0, [r7, #12]
 8000a5c:	60b9      	str	r1, [r7, #8]
 8000a5e:	607a      	str	r2, [r7, #4]
 8000a60:	603b      	str	r3, [r7, #0]


	char str[16];
	itoa(val, str, 10);
 8000a62:	f107 0310 	add.w	r3, r7, #16
 8000a66:	220a      	movs	r2, #10
 8000a68:	4619      	mov	r1, r3
 8000a6a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000a6c:	f00e fc40 	bl	800f2f0 <itoa>

	BSP_LCD_SetFont(&Font16);
 8000a70:	4810      	ldr	r0, [pc, #64]	; (8000ab4 <Display_Number+0x60>)
 8000a72:	f002 fc85 	bl	8003380 <BSP_LCD_SetFont>

	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000a76:	f04f 30ff 	mov.w	r0, #4294967295
 8000a7a:	f002 fc69 	bl	8003350 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(startX, startY, width, height);
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	b298      	uxth	r0, r3
 8000a82:	68bb      	ldr	r3, [r7, #8]
 8000a84:	b299      	uxth	r1, r3
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	b29a      	uxth	r2, r3
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	b29b      	uxth	r3, r3
 8000a8e:	f002 fe0d 	bl	80036ac <BSP_LCD_FillRect>

	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8000a92:	4809      	ldr	r0, [pc, #36]	; (8000ab8 <Display_Number+0x64>)
 8000a94:	f002 fc5c 	bl	8003350 <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAt(startX, startY, str, LEFT_MODE);
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	b298      	uxth	r0, r3
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	b299      	uxth	r1, r3
 8000aa0:	f107 0210 	add.w	r2, r7, #16
 8000aa4:	2303      	movs	r3, #3
 8000aa6:	f002 fcf1 	bl	800348c <BSP_LCD_DisplayStringAt>
}
 8000aaa:	bf00      	nop
 8000aac:	3720      	adds	r7, #32
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	2000003c 	.word	0x2000003c
 8000ab8:	ff0000ff 	.word	0xff0000ff

08000abc <Display_Clear>:

void Display_Clear()
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
	  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac4:	f002 fc76 	bl	80033b4 <BSP_LCD_Clear>
}
 8000ac8:	bf00      	nop
 8000aca:	bd80      	pop	{r7, pc}

08000acc <initiate_runtime>:
void hal_xfer_watch_data(uint8_t len, uint8_t* watch_data){
	hal_modbus_uart_tx(watch_data, len);
}

void initiate_runtime()
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
	  init_comm_data_service();
 8000ad0:	f7ff fe86 	bl	80007e0 <init_comm_data_service>
	  init_comm_timing_service();
 8000ad4:	f7ff fe94 	bl	8000800 <init_comm_timing_service>
	  initiate_input_channels();
 8000ad8:	f7ff fd66 	bl	80005a8 <initiate_input_channels>
	  initiate_output_channels();
 8000adc:	f7ff fd86 	bl	80005ec <initiate_output_channels>
	  initate_analog_channels();
 8000ae0:	f7ff fdbe 	bl	8000660 <initate_analog_channels>
}
 8000ae4:	bf00      	nop
 8000ae6:	bd80      	pop	{r7, pc}

08000ae8 <init_lcd_display>:
/* USER CODE BEGIN 0 */
#define 	LCD_FOREGROUND_LAYER   0x0001
#define 	LCD_BACKGROUND_LAYER   0x0000
#define 	LCD_FRAME_BUFFER   ((uint32_t)0xC0000000)

void init_lcd_display(){
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
	  BSP_LCD_Init();
 8000aec:	f002 fb28 	bl	8003140 <BSP_LCD_Init>
	  BSP_LCD_LayerRgb565Init( LTDC_ACTIVE_LAYER, LCD_FRAME_BUFFER);
 8000af0:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8000af4:	2001      	movs	r0, #1
 8000af6:	f002 fbbb 	bl	8003270 <BSP_LCD_LayerRgb565Init>
	  BSP_LCD_SelectLayer(LTDC_ACTIVE_LAYER);
 8000afa:	2001      	movs	r0, #1
 8000afc:	f002 fc18 	bl	8003330 <BSP_LCD_SelectLayer>
	  BSP_LCD_DisplayOn();
 8000b00:	f002 fe4e 	bl	80037a0 <BSP_LCD_DisplayOn>
}
 8000b04:	bf00      	nop
 8000b06:	bd80      	pop	{r7, pc}

08000b08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b0c:	f003 fa16 	bl	8003f3c <HAL_Init>

  /* USER CODE BEGIN Init */
  init_lcd_display();
 8000b10:	f7ff ffea 	bl	8000ae8 <init_lcd_display>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b14:	f000 f836 	bl	8000b84 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000b18:	f000 f8a6 	bl	8000c68 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b1c:	f000 ff7c 	bl	8001a18 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b20:	f000 ff0c 	bl	800193c <MX_DMA_Init>
  MX_ADC3_Init();
 8000b24:	f000 f8d2 	bl	8000ccc <MX_ADC3_Init>
  MX_CRC_Init();
 8000b28:	f000 f930 	bl	8000d8c <MX_CRC_Init>
  MX_DCMI_Init();
 8000b2c:	f000 f950 	bl	8000dd0 <MX_DCMI_Init>
  MX_DMA2D_Init();
 8000b30:	f000 f982 	bl	8000e38 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000b34:	f000 ff20 	bl	8001978 <MX_FMC_Init>
  MX_I2C3_Init();
 8000b38:	f000 f9b0 	bl	8000e9c <MX_I2C3_Init>
  MX_LTDC_Init();
 8000b3c:	f000 f9ee 	bl	8000f1c <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8000b40:	f000 fa6e 	bl	8001020 <MX_QUADSPI_Init>
  MX_RTC_Init();
 8000b44:	f000 fa98 	bl	8001078 <MX_RTC_Init>
  MX_SAI2_Init();
 8000b48:	f000 fb3c 	bl	80011c4 <MX_SAI2_Init>
  MX_SPDIFRX_Init();
 8000b4c:	f000 fbe2 	bl	8001314 <MX_SPDIFRX_Init>
  MX_TIM1_Init();
 8000b50:	f000 fc10 	bl	8001374 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000b54:	f000 fc62 	bl	800141c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000b58:	f000 fcae 	bl	80014b8 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000b5c:	f000 fd24 	bl	80015a8 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000b60:	f000 fdd0 	bl	8001704 <MX_TIM8_Init>
  MX_TIM12_Init();
 8000b64:	f000 fe22 	bl	80017ac <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8000b68:	f000 fe66 	bl	8001838 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000b6c:	f000 fe94 	bl	8001898 <MX_USART6_UART_Init>
  MX_USB_OTG_FS_HCD_Init();
 8000b70:	f000 fec2 	bl	80018f8 <MX_USB_OTG_FS_HCD_Init>

  MX_TIM7_Init();
 8000b74:	f000 fd90 	bl	8001698 <MX_TIM7_Init>
  //MX_SDMMC1_SD_Init();
  /* USER CODE BEGIN 2 */

  initiate_runtime();
 8000b78:	f7ff ffa8 	bl	8000acc <initiate_runtime>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  mcCore_SM();
 8000b7c:	f00a ff8e 	bl	800ba9c <mcCore_SM>
 8000b80:	e7fc      	b.n	8000b7c <main+0x74>
	...

08000b84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b094      	sub	sp, #80	; 0x50
 8000b88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b8a:	f107 0320 	add.w	r3, r7, #32
 8000b8e:	2230      	movs	r2, #48	; 0x30
 8000b90:	2100      	movs	r1, #0
 8000b92:	4618      	mov	r0, r3
 8000b94:	f00e fbb6 	bl	800f304 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b98:	f107 030c 	add.w	r3, r7, #12
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]
 8000ba6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000ba8:	f006 f8b2 	bl	8006d10 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bac:	4b2c      	ldr	r3, [pc, #176]	; (8000c60 <SystemClock_Config+0xdc>)
 8000bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb0:	4a2b      	ldr	r2, [pc, #172]	; (8000c60 <SystemClock_Config+0xdc>)
 8000bb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb6:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb8:	4b29      	ldr	r3, [pc, #164]	; (8000c60 <SystemClock_Config+0xdc>)
 8000bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bc0:	60bb      	str	r3, [r7, #8]
 8000bc2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bc4:	4b27      	ldr	r3, [pc, #156]	; (8000c64 <SystemClock_Config+0xe0>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a26      	ldr	r2, [pc, #152]	; (8000c64 <SystemClock_Config+0xe0>)
 8000bca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000bce:	6013      	str	r3, [r2, #0]
 8000bd0:	4b24      	ldr	r3, [pc, #144]	; (8000c64 <SystemClock_Config+0xe0>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bd8:	607b      	str	r3, [r7, #4]
 8000bda:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000bdc:	2309      	movs	r3, #9
 8000bde:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000be0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000be4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000be6:	2301      	movs	r3, #1
 8000be8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bea:	2302      	movs	r3, #2
 8000bec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000bf4:	2319      	movs	r3, #25
 8000bf6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000bf8:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000bfc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000c02:	2309      	movs	r3, #9
 8000c04:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c06:	f107 0320 	add.w	r3, r7, #32
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f006 f9a2 	bl	8006f54 <HAL_RCC_OscConfig>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000c16:	f001 f96b 	bl	8001ef0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000c1a:	f006 f889 	bl	8006d30 <HAL_PWREx_EnableOverDrive>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000c24:	f001 f964 	bl	8001ef0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c28:	230f      	movs	r3, #15
 8000c2a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c30:	2300      	movs	r3, #0
 8000c32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c34:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c38:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c3e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000c40:	f107 030c 	add.w	r3, r7, #12
 8000c44:	2106      	movs	r1, #6
 8000c46:	4618      	mov	r0, r3
 8000c48:	f006 fc28 	bl	800749c <HAL_RCC_ClockConfig>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000c52:	f001 f94d 	bl	8001ef0 <Error_Handler>
  }
}
 8000c56:	bf00      	nop
 8000c58:	3750      	adds	r7, #80	; 0x50
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40023800 	.word	0x40023800
 8000c64:	40007000 	.word	0x40007000

08000c68 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b0a2      	sub	sp, #136	; 0x88
 8000c6c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c6e:	1d3b      	adds	r3, r7, #4
 8000c70:	2284      	movs	r2, #132	; 0x84
 8000c72:	2100      	movs	r1, #0
 8000c74:	4618      	mov	r0, r3
 8000c76:	f00e fb45 	bl	800f304 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI2
 8000c7a:	4b13      	ldr	r3, [pc, #76]	; (8000cc8 <PeriphCommonClock_Config+0x60>)
 8000c7c:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000c7e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000c82:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8000c84:	2305      	movs	r3, #5
 8000c86:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8000c8c:	2303      	movs	r3, #3
 8000c8e:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000c90:	2301      	movs	r3, #1
 8000c92:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000c94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c98:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8000c9e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000ca2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cac:	1d3b      	adds	r3, r7, #4
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f006 fdfc 	bl	80078ac <HAL_RCCEx_PeriphCLKConfig>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000cba:	f001 f919 	bl	8001ef0 <Error_Handler>
  }
}
 8000cbe:	bf00      	nop
 8000cc0:	3788      	adds	r7, #136	; 0x88
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	00b00008 	.word	0x00b00008

08000ccc <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cd2:	463b      	mov	r3, r7
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
 8000cdc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000cde:	4b28      	ldr	r3, [pc, #160]	; (8000d80 <MX_ADC3_Init+0xb4>)
 8000ce0:	4a28      	ldr	r2, [pc, #160]	; (8000d84 <MX_ADC3_Init+0xb8>)
 8000ce2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ce4:	4b26      	ldr	r3, [pc, #152]	; (8000d80 <MX_ADC3_Init+0xb4>)
 8000ce6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000cea:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000cec:	4b24      	ldr	r3, [pc, #144]	; (8000d80 <MX_ADC3_Init+0xb4>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000cf2:	4b23      	ldr	r3, [pc, #140]	; (8000d80 <MX_ADC3_Init+0xb4>)
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000cf8:	4b21      	ldr	r3, [pc, #132]	; (8000d80 <MX_ADC3_Init+0xb4>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000cfe:	4b20      	ldr	r3, [pc, #128]	; (8000d80 <MX_ADC3_Init+0xb4>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d06:	4b1e      	ldr	r3, [pc, #120]	; (8000d80 <MX_ADC3_Init+0xb4>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d0c:	4b1c      	ldr	r3, [pc, #112]	; (8000d80 <MX_ADC3_Init+0xb4>)
 8000d0e:	4a1e      	ldr	r2, [pc, #120]	; (8000d88 <MX_ADC3_Init+0xbc>)
 8000d10:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d12:	4b1b      	ldr	r3, [pc, #108]	; (8000d80 <MX_ADC3_Init+0xb4>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 2;
 8000d18:	4b19      	ldr	r3, [pc, #100]	; (8000d80 <MX_ADC3_Init+0xb4>)
 8000d1a:	2202      	movs	r2, #2
 8000d1c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8000d1e:	4b18      	ldr	r3, [pc, #96]	; (8000d80 <MX_ADC3_Init+0xb4>)
 8000d20:	2201      	movs	r2, #1
 8000d22:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d26:	4b16      	ldr	r3, [pc, #88]	; (8000d80 <MX_ADC3_Init+0xb4>)
 8000d28:	2201      	movs	r2, #1
 8000d2a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000d2c:	4814      	ldr	r0, [pc, #80]	; (8000d80 <MX_ADC3_Init+0xb4>)
 8000d2e:	f003 f957 	bl	8003fe0 <HAL_ADC_Init>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000d38:	f001 f8da 	bl	8001ef0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d40:	2301      	movs	r3, #1
 8000d42:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000d44:	2301      	movs	r3, #1
 8000d46:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000d48:	463b      	mov	r3, r7
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	480c      	ldr	r0, [pc, #48]	; (8000d80 <MX_ADC3_Init+0xb4>)
 8000d4e:	f003 fbe5 	bl	800451c <HAL_ADC_ConfigChannel>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000d58:	f001 f8ca 	bl	8001ef0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000d5c:	2308      	movs	r3, #8
 8000d5e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000d60:	2302      	movs	r3, #2
 8000d62:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000d64:	463b      	mov	r3, r7
 8000d66:	4619      	mov	r1, r3
 8000d68:	4805      	ldr	r0, [pc, #20]	; (8000d80 <MX_ADC3_Init+0xb4>)
 8000d6a:	f003 fbd7 	bl	800451c <HAL_ADC_ConfigChannel>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_ADC3_Init+0xac>
  {
    Error_Handler();
 8000d74:	f001 f8bc 	bl	8001ef0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000d78:	bf00      	nop
 8000d7a:	3710      	adds	r7, #16
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	200023c8 	.word	0x200023c8
 8000d84:	40012200 	.word	0x40012200
 8000d88:	0f000001 	.word	0x0f000001

08000d8c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000d90:	4b0d      	ldr	r3, [pc, #52]	; (8000dc8 <MX_CRC_Init+0x3c>)
 8000d92:	4a0e      	ldr	r2, [pc, #56]	; (8000dcc <MX_CRC_Init+0x40>)
 8000d94:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000d96:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <MX_CRC_Init+0x3c>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000d9c:	4b0a      	ldr	r3, [pc, #40]	; (8000dc8 <MX_CRC_Init+0x3c>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000da2:	4b09      	ldr	r3, [pc, #36]	; (8000dc8 <MX_CRC_Init+0x3c>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000da8:	4b07      	ldr	r3, [pc, #28]	; (8000dc8 <MX_CRC_Init+0x3c>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000dae:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <MX_CRC_Init+0x3c>)
 8000db0:	2201      	movs	r2, #1
 8000db2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000db4:	4804      	ldr	r0, [pc, #16]	; (8000dc8 <MX_CRC_Init+0x3c>)
 8000db6:	f003 ff63 	bl	8004c80 <HAL_CRC_Init>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000dc0:	f001 f896 	bl	8001ef0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000dc4:	bf00      	nop
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	20002180 	.word	0x20002180
 8000dcc:	40023000 	.word	0x40023000

08000dd0 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000dd4:	4b16      	ldr	r3, [pc, #88]	; (8000e30 <MX_DCMI_Init+0x60>)
 8000dd6:	4a17      	ldr	r2, [pc, #92]	; (8000e34 <MX_DCMI_Init+0x64>)
 8000dd8:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000dda:	4b15      	ldr	r3, [pc, #84]	; (8000e30 <MX_DCMI_Init+0x60>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8000de0:	4b13      	ldr	r3, [pc, #76]	; (8000e30 <MX_DCMI_Init+0x60>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8000de6:	4b12      	ldr	r3, [pc, #72]	; (8000e30 <MX_DCMI_Init+0x60>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000dec:	4b10      	ldr	r3, [pc, #64]	; (8000e30 <MX_DCMI_Init+0x60>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000df2:	4b0f      	ldr	r3, [pc, #60]	; (8000e30 <MX_DCMI_Init+0x60>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000df8:	4b0d      	ldr	r3, [pc, #52]	; (8000e30 <MX_DCMI_Init+0x60>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000dfe:	4b0c      	ldr	r3, [pc, #48]	; (8000e30 <MX_DCMI_Init+0x60>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000e04:	4b0a      	ldr	r3, [pc, #40]	; (8000e30 <MX_DCMI_Init+0x60>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000e0a:	4b09      	ldr	r3, [pc, #36]	; (8000e30 <MX_DCMI_Init+0x60>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000e10:	4b07      	ldr	r3, [pc, #28]	; (8000e30 <MX_DCMI_Init+0x60>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000e16:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <MX_DCMI_Init+0x60>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000e1c:	4804      	ldr	r0, [pc, #16]	; (8000e30 <MX_DCMI_Init+0x60>)
 8000e1e:	f004 f819 	bl	8004e54 <HAL_DCMI_Init>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000e28:	f001 f862 	bl	8001ef0 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000e2c:	bf00      	nop
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	20002410 	.word	0x20002410
 8000e34:	50050000 	.word	0x50050000

08000e38 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000e3c:	4b15      	ldr	r3, [pc, #84]	; (8000e94 <MX_DMA2D_Init+0x5c>)
 8000e3e:	4a16      	ldr	r2, [pc, #88]	; (8000e98 <MX_DMA2D_Init+0x60>)
 8000e40:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000e42:	4b14      	ldr	r3, [pc, #80]	; (8000e94 <MX_DMA2D_Init+0x5c>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8000e48:	4b12      	ldr	r3, [pc, #72]	; (8000e94 <MX_DMA2D_Init+0x5c>)
 8000e4a:	2202      	movs	r2, #2
 8000e4c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000e4e:	4b11      	ldr	r3, [pc, #68]	; (8000e94 <MX_DMA2D_Init+0x5c>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000e54:	4b0f      	ldr	r3, [pc, #60]	; (8000e94 <MX_DMA2D_Init+0x5c>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8000e5a:	4b0e      	ldr	r3, [pc, #56]	; (8000e94 <MX_DMA2D_Init+0x5c>)
 8000e5c:	2202      	movs	r2, #2
 8000e5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000e60:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <MX_DMA2D_Init+0x5c>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000e66:	4b0b      	ldr	r3, [pc, #44]	; (8000e94 <MX_DMA2D_Init+0x5c>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000e6c:	4809      	ldr	r0, [pc, #36]	; (8000e94 <MX_DMA2D_Init+0x5c>)
 8000e6e:	f004 fcd3 	bl	8005818 <HAL_DMA2D_Init>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000e78:	f001 f83a 	bl	8001ef0 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000e7c:	2101      	movs	r1, #1
 8000e7e:	4805      	ldr	r0, [pc, #20]	; (8000e94 <MX_DMA2D_Init+0x5c>)
 8000e80:	f004 ff38 	bl	8005cf4 <HAL_DMA2D_ConfigLayer>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000e8a:	f001 f831 	bl	8001ef0 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	200025d4 	.word	0x200025d4
 8000e98:	4002b000 	.word	0x4002b000

08000e9c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000ea0:	4b1b      	ldr	r3, [pc, #108]	; (8000f10 <MX_I2C3_Init+0x74>)
 8000ea2:	4a1c      	ldr	r2, [pc, #112]	; (8000f14 <MX_I2C3_Init+0x78>)
 8000ea4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8000ea6:	4b1a      	ldr	r3, [pc, #104]	; (8000f10 <MX_I2C3_Init+0x74>)
 8000ea8:	4a1b      	ldr	r2, [pc, #108]	; (8000f18 <MX_I2C3_Init+0x7c>)
 8000eaa:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000eac:	4b18      	ldr	r3, [pc, #96]	; (8000f10 <MX_I2C3_Init+0x74>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000eb2:	4b17      	ldr	r3, [pc, #92]	; (8000f10 <MX_I2C3_Init+0x74>)
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000eb8:	4b15      	ldr	r3, [pc, #84]	; (8000f10 <MX_I2C3_Init+0x74>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000ebe:	4b14      	ldr	r3, [pc, #80]	; (8000f10 <MX_I2C3_Init+0x74>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ec4:	4b12      	ldr	r3, [pc, #72]	; (8000f10 <MX_I2C3_Init+0x74>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000eca:	4b11      	ldr	r3, [pc, #68]	; (8000f10 <MX_I2C3_Init+0x74>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ed0:	4b0f      	ldr	r3, [pc, #60]	; (8000f10 <MX_I2C3_Init+0x74>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000ed6:	480e      	ldr	r0, [pc, #56]	; (8000f10 <MX_I2C3_Init+0x74>)
 8000ed8:	f005 fa7a 	bl	80063d0 <HAL_I2C_Init>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000ee2:	f001 f805 	bl	8001ef0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	4809      	ldr	r0, [pc, #36]	; (8000f10 <MX_I2C3_Init+0x74>)
 8000eea:	f005 fb01 	bl	80064f0 <HAL_I2CEx_ConfigAnalogFilter>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000ef4:	f000 fffc 	bl	8001ef0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000ef8:	2100      	movs	r1, #0
 8000efa:	4805      	ldr	r0, [pc, #20]	; (8000f10 <MX_I2C3_Init+0x74>)
 8000efc:	f005 fb43 	bl	8006586 <HAL_I2CEx_ConfigDigitalFilter>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000f06:	f000 fff3 	bl	8001ef0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	20002018 	.word	0x20002018
 8000f14:	40005c00 	.word	0x40005c00
 8000f18:	00c0eaff 	.word	0x00c0eaff

08000f1c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b08e      	sub	sp, #56	; 0x38
 8000f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000f22:	1d3b      	adds	r3, r7, #4
 8000f24:	2234      	movs	r2, #52	; 0x34
 8000f26:	2100      	movs	r1, #0
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f00e f9eb 	bl	800f304 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000f2e:	4b3a      	ldr	r3, [pc, #232]	; (8001018 <MX_LTDC_Init+0xfc>)
 8000f30:	4a3a      	ldr	r2, [pc, #232]	; (800101c <MX_LTDC_Init+0x100>)
 8000f32:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000f34:	4b38      	ldr	r3, [pc, #224]	; (8001018 <MX_LTDC_Init+0xfc>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000f3a:	4b37      	ldr	r3, [pc, #220]	; (8001018 <MX_LTDC_Init+0xfc>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000f40:	4b35      	ldr	r3, [pc, #212]	; (8001018 <MX_LTDC_Init+0xfc>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000f46:	4b34      	ldr	r3, [pc, #208]	; (8001018 <MX_LTDC_Init+0xfc>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000f4c:	4b32      	ldr	r3, [pc, #200]	; (8001018 <MX_LTDC_Init+0xfc>)
 8000f4e:	2228      	movs	r2, #40	; 0x28
 8000f50:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000f52:	4b31      	ldr	r3, [pc, #196]	; (8001018 <MX_LTDC_Init+0xfc>)
 8000f54:	2209      	movs	r2, #9
 8000f56:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8000f58:	4b2f      	ldr	r3, [pc, #188]	; (8001018 <MX_LTDC_Init+0xfc>)
 8000f5a:	2235      	movs	r2, #53	; 0x35
 8000f5c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000f5e:	4b2e      	ldr	r3, [pc, #184]	; (8001018 <MX_LTDC_Init+0xfc>)
 8000f60:	220b      	movs	r2, #11
 8000f62:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8000f64:	4b2c      	ldr	r3, [pc, #176]	; (8001018 <MX_LTDC_Init+0xfc>)
 8000f66:	f240 2215 	movw	r2, #533	; 0x215
 8000f6a:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000f6c:	4b2a      	ldr	r3, [pc, #168]	; (8001018 <MX_LTDC_Init+0xfc>)
 8000f6e:	f240 121b 	movw	r2, #283	; 0x11b
 8000f72:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8000f74:	4b28      	ldr	r3, [pc, #160]	; (8001018 <MX_LTDC_Init+0xfc>)
 8000f76:	f240 2235 	movw	r2, #565	; 0x235
 8000f7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000f7c:	4b26      	ldr	r3, [pc, #152]	; (8001018 <MX_LTDC_Init+0xfc>)
 8000f7e:	f240 121d 	movw	r2, #285	; 0x11d
 8000f82:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000f84:	4b24      	ldr	r3, [pc, #144]	; (8001018 <MX_LTDC_Init+0xfc>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000f8c:	4b22      	ldr	r3, [pc, #136]	; (8001018 <MX_LTDC_Init+0xfc>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000f94:	4b20      	ldr	r3, [pc, #128]	; (8001018 <MX_LTDC_Init+0xfc>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000f9c:	481e      	ldr	r0, [pc, #120]	; (8001018 <MX_LTDC_Init+0xfc>)
 8000f9e:	f005 fb3f 	bl	8006620 <HAL_LTDC_Init>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000fa8:	f000 ffa2 	bl	8001ef0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000fac:	2300      	movs	r3, #0
 8000fae:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8000fb0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000fb4:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8000fba:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000fbe:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000fc4:	23ff      	movs	r3, #255	; 0xff
 8000fc6:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000fcc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000fd0:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000fd2:	2307      	movs	r3, #7
 8000fd4:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000fd6:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000fda:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8000fdc:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8000fe2:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000fe6:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000ffa:	1d3b      	adds	r3, r7, #4
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	4619      	mov	r1, r3
 8001000:	4805      	ldr	r0, [pc, #20]	; (8001018 <MX_LTDC_Init+0xfc>)
 8001002:	f005 fc9f 	bl	8006944 <HAL_LTDC_ConfigLayer>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 800100c:	f000 ff70 	bl	8001ef0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001010:	bf00      	nop
 8001012:	3738      	adds	r7, #56	; 0x38
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	20002320 	.word	0x20002320
 800101c:	40016800 	.word	0x40016800

08001020 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001024:	4b12      	ldr	r3, [pc, #72]	; (8001070 <MX_QUADSPI_Init+0x50>)
 8001026:	4a13      	ldr	r2, [pc, #76]	; (8001074 <MX_QUADSPI_Init+0x54>)
 8001028:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 800102a:	4b11      	ldr	r3, [pc, #68]	; (8001070 <MX_QUADSPI_Init+0x50>)
 800102c:	2201      	movs	r2, #1
 800102e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8001030:	4b0f      	ldr	r3, [pc, #60]	; (8001070 <MX_QUADSPI_Init+0x50>)
 8001032:	2204      	movs	r2, #4
 8001034:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001036:	4b0e      	ldr	r3, [pc, #56]	; (8001070 <MX_QUADSPI_Init+0x50>)
 8001038:	2210      	movs	r2, #16
 800103a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 800103c:	4b0c      	ldr	r3, [pc, #48]	; (8001070 <MX_QUADSPI_Init+0x50>)
 800103e:	2218      	movs	r2, #24
 8001040:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8001042:	4b0b      	ldr	r3, [pc, #44]	; (8001070 <MX_QUADSPI_Init+0x50>)
 8001044:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8001048:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800104a:	4b09      	ldr	r3, [pc, #36]	; (8001070 <MX_QUADSPI_Init+0x50>)
 800104c:	2200      	movs	r2, #0
 800104e:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001050:	4b07      	ldr	r3, [pc, #28]	; (8001070 <MX_QUADSPI_Init+0x50>)
 8001052:	2200      	movs	r2, #0
 8001054:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001056:	4b06      	ldr	r3, [pc, #24]	; (8001070 <MX_QUADSPI_Init+0x50>)
 8001058:	2200      	movs	r2, #0
 800105a:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800105c:	4804      	ldr	r0, [pc, #16]	; (8001070 <MX_QUADSPI_Init+0x50>)
 800105e:	f005 feb7 	bl	8006dd0 <HAL_QSPI_Init>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8001068:	f000 ff42 	bl	8001ef0 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800106c:	bf00      	nop
 800106e:	bd80      	pop	{r7, pc}
 8001070:	20002a30 	.word	0x20002a30
 8001074:	a0001000 	.word	0xa0001000

08001078 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b092      	sub	sp, #72	; 0x48
 800107c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800107e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	605a      	str	r2, [r3, #4]
 8001088:	609a      	str	r2, [r3, #8]
 800108a:	60da      	str	r2, [r3, #12]
 800108c:	611a      	str	r2, [r3, #16]
 800108e:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8001090:	2300      	movs	r3, #0
 8001092:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8001094:	463b      	mov	r3, r7
 8001096:	222c      	movs	r2, #44	; 0x2c
 8001098:	2100      	movs	r1, #0
 800109a:	4618      	mov	r0, r3
 800109c:	f00e f932 	bl	800f304 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80010a0:	4b46      	ldr	r3, [pc, #280]	; (80011bc <MX_RTC_Init+0x144>)
 80010a2:	4a47      	ldr	r2, [pc, #284]	; (80011c0 <MX_RTC_Init+0x148>)
 80010a4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80010a6:	4b45      	ldr	r3, [pc, #276]	; (80011bc <MX_RTC_Init+0x144>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80010ac:	4b43      	ldr	r3, [pc, #268]	; (80011bc <MX_RTC_Init+0x144>)
 80010ae:	227f      	movs	r2, #127	; 0x7f
 80010b0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80010b2:	4b42      	ldr	r3, [pc, #264]	; (80011bc <MX_RTC_Init+0x144>)
 80010b4:	22ff      	movs	r2, #255	; 0xff
 80010b6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80010b8:	4b40      	ldr	r3, [pc, #256]	; (80011bc <MX_RTC_Init+0x144>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80010be:	4b3f      	ldr	r3, [pc, #252]	; (80011bc <MX_RTC_Init+0x144>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80010c4:	4b3d      	ldr	r3, [pc, #244]	; (80011bc <MX_RTC_Init+0x144>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80010ca:	483c      	ldr	r0, [pc, #240]	; (80011bc <MX_RTC_Init+0x144>)
 80010cc:	f007 f922 	bl	8008314 <HAL_RTC_Init>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_RTC_Init+0x62>
  {
    Error_Handler();
 80010d6:	f000 ff0b 	bl	8001ef0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80010da:	2300      	movs	r3, #0
 80010dc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 80010e0:	2300      	movs	r3, #0
 80010e2:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80010ec:	2300      	movs	r3, #0
 80010ee:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80010f0:	2300      	movs	r3, #0
 80010f2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80010f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010f8:	2201      	movs	r2, #1
 80010fa:	4619      	mov	r1, r3
 80010fc:	482f      	ldr	r0, [pc, #188]	; (80011bc <MX_RTC_Init+0x144>)
 80010fe:	f007 f99b 	bl	8008438 <HAL_RTC_SetTime>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001108:	f000 fef2 	bl	8001ef0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800110c:	2301      	movs	r3, #1
 800110e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8001112:	2301      	movs	r3, #1
 8001114:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8001118:	2301      	movs	r3, #1
 800111a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 800111e:	2300      	movs	r3, #0
 8001120:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001124:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001128:	2201      	movs	r2, #1
 800112a:	4619      	mov	r1, r3
 800112c:	4823      	ldr	r0, [pc, #140]	; (80011bc <MX_RTC_Init+0x144>)
 800112e:	f007 fa41 	bl	80085b4 <HAL_RTC_SetDate>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8001138:	f000 feda 	bl	8001ef0 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 800113c:	2300      	movs	r3, #0
 800113e:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001140:	2300      	movs	r3, #0
 8001142:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001144:	2300      	movs	r3, #0
 8001146:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001148:	2300      	movs	r3, #0
 800114a:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800114c:	2300      	movs	r3, #0
 800114e:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001150:	2300      	movs	r3, #0
 8001152:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001154:	2300      	movs	r3, #0
 8001156:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001158:	2300      	movs	r3, #0
 800115a:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800115c:	2300      	movs	r3, #0
 800115e:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001160:	2301      	movs	r3, #1
 8001162:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8001166:	f44f 7380 	mov.w	r3, #256	; 0x100
 800116a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800116c:	463b      	mov	r3, r7
 800116e:	2201      	movs	r2, #1
 8001170:	4619      	mov	r1, r3
 8001172:	4812      	ldr	r0, [pc, #72]	; (80011bc <MX_RTC_Init+0x144>)
 8001174:	f007 fac6 	bl	8008704 <HAL_RTC_SetAlarm>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 800117e:	f000 feb7 	bl	8001ef0 <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8001182:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001186:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001188:	463b      	mov	r3, r7
 800118a:	2201      	movs	r2, #1
 800118c:	4619      	mov	r1, r3
 800118e:	480b      	ldr	r0, [pc, #44]	; (80011bc <MX_RTC_Init+0x144>)
 8001190:	f007 fab8 	bl	8008704 <HAL_RTC_SetAlarm>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_RTC_Init+0x126>
  {
    Error_Handler();
 800119a:	f000 fea9 	bl	8001ef0 <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 800119e:	2202      	movs	r2, #2
 80011a0:	2100      	movs	r1, #0
 80011a2:	4806      	ldr	r0, [pc, #24]	; (80011bc <MX_RTC_Init+0x144>)
 80011a4:	f007 fc38 	bl	8008a18 <HAL_RTCEx_SetTimeStamp>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 80011ae:	f000 fe9f 	bl	8001ef0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80011b2:	bf00      	nop
 80011b4:	3748      	adds	r7, #72	; 0x48
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	200024e4 	.word	0x200024e4
 80011c0:	40002800 	.word	0x40002800

080011c4 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 80011c8:	4b4d      	ldr	r3, [pc, #308]	; (8001300 <MX_SAI2_Init+0x13c>)
 80011ca:	4a4e      	ldr	r2, [pc, #312]	; (8001304 <MX_SAI2_Init+0x140>)
 80011cc:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 80011ce:	4b4c      	ldr	r3, [pc, #304]	; (8001300 <MX_SAI2_Init+0x13c>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 80011d4:	4b4a      	ldr	r3, [pc, #296]	; (8001300 <MX_SAI2_Init+0x13c>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 80011da:	4b49      	ldr	r3, [pc, #292]	; (8001300 <MX_SAI2_Init+0x13c>)
 80011dc:	2240      	movs	r2, #64	; 0x40
 80011de:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80011e0:	4b47      	ldr	r3, [pc, #284]	; (8001300 <MX_SAI2_Init+0x13c>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80011e6:	4b46      	ldr	r3, [pc, #280]	; (8001300 <MX_SAI2_Init+0x13c>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 80011ec:	4b44      	ldr	r3, [pc, #272]	; (8001300 <MX_SAI2_Init+0x13c>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80011f2:	4b43      	ldr	r3, [pc, #268]	; (8001300 <MX_SAI2_Init+0x13c>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80011f8:	4b41      	ldr	r3, [pc, #260]	; (8001300 <MX_SAI2_Init+0x13c>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80011fe:	4b40      	ldr	r3, [pc, #256]	; (8001300 <MX_SAI2_Init+0x13c>)
 8001200:	2200      	movs	r2, #0
 8001202:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001204:	4b3e      	ldr	r3, [pc, #248]	; (8001300 <MX_SAI2_Init+0x13c>)
 8001206:	4a40      	ldr	r2, [pc, #256]	; (8001308 <MX_SAI2_Init+0x144>)
 8001208:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800120a:	4b3d      	ldr	r3, [pc, #244]	; (8001300 <MX_SAI2_Init+0x13c>)
 800120c:	2200      	movs	r2, #0
 800120e:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001210:	4b3b      	ldr	r3, [pc, #236]	; (8001300 <MX_SAI2_Init+0x13c>)
 8001212:	2200      	movs	r2, #0
 8001214:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001216:	4b3a      	ldr	r3, [pc, #232]	; (8001300 <MX_SAI2_Init+0x13c>)
 8001218:	2200      	movs	r2, #0
 800121a:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800121c:	4b38      	ldr	r3, [pc, #224]	; (8001300 <MX_SAI2_Init+0x13c>)
 800121e:	2200      	movs	r2, #0
 8001220:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8001222:	4b37      	ldr	r3, [pc, #220]	; (8001300 <MX_SAI2_Init+0x13c>)
 8001224:	2208      	movs	r2, #8
 8001226:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8001228:	4b35      	ldr	r3, [pc, #212]	; (8001300 <MX_SAI2_Init+0x13c>)
 800122a:	2201      	movs	r2, #1
 800122c:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800122e:	4b34      	ldr	r3, [pc, #208]	; (8001300 <MX_SAI2_Init+0x13c>)
 8001230:	2200      	movs	r2, #0
 8001232:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001234:	4b32      	ldr	r3, [pc, #200]	; (8001300 <MX_SAI2_Init+0x13c>)
 8001236:	2200      	movs	r2, #0
 8001238:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800123a:	4b31      	ldr	r3, [pc, #196]	; (8001300 <MX_SAI2_Init+0x13c>)
 800123c:	2200      	movs	r2, #0
 800123e:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001240:	4b2f      	ldr	r3, [pc, #188]	; (8001300 <MX_SAI2_Init+0x13c>)
 8001242:	2200      	movs	r2, #0
 8001244:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001246:	4b2e      	ldr	r3, [pc, #184]	; (8001300 <MX_SAI2_Init+0x13c>)
 8001248:	2200      	movs	r2, #0
 800124a:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 800124c:	4b2c      	ldr	r3, [pc, #176]	; (8001300 <MX_SAI2_Init+0x13c>)
 800124e:	2201      	movs	r2, #1
 8001250:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8001252:	4b2b      	ldr	r3, [pc, #172]	; (8001300 <MX_SAI2_Init+0x13c>)
 8001254:	2200      	movs	r2, #0
 8001256:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001258:	4829      	ldr	r0, [pc, #164]	; (8001300 <MX_SAI2_Init+0x13c>)
 800125a:	f007 fc33 	bl	8008ac4 <HAL_SAI_Init>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8001264:	f000 fe44 	bl	8001ef0 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001268:	4b28      	ldr	r3, [pc, #160]	; (800130c <MX_SAI2_Init+0x148>)
 800126a:	4a29      	ldr	r2, [pc, #164]	; (8001310 <MX_SAI2_Init+0x14c>)
 800126c:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 800126e:	4b27      	ldr	r3, [pc, #156]	; (800130c <MX_SAI2_Init+0x148>)
 8001270:	2200      	movs	r2, #0
 8001272:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001274:	4b25      	ldr	r3, [pc, #148]	; (800130c <MX_SAI2_Init+0x148>)
 8001276:	2203      	movs	r2, #3
 8001278:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 800127a:	4b24      	ldr	r3, [pc, #144]	; (800130c <MX_SAI2_Init+0x148>)
 800127c:	2240      	movs	r2, #64	; 0x40
 800127e:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001280:	4b22      	ldr	r3, [pc, #136]	; (800130c <MX_SAI2_Init+0x148>)
 8001282:	2200      	movs	r2, #0
 8001284:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001286:	4b21      	ldr	r3, [pc, #132]	; (800130c <MX_SAI2_Init+0x148>)
 8001288:	2200      	movs	r2, #0
 800128a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 800128c:	4b1f      	ldr	r3, [pc, #124]	; (800130c <MX_SAI2_Init+0x148>)
 800128e:	2201      	movs	r2, #1
 8001290:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001292:	4b1e      	ldr	r3, [pc, #120]	; (800130c <MX_SAI2_Init+0x148>)
 8001294:	2200      	movs	r2, #0
 8001296:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001298:	4b1c      	ldr	r3, [pc, #112]	; (800130c <MX_SAI2_Init+0x148>)
 800129a:	2200      	movs	r2, #0
 800129c:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800129e:	4b1b      	ldr	r3, [pc, #108]	; (800130c <MX_SAI2_Init+0x148>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 80012a4:	4b19      	ldr	r3, [pc, #100]	; (800130c <MX_SAI2_Init+0x148>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 80012aa:	4b18      	ldr	r3, [pc, #96]	; (800130c <MX_SAI2_Init+0x148>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80012b0:	4b16      	ldr	r3, [pc, #88]	; (800130c <MX_SAI2_Init+0x148>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 80012b6:	4b15      	ldr	r3, [pc, #84]	; (800130c <MX_SAI2_Init+0x148>)
 80012b8:	2208      	movs	r2, #8
 80012ba:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 80012bc:	4b13      	ldr	r3, [pc, #76]	; (800130c <MX_SAI2_Init+0x148>)
 80012be:	2201      	movs	r2, #1
 80012c0:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80012c2:	4b12      	ldr	r3, [pc, #72]	; (800130c <MX_SAI2_Init+0x148>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80012c8:	4b10      	ldr	r3, [pc, #64]	; (800130c <MX_SAI2_Init+0x148>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80012ce:	4b0f      	ldr	r3, [pc, #60]	; (800130c <MX_SAI2_Init+0x148>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 80012d4:	4b0d      	ldr	r3, [pc, #52]	; (800130c <MX_SAI2_Init+0x148>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80012da:	4b0c      	ldr	r3, [pc, #48]	; (800130c <MX_SAI2_Init+0x148>)
 80012dc:	2200      	movs	r2, #0
 80012de:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 80012e0:	4b0a      	ldr	r3, [pc, #40]	; (800130c <MX_SAI2_Init+0x148>)
 80012e2:	2201      	movs	r2, #1
 80012e4:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 80012e6:	4b09      	ldr	r3, [pc, #36]	; (800130c <MX_SAI2_Init+0x148>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 80012ec:	4807      	ldr	r0, [pc, #28]	; (800130c <MX_SAI2_Init+0x148>)
 80012ee:	f007 fbe9 	bl	8008ac4 <HAL_SAI_Init>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 80012f8:	f000 fdfa 	bl	8001ef0 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 80012fc:	bf00      	nop
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	200020fc 	.word	0x200020fc
 8001304:	40015c04 	.word	0x40015c04
 8001308:	0002ee00 	.word	0x0002ee00
 800130c:	20001f94 	.word	0x20001f94
 8001310:	40015c24 	.word	0x40015c24

08001314 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8001318:	4b15      	ldr	r3, [pc, #84]	; (8001370 <MX_SPDIFRX_Init+0x5c>)
 800131a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800131e:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8001320:	4b13      	ldr	r3, [pc, #76]	; (8001370 <MX_SPDIFRX_Init+0x5c>)
 8001322:	2200      	movs	r2, #0
 8001324:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8001326:	4b12      	ldr	r3, [pc, #72]	; (8001370 <MX_SPDIFRX_Init+0x5c>)
 8001328:	2200      	movs	r2, #0
 800132a:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 800132c:	4b10      	ldr	r3, [pc, #64]	; (8001370 <MX_SPDIFRX_Init+0x5c>)
 800132e:	2200      	movs	r2, #0
 8001330:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8001332:	4b0f      	ldr	r3, [pc, #60]	; (8001370 <MX_SPDIFRX_Init+0x5c>)
 8001334:	2200      	movs	r2, #0
 8001336:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8001338:	4b0d      	ldr	r3, [pc, #52]	; (8001370 <MX_SPDIFRX_Init+0x5c>)
 800133a:	2200      	movs	r2, #0
 800133c:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 800133e:	4b0c      	ldr	r3, [pc, #48]	; (8001370 <MX_SPDIFRX_Init+0x5c>)
 8001340:	2200      	movs	r2, #0
 8001342:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8001344:	4b0a      	ldr	r3, [pc, #40]	; (8001370 <MX_SPDIFRX_Init+0x5c>)
 8001346:	2200      	movs	r2, #0
 8001348:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 800134a:	4b09      	ldr	r3, [pc, #36]	; (8001370 <MX_SPDIFRX_Init+0x5c>)
 800134c:	2200      	movs	r2, #0
 800134e:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8001350:	4b07      	ldr	r3, [pc, #28]	; (8001370 <MX_SPDIFRX_Init+0x5c>)
 8001352:	2200      	movs	r2, #0
 8001354:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8001356:	4b06      	ldr	r3, [pc, #24]	; (8001370 <MX_SPDIFRX_Init+0x5c>)
 8001358:	2200      	movs	r2, #0
 800135a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 800135c:	4804      	ldr	r0, [pc, #16]	; (8001370 <MX_SPDIFRX_Init+0x5c>)
 800135e:	f007 fde7 	bl	8008f30 <HAL_SPDIFRX_Init>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8001368:	f000 fdc2 	bl	8001ef0 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 800136c:	bf00      	nop
 800136e:	bd80      	pop	{r7, pc}
 8001370:	200020b0 	.word	0x200020b0

08001374 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b088      	sub	sp, #32
 8001378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800137a:	f107 0310 	add.w	r3, r7, #16
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	605a      	str	r2, [r3, #4]
 8001384:	609a      	str	r2, [r3, #8]
 8001386:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001388:	1d3b      	adds	r3, r7, #4
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	605a      	str	r2, [r3, #4]
 8001390:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001392:	4b20      	ldr	r3, [pc, #128]	; (8001414 <MX_TIM1_Init+0xa0>)
 8001394:	4a20      	ldr	r2, [pc, #128]	; (8001418 <MX_TIM1_Init+0xa4>)
 8001396:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001398:	4b1e      	ldr	r3, [pc, #120]	; (8001414 <MX_TIM1_Init+0xa0>)
 800139a:	2200      	movs	r2, #0
 800139c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800139e:	4b1d      	ldr	r3, [pc, #116]	; (8001414 <MX_TIM1_Init+0xa0>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80013a4:	4b1b      	ldr	r3, [pc, #108]	; (8001414 <MX_TIM1_Init+0xa0>)
 80013a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013aa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ac:	4b19      	ldr	r3, [pc, #100]	; (8001414 <MX_TIM1_Init+0xa0>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013b2:	4b18      	ldr	r3, [pc, #96]	; (8001414 <MX_TIM1_Init+0xa0>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013b8:	4b16      	ldr	r3, [pc, #88]	; (8001414 <MX_TIM1_Init+0xa0>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013be:	4815      	ldr	r0, [pc, #84]	; (8001414 <MX_TIM1_Init+0xa0>)
 80013c0:	f007 fe12 	bl	8008fe8 <HAL_TIM_Base_Init>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80013ca:	f000 fd91 	bl	8001ef0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013d2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013d4:	f107 0310 	add.w	r3, r7, #16
 80013d8:	4619      	mov	r1, r3
 80013da:	480e      	ldr	r0, [pc, #56]	; (8001414 <MX_TIM1_Init+0xa0>)
 80013dc:	f008 f95a 	bl	8009694 <HAL_TIM_ConfigClockSource>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80013e6:	f000 fd83 	bl	8001ef0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013ea:	2300      	movs	r3, #0
 80013ec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80013ee:	2300      	movs	r3, #0
 80013f0:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013f2:	2300      	movs	r3, #0
 80013f4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013f6:	1d3b      	adds	r3, r7, #4
 80013f8:	4619      	mov	r1, r3
 80013fa:	4806      	ldr	r0, [pc, #24]	; (8001414 <MX_TIM1_Init+0xa0>)
 80013fc:	f008 fdd0 	bl	8009fa0 <HAL_TIMEx_MasterConfigSynchronization>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001406:	f000 fd73 	bl	8001ef0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800140a:	bf00      	nop
 800140c:	3720      	adds	r7, #32
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	20002504 	.word	0x20002504
 8001418:	40010000 	.word	0x40010000

0800141c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b088      	sub	sp, #32
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001422:	f107 0310 	add.w	r3, r7, #16
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	605a      	str	r2, [r3, #4]
 800142c:	609a      	str	r2, [r3, #8]
 800142e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001430:	1d3b      	adds	r3, r7, #4
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	605a      	str	r2, [r3, #4]
 8001438:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800143a:	4b1e      	ldr	r3, [pc, #120]	; (80014b4 <MX_TIM2_Init+0x98>)
 800143c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001440:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001442:	4b1c      	ldr	r3, [pc, #112]	; (80014b4 <MX_TIM2_Init+0x98>)
 8001444:	2200      	movs	r2, #0
 8001446:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001448:	4b1a      	ldr	r3, [pc, #104]	; (80014b4 <MX_TIM2_Init+0x98>)
 800144a:	2200      	movs	r2, #0
 800144c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800144e:	4b19      	ldr	r3, [pc, #100]	; (80014b4 <MX_TIM2_Init+0x98>)
 8001450:	f04f 32ff 	mov.w	r2, #4294967295
 8001454:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001456:	4b17      	ldr	r3, [pc, #92]	; (80014b4 <MX_TIM2_Init+0x98>)
 8001458:	2200      	movs	r2, #0
 800145a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800145c:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <MX_TIM2_Init+0x98>)
 800145e:	2200      	movs	r2, #0
 8001460:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001462:	4814      	ldr	r0, [pc, #80]	; (80014b4 <MX_TIM2_Init+0x98>)
 8001464:	f007 fdc0 	bl	8008fe8 <HAL_TIM_Base_Init>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800146e:	f000 fd3f 	bl	8001ef0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001472:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001476:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001478:	f107 0310 	add.w	r3, r7, #16
 800147c:	4619      	mov	r1, r3
 800147e:	480d      	ldr	r0, [pc, #52]	; (80014b4 <MX_TIM2_Init+0x98>)
 8001480:	f008 f908 	bl	8009694 <HAL_TIM_ConfigClockSource>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800148a:	f000 fd31 	bl	8001ef0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800148e:	2300      	movs	r3, #0
 8001490:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001492:	2300      	movs	r3, #0
 8001494:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001496:	1d3b      	adds	r3, r7, #4
 8001498:	4619      	mov	r1, r3
 800149a:	4806      	ldr	r0, [pc, #24]	; (80014b4 <MX_TIM2_Init+0x98>)
 800149c:	f008 fd80 	bl	8009fa0 <HAL_TIMEx_MasterConfigSynchronization>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80014a6:	f000 fd23 	bl	8001ef0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014aa:	bf00      	nop
 80014ac:	3720      	adds	r7, #32
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	20002614 	.word	0x20002614

080014b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b08e      	sub	sp, #56	; 0x38
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	605a      	str	r2, [r3, #4]
 80014c8:	609a      	str	r2, [r3, #8]
 80014ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014cc:	f107 031c 	add.w	r3, r7, #28
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
 80014d6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014d8:	463b      	mov	r3, r7
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	605a      	str	r2, [r3, #4]
 80014e0:	609a      	str	r2, [r3, #8]
 80014e2:	60da      	str	r2, [r3, #12]
 80014e4:	611a      	str	r2, [r3, #16]
 80014e6:	615a      	str	r2, [r3, #20]
 80014e8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014ea:	4b2d      	ldr	r3, [pc, #180]	; (80015a0 <MX_TIM3_Init+0xe8>)
 80014ec:	4a2d      	ldr	r2, [pc, #180]	; (80015a4 <MX_TIM3_Init+0xec>)
 80014ee:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80014f0:	4b2b      	ldr	r3, [pc, #172]	; (80015a0 <MX_TIM3_Init+0xe8>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014f6:	4b2a      	ldr	r3, [pc, #168]	; (80015a0 <MX_TIM3_Init+0xe8>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80014fc:	4b28      	ldr	r3, [pc, #160]	; (80015a0 <MX_TIM3_Init+0xe8>)
 80014fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001502:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001504:	4b26      	ldr	r3, [pc, #152]	; (80015a0 <MX_TIM3_Init+0xe8>)
 8001506:	2200      	movs	r2, #0
 8001508:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800150a:	4b25      	ldr	r3, [pc, #148]	; (80015a0 <MX_TIM3_Init+0xe8>)
 800150c:	2200      	movs	r2, #0
 800150e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001510:	4823      	ldr	r0, [pc, #140]	; (80015a0 <MX_TIM3_Init+0xe8>)
 8001512:	f007 fd69 	bl	8008fe8 <HAL_TIM_Base_Init>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800151c:	f000 fce8 	bl	8001ef0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001520:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001524:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001526:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800152a:	4619      	mov	r1, r3
 800152c:	481c      	ldr	r0, [pc, #112]	; (80015a0 <MX_TIM3_Init+0xe8>)
 800152e:	f008 f8b1 	bl	8009694 <HAL_TIM_ConfigClockSource>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001538:	f000 fcda 	bl	8001ef0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800153c:	4818      	ldr	r0, [pc, #96]	; (80015a0 <MX_TIM3_Init+0xe8>)
 800153e:	f007 fe23 	bl	8009188 <HAL_TIM_PWM_Init>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001548:	f000 fcd2 	bl	8001ef0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800154c:	2300      	movs	r3, #0
 800154e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001550:	2300      	movs	r3, #0
 8001552:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001554:	f107 031c 	add.w	r3, r7, #28
 8001558:	4619      	mov	r1, r3
 800155a:	4811      	ldr	r0, [pc, #68]	; (80015a0 <MX_TIM3_Init+0xe8>)
 800155c:	f008 fd20 	bl	8009fa0 <HAL_TIMEx_MasterConfigSynchronization>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001566:	f000 fcc3 	bl	8001ef0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800156a:	2360      	movs	r3, #96	; 0x60
 800156c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800156e:	2300      	movs	r3, #0
 8001570:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001572:	2300      	movs	r3, #0
 8001574:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001576:	2300      	movs	r3, #0
 8001578:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800157a:	463b      	mov	r3, r7
 800157c:	2200      	movs	r2, #0
 800157e:	4619      	mov	r1, r3
 8001580:	4807      	ldr	r0, [pc, #28]	; (80015a0 <MX_TIM3_Init+0xe8>)
 8001582:	f007 ff77 	bl	8009474 <HAL_TIM_PWM_ConfigChannel>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800158c:	f000 fcb0 	bl	8001ef0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001590:	4803      	ldr	r0, [pc, #12]	; (80015a0 <MX_TIM3_Init+0xe8>)
 8001592:	f001 f963 	bl	800285c <HAL_TIM_MspPostInit>

}
 8001596:	bf00      	nop
 8001598:	3738      	adds	r7, #56	; 0x38
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	200022d4 	.word	0x200022d4
 80015a4:	40000400 	.word	0x40000400

080015a8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b08e      	sub	sp, #56	; 0x38
 80015ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015b2:	2200      	movs	r2, #0
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	605a      	str	r2, [r3, #4]
 80015b8:	609a      	str	r2, [r3, #8]
 80015ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015bc:	f107 031c 	add.w	r3, r7, #28
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015c8:	463b      	mov	r3, r7
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	605a      	str	r2, [r3, #4]
 80015d0:	609a      	str	r2, [r3, #8]
 80015d2:	60da      	str	r2, [r3, #12]
 80015d4:	611a      	str	r2, [r3, #16]
 80015d6:	615a      	str	r2, [r3, #20]
 80015d8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80015da:	4b2d      	ldr	r3, [pc, #180]	; (8001690 <MX_TIM5_Init+0xe8>)
 80015dc:	4a2d      	ldr	r2, [pc, #180]	; (8001694 <MX_TIM5_Init+0xec>)
 80015de:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80015e0:	4b2b      	ldr	r3, [pc, #172]	; (8001690 <MX_TIM5_Init+0xe8>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015e6:	4b2a      	ldr	r3, [pc, #168]	; (8001690 <MX_TIM5_Init+0xe8>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80015ec:	4b28      	ldr	r3, [pc, #160]	; (8001690 <MX_TIM5_Init+0xe8>)
 80015ee:	f04f 32ff 	mov.w	r2, #4294967295
 80015f2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015f4:	4b26      	ldr	r3, [pc, #152]	; (8001690 <MX_TIM5_Init+0xe8>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015fa:	4b25      	ldr	r3, [pc, #148]	; (8001690 <MX_TIM5_Init+0xe8>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001600:	4823      	ldr	r0, [pc, #140]	; (8001690 <MX_TIM5_Init+0xe8>)
 8001602:	f007 fcf1 	bl	8008fe8 <HAL_TIM_Base_Init>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 800160c:	f000 fc70 	bl	8001ef0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001610:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001614:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001616:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800161a:	4619      	mov	r1, r3
 800161c:	481c      	ldr	r0, [pc, #112]	; (8001690 <MX_TIM5_Init+0xe8>)
 800161e:	f008 f839 	bl	8009694 <HAL_TIM_ConfigClockSource>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8001628:	f000 fc62 	bl	8001ef0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800162c:	4818      	ldr	r0, [pc, #96]	; (8001690 <MX_TIM5_Init+0xe8>)
 800162e:	f007 fdab 	bl	8009188 <HAL_TIM_PWM_Init>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8001638:	f000 fc5a 	bl	8001ef0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800163c:	2300      	movs	r3, #0
 800163e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001640:	2300      	movs	r3, #0
 8001642:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001644:	f107 031c 	add.w	r3, r7, #28
 8001648:	4619      	mov	r1, r3
 800164a:	4811      	ldr	r0, [pc, #68]	; (8001690 <MX_TIM5_Init+0xe8>)
 800164c:	f008 fca8 	bl	8009fa0 <HAL_TIMEx_MasterConfigSynchronization>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8001656:	f000 fc4b 	bl	8001ef0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800165a:	2360      	movs	r3, #96	; 0x60
 800165c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800165e:	2300      	movs	r3, #0
 8001660:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001662:	2300      	movs	r3, #0
 8001664:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001666:	2300      	movs	r3, #0
 8001668:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800166a:	463b      	mov	r3, r7
 800166c:	220c      	movs	r2, #12
 800166e:	4619      	mov	r1, r3
 8001670:	4807      	ldr	r0, [pc, #28]	; (8001690 <MX_TIM5_Init+0xe8>)
 8001672:	f007 feff 	bl	8009474 <HAL_TIM_PWM_ConfigChannel>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 800167c:	f000 fc38 	bl	8001ef0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001680:	4803      	ldr	r0, [pc, #12]	; (8001690 <MX_TIM5_Init+0xe8>)
 8001682:	f001 f8eb 	bl	800285c <HAL_TIM_MspPostInit>

}
 8001686:	bf00      	nop
 8001688:	3738      	adds	r7, #56	; 0x38
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	20002288 	.word	0x20002288
 8001694:	40000c00 	.word	0x40000c00

08001698 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800169e:	1d3b      	adds	r3, r7, #4
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	605a      	str	r2, [r3, #4]
 80016a6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80016a8:	4b14      	ldr	r3, [pc, #80]	; (80016fc <MX_TIM7_Init+0x64>)
 80016aa:	4a15      	ldr	r2, [pc, #84]	; (8001700 <MX_TIM7_Init+0x68>)
 80016ac:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 80016ae:	4b13      	ldr	r3, [pc, #76]	; (80016fc <MX_TIM7_Init+0x64>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b4:	4b11      	ldr	r3, [pc, #68]	; (80016fc <MX_TIM7_Init+0x64>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10000;
 80016ba:	4b10      	ldr	r3, [pc, #64]	; (80016fc <MX_TIM7_Init+0x64>)
 80016bc:	f242 7210 	movw	r2, #10000	; 0x2710
 80016c0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016c2:	4b0e      	ldr	r3, [pc, #56]	; (80016fc <MX_TIM7_Init+0x64>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80016c8:	480c      	ldr	r0, [pc, #48]	; (80016fc <MX_TIM7_Init+0x64>)
 80016ca:	f007 fc8d 	bl	8008fe8 <HAL_TIM_Base_Init>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80016d4:	f000 fc0c 	bl	8001ef0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016d8:	2300      	movs	r3, #0
 80016da:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016dc:	2300      	movs	r3, #0
 80016de:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80016e0:	1d3b      	adds	r3, r7, #4
 80016e2:	4619      	mov	r1, r3
 80016e4:	4805      	ldr	r0, [pc, #20]	; (80016fc <MX_TIM7_Init+0x64>)
 80016e6:	f008 fc5b 	bl	8009fa0 <HAL_TIMEx_MasterConfigSynchronization>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80016f0:	f000 fbfe 	bl	8001ef0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80016f4:	bf00      	nop
 80016f6:	3710      	adds	r7, #16
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	200029e4 	.word	0x200029e4
 8001700:	40001400 	.word	0x40001400

08001704 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b088      	sub	sp, #32
 8001708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800170a:	f107 0310 	add.w	r3, r7, #16
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	605a      	str	r2, [r3, #4]
 8001714:	609a      	str	r2, [r3, #8]
 8001716:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001718:	1d3b      	adds	r3, r7, #4
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	605a      	str	r2, [r3, #4]
 8001720:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001722:	4b20      	ldr	r3, [pc, #128]	; (80017a4 <MX_TIM8_Init+0xa0>)
 8001724:	4a20      	ldr	r2, [pc, #128]	; (80017a8 <MX_TIM8_Init+0xa4>)
 8001726:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001728:	4b1e      	ldr	r3, [pc, #120]	; (80017a4 <MX_TIM8_Init+0xa0>)
 800172a:	2200      	movs	r2, #0
 800172c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800172e:	4b1d      	ldr	r3, [pc, #116]	; (80017a4 <MX_TIM8_Init+0xa0>)
 8001730:	2200      	movs	r2, #0
 8001732:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001734:	4b1b      	ldr	r3, [pc, #108]	; (80017a4 <MX_TIM8_Init+0xa0>)
 8001736:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800173a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800173c:	4b19      	ldr	r3, [pc, #100]	; (80017a4 <MX_TIM8_Init+0xa0>)
 800173e:	2200      	movs	r2, #0
 8001740:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001742:	4b18      	ldr	r3, [pc, #96]	; (80017a4 <MX_TIM8_Init+0xa0>)
 8001744:	2200      	movs	r2, #0
 8001746:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001748:	4b16      	ldr	r3, [pc, #88]	; (80017a4 <MX_TIM8_Init+0xa0>)
 800174a:	2200      	movs	r2, #0
 800174c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800174e:	4815      	ldr	r0, [pc, #84]	; (80017a4 <MX_TIM8_Init+0xa0>)
 8001750:	f007 fc4a 	bl	8008fe8 <HAL_TIM_Base_Init>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 800175a:	f000 fbc9 	bl	8001ef0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800175e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001762:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001764:	f107 0310 	add.w	r3, r7, #16
 8001768:	4619      	mov	r1, r3
 800176a:	480e      	ldr	r0, [pc, #56]	; (80017a4 <MX_TIM8_Init+0xa0>)
 800176c:	f007 ff92 	bl	8009694 <HAL_TIM_ConfigClockSource>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8001776:	f000 fbbb 	bl	8001ef0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800177a:	2300      	movs	r3, #0
 800177c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800177e:	2300      	movs	r3, #0
 8001780:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001782:	2300      	movs	r3, #0
 8001784:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001786:	1d3b      	adds	r3, r7, #4
 8001788:	4619      	mov	r1, r3
 800178a:	4806      	ldr	r0, [pc, #24]	; (80017a4 <MX_TIM8_Init+0xa0>)
 800178c:	f008 fc08 	bl	8009fa0 <HAL_TIMEx_MasterConfigSynchronization>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001796:	f000 fbab 	bl	8001ef0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800179a:	bf00      	nop
 800179c:	3720      	adds	r7, #32
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	20002064 	.word	0x20002064
 80017a8:	40010400 	.word	0x40010400

080017ac <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b088      	sub	sp, #32
 80017b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80017b2:	1d3b      	adds	r3, r7, #4
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	605a      	str	r2, [r3, #4]
 80017ba:	609a      	str	r2, [r3, #8]
 80017bc:	60da      	str	r2, [r3, #12]
 80017be:	611a      	str	r2, [r3, #16]
 80017c0:	615a      	str	r2, [r3, #20]
 80017c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80017c4:	4b1a      	ldr	r3, [pc, #104]	; (8001830 <MX_TIM12_Init+0x84>)
 80017c6:	4a1b      	ldr	r2, [pc, #108]	; (8001834 <MX_TIM12_Init+0x88>)
 80017c8:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80017ca:	4b19      	ldr	r3, [pc, #100]	; (8001830 <MX_TIM12_Init+0x84>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017d0:	4b17      	ldr	r3, [pc, #92]	; (8001830 <MX_TIM12_Init+0x84>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 80017d6:	4b16      	ldr	r3, [pc, #88]	; (8001830 <MX_TIM12_Init+0x84>)
 80017d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017dc:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017de:	4b14      	ldr	r3, [pc, #80]	; (8001830 <MX_TIM12_Init+0x84>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017e4:	4b12      	ldr	r3, [pc, #72]	; (8001830 <MX_TIM12_Init+0x84>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80017ea:	4811      	ldr	r0, [pc, #68]	; (8001830 <MX_TIM12_Init+0x84>)
 80017ec:	f007 fccc 	bl	8009188 <HAL_TIM_PWM_Init>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 80017f6:	f000 fb7b 	bl	8001ef0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017fa:	2360      	movs	r3, #96	; 0x60
 80017fc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80017fe:	2300      	movs	r3, #0
 8001800:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001802:	2300      	movs	r3, #0
 8001804:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001806:	2300      	movs	r3, #0
 8001808:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800180a:	1d3b      	adds	r3, r7, #4
 800180c:	2200      	movs	r2, #0
 800180e:	4619      	mov	r1, r3
 8001810:	4807      	ldr	r0, [pc, #28]	; (8001830 <MX_TIM12_Init+0x84>)
 8001812:	f007 fe2f 	bl	8009474 <HAL_TIM_PWM_ConfigChannel>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 800181c:	f000 fb68 	bl	8001ef0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001820:	4803      	ldr	r0, [pc, #12]	; (8001830 <MX_TIM12_Init+0x84>)
 8001822:	f001 f81b 	bl	800285c <HAL_TIM_MspPostInit>

}
 8001826:	bf00      	nop
 8001828:	3720      	adds	r7, #32
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	20002964 	.word	0x20002964
 8001834:	40001800 	.word	0x40001800

08001838 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800183c:	4b14      	ldr	r3, [pc, #80]	; (8001890 <MX_USART1_UART_Init+0x58>)
 800183e:	4a15      	ldr	r2, [pc, #84]	; (8001894 <MX_USART1_UART_Init+0x5c>)
 8001840:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001842:	4b13      	ldr	r3, [pc, #76]	; (8001890 <MX_USART1_UART_Init+0x58>)
 8001844:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001848:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800184a:	4b11      	ldr	r3, [pc, #68]	; (8001890 <MX_USART1_UART_Init+0x58>)
 800184c:	2200      	movs	r2, #0
 800184e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001850:	4b0f      	ldr	r3, [pc, #60]	; (8001890 <MX_USART1_UART_Init+0x58>)
 8001852:	2200      	movs	r2, #0
 8001854:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001856:	4b0e      	ldr	r3, [pc, #56]	; (8001890 <MX_USART1_UART_Init+0x58>)
 8001858:	2200      	movs	r2, #0
 800185a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800185c:	4b0c      	ldr	r3, [pc, #48]	; (8001890 <MX_USART1_UART_Init+0x58>)
 800185e:	220c      	movs	r2, #12
 8001860:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001862:	4b0b      	ldr	r3, [pc, #44]	; (8001890 <MX_USART1_UART_Init+0x58>)
 8001864:	2200      	movs	r2, #0
 8001866:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001868:	4b09      	ldr	r3, [pc, #36]	; (8001890 <MX_USART1_UART_Init+0x58>)
 800186a:	2200      	movs	r2, #0
 800186c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800186e:	4b08      	ldr	r3, [pc, #32]	; (8001890 <MX_USART1_UART_Init+0x58>)
 8001870:	2200      	movs	r2, #0
 8001872:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001874:	4b06      	ldr	r3, [pc, #24]	; (8001890 <MX_USART1_UART_Init+0x58>)
 8001876:	2200      	movs	r2, #0
 8001878:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800187a:	4805      	ldr	r0, [pc, #20]	; (8001890 <MX_USART1_UART_Init+0x58>)
 800187c:	f008 fc3c 	bl	800a0f8 <HAL_UART_Init>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001886:	f000 fb33 	bl	8001ef0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	20002460 	.word	0x20002460
 8001894:	40011000 	.word	0x40011000

08001898 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800189c:	4b14      	ldr	r3, [pc, #80]	; (80018f0 <MX_USART6_UART_Init+0x58>)
 800189e:	4a15      	ldr	r2, [pc, #84]	; (80018f4 <MX_USART6_UART_Init+0x5c>)
 80018a0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80018a2:	4b13      	ldr	r3, [pc, #76]	; (80018f0 <MX_USART6_UART_Init+0x58>)
 80018a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018a8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80018aa:	4b11      	ldr	r3, [pc, #68]	; (80018f0 <MX_USART6_UART_Init+0x58>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80018b0:	4b0f      	ldr	r3, [pc, #60]	; (80018f0 <MX_USART6_UART_Init+0x58>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80018b6:	4b0e      	ldr	r3, [pc, #56]	; (80018f0 <MX_USART6_UART_Init+0x58>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80018bc:	4b0c      	ldr	r3, [pc, #48]	; (80018f0 <MX_USART6_UART_Init+0x58>)
 80018be:	220c      	movs	r2, #12
 80018c0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018c2:	4b0b      	ldr	r3, [pc, #44]	; (80018f0 <MX_USART6_UART_Init+0x58>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80018c8:	4b09      	ldr	r3, [pc, #36]	; (80018f0 <MX_USART6_UART_Init+0x58>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018ce:	4b08      	ldr	r3, [pc, #32]	; (80018f0 <MX_USART6_UART_Init+0x58>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018d4:	4b06      	ldr	r3, [pc, #24]	; (80018f0 <MX_USART6_UART_Init+0x58>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80018da:	4805      	ldr	r0, [pc, #20]	; (80018f0 <MX_USART6_UART_Init+0x58>)
 80018dc:	f008 fc0c 	bl	800a0f8 <HAL_UART_Init>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80018e6:	f000 fb03 	bl	8001ef0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	20002550 	.word	0x20002550
 80018f4:	40011400 	.word	0x40011400

080018f8 <MX_USB_OTG_FS_HCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_HCD_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80018fc:	4b0e      	ldr	r3, [pc, #56]	; (8001938 <MX_USB_OTG_FS_HCD_Init+0x40>)
 80018fe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001902:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8001904:	4b0c      	ldr	r3, [pc, #48]	; (8001938 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8001906:	2208      	movs	r2, #8
 8001908:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800190a:	4b0b      	ldr	r3, [pc, #44]	; (8001938 <MX_USB_OTG_FS_HCD_Init+0x40>)
 800190c:	2201      	movs	r2, #1
 800190e:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001910:	4b09      	ldr	r3, [pc, #36]	; (8001938 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8001912:	2200      	movs	r2, #0
 8001914:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8001916:	4b08      	ldr	r3, [pc, #32]	; (8001938 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8001918:	2202      	movs	r2, #2
 800191a:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800191c:	4b06      	ldr	r3, [pc, #24]	; (8001938 <MX_USB_OTG_FS_HCD_Init+0x40>)
 800191e:	2200      	movs	r2, #0
 8001920:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8001922:	4805      	ldr	r0, [pc, #20]	; (8001938 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8001924:	f004 fcf1 	bl	800630a <HAL_HCD_Init>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <MX_USB_OTG_FS_HCD_Init+0x3a>
  {
    Error_Handler();
 800192e:	f000 fadf 	bl	8001ef0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	20002660 	.word	0x20002660

0800193c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001942:	4b0c      	ldr	r3, [pc, #48]	; (8001974 <MX_DMA_Init+0x38>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	4a0b      	ldr	r2, [pc, #44]	; (8001974 <MX_DMA_Init+0x38>)
 8001948:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800194c:	6313      	str	r3, [r2, #48]	; 0x30
 800194e:	4b09      	ldr	r3, [pc, #36]	; (8001974 <MX_DMA_Init+0x38>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001956:	607b      	str	r3, [r7, #4]
 8001958:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800195a:	2200      	movs	r2, #0
 800195c:	2100      	movs	r1, #0
 800195e:	2038      	movs	r0, #56	; 0x38
 8001960:	f003 f964 	bl	8004c2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001964:	2038      	movs	r0, #56	; 0x38
 8001966:	f003 f97d 	bl	8004c64 <HAL_NVIC_EnableIRQ>

}
 800196a:	bf00      	nop
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	40023800 	.word	0x40023800

08001978 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b088      	sub	sp, #32
 800197c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800197e:	1d3b      	adds	r3, r7, #4
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	605a      	str	r2, [r3, #4]
 8001986:	609a      	str	r2, [r3, #8]
 8001988:	60da      	str	r2, [r3, #12]
 800198a:	611a      	str	r2, [r3, #16]
 800198c:	615a      	str	r2, [r3, #20]
 800198e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001990:	4b1f      	ldr	r3, [pc, #124]	; (8001a10 <MX_FMC_Init+0x98>)
 8001992:	4a20      	ldr	r2, [pc, #128]	; (8001a14 <MX_FMC_Init+0x9c>)
 8001994:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001996:	4b1e      	ldr	r3, [pc, #120]	; (8001a10 <MX_FMC_Init+0x98>)
 8001998:	2200      	movs	r2, #0
 800199a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800199c:	4b1c      	ldr	r3, [pc, #112]	; (8001a10 <MX_FMC_Init+0x98>)
 800199e:	2200      	movs	r2, #0
 80019a0:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80019a2:	4b1b      	ldr	r3, [pc, #108]	; (8001a10 <MX_FMC_Init+0x98>)
 80019a4:	2204      	movs	r2, #4
 80019a6:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80019a8:	4b19      	ldr	r3, [pc, #100]	; (8001a10 <MX_FMC_Init+0x98>)
 80019aa:	2210      	movs	r2, #16
 80019ac:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80019ae:	4b18      	ldr	r3, [pc, #96]	; (8001a10 <MX_FMC_Init+0x98>)
 80019b0:	2240      	movs	r2, #64	; 0x40
 80019b2:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80019b4:	4b16      	ldr	r3, [pc, #88]	; (8001a10 <MX_FMC_Init+0x98>)
 80019b6:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80019ba:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80019bc:	4b14      	ldr	r3, [pc, #80]	; (8001a10 <MX_FMC_Init+0x98>)
 80019be:	2200      	movs	r2, #0
 80019c0:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80019c2:	4b13      	ldr	r3, [pc, #76]	; (8001a10 <MX_FMC_Init+0x98>)
 80019c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019c8:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80019ca:	4b11      	ldr	r3, [pc, #68]	; (8001a10 <MX_FMC_Init+0x98>)
 80019cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019d0:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80019d2:	4b0f      	ldr	r3, [pc, #60]	; (8001a10 <MX_FMC_Init+0x98>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80019d8:	2302      	movs	r3, #2
 80019da:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80019dc:	2307      	movs	r3, #7
 80019de:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80019e0:	2304      	movs	r3, #4
 80019e2:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80019e4:	2307      	movs	r3, #7
 80019e6:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80019e8:	2303      	movs	r3, #3
 80019ea:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80019ec:	2302      	movs	r3, #2
 80019ee:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80019f0:	2302      	movs	r3, #2
 80019f2:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80019f4:	1d3b      	adds	r3, r7, #4
 80019f6:	4619      	mov	r1, r3
 80019f8:	4805      	ldr	r0, [pc, #20]	; (8001a10 <MX_FMC_Init+0x98>)
 80019fa:	f007 fa19 	bl	8008e30 <HAL_SDRAM_Init>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001a04:	f000 fa74 	bl	8001ef0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001a08:	bf00      	nop
 8001a0a:	3720      	adds	r7, #32
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	200029b0 	.word	0x200029b0
 8001a14:	a0000140 	.word	0xa0000140

08001a18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b090      	sub	sp, #64	; 0x40
 8001a1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	605a      	str	r2, [r3, #4]
 8001a28:	609a      	str	r2, [r3, #8]
 8001a2a:	60da      	str	r2, [r3, #12]
 8001a2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a2e:	4bb0      	ldr	r3, [pc, #704]	; (8001cf0 <MX_GPIO_Init+0x2d8>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a32:	4aaf      	ldr	r2, [pc, #700]	; (8001cf0 <MX_GPIO_Init+0x2d8>)
 8001a34:	f043 0310 	orr.w	r3, r3, #16
 8001a38:	6313      	str	r3, [r2, #48]	; 0x30
 8001a3a:	4bad      	ldr	r3, [pc, #692]	; (8001cf0 <MX_GPIO_Init+0x2d8>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3e:	f003 0310 	and.w	r3, r3, #16
 8001a42:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a46:	4baa      	ldr	r3, [pc, #680]	; (8001cf0 <MX_GPIO_Init+0x2d8>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	4aa9      	ldr	r2, [pc, #676]	; (8001cf0 <MX_GPIO_Init+0x2d8>)
 8001a4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a50:	6313      	str	r3, [r2, #48]	; 0x30
 8001a52:	4ba7      	ldr	r3, [pc, #668]	; (8001cf0 <MX_GPIO_Init+0x2d8>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a5a:	627b      	str	r3, [r7, #36]	; 0x24
 8001a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a5e:	4ba4      	ldr	r3, [pc, #656]	; (8001cf0 <MX_GPIO_Init+0x2d8>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a62:	4aa3      	ldr	r2, [pc, #652]	; (8001cf0 <MX_GPIO_Init+0x2d8>)
 8001a64:	f043 0302 	orr.w	r3, r3, #2
 8001a68:	6313      	str	r3, [r2, #48]	; 0x30
 8001a6a:	4ba1      	ldr	r3, [pc, #644]	; (8001cf0 <MX_GPIO_Init+0x2d8>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	623b      	str	r3, [r7, #32]
 8001a74:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a76:	4b9e      	ldr	r3, [pc, #632]	; (8001cf0 <MX_GPIO_Init+0x2d8>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	4a9d      	ldr	r2, [pc, #628]	; (8001cf0 <MX_GPIO_Init+0x2d8>)
 8001a7c:	f043 0308 	orr.w	r3, r3, #8
 8001a80:	6313      	str	r3, [r2, #48]	; 0x30
 8001a82:	4b9b      	ldr	r3, [pc, #620]	; (8001cf0 <MX_GPIO_Init+0x2d8>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	f003 0308 	and.w	r3, r3, #8
 8001a8a:	61fb      	str	r3, [r7, #28]
 8001a8c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a8e:	4b98      	ldr	r3, [pc, #608]	; (8001cf0 <MX_GPIO_Init+0x2d8>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	4a97      	ldr	r2, [pc, #604]	; (8001cf0 <MX_GPIO_Init+0x2d8>)
 8001a94:	f043 0304 	orr.w	r3, r3, #4
 8001a98:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9a:	4b95      	ldr	r3, [pc, #596]	; (8001cf0 <MX_GPIO_Init+0x2d8>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	f003 0304 	and.w	r3, r3, #4
 8001aa2:	61bb      	str	r3, [r7, #24]
 8001aa4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa6:	4b92      	ldr	r3, [pc, #584]	; (8001cf0 <MX_GPIO_Init+0x2d8>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	4a91      	ldr	r2, [pc, #580]	; (8001cf0 <MX_GPIO_Init+0x2d8>)
 8001aac:	f043 0301 	orr.w	r3, r3, #1
 8001ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab2:	4b8f      	ldr	r3, [pc, #572]	; (8001cf0 <MX_GPIO_Init+0x2d8>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	617b      	str	r3, [r7, #20]
 8001abc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001abe:	4b8c      	ldr	r3, [pc, #560]	; (8001cf0 <MX_GPIO_Init+0x2d8>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac2:	4a8b      	ldr	r2, [pc, #556]	; (8001cf0 <MX_GPIO_Init+0x2d8>)
 8001ac4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aca:	4b89      	ldr	r3, [pc, #548]	; (8001cf0 <MX_GPIO_Init+0x2d8>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ad2:	613b      	str	r3, [r7, #16]
 8001ad4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001ad6:	4b86      	ldr	r3, [pc, #536]	; (8001cf0 <MX_GPIO_Init+0x2d8>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	4a85      	ldr	r2, [pc, #532]	; (8001cf0 <MX_GPIO_Init+0x2d8>)
 8001adc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae2:	4b83      	ldr	r3, [pc, #524]	; (8001cf0 <MX_GPIO_Init+0x2d8>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001aee:	4b80      	ldr	r3, [pc, #512]	; (8001cf0 <MX_GPIO_Init+0x2d8>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	4a7f      	ldr	r2, [pc, #508]	; (8001cf0 <MX_GPIO_Init+0x2d8>)
 8001af4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001af8:	6313      	str	r3, [r2, #48]	; 0x30
 8001afa:	4b7d      	ldr	r3, [pc, #500]	; (8001cf0 <MX_GPIO_Init+0x2d8>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b02:	60bb      	str	r3, [r7, #8]
 8001b04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b06:	4b7a      	ldr	r3, [pc, #488]	; (8001cf0 <MX_GPIO_Init+0x2d8>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	4a79      	ldr	r2, [pc, #484]	; (8001cf0 <MX_GPIO_Init+0x2d8>)
 8001b0c:	f043 0320 	orr.w	r3, r3, #32
 8001b10:	6313      	str	r3, [r2, #48]	; 0x30
 8001b12:	4b77      	ldr	r3, [pc, #476]	; (8001cf0 <MX_GPIO_Init+0x2d8>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	f003 0320 	and.w	r3, r3, #32
 8001b1a:	607b      	str	r3, [r7, #4]
 8001b1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b1e:	4b74      	ldr	r3, [pc, #464]	; (8001cf0 <MX_GPIO_Init+0x2d8>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	4a73      	ldr	r2, [pc, #460]	; (8001cf0 <MX_GPIO_Init+0x2d8>)
 8001b24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b28:	6313      	str	r3, [r2, #48]	; 0x30
 8001b2a:	4b71      	ldr	r3, [pc, #452]	; (8001cf0 <MX_GPIO_Init+0x2d8>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b32:	603b      	str	r3, [r7, #0]
 8001b34:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15|GPIO_PIN_8, GPIO_PIN_RESET);
 8001b36:	2200      	movs	r2, #0
 8001b38:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 8001b3c:	486d      	ldr	r0, [pc, #436]	; (8001cf4 <MX_GPIO_Init+0x2dc>)
 8001b3e:	f004 fbcb 	bl	80062d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001b42:	2201      	movs	r2, #1
 8001b44:	2120      	movs	r1, #32
 8001b46:	486c      	ldr	r0, [pc, #432]	; (8001cf8 <MX_GPIO_Init+0x2e0>)
 8001b48:	f004 fbc6 	bl	80062d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|GPIO_PIN_2, GPIO_PIN_RESET);
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	210c      	movs	r1, #12
 8001b50:	486a      	ldr	r0, [pc, #424]	; (8001cfc <MX_GPIO_Init+0x2e4>)
 8001b52:	f004 fbc1 	bl	80062d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001b56:	2201      	movs	r2, #1
 8001b58:	2108      	movs	r1, #8
 8001b5a:	4869      	ldr	r0, [pc, #420]	; (8001d00 <MX_GPIO_Init+0x2e8>)
 8001b5c:	f004 fbbc 	bl	80062d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001b60:	2201      	movs	r2, #1
 8001b62:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b66:	4865      	ldr	r0, [pc, #404]	; (8001cfc <MX_GPIO_Init+0x2e4>)
 8001b68:	f004 fbb6 	bl	80062d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b72:	4864      	ldr	r0, [pc, #400]	; (8001d04 <MX_GPIO_Init+0x2ec>)
 8001b74:	f004 fbb0 	bl	80062d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8001b78:	2200      	movs	r2, #0
 8001b7a:	21c8      	movs	r1, #200	; 0xc8
 8001b7c:	4862      	ldr	r0, [pc, #392]	; (8001d08 <MX_GPIO_Init+0x2f0>)
 8001b7e:	f004 fbab 	bl	80062d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8001b82:	2200      	movs	r2, #0
 8001b84:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b88:	4860      	ldr	r0, [pc, #384]	; (8001d0c <MX_GPIO_Init+0x2f4>)
 8001b8a:	f004 fba5 	bl	80062d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001b8e:	2308      	movs	r3, #8
 8001b90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b92:	2300      	movs	r3, #0
 8001b94:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b96:	2300      	movs	r3, #0
 8001b98:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001b9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	485b      	ldr	r0, [pc, #364]	; (8001d10 <MX_GPIO_Init+0x2f8>)
 8001ba2:	f004 f9d5 	bl	8005f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8001ba6:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8001baa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bac:	2302      	movs	r3, #2
 8001bae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001bb8:	230b      	movs	r3, #11
 8001bba:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001bbc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	4851      	ldr	r0, [pc, #324]	; (8001d08 <MX_GPIO_Init+0x2f0>)
 8001bc4:	f004 f9c4 	bl	8005f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001bc8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bd6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bda:	4619      	mov	r1, r3
 8001bdc:	484b      	ldr	r0, [pc, #300]	; (8001d0c <MX_GPIO_Init+0x2f4>)
 8001bde:	f004 f9b7 	bl	8005f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8001be2:	f643 4323 	movw	r3, #15395	; 0x3c23
 8001be6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be8:	2302      	movs	r3, #2
 8001bea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bec:	2300      	movs	r3, #0
 8001bee:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001bf4:	230a      	movs	r3, #10
 8001bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bf8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	4843      	ldr	r0, [pc, #268]	; (8001d0c <MX_GPIO_Init+0x2f4>)
 8001c00:	f004 f9a6 	bl	8005f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA15 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8;
 8001c04:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8001c08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c12:	2300      	movs	r3, #0
 8001c14:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4835      	ldr	r0, [pc, #212]	; (8001cf4 <MX_GPIO_Init+0x2dc>)
 8001c1e:	f004 f997 	bl	8005f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001c22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001c30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c34:	4619      	mov	r1, r3
 8001c36:	4837      	ldr	r0, [pc, #220]	; (8001d14 <MX_GPIO_Init+0x2fc>)
 8001c38:	f004 f98a 	bl	8005f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001c3c:	2340      	movs	r3, #64	; 0x40
 8001c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001c40:	4b35      	ldr	r3, [pc, #212]	; (8001d18 <MX_GPIO_Init+0x300>)
 8001c42:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c44:	2300      	movs	r3, #0
 8001c46:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001c48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	482a      	ldr	r0, [pc, #168]	; (8001cf8 <MX_GPIO_Init+0x2e0>)
 8001c50:	f004 f97e 	bl	8005f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001c54:	2320      	movs	r3, #32
 8001c56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c60:	2300      	movs	r3, #0
 8001c62:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001c64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c68:	4619      	mov	r1, r3
 8001c6a:	4823      	ldr	r0, [pc, #140]	; (8001cf8 <MX_GPIO_Init+0x2e0>)
 8001c6c:	f004 f970 	bl	8005f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin PI2 LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|GPIO_PIN_2|LCD_DISP_Pin;
 8001c70:	f241 030c 	movw	r3, #4108	; 0x100c
 8001c74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c76:	2301      	movs	r3, #1
 8001c78:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001c82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c86:	4619      	mov	r1, r3
 8001c88:	481c      	ldr	r0, [pc, #112]	; (8001cfc <MX_GPIO_Init+0x2e4>)
 8001c8a:	f004 f961 	bl	8005f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001c8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c92:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c94:	2300      	movs	r3, #0
 8001c96:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001c9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	481e      	ldr	r0, [pc, #120]	; (8001d1c <MX_GPIO_Init+0x304>)
 8001ca4:	f004 f954 	bl	8005f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001ca8:	2308      	movs	r3, #8
 8001caa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cac:	2301      	movs	r3, #1
 8001cae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001cb8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	4810      	ldr	r0, [pc, #64]	; (8001d00 <MX_GPIO_Init+0x2e8>)
 8001cc0:	f004 f946 	bl	8005f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001cc4:	2310      	movs	r3, #16
 8001cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001cd0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4808      	ldr	r0, [pc, #32]	; (8001cf8 <MX_GPIO_Init+0x2e0>)
 8001cd8:	f004 f93a 	bl	8005f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001cdc:	f248 0304 	movw	r3, #32772	; 0x8004
 8001ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001cea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cee:	e017      	b.n	8001d20 <MX_GPIO_Init+0x308>
 8001cf0:	40023800 	.word	0x40023800
 8001cf4:	40020000 	.word	0x40020000
 8001cf8:	40020c00 	.word	0x40020c00
 8001cfc:	40022000 	.word	0x40022000
 8001d00:	40022800 	.word	0x40022800
 8001d04:	40021c00 	.word	0x40021c00
 8001d08:	40021800 	.word	0x40021800
 8001d0c:	40020400 	.word	0x40020400
 8001d10:	40021000 	.word	0x40021000
 8001d14:	40022400 	.word	0x40022400
 8001d18:	10120000 	.word	0x10120000
 8001d1c:	40020800 	.word	0x40020800
 8001d20:	4619      	mov	r1, r3
 8001d22:	486b      	ldr	r0, [pc, #428]	; (8001ed0 <MX_GPIO_Init+0x4b8>)
 8001d24:	f004 f914 	bl	8005f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8001d28:	2302      	movs	r3, #2
 8001d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d30:	2300      	movs	r3, #0
 8001d32:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d34:	2300      	movs	r3, #0
 8001d36:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d38:	2305      	movs	r3, #5
 8001d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8001d3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d40:	4619      	mov	r1, r3
 8001d42:	4864      	ldr	r0, [pc, #400]	; (8001ed4 <MX_GPIO_Init+0x4bc>)
 8001d44:	f004 f904 	bl	8005f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8001d48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d52:	2300      	movs	r3, #0
 8001d54:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d56:	2300      	movs	r3, #0
 8001d58:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001d5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d5e:	4619      	mov	r1, r3
 8001d60:	485b      	ldr	r0, [pc, #364]	; (8001ed0 <MX_GPIO_Init+0x4b8>)
 8001d62:	f004 f8f5 	bl	8005f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001d66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001d6c:	4b5a      	ldr	r3, [pc, #360]	; (8001ed8 <MX_GPIO_Init+0x4c0>)
 8001d6e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d70:	2300      	movs	r3, #0
 8001d72:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001d74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4856      	ldr	r0, [pc, #344]	; (8001ed4 <MX_GPIO_Init+0x4bc>)
 8001d7c:	f004 f8e8 	bl	8005f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001d80:	2310      	movs	r3, #16
 8001d82:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d84:	2302      	movs	r3, #2
 8001d86:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001d90:	230a      	movs	r3, #10
 8001d92:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001d94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d98:	4619      	mov	r1, r3
 8001d9a:	484d      	ldr	r0, [pc, #308]	; (8001ed0 <MX_GPIO_Init+0x4b8>)
 8001d9c:	f004 f8d8 	bl	8005f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001da0:	23c8      	movs	r3, #200	; 0xc8
 8001da2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001da4:	2301      	movs	r3, #1
 8001da6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da8:	2300      	movs	r3, #0
 8001daa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dac:	2300      	movs	r3, #0
 8001dae:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001db0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001db4:	4619      	mov	r1, r3
 8001db6:	4849      	ldr	r0, [pc, #292]	; (8001edc <MX_GPIO_Init+0x4c4>)
 8001db8:	f004 f8ca 	bl	8005f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001dbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001dca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dce:	4619      	mov	r1, r3
 8001dd0:	4843      	ldr	r0, [pc, #268]	; (8001ee0 <MX_GPIO_Init+0x4c8>)
 8001dd2:	f004 f8bd 	bl	8005f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001dd6:	2305      	movs	r3, #5
 8001dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dda:	2302      	movs	r3, #2
 8001ddc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dde:	2300      	movs	r3, #0
 8001de0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001de2:	2303      	movs	r3, #3
 8001de4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001de6:	230a      	movs	r3, #10
 8001de8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dee:	4619      	mov	r1, r3
 8001df0:	483c      	ldr	r0, [pc, #240]	; (8001ee4 <MX_GPIO_Init+0x4cc>)
 8001df2:	f004 f8ad 	bl	8005f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001df6:	2332      	movs	r3, #50	; 0x32
 8001df8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e02:	2303      	movs	r3, #3
 8001e04:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e06:	230b      	movs	r3, #11
 8001e08:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e0e:	4619      	mov	r1, r3
 8001e10:	4834      	ldr	r0, [pc, #208]	; (8001ee4 <MX_GPIO_Init+0x4cc>)
 8001e12:	f004 f89d 	bl	8005f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001e16:	2304      	movs	r3, #4
 8001e18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001e22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e26:	4619      	mov	r1, r3
 8001e28:	482c      	ldr	r0, [pc, #176]	; (8001edc <MX_GPIO_Init+0x4c4>)
 8001e2a:	f004 f891 	bl	8005f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001e2e:	2386      	movs	r3, #134	; 0x86
 8001e30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e32:	2302      	movs	r3, #2
 8001e34:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e36:	2300      	movs	r3, #0
 8001e38:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e3e:	230b      	movs	r3, #11
 8001e40:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e46:	4619      	mov	r1, r3
 8001e48:	4827      	ldr	r0, [pc, #156]	; (8001ee8 <MX_GPIO_Init+0x4d0>)
 8001e4a:	f004 f881 	bl	8005f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e52:	2303      	movs	r3, #3
 8001e54:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e56:	2300      	movs	r3, #0
 8001e58:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e5e:	4619      	mov	r1, r3
 8001e60:	4821      	ldr	r0, [pc, #132]	; (8001ee8 <MX_GPIO_Init+0x4d0>)
 8001e62:	f004 f875 	bl	8005f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001e66:	2328      	movs	r3, #40	; 0x28
 8001e68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e72:	2303      	movs	r3, #3
 8001e74:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001e76:	230a      	movs	r3, #10
 8001e78:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e7e:	4619      	mov	r1, r3
 8001e80:	4819      	ldr	r0, [pc, #100]	; (8001ee8 <MX_GPIO_Init+0x4d0>)
 8001e82:	f004 f865 	bl	8005f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_MISO_D12_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin;
 8001e86:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e90:	2300      	movs	r3, #0
 8001e92:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e94:	2300      	movs	r3, #0
 8001e96:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e98:	2305      	movs	r3, #5
 8001e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_MISO_D12_GPIO_Port, &GPIO_InitStruct);
 8001e9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4812      	ldr	r0, [pc, #72]	; (8001eec <MX_GPIO_Init+0x4d4>)
 8001ea4:	f004 f854 	bl	8005f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001ea8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001eac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	480a      	ldr	r0, [pc, #40]	; (8001eec <MX_GPIO_Init+0x4d4>)
 8001ec2:	f004 f845 	bl	8005f50 <HAL_GPIO_Init>

}
 8001ec6:	bf00      	nop
 8001ec8:	3740      	adds	r7, #64	; 0x40
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	40021c00 	.word	0x40021c00
 8001ed4:	40022000 	.word	0x40022000
 8001ed8:	10120000 	.word	0x10120000
 8001edc:	40021800 	.word	0x40021800
 8001ee0:	40021400 	.word	0x40021400
 8001ee4:	40020800 	.word	0x40020800
 8001ee8:	40020000 	.word	0x40020000
 8001eec:	40020400 	.word	0x40020400

08001ef0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ef4:	b672      	cpsid	i
}
 8001ef6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ef8:	e7fe      	b.n	8001ef8 <Error_Handler+0x8>
	...

08001efc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001f02:	4b0f      	ldr	r3, [pc, #60]	; (8001f40 <HAL_MspInit+0x44>)
 8001f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f06:	4a0e      	ldr	r2, [pc, #56]	; (8001f40 <HAL_MspInit+0x44>)
 8001f08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f0e:	4b0c      	ldr	r3, [pc, #48]	; (8001f40 <HAL_MspInit+0x44>)
 8001f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f16:	607b      	str	r3, [r7, #4]
 8001f18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f1a:	4b09      	ldr	r3, [pc, #36]	; (8001f40 <HAL_MspInit+0x44>)
 8001f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1e:	4a08      	ldr	r2, [pc, #32]	; (8001f40 <HAL_MspInit+0x44>)
 8001f20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f24:	6453      	str	r3, [r2, #68]	; 0x44
 8001f26:	4b06      	ldr	r3, [pc, #24]	; (8001f40 <HAL_MspInit+0x44>)
 8001f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f2e:	603b      	str	r3, [r7, #0]
 8001f30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f32:	bf00      	nop
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	40023800 	.word	0x40023800

08001f44 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b08a      	sub	sp, #40	; 0x28
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f4c:	f107 0314 	add.w	r3, r7, #20
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	605a      	str	r2, [r3, #4]
 8001f56:	609a      	str	r2, [r3, #8]
 8001f58:	60da      	str	r2, [r3, #12]
 8001f5a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a3d      	ldr	r2, [pc, #244]	; (8002058 <HAL_ADC_MspInit+0x114>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d174      	bne.n	8002050 <HAL_ADC_MspInit+0x10c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001f66:	4b3d      	ldr	r3, [pc, #244]	; (800205c <HAL_ADC_MspInit+0x118>)
 8001f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6a:	4a3c      	ldr	r2, [pc, #240]	; (800205c <HAL_ADC_MspInit+0x118>)
 8001f6c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f70:	6453      	str	r3, [r2, #68]	; 0x44
 8001f72:	4b3a      	ldr	r3, [pc, #232]	; (800205c <HAL_ADC_MspInit+0x118>)
 8001f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f7a:	613b      	str	r3, [r7, #16]
 8001f7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f7e:	4b37      	ldr	r3, [pc, #220]	; (800205c <HAL_ADC_MspInit+0x118>)
 8001f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f82:	4a36      	ldr	r2, [pc, #216]	; (800205c <HAL_ADC_MspInit+0x118>)
 8001f84:	f043 0320 	orr.w	r3, r3, #32
 8001f88:	6313      	str	r3, [r2, #48]	; 0x30
 8001f8a:	4b34      	ldr	r3, [pc, #208]	; (800205c <HAL_ADC_MspInit+0x118>)
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8e:	f003 0320 	and.w	r3, r3, #32
 8001f92:	60fb      	str	r3, [r7, #12]
 8001f94:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f96:	4b31      	ldr	r3, [pc, #196]	; (800205c <HAL_ADC_MspInit+0x118>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9a:	4a30      	ldr	r2, [pc, #192]	; (800205c <HAL_ADC_MspInit+0x118>)
 8001f9c:	f043 0301 	orr.w	r3, r3, #1
 8001fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fa2:	4b2e      	ldr	r3, [pc, #184]	; (800205c <HAL_ADC_MspInit+0x118>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	60bb      	str	r3, [r7, #8]
 8001fac:	68bb      	ldr	r3, [r7, #8]
    PF6     ------> ADC3_IN4
    PF10     ------> ADC3_IN8
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|GPIO_PIN_10|ARDUINO_A3_Pin;
 8001fae:	f44f 63b8 	mov.w	r3, #1472	; 0x5c0
 8001fb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001fbc:	f107 0314 	add.w	r3, r7, #20
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4827      	ldr	r0, [pc, #156]	; (8002060 <HAL_ADC_MspInit+0x11c>)
 8001fc4:	f003 ffc4 	bl	8005f50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fd4:	f107 0314 	add.w	r3, r7, #20
 8001fd8:	4619      	mov	r1, r3
 8001fda:	4822      	ldr	r0, [pc, #136]	; (8002064 <HAL_ADC_MspInit+0x120>)
 8001fdc:	f003 ffb8 	bl	8005f50 <HAL_GPIO_Init>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA2_Stream0;
 8001fe0:	4b21      	ldr	r3, [pc, #132]	; (8002068 <HAL_ADC_MspInit+0x124>)
 8001fe2:	4a22      	ldr	r2, [pc, #136]	; (800206c <HAL_ADC_MspInit+0x128>)
 8001fe4:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8001fe6:	4b20      	ldr	r3, [pc, #128]	; (8002068 <HAL_ADC_MspInit+0x124>)
 8001fe8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001fec:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fee:	4b1e      	ldr	r3, [pc, #120]	; (8002068 <HAL_ADC_MspInit+0x124>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ff4:	4b1c      	ldr	r3, [pc, #112]	; (8002068 <HAL_ADC_MspInit+0x124>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001ffa:	4b1b      	ldr	r3, [pc, #108]	; (8002068 <HAL_ADC_MspInit+0x124>)
 8001ffc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002000:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002002:	4b19      	ldr	r3, [pc, #100]	; (8002068 <HAL_ADC_MspInit+0x124>)
 8002004:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002008:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800200a:	4b17      	ldr	r3, [pc, #92]	; (8002068 <HAL_ADC_MspInit+0x124>)
 800200c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002010:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 8002012:	4b15      	ldr	r3, [pc, #84]	; (8002068 <HAL_ADC_MspInit+0x124>)
 8002014:	2200      	movs	r2, #0
 8002016:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8002018:	4b13      	ldr	r3, [pc, #76]	; (8002068 <HAL_ADC_MspInit+0x124>)
 800201a:	2200      	movs	r2, #0
 800201c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800201e:	4b12      	ldr	r3, [pc, #72]	; (8002068 <HAL_ADC_MspInit+0x124>)
 8002020:	2200      	movs	r2, #0
 8002022:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002024:	4810      	ldr	r0, [pc, #64]	; (8002068 <HAL_ADC_MspInit+0x124>)
 8002026:	f002 ff8f 	bl	8004f48 <HAL_DMA_Init>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <HAL_ADC_MspInit+0xf0>
    {
      Error_Handler();
 8002030:	f7ff ff5e 	bl	8001ef0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4a0c      	ldr	r2, [pc, #48]	; (8002068 <HAL_ADC_MspInit+0x124>)
 8002038:	639a      	str	r2, [r3, #56]	; 0x38
 800203a:	4a0b      	ldr	r2, [pc, #44]	; (8002068 <HAL_ADC_MspInit+0x124>)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002040:	2200      	movs	r2, #0
 8002042:	2100      	movs	r1, #0
 8002044:	2012      	movs	r0, #18
 8002046:	f002 fdf1 	bl	8004c2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800204a:	2012      	movs	r0, #18
 800204c:	f002 fe0a 	bl	8004c64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002050:	bf00      	nop
 8002052:	3728      	adds	r7, #40	; 0x28
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	40012200 	.word	0x40012200
 800205c:	40023800 	.word	0x40023800
 8002060:	40021400 	.word	0x40021400
 8002064:	40020000 	.word	0x40020000
 8002068:	20002228 	.word	0x20002228
 800206c:	40026410 	.word	0x40026410

08002070 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002070:	b480      	push	{r7}
 8002072:	b085      	sub	sp, #20
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a0a      	ldr	r2, [pc, #40]	; (80020a8 <HAL_CRC_MspInit+0x38>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d10b      	bne.n	800209a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002082:	4b0a      	ldr	r3, [pc, #40]	; (80020ac <HAL_CRC_MspInit+0x3c>)
 8002084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002086:	4a09      	ldr	r2, [pc, #36]	; (80020ac <HAL_CRC_MspInit+0x3c>)
 8002088:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800208c:	6313      	str	r3, [r2, #48]	; 0x30
 800208e:	4b07      	ldr	r3, [pc, #28]	; (80020ac <HAL_CRC_MspInit+0x3c>)
 8002090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002092:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002096:	60fb      	str	r3, [r7, #12]
 8002098:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800209a:	bf00      	nop
 800209c:	3714      	adds	r7, #20
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	40023000 	.word	0x40023000
 80020ac:	40023800 	.word	0x40023800

080020b0 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b08e      	sub	sp, #56	; 0x38
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	605a      	str	r2, [r3, #4]
 80020c2:	609a      	str	r2, [r3, #8]
 80020c4:	60da      	str	r2, [r3, #12]
 80020c6:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a50      	ldr	r2, [pc, #320]	; (8002210 <HAL_DCMI_MspInit+0x160>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	f040 809a 	bne.w	8002208 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 80020d4:	4b4f      	ldr	r3, [pc, #316]	; (8002214 <HAL_DCMI_MspInit+0x164>)
 80020d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020d8:	4a4e      	ldr	r2, [pc, #312]	; (8002214 <HAL_DCMI_MspInit+0x164>)
 80020da:	f043 0301 	orr.w	r3, r3, #1
 80020de:	6353      	str	r3, [r2, #52]	; 0x34
 80020e0:	4b4c      	ldr	r3, [pc, #304]	; (8002214 <HAL_DCMI_MspInit+0x164>)
 80020e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020e4:	f003 0301 	and.w	r3, r3, #1
 80020e8:	623b      	str	r3, [r7, #32]
 80020ea:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80020ec:	4b49      	ldr	r3, [pc, #292]	; (8002214 <HAL_DCMI_MspInit+0x164>)
 80020ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f0:	4a48      	ldr	r2, [pc, #288]	; (8002214 <HAL_DCMI_MspInit+0x164>)
 80020f2:	f043 0310 	orr.w	r3, r3, #16
 80020f6:	6313      	str	r3, [r2, #48]	; 0x30
 80020f8:	4b46      	ldr	r3, [pc, #280]	; (8002214 <HAL_DCMI_MspInit+0x164>)
 80020fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fc:	f003 0310 	and.w	r3, r3, #16
 8002100:	61fb      	str	r3, [r7, #28]
 8002102:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002104:	4b43      	ldr	r3, [pc, #268]	; (8002214 <HAL_DCMI_MspInit+0x164>)
 8002106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002108:	4a42      	ldr	r2, [pc, #264]	; (8002214 <HAL_DCMI_MspInit+0x164>)
 800210a:	f043 0308 	orr.w	r3, r3, #8
 800210e:	6313      	str	r3, [r2, #48]	; 0x30
 8002110:	4b40      	ldr	r3, [pc, #256]	; (8002214 <HAL_DCMI_MspInit+0x164>)
 8002112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002114:	f003 0308 	and.w	r3, r3, #8
 8002118:	61bb      	str	r3, [r7, #24]
 800211a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800211c:	4b3d      	ldr	r3, [pc, #244]	; (8002214 <HAL_DCMI_MspInit+0x164>)
 800211e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002120:	4a3c      	ldr	r2, [pc, #240]	; (8002214 <HAL_DCMI_MspInit+0x164>)
 8002122:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002126:	6313      	str	r3, [r2, #48]	; 0x30
 8002128:	4b3a      	ldr	r3, [pc, #232]	; (8002214 <HAL_DCMI_MspInit+0x164>)
 800212a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002130:	617b      	str	r3, [r7, #20]
 8002132:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002134:	4b37      	ldr	r3, [pc, #220]	; (8002214 <HAL_DCMI_MspInit+0x164>)
 8002136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002138:	4a36      	ldr	r2, [pc, #216]	; (8002214 <HAL_DCMI_MspInit+0x164>)
 800213a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800213e:	6313      	str	r3, [r2, #48]	; 0x30
 8002140:	4b34      	ldr	r3, [pc, #208]	; (8002214 <HAL_DCMI_MspInit+0x164>)
 8002142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002144:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002148:	613b      	str	r3, [r7, #16]
 800214a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800214c:	4b31      	ldr	r3, [pc, #196]	; (8002214 <HAL_DCMI_MspInit+0x164>)
 800214e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002150:	4a30      	ldr	r2, [pc, #192]	; (8002214 <HAL_DCMI_MspInit+0x164>)
 8002152:	f043 0301 	orr.w	r3, r3, #1
 8002156:	6313      	str	r3, [r2, #48]	; 0x30
 8002158:	4b2e      	ldr	r3, [pc, #184]	; (8002214 <HAL_DCMI_MspInit+0x164>)
 800215a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215c:	f003 0301 	and.w	r3, r3, #1
 8002160:	60fb      	str	r3, [r7, #12]
 8002162:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8002164:	2360      	movs	r3, #96	; 0x60
 8002166:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002168:	2302      	movs	r3, #2
 800216a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216c:	2300      	movs	r3, #0
 800216e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002170:	2300      	movs	r3, #0
 8002172:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002174:	230d      	movs	r3, #13
 8002176:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002178:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800217c:	4619      	mov	r1, r3
 800217e:	4826      	ldr	r0, [pc, #152]	; (8002218 <HAL_DCMI_MspInit+0x168>)
 8002180:	f003 fee6 	bl	8005f50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8002184:	2308      	movs	r3, #8
 8002186:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002188:	2302      	movs	r3, #2
 800218a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218c:	2300      	movs	r3, #0
 800218e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002190:	2300      	movs	r3, #0
 8002192:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002194:	230d      	movs	r3, #13
 8002196:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8002198:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800219c:	4619      	mov	r1, r3
 800219e:	481f      	ldr	r0, [pc, #124]	; (800221c <HAL_DCMI_MspInit+0x16c>)
 80021a0:	f003 fed6 	bl	8005f50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80021a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021aa:	2302      	movs	r3, #2
 80021ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ae:	2300      	movs	r3, #0
 80021b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b2:	2300      	movs	r3, #0
 80021b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80021b6:	230d      	movs	r3, #13
 80021b8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80021ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021be:	4619      	mov	r1, r3
 80021c0:	4817      	ldr	r0, [pc, #92]	; (8002220 <HAL_DCMI_MspInit+0x170>)
 80021c2:	f003 fec5 	bl	8005f50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 80021c6:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 80021ca:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021cc:	2302      	movs	r3, #2
 80021ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d0:	2300      	movs	r3, #0
 80021d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d4:	2300      	movs	r3, #0
 80021d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80021d8:	230d      	movs	r3, #13
 80021da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80021dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021e0:	4619      	mov	r1, r3
 80021e2:	4810      	ldr	r0, [pc, #64]	; (8002224 <HAL_DCMI_MspInit+0x174>)
 80021e4:	f003 feb4 	bl	8005f50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 80021e8:	2350      	movs	r3, #80	; 0x50
 80021ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ec:	2302      	movs	r3, #2
 80021ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f0:	2300      	movs	r3, #0
 80021f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f4:	2300      	movs	r3, #0
 80021f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80021f8:	230d      	movs	r3, #13
 80021fa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002200:	4619      	mov	r1, r3
 8002202:	4809      	ldr	r0, [pc, #36]	; (8002228 <HAL_DCMI_MspInit+0x178>)
 8002204:	f003 fea4 	bl	8005f50 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8002208:	bf00      	nop
 800220a:	3738      	adds	r7, #56	; 0x38
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	50050000 	.word	0x50050000
 8002214:	40023800 	.word	0x40023800
 8002218:	40021000 	.word	0x40021000
 800221c:	40020c00 	.word	0x40020c00
 8002220:	40021800 	.word	0x40021800
 8002224:	40021c00 	.word	0x40021c00
 8002228:	40020000 	.word	0x40020000

0800222c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a0d      	ldr	r2, [pc, #52]	; (8002270 <HAL_DMA2D_MspInit+0x44>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d113      	bne.n	8002266 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800223e:	4b0d      	ldr	r3, [pc, #52]	; (8002274 <HAL_DMA2D_MspInit+0x48>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002242:	4a0c      	ldr	r2, [pc, #48]	; (8002274 <HAL_DMA2D_MspInit+0x48>)
 8002244:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002248:	6313      	str	r3, [r2, #48]	; 0x30
 800224a:	4b0a      	ldr	r3, [pc, #40]	; (8002274 <HAL_DMA2D_MspInit+0x48>)
 800224c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002252:	60fb      	str	r3, [r7, #12]
 8002254:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8002256:	2200      	movs	r2, #0
 8002258:	2100      	movs	r1, #0
 800225a:	205a      	movs	r0, #90	; 0x5a
 800225c:	f002 fce6 	bl	8004c2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002260:	205a      	movs	r0, #90	; 0x5a
 8002262:	f002 fcff 	bl	8004c64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8002266:	bf00      	nop
 8002268:	3710      	adds	r7, #16
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	4002b000 	.word	0x4002b000
 8002274:	40023800 	.word	0x40023800

08002278 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b0aa      	sub	sp, #168	; 0xa8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002280:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]
 8002288:	605a      	str	r2, [r3, #4]
 800228a:	609a      	str	r2, [r3, #8]
 800228c:	60da      	str	r2, [r3, #12]
 800228e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002290:	f107 0310 	add.w	r3, r7, #16
 8002294:	2284      	movs	r2, #132	; 0x84
 8002296:	2100      	movs	r1, #0
 8002298:	4618      	mov	r0, r3
 800229a:	f00d f833 	bl	800f304 <memset>
  if(hi2c->Instance==I2C3)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a22      	ldr	r2, [pc, #136]	; (800232c <HAL_I2C_MspInit+0xb4>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d13c      	bne.n	8002322 <HAL_I2C_MspInit+0xaa>
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80022a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022ac:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80022ae:	2300      	movs	r3, #0
 80022b0:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022b2:	f107 0310 	add.w	r3, r7, #16
 80022b6:	4618      	mov	r0, r3
 80022b8:	f005 faf8 	bl	80078ac <HAL_RCCEx_PeriphCLKConfig>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80022c2:	f7ff fe15 	bl	8001ef0 <Error_Handler>
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 80022c6:	4b1a      	ldr	r3, [pc, #104]	; (8002330 <HAL_I2C_MspInit+0xb8>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ca:	4a19      	ldr	r2, [pc, #100]	; (8002330 <HAL_I2C_MspInit+0xb8>)
 80022cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022d0:	6313      	str	r3, [r2, #48]	; 0x30
 80022d2:	4b17      	ldr	r3, [pc, #92]	; (8002330 <HAL_I2C_MspInit+0xb8>)
 80022d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022da:	60fb      	str	r3, [r7, #12]
 80022dc:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80022de:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80022e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022e6:	2312      	movs	r3, #18
 80022e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022ec:	2301      	movs	r3, #1
 80022ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022f2:	2303      	movs	r3, #3
 80022f4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80022f8:	2304      	movs	r3, #4
 80022fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80022fe:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002302:	4619      	mov	r1, r3
 8002304:	480b      	ldr	r0, [pc, #44]	; (8002334 <HAL_I2C_MspInit+0xbc>)
 8002306:	f003 fe23 	bl	8005f50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800230a:	4b09      	ldr	r3, [pc, #36]	; (8002330 <HAL_I2C_MspInit+0xb8>)
 800230c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230e:	4a08      	ldr	r2, [pc, #32]	; (8002330 <HAL_I2C_MspInit+0xb8>)
 8002310:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002314:	6413      	str	r3, [r2, #64]	; 0x40
 8002316:	4b06      	ldr	r3, [pc, #24]	; (8002330 <HAL_I2C_MspInit+0xb8>)
 8002318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800231e:	60bb      	str	r3, [r7, #8]
 8002320:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002322:	bf00      	nop
 8002324:	37a8      	adds	r7, #168	; 0xa8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	40005c00 	.word	0x40005c00
 8002330:	40023800 	.word	0x40023800
 8002334:	40021c00 	.word	0x40021c00

08002338 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b08e      	sub	sp, #56	; 0x38
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002340:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002344:	2200      	movs	r2, #0
 8002346:	601a      	str	r2, [r3, #0]
 8002348:	605a      	str	r2, [r3, #4]
 800234a:	609a      	str	r2, [r3, #8]
 800234c:	60da      	str	r2, [r3, #12]
 800234e:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a55      	ldr	r2, [pc, #340]	; (80024ac <HAL_LTDC_MspInit+0x174>)
 8002356:	4293      	cmp	r3, r2
 8002358:	f040 80a3 	bne.w	80024a2 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800235c:	4b54      	ldr	r3, [pc, #336]	; (80024b0 <HAL_LTDC_MspInit+0x178>)
 800235e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002360:	4a53      	ldr	r2, [pc, #332]	; (80024b0 <HAL_LTDC_MspInit+0x178>)
 8002362:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002366:	6453      	str	r3, [r2, #68]	; 0x44
 8002368:	4b51      	ldr	r3, [pc, #324]	; (80024b0 <HAL_LTDC_MspInit+0x178>)
 800236a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002370:	623b      	str	r3, [r7, #32]
 8002372:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002374:	4b4e      	ldr	r3, [pc, #312]	; (80024b0 <HAL_LTDC_MspInit+0x178>)
 8002376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002378:	4a4d      	ldr	r2, [pc, #308]	; (80024b0 <HAL_LTDC_MspInit+0x178>)
 800237a:	f043 0310 	orr.w	r3, r3, #16
 800237e:	6313      	str	r3, [r2, #48]	; 0x30
 8002380:	4b4b      	ldr	r3, [pc, #300]	; (80024b0 <HAL_LTDC_MspInit+0x178>)
 8002382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002384:	f003 0310 	and.w	r3, r3, #16
 8002388:	61fb      	str	r3, [r7, #28]
 800238a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800238c:	4b48      	ldr	r3, [pc, #288]	; (80024b0 <HAL_LTDC_MspInit+0x178>)
 800238e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002390:	4a47      	ldr	r2, [pc, #284]	; (80024b0 <HAL_LTDC_MspInit+0x178>)
 8002392:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002396:	6313      	str	r3, [r2, #48]	; 0x30
 8002398:	4b45      	ldr	r3, [pc, #276]	; (80024b0 <HAL_LTDC_MspInit+0x178>)
 800239a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023a0:	61bb      	str	r3, [r7, #24]
 80023a2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 80023a4:	4b42      	ldr	r3, [pc, #264]	; (80024b0 <HAL_LTDC_MspInit+0x178>)
 80023a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a8:	4a41      	ldr	r2, [pc, #260]	; (80024b0 <HAL_LTDC_MspInit+0x178>)
 80023aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023ae:	6313      	str	r3, [r2, #48]	; 0x30
 80023b0:	4b3f      	ldr	r3, [pc, #252]	; (80024b0 <HAL_LTDC_MspInit+0x178>)
 80023b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023b8:	617b      	str	r3, [r7, #20]
 80023ba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80023bc:	4b3c      	ldr	r3, [pc, #240]	; (80024b0 <HAL_LTDC_MspInit+0x178>)
 80023be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c0:	4a3b      	ldr	r2, [pc, #236]	; (80024b0 <HAL_LTDC_MspInit+0x178>)
 80023c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023c6:	6313      	str	r3, [r2, #48]	; 0x30
 80023c8:	4b39      	ldr	r3, [pc, #228]	; (80024b0 <HAL_LTDC_MspInit+0x178>)
 80023ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023d0:	613b      	str	r3, [r7, #16]
 80023d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80023d4:	4b36      	ldr	r3, [pc, #216]	; (80024b0 <HAL_LTDC_MspInit+0x178>)
 80023d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d8:	4a35      	ldr	r2, [pc, #212]	; (80024b0 <HAL_LTDC_MspInit+0x178>)
 80023da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023de:	6313      	str	r3, [r2, #48]	; 0x30
 80023e0:	4b33      	ldr	r3, [pc, #204]	; (80024b0 <HAL_LTDC_MspInit+0x178>)
 80023e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e8:	60fb      	str	r3, [r7, #12]
 80023ea:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 80023ec:	2310      	movs	r3, #16
 80023ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f0:	2302      	movs	r3, #2
 80023f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f4:	2300      	movs	r3, #0
 80023f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f8:	2300      	movs	r3, #0
 80023fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80023fc:	230e      	movs	r3, #14
 80023fe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8002400:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002404:	4619      	mov	r1, r3
 8002406:	482b      	ldr	r0, [pc, #172]	; (80024b4 <HAL_LTDC_MspInit+0x17c>)
 8002408:	f003 fda2 	bl	8005f50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 800240c:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8002410:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002412:	2302      	movs	r3, #2
 8002414:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002416:	2300      	movs	r3, #0
 8002418:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800241a:	2300      	movs	r3, #0
 800241c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800241e:	230e      	movs	r3, #14
 8002420:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002422:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002426:	4619      	mov	r1, r3
 8002428:	4823      	ldr	r0, [pc, #140]	; (80024b8 <HAL_LTDC_MspInit+0x180>)
 800242a:	f003 fd91 	bl	8005f50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 800242e:	23f7      	movs	r3, #247	; 0xf7
 8002430:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002432:	2302      	movs	r3, #2
 8002434:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002436:	2300      	movs	r3, #0
 8002438:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800243a:	2300      	movs	r3, #0
 800243c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800243e:	230e      	movs	r3, #14
 8002440:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002442:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002446:	4619      	mov	r1, r3
 8002448:	481c      	ldr	r0, [pc, #112]	; (80024bc <HAL_LTDC_MspInit+0x184>)
 800244a:	f003 fd81 	bl	8005f50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 800244e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002452:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002454:	2302      	movs	r3, #2
 8002456:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002458:	2300      	movs	r3, #0
 800245a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800245c:	2300      	movs	r3, #0
 800245e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002460:	2309      	movs	r3, #9
 8002462:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8002464:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002468:	4619      	mov	r1, r3
 800246a:	4815      	ldr	r0, [pc, #84]	; (80024c0 <HAL_LTDC_MspInit+0x188>)
 800246c:	f003 fd70 	bl	8005f50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8002470:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8002474:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002476:	2302      	movs	r3, #2
 8002478:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247a:	2300      	movs	r3, #0
 800247c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800247e:	2300      	movs	r3, #0
 8002480:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002482:	230e      	movs	r3, #14
 8002484:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002486:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800248a:	4619      	mov	r1, r3
 800248c:	480d      	ldr	r0, [pc, #52]	; (80024c4 <HAL_LTDC_MspInit+0x18c>)
 800248e:	f003 fd5f 	bl	8005f50 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8002492:	2200      	movs	r2, #0
 8002494:	2100      	movs	r1, #0
 8002496:	2058      	movs	r0, #88	; 0x58
 8002498:	f002 fbc8 	bl	8004c2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800249c:	2058      	movs	r0, #88	; 0x58
 800249e:	f002 fbe1 	bl	8004c64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80024a2:	bf00      	nop
 80024a4:	3738      	adds	r7, #56	; 0x38
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	40016800 	.word	0x40016800
 80024b0:	40023800 	.word	0x40023800
 80024b4:	40021000 	.word	0x40021000
 80024b8:	40022400 	.word	0x40022400
 80024bc:	40022800 	.word	0x40022800
 80024c0:	40021800 	.word	0x40021800
 80024c4:	40022000 	.word	0x40022000

080024c8 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b08c      	sub	sp, #48	; 0x30
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d0:	f107 031c 	add.w	r3, r7, #28
 80024d4:	2200      	movs	r2, #0
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	605a      	str	r2, [r3, #4]
 80024da:	609a      	str	r2, [r3, #8]
 80024dc:	60da      	str	r2, [r3, #12]
 80024de:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a3b      	ldr	r2, [pc, #236]	; (80025d4 <HAL_QSPI_MspInit+0x10c>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d170      	bne.n	80025cc <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80024ea:	4b3b      	ldr	r3, [pc, #236]	; (80025d8 <HAL_QSPI_MspInit+0x110>)
 80024ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ee:	4a3a      	ldr	r2, [pc, #232]	; (80025d8 <HAL_QSPI_MspInit+0x110>)
 80024f0:	f043 0302 	orr.w	r3, r3, #2
 80024f4:	6393      	str	r3, [r2, #56]	; 0x38
 80024f6:	4b38      	ldr	r3, [pc, #224]	; (80025d8 <HAL_QSPI_MspInit+0x110>)
 80024f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	61bb      	str	r3, [r7, #24]
 8002500:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002502:	4b35      	ldr	r3, [pc, #212]	; (80025d8 <HAL_QSPI_MspInit+0x110>)
 8002504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002506:	4a34      	ldr	r2, [pc, #208]	; (80025d8 <HAL_QSPI_MspInit+0x110>)
 8002508:	f043 0310 	orr.w	r3, r3, #16
 800250c:	6313      	str	r3, [r2, #48]	; 0x30
 800250e:	4b32      	ldr	r3, [pc, #200]	; (80025d8 <HAL_QSPI_MspInit+0x110>)
 8002510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002512:	f003 0310 	and.w	r3, r3, #16
 8002516:	617b      	str	r3, [r7, #20]
 8002518:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800251a:	4b2f      	ldr	r3, [pc, #188]	; (80025d8 <HAL_QSPI_MspInit+0x110>)
 800251c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251e:	4a2e      	ldr	r2, [pc, #184]	; (80025d8 <HAL_QSPI_MspInit+0x110>)
 8002520:	f043 0302 	orr.w	r3, r3, #2
 8002524:	6313      	str	r3, [r2, #48]	; 0x30
 8002526:	4b2c      	ldr	r3, [pc, #176]	; (80025d8 <HAL_QSPI_MspInit+0x110>)
 8002528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	613b      	str	r3, [r7, #16]
 8002530:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002532:	4b29      	ldr	r3, [pc, #164]	; (80025d8 <HAL_QSPI_MspInit+0x110>)
 8002534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002536:	4a28      	ldr	r2, [pc, #160]	; (80025d8 <HAL_QSPI_MspInit+0x110>)
 8002538:	f043 0308 	orr.w	r3, r3, #8
 800253c:	6313      	str	r3, [r2, #48]	; 0x30
 800253e:	4b26      	ldr	r3, [pc, #152]	; (80025d8 <HAL_QSPI_MspInit+0x110>)
 8002540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002542:	f003 0308 	and.w	r3, r3, #8
 8002546:	60fb      	str	r3, [r7, #12]
 8002548:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800254a:	2304      	movs	r3, #4
 800254c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800254e:	2302      	movs	r3, #2
 8002550:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002552:	2300      	movs	r3, #0
 8002554:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002556:	2303      	movs	r3, #3
 8002558:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800255a:	2309      	movs	r3, #9
 800255c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800255e:	f107 031c 	add.w	r3, r7, #28
 8002562:	4619      	mov	r1, r3
 8002564:	481d      	ldr	r0, [pc, #116]	; (80025dc <HAL_QSPI_MspInit+0x114>)
 8002566:	f003 fcf3 	bl	8005f50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800256a:	2340      	movs	r3, #64	; 0x40
 800256c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800256e:	2302      	movs	r3, #2
 8002570:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002572:	2300      	movs	r3, #0
 8002574:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002576:	2303      	movs	r3, #3
 8002578:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800257a:	230a      	movs	r3, #10
 800257c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800257e:	f107 031c 	add.w	r3, r7, #28
 8002582:	4619      	mov	r1, r3
 8002584:	4816      	ldr	r0, [pc, #88]	; (80025e0 <HAL_QSPI_MspInit+0x118>)
 8002586:	f003 fce3 	bl	8005f50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800258a:	2304      	movs	r3, #4
 800258c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800258e:	2302      	movs	r3, #2
 8002590:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002592:	2300      	movs	r3, #0
 8002594:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002596:	2303      	movs	r3, #3
 8002598:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800259a:	2309      	movs	r3, #9
 800259c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800259e:	f107 031c 	add.w	r3, r7, #28
 80025a2:	4619      	mov	r1, r3
 80025a4:	480e      	ldr	r0, [pc, #56]	; (80025e0 <HAL_QSPI_MspInit+0x118>)
 80025a6:	f003 fcd3 	bl	8005f50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 80025aa:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80025ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b0:	2302      	movs	r3, #2
 80025b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b4:	2300      	movs	r3, #0
 80025b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025b8:	2303      	movs	r3, #3
 80025ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80025bc:	2309      	movs	r3, #9
 80025be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025c0:	f107 031c 	add.w	r3, r7, #28
 80025c4:	4619      	mov	r1, r3
 80025c6:	4807      	ldr	r0, [pc, #28]	; (80025e4 <HAL_QSPI_MspInit+0x11c>)
 80025c8:	f003 fcc2 	bl	8005f50 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80025cc:	bf00      	nop
 80025ce:	3730      	adds	r7, #48	; 0x30
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	a0001000 	.word	0xa0001000
 80025d8:	40023800 	.word	0x40023800
 80025dc:	40021000 	.word	0x40021000
 80025e0:	40020400 	.word	0x40020400
 80025e4:	40020c00 	.word	0x40020c00

080025e8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b0a4      	sub	sp, #144	; 0x90
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025f0:	f107 030c 	add.w	r3, r7, #12
 80025f4:	2284      	movs	r2, #132	; 0x84
 80025f6:	2100      	movs	r1, #0
 80025f8:	4618      	mov	r0, r3
 80025fa:	f00c fe83 	bl	800f304 <memset>
  if(hrtc->Instance==RTC)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a0e      	ldr	r2, [pc, #56]	; (800263c <HAL_RTC_MspInit+0x54>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d114      	bne.n	8002632 <HAL_RTC_MspInit+0x4a>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002608:	2320      	movs	r3, #32
 800260a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800260c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002610:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002612:	f107 030c 	add.w	r3, r7, #12
 8002616:	4618      	mov	r0, r3
 8002618:	f005 f948 	bl	80078ac <HAL_RCCEx_PeriphCLKConfig>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8002622:	f7ff fc65 	bl	8001ef0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002626:	4b06      	ldr	r3, [pc, #24]	; (8002640 <HAL_RTC_MspInit+0x58>)
 8002628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800262a:	4a05      	ldr	r2, [pc, #20]	; (8002640 <HAL_RTC_MspInit+0x58>)
 800262c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002630:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002632:	bf00      	nop
 8002634:	3790      	adds	r7, #144	; 0x90
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	40002800 	.word	0x40002800
 8002640:	40023800 	.word	0x40023800

08002644 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b0aa      	sub	sp, #168	; 0xa8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800264c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002650:	2200      	movs	r2, #0
 8002652:	601a      	str	r2, [r3, #0]
 8002654:	605a      	str	r2, [r3, #4]
 8002656:	609a      	str	r2, [r3, #8]
 8002658:	60da      	str	r2, [r3, #12]
 800265a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800265c:	f107 0310 	add.w	r3, r7, #16
 8002660:	2284      	movs	r2, #132	; 0x84
 8002662:	2100      	movs	r1, #0
 8002664:	4618      	mov	r0, r3
 8002666:	f00c fe4d 	bl	800f304 <memset>
  if(hspdifrx->Instance==SPDIFRX)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8002672:	d143      	bne.n	80026fc <HAL_SPDIFRX_MspInit+0xb8>
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 8002674:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002678:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 800267a:	2364      	movs	r3, #100	; 0x64
 800267c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 800267e:	2302      	movs	r3, #2
 8002680:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8002682:	2302      	movs	r3, #2
 8002684:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8002686:	2302      	movs	r3, #2
 8002688:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 800268a:	2301      	movs	r3, #1
 800268c:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800268e:	f107 0310 	add.w	r3, r7, #16
 8002692:	4618      	mov	r0, r3
 8002694:	f005 f90a 	bl	80078ac <HAL_RCCEx_PeriphCLKConfig>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <HAL_SPDIFRX_MspInit+0x5e>
    {
      Error_Handler();
 800269e:	f7ff fc27 	bl	8001ef0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 80026a2:	4b18      	ldr	r3, [pc, #96]	; (8002704 <HAL_SPDIFRX_MspInit+0xc0>)
 80026a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a6:	4a17      	ldr	r2, [pc, #92]	; (8002704 <HAL_SPDIFRX_MspInit+0xc0>)
 80026a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ac:	6413      	str	r3, [r2, #64]	; 0x40
 80026ae:	4b15      	ldr	r3, [pc, #84]	; (8002704 <HAL_SPDIFRX_MspInit+0xc0>)
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026b6:	60fb      	str	r3, [r7, #12]
 80026b8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80026ba:	4b12      	ldr	r3, [pc, #72]	; (8002704 <HAL_SPDIFRX_MspInit+0xc0>)
 80026bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026be:	4a11      	ldr	r2, [pc, #68]	; (8002704 <HAL_SPDIFRX_MspInit+0xc0>)
 80026c0:	f043 0308 	orr.w	r3, r3, #8
 80026c4:	6313      	str	r3, [r2, #48]	; 0x30
 80026c6:	4b0f      	ldr	r3, [pc, #60]	; (8002704 <HAL_SPDIFRX_MspInit+0xc0>)
 80026c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ca:	f003 0308 	and.w	r3, r3, #8
 80026ce:	60bb      	str	r3, [r7, #8]
 80026d0:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80026d2:	2380      	movs	r3, #128	; 0x80
 80026d4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d8:	2302      	movs	r3, #2
 80026da:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026de:	2300      	movs	r3, #0
 80026e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026e4:	2300      	movs	r3, #0
 80026e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80026ea:	2308      	movs	r3, #8
 80026ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80026f0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80026f4:	4619      	mov	r1, r3
 80026f6:	4804      	ldr	r0, [pc, #16]	; (8002708 <HAL_SPDIFRX_MspInit+0xc4>)
 80026f8:	f003 fc2a 	bl	8005f50 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 80026fc:	bf00      	nop
 80026fe:	37a8      	adds	r7, #168	; 0xa8
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	40023800 	.word	0x40023800
 8002708:	40020c00 	.word	0x40020c00

0800270c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b088      	sub	sp, #32
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a3a      	ldr	r2, [pc, #232]	; (8002804 <HAL_TIM_Base_MspInit+0xf8>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d10c      	bne.n	8002738 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800271e:	4b3a      	ldr	r3, [pc, #232]	; (8002808 <HAL_TIM_Base_MspInit+0xfc>)
 8002720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002722:	4a39      	ldr	r2, [pc, #228]	; (8002808 <HAL_TIM_Base_MspInit+0xfc>)
 8002724:	f043 0301 	orr.w	r3, r3, #1
 8002728:	6453      	str	r3, [r2, #68]	; 0x44
 800272a:	4b37      	ldr	r3, [pc, #220]	; (8002808 <HAL_TIM_Base_MspInit+0xfc>)
 800272c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	61fb      	str	r3, [r7, #28]
 8002734:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002736:	e060      	b.n	80027fa <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM2)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002740:	d10c      	bne.n	800275c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002742:	4b31      	ldr	r3, [pc, #196]	; (8002808 <HAL_TIM_Base_MspInit+0xfc>)
 8002744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002746:	4a30      	ldr	r2, [pc, #192]	; (8002808 <HAL_TIM_Base_MspInit+0xfc>)
 8002748:	f043 0301 	orr.w	r3, r3, #1
 800274c:	6413      	str	r3, [r2, #64]	; 0x40
 800274e:	4b2e      	ldr	r3, [pc, #184]	; (8002808 <HAL_TIM_Base_MspInit+0xfc>)
 8002750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	61bb      	str	r3, [r7, #24]
 8002758:	69bb      	ldr	r3, [r7, #24]
}
 800275a:	e04e      	b.n	80027fa <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM3)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a2a      	ldr	r2, [pc, #168]	; (800280c <HAL_TIM_Base_MspInit+0x100>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d10c      	bne.n	8002780 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002766:	4b28      	ldr	r3, [pc, #160]	; (8002808 <HAL_TIM_Base_MspInit+0xfc>)
 8002768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276a:	4a27      	ldr	r2, [pc, #156]	; (8002808 <HAL_TIM_Base_MspInit+0xfc>)
 800276c:	f043 0302 	orr.w	r3, r3, #2
 8002770:	6413      	str	r3, [r2, #64]	; 0x40
 8002772:	4b25      	ldr	r3, [pc, #148]	; (8002808 <HAL_TIM_Base_MspInit+0xfc>)
 8002774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	617b      	str	r3, [r7, #20]
 800277c:	697b      	ldr	r3, [r7, #20]
}
 800277e:	e03c      	b.n	80027fa <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM5)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a22      	ldr	r2, [pc, #136]	; (8002810 <HAL_TIM_Base_MspInit+0x104>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d10c      	bne.n	80027a4 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800278a:	4b1f      	ldr	r3, [pc, #124]	; (8002808 <HAL_TIM_Base_MspInit+0xfc>)
 800278c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278e:	4a1e      	ldr	r2, [pc, #120]	; (8002808 <HAL_TIM_Base_MspInit+0xfc>)
 8002790:	f043 0308 	orr.w	r3, r3, #8
 8002794:	6413      	str	r3, [r2, #64]	; 0x40
 8002796:	4b1c      	ldr	r3, [pc, #112]	; (8002808 <HAL_TIM_Base_MspInit+0xfc>)
 8002798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279a:	f003 0308 	and.w	r3, r3, #8
 800279e:	613b      	str	r3, [r7, #16]
 80027a0:	693b      	ldr	r3, [r7, #16]
}
 80027a2:	e02a      	b.n	80027fa <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM7)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a1a      	ldr	r2, [pc, #104]	; (8002814 <HAL_TIM_Base_MspInit+0x108>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d114      	bne.n	80027d8 <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80027ae:	4b16      	ldr	r3, [pc, #88]	; (8002808 <HAL_TIM_Base_MspInit+0xfc>)
 80027b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b2:	4a15      	ldr	r2, [pc, #84]	; (8002808 <HAL_TIM_Base_MspInit+0xfc>)
 80027b4:	f043 0320 	orr.w	r3, r3, #32
 80027b8:	6413      	str	r3, [r2, #64]	; 0x40
 80027ba:	4b13      	ldr	r3, [pc, #76]	; (8002808 <HAL_TIM_Base_MspInit+0xfc>)
 80027bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027be:	f003 0320 	and.w	r3, r3, #32
 80027c2:	60fb      	str	r3, [r7, #12]
 80027c4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80027c6:	2200      	movs	r2, #0
 80027c8:	2100      	movs	r1, #0
 80027ca:	2037      	movs	r0, #55	; 0x37
 80027cc:	f002 fa2e 	bl	8004c2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80027d0:	2037      	movs	r0, #55	; 0x37
 80027d2:	f002 fa47 	bl	8004c64 <HAL_NVIC_EnableIRQ>
}
 80027d6:	e010      	b.n	80027fa <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM8)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a0e      	ldr	r2, [pc, #56]	; (8002818 <HAL_TIM_Base_MspInit+0x10c>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d10b      	bne.n	80027fa <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80027e2:	4b09      	ldr	r3, [pc, #36]	; (8002808 <HAL_TIM_Base_MspInit+0xfc>)
 80027e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e6:	4a08      	ldr	r2, [pc, #32]	; (8002808 <HAL_TIM_Base_MspInit+0xfc>)
 80027e8:	f043 0302 	orr.w	r3, r3, #2
 80027ec:	6453      	str	r3, [r2, #68]	; 0x44
 80027ee:	4b06      	ldr	r3, [pc, #24]	; (8002808 <HAL_TIM_Base_MspInit+0xfc>)
 80027f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	60bb      	str	r3, [r7, #8]
 80027f8:	68bb      	ldr	r3, [r7, #8]
}
 80027fa:	bf00      	nop
 80027fc:	3720      	adds	r7, #32
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	40010000 	.word	0x40010000
 8002808:	40023800 	.word	0x40023800
 800280c:	40000400 	.word	0x40000400
 8002810:	40000c00 	.word	0x40000c00
 8002814:	40001400 	.word	0x40001400
 8002818:	40010400 	.word	0x40010400

0800281c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800281c:	b480      	push	{r7}
 800281e:	b085      	sub	sp, #20
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a0a      	ldr	r2, [pc, #40]	; (8002854 <HAL_TIM_PWM_MspInit+0x38>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d10b      	bne.n	8002846 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 800282e:	4b0a      	ldr	r3, [pc, #40]	; (8002858 <HAL_TIM_PWM_MspInit+0x3c>)
 8002830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002832:	4a09      	ldr	r2, [pc, #36]	; (8002858 <HAL_TIM_PWM_MspInit+0x3c>)
 8002834:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002838:	6413      	str	r3, [r2, #64]	; 0x40
 800283a:	4b07      	ldr	r3, [pc, #28]	; (8002858 <HAL_TIM_PWM_MspInit+0x3c>)
 800283c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002842:	60fb      	str	r3, [r7, #12]
 8002844:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8002846:	bf00      	nop
 8002848:	3714      	adds	r7, #20
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	40001800 	.word	0x40001800
 8002858:	40023800 	.word	0x40023800

0800285c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b08a      	sub	sp, #40	; 0x28
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002864:	f107 0314 	add.w	r3, r7, #20
 8002868:	2200      	movs	r2, #0
 800286a:	601a      	str	r2, [r3, #0]
 800286c:	605a      	str	r2, [r3, #4]
 800286e:	609a      	str	r2, [r3, #8]
 8002870:	60da      	str	r2, [r3, #12]
 8002872:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a33      	ldr	r2, [pc, #204]	; (8002948 <HAL_TIM_MspPostInit+0xec>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d11c      	bne.n	80028b8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800287e:	4b33      	ldr	r3, [pc, #204]	; (800294c <HAL_TIM_MspPostInit+0xf0>)
 8002880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002882:	4a32      	ldr	r2, [pc, #200]	; (800294c <HAL_TIM_MspPostInit+0xf0>)
 8002884:	f043 0302 	orr.w	r3, r3, #2
 8002888:	6313      	str	r3, [r2, #48]	; 0x30
 800288a:	4b30      	ldr	r3, [pc, #192]	; (800294c <HAL_TIM_MspPostInit+0xf0>)
 800288c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	613b      	str	r3, [r7, #16]
 8002894:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8002896:	2310      	movs	r3, #16
 8002898:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800289a:	2302      	movs	r3, #2
 800289c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289e:	2300      	movs	r3, #0
 80028a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a2:	2300      	movs	r3, #0
 80028a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80028a6:	2302      	movs	r3, #2
 80028a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80028aa:	f107 0314 	add.w	r3, r7, #20
 80028ae:	4619      	mov	r1, r3
 80028b0:	4827      	ldr	r0, [pc, #156]	; (8002950 <HAL_TIM_MspPostInit+0xf4>)
 80028b2:	f003 fb4d 	bl	8005f50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80028b6:	e042      	b.n	800293e <HAL_TIM_MspPostInit+0xe2>
  else if(htim->Instance==TIM5)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a25      	ldr	r2, [pc, #148]	; (8002954 <HAL_TIM_MspPostInit+0xf8>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d11c      	bne.n	80028fc <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80028c2:	4b22      	ldr	r3, [pc, #136]	; (800294c <HAL_TIM_MspPostInit+0xf0>)
 80028c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c6:	4a21      	ldr	r2, [pc, #132]	; (800294c <HAL_TIM_MspPostInit+0xf0>)
 80028c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028cc:	6313      	str	r3, [r2, #48]	; 0x30
 80028ce:	4b1f      	ldr	r3, [pc, #124]	; (800294c <HAL_TIM_MspPostInit+0xf0>)
 80028d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d6:	60fb      	str	r3, [r7, #12]
 80028d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 80028da:	2301      	movs	r3, #1
 80028dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028de:	2302      	movs	r3, #2
 80028e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e2:	2300      	movs	r3, #0
 80028e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e6:	2300      	movs	r3, #0
 80028e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80028ea:	2302      	movs	r3, #2
 80028ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 80028ee:	f107 0314 	add.w	r3, r7, #20
 80028f2:	4619      	mov	r1, r3
 80028f4:	4818      	ldr	r0, [pc, #96]	; (8002958 <HAL_TIM_MspPostInit+0xfc>)
 80028f6:	f003 fb2b 	bl	8005f50 <HAL_GPIO_Init>
}
 80028fa:	e020      	b.n	800293e <HAL_TIM_MspPostInit+0xe2>
  else if(htim->Instance==TIM12)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a16      	ldr	r2, [pc, #88]	; (800295c <HAL_TIM_MspPostInit+0x100>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d11b      	bne.n	800293e <HAL_TIM_MspPostInit+0xe2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002906:	4b11      	ldr	r3, [pc, #68]	; (800294c <HAL_TIM_MspPostInit+0xf0>)
 8002908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290a:	4a10      	ldr	r2, [pc, #64]	; (800294c <HAL_TIM_MspPostInit+0xf0>)
 800290c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002910:	6313      	str	r3, [r2, #48]	; 0x30
 8002912:	4b0e      	ldr	r3, [pc, #56]	; (800294c <HAL_TIM_MspPostInit+0xf0>)
 8002914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800291a:	60bb      	str	r3, [r7, #8]
 800291c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 800291e:	2340      	movs	r3, #64	; 0x40
 8002920:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002922:	2302      	movs	r3, #2
 8002924:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002926:	2300      	movs	r3, #0
 8002928:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800292a:	2300      	movs	r3, #0
 800292c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800292e:	2309      	movs	r3, #9
 8002930:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8002932:	f107 0314 	add.w	r3, r7, #20
 8002936:	4619      	mov	r1, r3
 8002938:	4809      	ldr	r0, [pc, #36]	; (8002960 <HAL_TIM_MspPostInit+0x104>)
 800293a:	f003 fb09 	bl	8005f50 <HAL_GPIO_Init>
}
 800293e:	bf00      	nop
 8002940:	3728      	adds	r7, #40	; 0x28
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	40000400 	.word	0x40000400
 800294c:	40023800 	.word	0x40023800
 8002950:	40020400 	.word	0x40020400
 8002954:	40000c00 	.word	0x40000c00
 8002958:	40022000 	.word	0x40022000
 800295c:	40001800 	.word	0x40001800
 8002960:	40021c00 	.word	0x40021c00

08002964 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b0ae      	sub	sp, #184	; 0xb8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800296c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002970:	2200      	movs	r2, #0
 8002972:	601a      	str	r2, [r3, #0]
 8002974:	605a      	str	r2, [r3, #4]
 8002976:	609a      	str	r2, [r3, #8]
 8002978:	60da      	str	r2, [r3, #12]
 800297a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800297c:	f107 0320 	add.w	r3, r7, #32
 8002980:	2284      	movs	r2, #132	; 0x84
 8002982:	2100      	movs	r1, #0
 8002984:	4618      	mov	r0, r3
 8002986:	f00c fcbd 	bl	800f304 <memset>
  if(huart->Instance==USART1)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a57      	ldr	r2, [pc, #348]	; (8002aec <HAL_UART_MspInit+0x188>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d165      	bne.n	8002a60 <HAL_UART_MspInit+0xfc>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002994:	2340      	movs	r3, #64	; 0x40
 8002996:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002998:	2300      	movs	r3, #0
 800299a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800299c:	f107 0320 	add.w	r3, r7, #32
 80029a0:	4618      	mov	r0, r3
 80029a2:	f004 ff83 	bl	80078ac <HAL_RCCEx_PeriphCLKConfig>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d001      	beq.n	80029b0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80029ac:	f7ff faa0 	bl	8001ef0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80029b0:	4b4f      	ldr	r3, [pc, #316]	; (8002af0 <HAL_UART_MspInit+0x18c>)
 80029b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b4:	4a4e      	ldr	r2, [pc, #312]	; (8002af0 <HAL_UART_MspInit+0x18c>)
 80029b6:	f043 0310 	orr.w	r3, r3, #16
 80029ba:	6453      	str	r3, [r2, #68]	; 0x44
 80029bc:	4b4c      	ldr	r3, [pc, #304]	; (8002af0 <HAL_UART_MspInit+0x18c>)
 80029be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c0:	f003 0310 	and.w	r3, r3, #16
 80029c4:	61fb      	str	r3, [r7, #28]
 80029c6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029c8:	4b49      	ldr	r3, [pc, #292]	; (8002af0 <HAL_UART_MspInit+0x18c>)
 80029ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029cc:	4a48      	ldr	r2, [pc, #288]	; (8002af0 <HAL_UART_MspInit+0x18c>)
 80029ce:	f043 0302 	orr.w	r3, r3, #2
 80029d2:	6313      	str	r3, [r2, #48]	; 0x30
 80029d4:	4b46      	ldr	r3, [pc, #280]	; (8002af0 <HAL_UART_MspInit+0x18c>)
 80029d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d8:	f003 0302 	and.w	r3, r3, #2
 80029dc:	61bb      	str	r3, [r7, #24]
 80029de:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029e0:	4b43      	ldr	r3, [pc, #268]	; (8002af0 <HAL_UART_MspInit+0x18c>)
 80029e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e4:	4a42      	ldr	r2, [pc, #264]	; (8002af0 <HAL_UART_MspInit+0x18c>)
 80029e6:	f043 0301 	orr.w	r3, r3, #1
 80029ea:	6313      	str	r3, [r2, #48]	; 0x30
 80029ec:	4b40      	ldr	r3, [pc, #256]	; (8002af0 <HAL_UART_MspInit+0x18c>)
 80029ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f0:	f003 0301 	and.w	r3, r3, #1
 80029f4:	617b      	str	r3, [r7, #20]
 80029f6:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80029f8:	2380      	movs	r3, #128	; 0x80
 80029fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029fe:	2302      	movs	r3, #2
 8002a00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a04:	2300      	movs	r3, #0
 8002a06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a10:	2307      	movs	r3, #7
 8002a12:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002a16:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	4835      	ldr	r0, [pc, #212]	; (8002af4 <HAL_UART_MspInit+0x190>)
 8002a1e:	f003 fa97 	bl	8005f50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002a22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a30:	2300      	movs	r3, #0
 8002a32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a36:	2300      	movs	r3, #0
 8002a38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a3c:	2307      	movs	r3, #7
 8002a3e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002a42:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002a46:	4619      	mov	r1, r3
 8002a48:	482b      	ldr	r0, [pc, #172]	; (8002af8 <HAL_UART_MspInit+0x194>)
 8002a4a:	f003 fa81 	bl	8005f50 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002a4e:	2200      	movs	r2, #0
 8002a50:	2100      	movs	r1, #0
 8002a52:	2025      	movs	r0, #37	; 0x25
 8002a54:	f002 f8ea 	bl	8004c2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002a58:	2025      	movs	r0, #37	; 0x25
 8002a5a:	f002 f903 	bl	8004c64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002a5e:	e040      	b.n	8002ae2 <HAL_UART_MspInit+0x17e>
  else if(huart->Instance==USART6)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a25      	ldr	r2, [pc, #148]	; (8002afc <HAL_UART_MspInit+0x198>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d13b      	bne.n	8002ae2 <HAL_UART_MspInit+0x17e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8002a6a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a6e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8002a70:	2300      	movs	r3, #0
 8002a72:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a74:	f107 0320 	add.w	r3, r7, #32
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f004 ff17 	bl	80078ac <HAL_RCCEx_PeriphCLKConfig>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d001      	beq.n	8002a88 <HAL_UART_MspInit+0x124>
      Error_Handler();
 8002a84:	f7ff fa34 	bl	8001ef0 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002a88:	4b19      	ldr	r3, [pc, #100]	; (8002af0 <HAL_UART_MspInit+0x18c>)
 8002a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8c:	4a18      	ldr	r2, [pc, #96]	; (8002af0 <HAL_UART_MspInit+0x18c>)
 8002a8e:	f043 0320 	orr.w	r3, r3, #32
 8002a92:	6453      	str	r3, [r2, #68]	; 0x44
 8002a94:	4b16      	ldr	r3, [pc, #88]	; (8002af0 <HAL_UART_MspInit+0x18c>)
 8002a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a98:	f003 0320 	and.w	r3, r3, #32
 8002a9c:	613b      	str	r3, [r7, #16]
 8002a9e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002aa0:	4b13      	ldr	r3, [pc, #76]	; (8002af0 <HAL_UART_MspInit+0x18c>)
 8002aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa4:	4a12      	ldr	r2, [pc, #72]	; (8002af0 <HAL_UART_MspInit+0x18c>)
 8002aa6:	f043 0304 	orr.w	r3, r3, #4
 8002aaa:	6313      	str	r3, [r2, #48]	; 0x30
 8002aac:	4b10      	ldr	r3, [pc, #64]	; (8002af0 <HAL_UART_MspInit+0x18c>)
 8002aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab0:	f003 0304 	and.w	r3, r3, #4
 8002ab4:	60fb      	str	r3, [r7, #12]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8002ab8:	23c0      	movs	r3, #192	; 0xc0
 8002aba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002abe:	2302      	movs	r3, #2
 8002ac0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aca:	2303      	movs	r3, #3
 8002acc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002ad0:	2308      	movs	r3, #8
 8002ad2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ad6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002ada:	4619      	mov	r1, r3
 8002adc:	4808      	ldr	r0, [pc, #32]	; (8002b00 <HAL_UART_MspInit+0x19c>)
 8002ade:	f003 fa37 	bl	8005f50 <HAL_GPIO_Init>
}
 8002ae2:	bf00      	nop
 8002ae4:	37b8      	adds	r7, #184	; 0xb8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	40011000 	.word	0x40011000
 8002af0:	40023800 	.word	0x40023800
 8002af4:	40020400 	.word	0x40020400
 8002af8:	40020000 	.word	0x40020000
 8002afc:	40011400 	.word	0x40011400
 8002b00:	40020800 	.word	0x40020800

08002b04 <HAL_HCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hhcd: HCD handle pointer
* @retval None
*/
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b08a      	sub	sp, #40	; 0x28
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b0c:	f107 0314 	add.w	r3, r7, #20
 8002b10:	2200      	movs	r2, #0
 8002b12:	601a      	str	r2, [r3, #0]
 8002b14:	605a      	str	r2, [r3, #4]
 8002b16:	609a      	str	r2, [r3, #8]
 8002b18:	60da      	str	r2, [r3, #12]
 8002b1a:	611a      	str	r2, [r3, #16]
  if(hhcd->Instance==USB_OTG_FS)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b24:	d134      	bne.n	8002b90 <HAL_HCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b26:	4b1c      	ldr	r3, [pc, #112]	; (8002b98 <HAL_HCD_MspInit+0x94>)
 8002b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2a:	4a1b      	ldr	r2, [pc, #108]	; (8002b98 <HAL_HCD_MspInit+0x94>)
 8002b2c:	f043 0301 	orr.w	r3, r3, #1
 8002b30:	6313      	str	r3, [r2, #48]	; 0x30
 8002b32:	4b19      	ldr	r3, [pc, #100]	; (8002b98 <HAL_HCD_MspInit+0x94>)
 8002b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	613b      	str	r3, [r7, #16]
 8002b3c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8002b3e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002b42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b44:	2302      	movs	r3, #2
 8002b46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002b50:	230a      	movs	r3, #10
 8002b52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b54:	f107 0314 	add.w	r3, r7, #20
 8002b58:	4619      	mov	r1, r3
 8002b5a:	4810      	ldr	r0, [pc, #64]	; (8002b9c <HAL_HCD_MspInit+0x98>)
 8002b5c:	f003 f9f8 	bl	8005f50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002b60:	4b0d      	ldr	r3, [pc, #52]	; (8002b98 <HAL_HCD_MspInit+0x94>)
 8002b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b64:	4a0c      	ldr	r2, [pc, #48]	; (8002b98 <HAL_HCD_MspInit+0x94>)
 8002b66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b6a:	6353      	str	r3, [r2, #52]	; 0x34
 8002b6c:	4b0a      	ldr	r3, [pc, #40]	; (8002b98 <HAL_HCD_MspInit+0x94>)
 8002b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b74:	60fb      	str	r3, [r7, #12]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	4b07      	ldr	r3, [pc, #28]	; (8002b98 <HAL_HCD_MspInit+0x94>)
 8002b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b7c:	4a06      	ldr	r2, [pc, #24]	; (8002b98 <HAL_HCD_MspInit+0x94>)
 8002b7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b82:	6453      	str	r3, [r2, #68]	; 0x44
 8002b84:	4b04      	ldr	r3, [pc, #16]	; (8002b98 <HAL_HCD_MspInit+0x94>)
 8002b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b8c:	60bb      	str	r3, [r7, #8]
 8002b8e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002b90:	bf00      	nop
 8002b92:	3728      	adds	r7, #40	; 0x28
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	40023800 	.word	0x40023800
 8002b9c:	40020000 	.word	0x40020000

08002ba0 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b086      	sub	sp, #24
 8002ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002ba6:	1d3b      	adds	r3, r7, #4
 8002ba8:	2200      	movs	r2, #0
 8002baa:	601a      	str	r2, [r3, #0]
 8002bac:	605a      	str	r2, [r3, #4]
 8002bae:	609a      	str	r2, [r3, #8]
 8002bb0:	60da      	str	r2, [r3, #12]
 8002bb2:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002bb4:	4b3a      	ldr	r3, [pc, #232]	; (8002ca0 <HAL_FMC_MspInit+0x100>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d16d      	bne.n	8002c98 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8002bbc:	4b38      	ldr	r3, [pc, #224]	; (8002ca0 <HAL_FMC_MspInit+0x100>)
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002bc2:	4b38      	ldr	r3, [pc, #224]	; (8002ca4 <HAL_FMC_MspInit+0x104>)
 8002bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc6:	4a37      	ldr	r2, [pc, #220]	; (8002ca4 <HAL_FMC_MspInit+0x104>)
 8002bc8:	f043 0301 	orr.w	r3, r3, #1
 8002bcc:	6393      	str	r3, [r2, #56]	; 0x38
 8002bce:	4b35      	ldr	r3, [pc, #212]	; (8002ca4 <HAL_FMC_MspInit+0x104>)
 8002bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	603b      	str	r3, [r7, #0]
 8002bd8:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8002bda:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002bde:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be0:	2302      	movs	r3, #2
 8002be2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be4:	2300      	movs	r3, #0
 8002be6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002be8:	2303      	movs	r3, #3
 8002bea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002bec:	230c      	movs	r3, #12
 8002bee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002bf0:	1d3b      	adds	r3, r7, #4
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	482c      	ldr	r0, [pc, #176]	; (8002ca8 <HAL_FMC_MspInit+0x108>)
 8002bf6:	f003 f9ab 	bl	8005f50 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8002bfa:	f248 1333 	movw	r3, #33075	; 0x8133
 8002bfe:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c00:	2302      	movs	r3, #2
 8002c02:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c04:	2300      	movs	r3, #0
 8002c06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002c0c:	230c      	movs	r3, #12
 8002c0e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c10:	1d3b      	adds	r3, r7, #4
 8002c12:	4619      	mov	r1, r3
 8002c14:	4825      	ldr	r0, [pc, #148]	; (8002cac <HAL_FMC_MspInit+0x10c>)
 8002c16:	f003 f99b 	bl	8005f50 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8002c1a:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002c1e:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c20:	2302      	movs	r3, #2
 8002c22:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c24:	2300      	movs	r3, #0
 8002c26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002c2c:	230c      	movs	r3, #12
 8002c2e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c30:	1d3b      	adds	r3, r7, #4
 8002c32:	4619      	mov	r1, r3
 8002c34:	481e      	ldr	r0, [pc, #120]	; (8002cb0 <HAL_FMC_MspInit+0x110>)
 8002c36:	f003 f98b 	bl	8005f50 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8002c3a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002c3e:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c40:	2302      	movs	r3, #2
 8002c42:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c44:	2300      	movs	r3, #0
 8002c46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002c4c:	230c      	movs	r3, #12
 8002c4e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002c50:	1d3b      	adds	r3, r7, #4
 8002c52:	4619      	mov	r1, r3
 8002c54:	4817      	ldr	r0, [pc, #92]	; (8002cb4 <HAL_FMC_MspInit+0x114>)
 8002c56:	f003 f97b 	bl	8005f50 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8002c5a:	2328      	movs	r3, #40	; 0x28
 8002c5c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c5e:	2302      	movs	r3, #2
 8002c60:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c62:	2300      	movs	r3, #0
 8002c64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c66:	2303      	movs	r3, #3
 8002c68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002c6a:	230c      	movs	r3, #12
 8002c6c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002c6e:	1d3b      	adds	r3, r7, #4
 8002c70:	4619      	mov	r1, r3
 8002c72:	4811      	ldr	r0, [pc, #68]	; (8002cb8 <HAL_FMC_MspInit+0x118>)
 8002c74:	f003 f96c 	bl	8005f50 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8002c78:	2308      	movs	r3, #8
 8002c7a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c80:	2300      	movs	r3, #0
 8002c82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c84:	2303      	movs	r3, #3
 8002c86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002c88:	230c      	movs	r3, #12
 8002c8a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8002c8c:	1d3b      	adds	r3, r7, #4
 8002c8e:	4619      	mov	r1, r3
 8002c90:	480a      	ldr	r0, [pc, #40]	; (8002cbc <HAL_FMC_MspInit+0x11c>)
 8002c92:	f003 f95d 	bl	8005f50 <HAL_GPIO_Init>
 8002c96:	e000      	b.n	8002c9a <HAL_FMC_MspInit+0xfa>
    return;
 8002c98:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002c9a:	3718      	adds	r7, #24
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	2000017c 	.word	0x2000017c
 8002ca4:	40023800 	.word	0x40023800
 8002ca8:	40021000 	.word	0x40021000
 8002cac:	40021800 	.word	0x40021800
 8002cb0:	40020c00 	.word	0x40020c00
 8002cb4:	40021400 	.word	0x40021400
 8002cb8:	40021c00 	.word	0x40021c00
 8002cbc:	40020800 	.word	0x40020800

08002cc0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002cc8:	f7ff ff6a 	bl	8002ba0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002ccc:	bf00      	nop
 8002cce:	3708      	adds	r7, #8
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b08a      	sub	sp, #40	; 0x28
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a2b      	ldr	r2, [pc, #172]	; (8002d90 <HAL_SAI_MspInit+0xbc>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d124      	bne.n	8002d30 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8002ce6:	4b2b      	ldr	r3, [pc, #172]	; (8002d94 <HAL_SAI_MspInit+0xc0>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d10b      	bne.n	8002d06 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002cee:	4b2a      	ldr	r3, [pc, #168]	; (8002d98 <HAL_SAI_MspInit+0xc4>)
 8002cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf2:	4a29      	ldr	r2, [pc, #164]	; (8002d98 <HAL_SAI_MspInit+0xc4>)
 8002cf4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002cf8:	6453      	str	r3, [r2, #68]	; 0x44
 8002cfa:	4b27      	ldr	r3, [pc, #156]	; (8002d98 <HAL_SAI_MspInit+0xc4>)
 8002cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cfe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d02:	613b      	str	r3, [r7, #16]
 8002d04:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8002d06:	4b23      	ldr	r3, [pc, #140]	; (8002d94 <HAL_SAI_MspInit+0xc0>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	4a21      	ldr	r2, [pc, #132]	; (8002d94 <HAL_SAI_MspInit+0xc0>)
 8002d0e:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8002d10:	23f0      	movs	r3, #240	; 0xf0
 8002d12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d14:	2302      	movs	r3, #2
 8002d16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002d20:	230a      	movs	r3, #10
 8002d22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002d24:	f107 0314 	add.w	r3, r7, #20
 8002d28:	4619      	mov	r1, r3
 8002d2a:	481c      	ldr	r0, [pc, #112]	; (8002d9c <HAL_SAI_MspInit+0xc8>)
 8002d2c:	f003 f910 	bl	8005f50 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a1a      	ldr	r2, [pc, #104]	; (8002da0 <HAL_SAI_MspInit+0xcc>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d125      	bne.n	8002d86 <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8002d3a:	4b16      	ldr	r3, [pc, #88]	; (8002d94 <HAL_SAI_MspInit+0xc0>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d10b      	bne.n	8002d5a <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002d42:	4b15      	ldr	r3, [pc, #84]	; (8002d98 <HAL_SAI_MspInit+0xc4>)
 8002d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d46:	4a14      	ldr	r2, [pc, #80]	; (8002d98 <HAL_SAI_MspInit+0xc4>)
 8002d48:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d4c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d4e:	4b12      	ldr	r3, [pc, #72]	; (8002d98 <HAL_SAI_MspInit+0xc4>)
 8002d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d56:	60fb      	str	r3, [r7, #12]
 8002d58:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8002d5a:	4b0e      	ldr	r3, [pc, #56]	; (8002d94 <HAL_SAI_MspInit+0xc0>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	3301      	adds	r3, #1
 8002d60:	4a0c      	ldr	r2, [pc, #48]	; (8002d94 <HAL_SAI_MspInit+0xc0>)
 8002d62:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8002d64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d72:	2300      	movs	r3, #0
 8002d74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002d76:	230a      	movs	r3, #10
 8002d78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8002d7a:	f107 0314 	add.w	r3, r7, #20
 8002d7e:	4619      	mov	r1, r3
 8002d80:	4808      	ldr	r0, [pc, #32]	; (8002da4 <HAL_SAI_MspInit+0xd0>)
 8002d82:	f003 f8e5 	bl	8005f50 <HAL_GPIO_Init>

    }
}
 8002d86:	bf00      	nop
 8002d88:	3728      	adds	r7, #40	; 0x28
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	40015c04 	.word	0x40015c04
 8002d94:	20000180 	.word	0x20000180
 8002d98:	40023800 	.word	0x40023800
 8002d9c:	40022000 	.word	0x40022000
 8002da0:	40015c24 	.word	0x40015c24
 8002da4:	40021800 	.word	0x40021800

08002da8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b08c      	sub	sp, #48	; 0x30
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002db0:	2300      	movs	r3, #0
 8002db2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002db4:	2300      	movs	r3, #0
 8002db6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002db8:	2200      	movs	r2, #0
 8002dba:	6879      	ldr	r1, [r7, #4]
 8002dbc:	2036      	movs	r0, #54	; 0x36
 8002dbe:	f001 ff35 	bl	8004c2c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002dc2:	2036      	movs	r0, #54	; 0x36
 8002dc4:	f001 ff4e 	bl	8004c64 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002dc8:	4b1f      	ldr	r3, [pc, #124]	; (8002e48 <HAL_InitTick+0xa0>)
 8002dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dcc:	4a1e      	ldr	r2, [pc, #120]	; (8002e48 <HAL_InitTick+0xa0>)
 8002dce:	f043 0310 	orr.w	r3, r3, #16
 8002dd2:	6413      	str	r3, [r2, #64]	; 0x40
 8002dd4:	4b1c      	ldr	r3, [pc, #112]	; (8002e48 <HAL_InitTick+0xa0>)
 8002dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd8:	f003 0310 	and.w	r3, r3, #16
 8002ddc:	60fb      	str	r3, [r7, #12]
 8002dde:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002de0:	f107 0210 	add.w	r2, r7, #16
 8002de4:	f107 0314 	add.w	r3, r7, #20
 8002de8:	4611      	mov	r1, r2
 8002dea:	4618      	mov	r0, r3
 8002dec:	f004 fd2c 	bl	8007848 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002df0:	f004 fd02 	bl	80077f8 <HAL_RCC_GetPCLK1Freq>
 8002df4:	4603      	mov	r3, r0
 8002df6:	005b      	lsls	r3, r3, #1
 8002df8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dfc:	4a13      	ldr	r2, [pc, #76]	; (8002e4c <HAL_InitTick+0xa4>)
 8002dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8002e02:	0c9b      	lsrs	r3, r3, #18
 8002e04:	3b01      	subs	r3, #1
 8002e06:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002e08:	4b11      	ldr	r3, [pc, #68]	; (8002e50 <HAL_InitTick+0xa8>)
 8002e0a:	4a12      	ldr	r2, [pc, #72]	; (8002e54 <HAL_InitTick+0xac>)
 8002e0c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002e0e:	4b10      	ldr	r3, [pc, #64]	; (8002e50 <HAL_InitTick+0xa8>)
 8002e10:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002e14:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002e16:	4a0e      	ldr	r2, [pc, #56]	; (8002e50 <HAL_InitTick+0xa8>)
 8002e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e1a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002e1c:	4b0c      	ldr	r3, [pc, #48]	; (8002e50 <HAL_InitTick+0xa8>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e22:	4b0b      	ldr	r3, [pc, #44]	; (8002e50 <HAL_InitTick+0xa8>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002e28:	4809      	ldr	r0, [pc, #36]	; (8002e50 <HAL_InitTick+0xa8>)
 8002e2a:	f006 f8dd 	bl	8008fe8 <HAL_TIM_Base_Init>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d104      	bne.n	8002e3e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002e34:	4806      	ldr	r0, [pc, #24]	; (8002e50 <HAL_InitTick+0xa8>)
 8002e36:	f006 f92f 	bl	8009098 <HAL_TIM_Base_Start_IT>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	e000      	b.n	8002e40 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3730      	adds	r7, #48	; 0x30
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	40023800 	.word	0x40023800
 8002e4c:	431bde83 	.word	0x431bde83
 8002e50:	20002a7c 	.word	0x20002a7c
 8002e54:	40001000 	.word	0x40001000

08002e58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e5c:	e7fe      	b.n	8002e5c <NMI_Handler+0x4>

08002e5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e5e:	b480      	push	{r7}
 8002e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e62:	e7fe      	b.n	8002e62 <HardFault_Handler+0x4>

08002e64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e64:	b480      	push	{r7}
 8002e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e68:	e7fe      	b.n	8002e68 <MemManage_Handler+0x4>

08002e6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e6e:	e7fe      	b.n	8002e6e <BusFault_Handler+0x4>

08002e70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e74:	e7fe      	b.n	8002e74 <UsageFault_Handler+0x4>

08002e76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e76:	b480      	push	{r7}
 8002e78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e7a:	bf00      	nop
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e84:	b480      	push	{r7}
 8002e86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e88:	bf00      	nop
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr

08002e92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e92:	b480      	push	{r7}
 8002e94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e96:	bf00      	nop
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ea4:	bf00      	nop
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
	...

08002eb0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8002eb4:	4802      	ldr	r0, [pc, #8]	; (8002ec0 <ADC_IRQHandler+0x10>)
 8002eb6:	f001 f8d7 	bl	8004068 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002eba:	bf00      	nop
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	200023c8 	.word	0x200023c8

08002ec4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002ec8:	4802      	ldr	r0, [pc, #8]	; (8002ed4 <USART1_IRQHandler+0x10>)
 8002eca:	f007 f9fd 	bl	800a2c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002ece:	bf00      	nop
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	20002460 	.word	0x20002460

08002ed8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002edc:	4802      	ldr	r0, [pc, #8]	; (8002ee8 <TIM6_DAC_IRQHandler+0x10>)
 8002ede:	f006 f9aa 	bl	8009236 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002ee2:	bf00      	nop
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	20002a7c 	.word	0x20002a7c

08002eec <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002ef0:	4802      	ldr	r0, [pc, #8]	; (8002efc <TIM7_IRQHandler+0x10>)
 8002ef2:	f006 f9a0 	bl	8009236 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002ef6:	bf00      	nop
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	200029e4 	.word	0x200029e4

08002f00 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002f04:	4802      	ldr	r0, [pc, #8]	; (8002f10 <DMA2_Stream0_IRQHandler+0x10>)
 8002f06:	f002 fa1d 	bl	8005344 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002f0a:	bf00      	nop
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	20002228 	.word	0x20002228

08002f14 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002f18:	4802      	ldr	r0, [pc, #8]	; (8002f24 <LTDC_IRQHandler+0x10>)
 8002f1a:	f003 fc51 	bl	80067c0 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002f1e:	bf00      	nop
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	20002320 	.word	0x20002320

08002f28 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002f2c:	4802      	ldr	r0, [pc, #8]	; (8002f38 <DMA2D_IRQHandler+0x10>)
 8002f2e:	f002 fdd1 	bl	8005ad4 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002f32:	bf00      	nop
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	200025d4 	.word	0x200025d4

08002f3c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	af00      	add	r7, sp, #0
	return 1;
 8002f40:	2301      	movs	r3, #1
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <_kill>:

int _kill(int pid, int sig)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002f56:	f00c f977 	bl	800f248 <__errno>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2216      	movs	r2, #22
 8002f5e:	601a      	str	r2, [r3, #0]
	return -1;
 8002f60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3708      	adds	r7, #8
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <_exit>:

void _exit (int status)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002f74:	f04f 31ff 	mov.w	r1, #4294967295
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f7ff ffe7 	bl	8002f4c <_kill>
	while (1) {}		/* Make sure we hang here */
 8002f7e:	e7fe      	b.n	8002f7e <_exit+0x12>

08002f80 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b086      	sub	sp, #24
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	617b      	str	r3, [r7, #20]
 8002f90:	e00a      	b.n	8002fa8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002f92:	f3af 8000 	nop.w
 8002f96:	4601      	mov	r1, r0
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	1c5a      	adds	r2, r3, #1
 8002f9c:	60ba      	str	r2, [r7, #8]
 8002f9e:	b2ca      	uxtb	r2, r1
 8002fa0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	617b      	str	r3, [r7, #20]
 8002fa8:	697a      	ldr	r2, [r7, #20]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	dbf0      	blt.n	8002f92 <_read+0x12>
	}

return len;
 8002fb0:	687b      	ldr	r3, [r7, #4]
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3718      	adds	r7, #24
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b086      	sub	sp, #24
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	60f8      	str	r0, [r7, #12]
 8002fc2:	60b9      	str	r1, [r7, #8]
 8002fc4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	617b      	str	r3, [r7, #20]
 8002fca:	e009      	b.n	8002fe0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	1c5a      	adds	r2, r3, #1
 8002fd0:	60ba      	str	r2, [r7, #8]
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	3301      	adds	r3, #1
 8002fde:	617b      	str	r3, [r7, #20]
 8002fe0:	697a      	ldr	r2, [r7, #20]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	dbf1      	blt.n	8002fcc <_write+0x12>
	}
	return len;
 8002fe8:	687b      	ldr	r3, [r7, #4]
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3718      	adds	r7, #24
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}

08002ff2 <_close>:

int _close(int file)
{
 8002ff2:	b480      	push	{r7}
 8002ff4:	b083      	sub	sp, #12
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
	return -1;
 8002ffa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	370c      	adds	r7, #12
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr

0800300a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800300a:	b480      	push	{r7}
 800300c:	b083      	sub	sp, #12
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]
 8003012:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800301a:	605a      	str	r2, [r3, #4]
	return 0;
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	370c      	adds	r7, #12
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr

0800302a <_isatty>:

int _isatty(int file)
{
 800302a:	b480      	push	{r7}
 800302c:	b083      	sub	sp, #12
 800302e:	af00      	add	r7, sp, #0
 8003030:	6078      	str	r0, [r7, #4]
	return 1;
 8003032:	2301      	movs	r3, #1
}
 8003034:	4618      	mov	r0, r3
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003040:	b480      	push	{r7}
 8003042:	b085      	sub	sp, #20
 8003044:	af00      	add	r7, sp, #0
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	607a      	str	r2, [r7, #4]
	return 0;
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	3714      	adds	r7, #20
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
	...

0800305c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b086      	sub	sp, #24
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003064:	4a14      	ldr	r2, [pc, #80]	; (80030b8 <_sbrk+0x5c>)
 8003066:	4b15      	ldr	r3, [pc, #84]	; (80030bc <_sbrk+0x60>)
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003070:	4b13      	ldr	r3, [pc, #76]	; (80030c0 <_sbrk+0x64>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d102      	bne.n	800307e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003078:	4b11      	ldr	r3, [pc, #68]	; (80030c0 <_sbrk+0x64>)
 800307a:	4a12      	ldr	r2, [pc, #72]	; (80030c4 <_sbrk+0x68>)
 800307c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800307e:	4b10      	ldr	r3, [pc, #64]	; (80030c0 <_sbrk+0x64>)
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4413      	add	r3, r2
 8003086:	693a      	ldr	r2, [r7, #16]
 8003088:	429a      	cmp	r2, r3
 800308a:	d207      	bcs.n	800309c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800308c:	f00c f8dc 	bl	800f248 <__errno>
 8003090:	4603      	mov	r3, r0
 8003092:	220c      	movs	r2, #12
 8003094:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003096:	f04f 33ff 	mov.w	r3, #4294967295
 800309a:	e009      	b.n	80030b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800309c:	4b08      	ldr	r3, [pc, #32]	; (80030c0 <_sbrk+0x64>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80030a2:	4b07      	ldr	r3, [pc, #28]	; (80030c0 <_sbrk+0x64>)
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4413      	add	r3, r2
 80030aa:	4a05      	ldr	r2, [pc, #20]	; (80030c0 <_sbrk+0x64>)
 80030ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80030ae:	68fb      	ldr	r3, [r7, #12]
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3718      	adds	r7, #24
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	20050000 	.word	0x20050000
 80030bc:	00000400 	.word	0x00000400
 80030c0:	20000184 	.word	0x20000184
 80030c4:	20002bb8 	.word	0x20002bb8

080030c8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80030c8:	b480      	push	{r7}
 80030ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80030cc:	4b06      	ldr	r3, [pc, #24]	; (80030e8 <SystemInit+0x20>)
 80030ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030d2:	4a05      	ldr	r2, [pc, #20]	; (80030e8 <SystemInit+0x20>)
 80030d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80030d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80030dc:	bf00      	nop
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	e000ed00 	.word	0xe000ed00

080030ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80030ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003124 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80030f0:	480d      	ldr	r0, [pc, #52]	; (8003128 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80030f2:	490e      	ldr	r1, [pc, #56]	; (800312c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80030f4:	4a0e      	ldr	r2, [pc, #56]	; (8003130 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80030f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030f8:	e002      	b.n	8003100 <LoopCopyDataInit>

080030fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030fe:	3304      	adds	r3, #4

08003100 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003100:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003102:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003104:	d3f9      	bcc.n	80030fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003106:	4a0b      	ldr	r2, [pc, #44]	; (8003134 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003108:	4c0b      	ldr	r4, [pc, #44]	; (8003138 <LoopFillZerobss+0x26>)
  movs r3, #0
 800310a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800310c:	e001      	b.n	8003112 <LoopFillZerobss>

0800310e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800310e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003110:	3204      	adds	r2, #4

08003112 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003112:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003114:	d3fb      	bcc.n	800310e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003116:	f7ff ffd7 	bl	80030c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800311a:	f00c f8ad 	bl	800f278 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800311e:	f7fd fcf3 	bl	8000b08 <main>
  bx  lr    
 8003122:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003124:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003128:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800312c:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 8003130:	08012d60 	.word	0x08012d60
  ldr r2, =_sbss
 8003134:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 8003138:	20002bb8 	.word	0x20002bb8

0800313c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800313c:	e7fe      	b.n	800313c <CAN1_RX0_IRQHandler>
	...

08003140 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8003140:	b580      	push	{r7, lr}
 8003142:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8003144:	4b31      	ldr	r3, [pc, #196]	; (800320c <BSP_LCD_Init+0xcc>)
 8003146:	2228      	movs	r2, #40	; 0x28
 8003148:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 800314a:	4b30      	ldr	r3, [pc, #192]	; (800320c <BSP_LCD_Init+0xcc>)
 800314c:	2209      	movs	r2, #9
 800314e:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8003150:	4b2e      	ldr	r3, [pc, #184]	; (800320c <BSP_LCD_Init+0xcc>)
 8003152:	2235      	movs	r2, #53	; 0x35
 8003154:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8003156:	4b2d      	ldr	r3, [pc, #180]	; (800320c <BSP_LCD_Init+0xcc>)
 8003158:	220b      	movs	r2, #11
 800315a:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 800315c:	4b2b      	ldr	r3, [pc, #172]	; (800320c <BSP_LCD_Init+0xcc>)
 800315e:	f240 121b 	movw	r2, #283	; 0x11b
 8003162:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8003164:	4b29      	ldr	r3, [pc, #164]	; (800320c <BSP_LCD_Init+0xcc>)
 8003166:	f240 2215 	movw	r2, #533	; 0x215
 800316a:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 800316c:	4b27      	ldr	r3, [pc, #156]	; (800320c <BSP_LCD_Init+0xcc>)
 800316e:	f240 121d 	movw	r2, #285	; 0x11d
 8003172:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8003174:	4b25      	ldr	r3, [pc, #148]	; (800320c <BSP_LCD_Init+0xcc>)
 8003176:	f240 2235 	movw	r2, #565	; 0x235
 800317a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 800317c:	2100      	movs	r1, #0
 800317e:	4823      	ldr	r0, [pc, #140]	; (800320c <BSP_LCD_Init+0xcc>)
 8003180:	f000 fc06 	bl	8003990 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8003184:	4b21      	ldr	r3, [pc, #132]	; (800320c <BSP_LCD_Init+0xcc>)
 8003186:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800318a:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 800318c:	4b1f      	ldr	r3, [pc, #124]	; (800320c <BSP_LCD_Init+0xcc>)
 800318e:	f44f 7288 	mov.w	r2, #272	; 0x110
 8003192:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8003194:	4b1d      	ldr	r3, [pc, #116]	; (800320c <BSP_LCD_Init+0xcc>)
 8003196:	2200      	movs	r2, #0
 8003198:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 800319c:	4b1b      	ldr	r3, [pc, #108]	; (800320c <BSP_LCD_Init+0xcc>)
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 80031a4:	4b19      	ldr	r3, [pc, #100]	; (800320c <BSP_LCD_Init+0xcc>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80031ac:	4b17      	ldr	r3, [pc, #92]	; (800320c <BSP_LCD_Init+0xcc>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 80031b2:	4b16      	ldr	r3, [pc, #88]	; (800320c <BSP_LCD_Init+0xcc>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 80031b8:	4b14      	ldr	r3, [pc, #80]	; (800320c <BSP_LCD_Init+0xcc>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80031be:	4b13      	ldr	r3, [pc, #76]	; (800320c <BSP_LCD_Init+0xcc>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 80031c4:	4b11      	ldr	r3, [pc, #68]	; (800320c <BSP_LCD_Init+0xcc>)
 80031c6:	4a12      	ldr	r2, [pc, #72]	; (8003210 <BSP_LCD_Init+0xd0>)
 80031c8:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 80031ca:	4810      	ldr	r0, [pc, #64]	; (800320c <BSP_LCD_Init+0xcc>)
 80031cc:	f003 fbf8 	bl	80069c0 <HAL_LTDC_GetState>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d103      	bne.n	80031de <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 80031d6:	2100      	movs	r1, #0
 80031d8:	480c      	ldr	r0, [pc, #48]	; (800320c <BSP_LCD_Init+0xcc>)
 80031da:	f000 faff 	bl	80037dc <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 80031de:	480b      	ldr	r0, [pc, #44]	; (800320c <BSP_LCD_Init+0xcc>)
 80031e0:	f003 fa1e 	bl	8006620 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 80031e4:	2201      	movs	r2, #1
 80031e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80031ea:	480a      	ldr	r0, [pc, #40]	; (8003214 <BSP_LCD_Init+0xd4>)
 80031ec:	f003 f874 	bl	80062d8 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 80031f0:	2201      	movs	r2, #1
 80031f2:	2108      	movs	r1, #8
 80031f4:	4808      	ldr	r0, [pc, #32]	; (8003218 <BSP_LCD_Init+0xd8>)
 80031f6:	f003 f86f 	bl	80062d8 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 80031fa:	f000 fce9 	bl	8003bd0 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80031fe:	4807      	ldr	r0, [pc, #28]	; (800321c <BSP_LCD_Init+0xdc>)
 8003200:	f000 f8be 	bl	8003380 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	20002ac8 	.word	0x20002ac8
 8003210:	40016800 	.word	0x40016800
 8003214:	40022000 	.word	0x40022000
 8003218:	40022800 	.word	0x40022800
 800321c:	2000003c 	.word	0x2000003c

08003220 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8003220:	b480      	push	{r7}
 8003222:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8003224:	4b06      	ldr	r3, [pc, #24]	; (8003240 <BSP_LCD_GetXSize+0x20>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a06      	ldr	r2, [pc, #24]	; (8003244 <BSP_LCD_GetXSize+0x24>)
 800322a:	2134      	movs	r1, #52	; 0x34
 800322c:	fb01 f303 	mul.w	r3, r1, r3
 8003230:	4413      	add	r3, r2
 8003232:	3360      	adds	r3, #96	; 0x60
 8003234:	681b      	ldr	r3, [r3, #0]
}
 8003236:	4618      	mov	r0, r3
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr
 8003240:	200001c8 	.word	0x200001c8
 8003244:	20002ac8 	.word	0x20002ac8

08003248 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8003248:	b480      	push	{r7}
 800324a:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 800324c:	4b06      	ldr	r3, [pc, #24]	; (8003268 <BSP_LCD_GetYSize+0x20>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a06      	ldr	r2, [pc, #24]	; (800326c <BSP_LCD_GetYSize+0x24>)
 8003252:	2134      	movs	r1, #52	; 0x34
 8003254:	fb01 f303 	mul.w	r3, r1, r3
 8003258:	4413      	add	r3, r2
 800325a:	3364      	adds	r3, #100	; 0x64
 800325c:	681b      	ldr	r3, [r3, #0]
}
 800325e:	4618      	mov	r0, r3
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr
 8003268:	200001c8 	.word	0x200001c8
 800326c:	20002ac8 	.word	0x20002ac8

08003270 <BSP_LCD_LayerRgb565Init>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerRgb565Init(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8003270:	b580      	push	{r7, lr}
 8003272:	b090      	sub	sp, #64	; 0x40
 8003274:	af00      	add	r7, sp, #0
 8003276:	4603      	mov	r3, r0
 8003278:	6039      	str	r1, [r7, #0]
 800327a:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 800327c:	2300      	movs	r3, #0
 800327e:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8003280:	f7ff ffce 	bl	8003220 <BSP_LCD_GetXSize>
 8003284:	4603      	mov	r3, r0
 8003286:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8003288:	2300      	movs	r3, #0
 800328a:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 800328c:	f7ff ffdc 	bl	8003248 <BSP_LCD_GetYSize>
 8003290:	4603      	mov	r3, r0
 8003292:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8003294:	2302      	movs	r3, #2
 8003296:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 800329c:	23ff      	movs	r3, #255	; 0xff
 800329e:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 80032a0:	2300      	movs	r3, #0
 80032a2:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 80032a4:	2300      	movs	r3, #0
 80032a6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 80032aa:	2300      	movs	r3, #0
 80032ac:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 80032b0:	2300      	movs	r3, #0
 80032b2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80032b6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80032ba:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80032bc:	2307      	movs	r3, #7
 80032be:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 80032c0:	f7ff ffae 	bl	8003220 <BSP_LCD_GetXSize>
 80032c4:	4603      	mov	r3, r0
 80032c6:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 80032c8:	f7ff ffbe 	bl	8003248 <BSP_LCD_GetYSize>
 80032cc:	4603      	mov	r3, r0
 80032ce:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 80032d0:	88fa      	ldrh	r2, [r7, #6]
 80032d2:	f107 030c 	add.w	r3, r7, #12
 80032d6:	4619      	mov	r1, r3
 80032d8:	4812      	ldr	r0, [pc, #72]	; (8003324 <BSP_LCD_LayerRgb565Init+0xb4>)
 80032da:	f003 fb33 	bl	8006944 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80032de:	88fa      	ldrh	r2, [r7, #6]
 80032e0:	4911      	ldr	r1, [pc, #68]	; (8003328 <BSP_LCD_LayerRgb565Init+0xb8>)
 80032e2:	4613      	mov	r3, r2
 80032e4:	005b      	lsls	r3, r3, #1
 80032e6:	4413      	add	r3, r2
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	440b      	add	r3, r1
 80032ec:	3304      	adds	r3, #4
 80032ee:	f04f 32ff 	mov.w	r2, #4294967295
 80032f2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80032f4:	88fa      	ldrh	r2, [r7, #6]
 80032f6:	490c      	ldr	r1, [pc, #48]	; (8003328 <BSP_LCD_LayerRgb565Init+0xb8>)
 80032f8:	4613      	mov	r3, r2
 80032fa:	005b      	lsls	r3, r3, #1
 80032fc:	4413      	add	r3, r2
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	440b      	add	r3, r1
 8003302:	3308      	adds	r3, #8
 8003304:	4a09      	ldr	r2, [pc, #36]	; (800332c <BSP_LCD_LayerRgb565Init+0xbc>)
 8003306:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8003308:	88fa      	ldrh	r2, [r7, #6]
 800330a:	4907      	ldr	r1, [pc, #28]	; (8003328 <BSP_LCD_LayerRgb565Init+0xb8>)
 800330c:	4613      	mov	r3, r2
 800330e:	005b      	lsls	r3, r3, #1
 8003310:	4413      	add	r3, r2
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	440b      	add	r3, r1
 8003316:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800331a:	601a      	str	r2, [r3, #0]
}
 800331c:	bf00      	nop
 800331e:	3740      	adds	r7, #64	; 0x40
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}
 8003324:	20002ac8 	.word	0x20002ac8
 8003328:	200001cc 	.word	0x200001cc
 800332c:	20000034 	.word	0x20000034

08003330 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8003338:	4a04      	ldr	r2, [pc, #16]	; (800334c <BSP_LCD_SelectLayer+0x1c>)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6013      	str	r3, [r2, #0]
} 
 800333e:	bf00      	nop
 8003340:	370c      	adds	r7, #12
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
 800334a:	bf00      	nop
 800334c:	200001c8 	.word	0x200001c8

08003350 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8003358:	4b07      	ldr	r3, [pc, #28]	; (8003378 <BSP_LCD_SetTextColor+0x28>)
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	4907      	ldr	r1, [pc, #28]	; (800337c <BSP_LCD_SetTextColor+0x2c>)
 800335e:	4613      	mov	r3, r2
 8003360:	005b      	lsls	r3, r3, #1
 8003362:	4413      	add	r3, r2
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	440b      	add	r3, r1
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	601a      	str	r2, [r3, #0]
}
 800336c:	bf00      	nop
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr
 8003378:	200001c8 	.word	0x200001c8
 800337c:	200001cc 	.word	0x200001cc

08003380 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8003388:	4b08      	ldr	r3, [pc, #32]	; (80033ac <BSP_LCD_SetFont+0x2c>)
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	4908      	ldr	r1, [pc, #32]	; (80033b0 <BSP_LCD_SetFont+0x30>)
 800338e:	4613      	mov	r3, r2
 8003390:	005b      	lsls	r3, r3, #1
 8003392:	4413      	add	r3, r2
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	440b      	add	r3, r1
 8003398:	3308      	adds	r3, #8
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	601a      	str	r2, [r3, #0]
}
 800339e:	bf00      	nop
 80033a0:	370c      	adds	r7, #12
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	200001c8 	.word	0x200001c8
 80033b0:	200001cc 	.word	0x200001cc

080033b4 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80033b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033b6:	b085      	sub	sp, #20
 80033b8:	af02      	add	r7, sp, #8
 80033ba:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80033bc:	4b0f      	ldr	r3, [pc, #60]	; (80033fc <BSP_LCD_Clear+0x48>)
 80033be:	681c      	ldr	r4, [r3, #0]
 80033c0:	4b0e      	ldr	r3, [pc, #56]	; (80033fc <BSP_LCD_Clear+0x48>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a0e      	ldr	r2, [pc, #56]	; (8003400 <BSP_LCD_Clear+0x4c>)
 80033c6:	2134      	movs	r1, #52	; 0x34
 80033c8:	fb01 f303 	mul.w	r3, r1, r3
 80033cc:	4413      	add	r3, r2
 80033ce:	335c      	adds	r3, #92	; 0x5c
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	461e      	mov	r6, r3
 80033d4:	f7ff ff24 	bl	8003220 <BSP_LCD_GetXSize>
 80033d8:	4605      	mov	r5, r0
 80033da:	f7ff ff35 	bl	8003248 <BSP_LCD_GetYSize>
 80033de:	4602      	mov	r2, r0
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	9301      	str	r3, [sp, #4]
 80033e4:	2300      	movs	r3, #0
 80033e6:	9300      	str	r3, [sp, #0]
 80033e8:	4613      	mov	r3, r2
 80033ea:	462a      	mov	r2, r5
 80033ec:	4631      	mov	r1, r6
 80033ee:	4620      	mov	r0, r4
 80033f0:	f000 fba2 	bl	8003b38 <LL_FillBuffer>
}
 80033f4:	bf00      	nop
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033fc:	200001c8 	.word	0x200001c8
 8003400:	20002ac8 	.word	0x20002ac8

08003404 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8003404:	b590      	push	{r4, r7, lr}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	4603      	mov	r3, r0
 800340c:	80fb      	strh	r3, [r7, #6]
 800340e:	460b      	mov	r3, r1
 8003410:	80bb      	strh	r3, [r7, #4]
 8003412:	4613      	mov	r3, r2
 8003414:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003416:	4b1b      	ldr	r3, [pc, #108]	; (8003484 <BSP_LCD_DisplayChar+0x80>)
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	491b      	ldr	r1, [pc, #108]	; (8003488 <BSP_LCD_DisplayChar+0x84>)
 800341c:	4613      	mov	r3, r2
 800341e:	005b      	lsls	r3, r3, #1
 8003420:	4413      	add	r3, r2
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	440b      	add	r3, r1
 8003426:	3308      	adds	r3, #8
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	6819      	ldr	r1, [r3, #0]
 800342c:	78fb      	ldrb	r3, [r7, #3]
 800342e:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003432:	4b14      	ldr	r3, [pc, #80]	; (8003484 <BSP_LCD_DisplayChar+0x80>)
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	4c14      	ldr	r4, [pc, #80]	; (8003488 <BSP_LCD_DisplayChar+0x84>)
 8003438:	4613      	mov	r3, r2
 800343a:	005b      	lsls	r3, r3, #1
 800343c:	4413      	add	r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	4423      	add	r3, r4
 8003442:	3308      	adds	r3, #8
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003448:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800344c:	4b0d      	ldr	r3, [pc, #52]	; (8003484 <BSP_LCD_DisplayChar+0x80>)
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	4c0d      	ldr	r4, [pc, #52]	; (8003488 <BSP_LCD_DisplayChar+0x84>)
 8003452:	4613      	mov	r3, r2
 8003454:	005b      	lsls	r3, r3, #1
 8003456:	4413      	add	r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	4423      	add	r3, r4
 800345c:	3308      	adds	r3, #8
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	889b      	ldrh	r3, [r3, #4]
 8003462:	3307      	adds	r3, #7
 8003464:	2b00      	cmp	r3, #0
 8003466:	da00      	bge.n	800346a <BSP_LCD_DisplayChar+0x66>
 8003468:	3307      	adds	r3, #7
 800346a:	10db      	asrs	r3, r3, #3
 800346c:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003470:	18ca      	adds	r2, r1, r3
 8003472:	88b9      	ldrh	r1, [r7, #4]
 8003474:	88fb      	ldrh	r3, [r7, #6]
 8003476:	4618      	mov	r0, r3
 8003478:	f000 faa6 	bl	80039c8 <DrawChar>
}
 800347c:	bf00      	nop
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	bd90      	pop	{r4, r7, pc}
 8003484:	200001c8 	.word	0x200001c8
 8003488:	200001cc 	.word	0x200001cc

0800348c <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 800348c:	b5b0      	push	{r4, r5, r7, lr}
 800348e:	b088      	sub	sp, #32
 8003490:	af00      	add	r7, sp, #0
 8003492:	60ba      	str	r2, [r7, #8]
 8003494:	461a      	mov	r2, r3
 8003496:	4603      	mov	r3, r0
 8003498:	81fb      	strh	r3, [r7, #14]
 800349a:	460b      	mov	r3, r1
 800349c:	81bb      	strh	r3, [r7, #12]
 800349e:	4613      	mov	r3, r2
 80034a0:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 80034a2:	2301      	movs	r3, #1
 80034a4:	83fb      	strh	r3, [r7, #30]
 80034a6:	2300      	movs	r3, #0
 80034a8:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 80034aa:	2300      	movs	r3, #0
 80034ac:	61bb      	str	r3, [r7, #24]
 80034ae:	2300      	movs	r3, #0
 80034b0:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 80034b6:	e002      	b.n	80034be <BSP_LCD_DisplayStringAt+0x32>
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	3301      	adds	r3, #1
 80034bc:	61bb      	str	r3, [r7, #24]
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	1c5a      	adds	r2, r3, #1
 80034c2:	617a      	str	r2, [r7, #20]
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1f6      	bne.n	80034b8 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80034ca:	f7ff fea9 	bl	8003220 <BSP_LCD_GetXSize>
 80034ce:	4601      	mov	r1, r0
 80034d0:	4b50      	ldr	r3, [pc, #320]	; (8003614 <BSP_LCD_DisplayStringAt+0x188>)
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	4850      	ldr	r0, [pc, #320]	; (8003618 <BSP_LCD_DisplayStringAt+0x18c>)
 80034d6:	4613      	mov	r3, r2
 80034d8:	005b      	lsls	r3, r3, #1
 80034da:	4413      	add	r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	4403      	add	r3, r0
 80034e0:	3308      	adds	r3, #8
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	889b      	ldrh	r3, [r3, #4]
 80034e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80034ea:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 80034ec:	79fb      	ldrb	r3, [r7, #7]
 80034ee:	2b03      	cmp	r3, #3
 80034f0:	d01c      	beq.n	800352c <BSP_LCD_DisplayStringAt+0xa0>
 80034f2:	2b03      	cmp	r3, #3
 80034f4:	dc33      	bgt.n	800355e <BSP_LCD_DisplayStringAt+0xd2>
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d002      	beq.n	8003500 <BSP_LCD_DisplayStringAt+0x74>
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d019      	beq.n	8003532 <BSP_LCD_DisplayStringAt+0xa6>
 80034fe:	e02e      	b.n	800355e <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8003500:	693a      	ldr	r2, [r7, #16]
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	1ad1      	subs	r1, r2, r3
 8003506:	4b43      	ldr	r3, [pc, #268]	; (8003614 <BSP_LCD_DisplayStringAt+0x188>)
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	4843      	ldr	r0, [pc, #268]	; (8003618 <BSP_LCD_DisplayStringAt+0x18c>)
 800350c:	4613      	mov	r3, r2
 800350e:	005b      	lsls	r3, r3, #1
 8003510:	4413      	add	r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	4403      	add	r3, r0
 8003516:	3308      	adds	r3, #8
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	889b      	ldrh	r3, [r3, #4]
 800351c:	fb03 f301 	mul.w	r3, r3, r1
 8003520:	085b      	lsrs	r3, r3, #1
 8003522:	b29a      	uxth	r2, r3
 8003524:	89fb      	ldrh	r3, [r7, #14]
 8003526:	4413      	add	r3, r2
 8003528:	83fb      	strh	r3, [r7, #30]
      break;
 800352a:	e01b      	b.n	8003564 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 800352c:	89fb      	ldrh	r3, [r7, #14]
 800352e:	83fb      	strh	r3, [r7, #30]
      break;
 8003530:	e018      	b.n	8003564 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8003532:	693a      	ldr	r2, [r7, #16]
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	b299      	uxth	r1, r3
 800353a:	4b36      	ldr	r3, [pc, #216]	; (8003614 <BSP_LCD_DisplayStringAt+0x188>)
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	4836      	ldr	r0, [pc, #216]	; (8003618 <BSP_LCD_DisplayStringAt+0x18c>)
 8003540:	4613      	mov	r3, r2
 8003542:	005b      	lsls	r3, r3, #1
 8003544:	4413      	add	r3, r2
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	4403      	add	r3, r0
 800354a:	3308      	adds	r3, #8
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	889b      	ldrh	r3, [r3, #4]
 8003550:	fb11 f303 	smulbb	r3, r1, r3
 8003554:	b29a      	uxth	r2, r3
 8003556:	89fb      	ldrh	r3, [r7, #14]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	83fb      	strh	r3, [r7, #30]
      break;
 800355c:	e002      	b.n	8003564 <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 800355e:	89fb      	ldrh	r3, [r7, #14]
 8003560:	83fb      	strh	r3, [r7, #30]
      break;
 8003562:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8003564:	8bfb      	ldrh	r3, [r7, #30]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d003      	beq.n	8003572 <BSP_LCD_DisplayStringAt+0xe6>
 800356a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800356e:	2b00      	cmp	r3, #0
 8003570:	da1d      	bge.n	80035ae <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 8003572:	2301      	movs	r3, #1
 8003574:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003576:	e01a      	b.n	80035ae <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	781a      	ldrb	r2, [r3, #0]
 800357c:	89b9      	ldrh	r1, [r7, #12]
 800357e:	8bfb      	ldrh	r3, [r7, #30]
 8003580:	4618      	mov	r0, r3
 8003582:	f7ff ff3f 	bl	8003404 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8003586:	4b23      	ldr	r3, [pc, #140]	; (8003614 <BSP_LCD_DisplayStringAt+0x188>)
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	4923      	ldr	r1, [pc, #140]	; (8003618 <BSP_LCD_DisplayStringAt+0x18c>)
 800358c:	4613      	mov	r3, r2
 800358e:	005b      	lsls	r3, r3, #1
 8003590:	4413      	add	r3, r2
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	440b      	add	r3, r1
 8003596:	3308      	adds	r3, #8
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	889a      	ldrh	r2, [r3, #4]
 800359c:	8bfb      	ldrh	r3, [r7, #30]
 800359e:	4413      	add	r3, r2
 80035a0:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	3301      	adds	r3, #1
 80035a6:	60bb      	str	r3, [r7, #8]
    i++;
 80035a8:	8bbb      	ldrh	r3, [r7, #28]
 80035aa:	3301      	adds	r3, #1
 80035ac:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	bf14      	ite	ne
 80035b6:	2301      	movne	r3, #1
 80035b8:	2300      	moveq	r3, #0
 80035ba:	b2dc      	uxtb	r4, r3
 80035bc:	f7ff fe30 	bl	8003220 <BSP_LCD_GetXSize>
 80035c0:	8bb9      	ldrh	r1, [r7, #28]
 80035c2:	4b14      	ldr	r3, [pc, #80]	; (8003614 <BSP_LCD_DisplayStringAt+0x188>)
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	4d14      	ldr	r5, [pc, #80]	; (8003618 <BSP_LCD_DisplayStringAt+0x18c>)
 80035c8:	4613      	mov	r3, r2
 80035ca:	005b      	lsls	r3, r3, #1
 80035cc:	4413      	add	r3, r2
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	442b      	add	r3, r5
 80035d2:	3308      	adds	r3, #8
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	889b      	ldrh	r3, [r3, #4]
 80035d8:	fb03 f301 	mul.w	r3, r3, r1
 80035dc:	1ac3      	subs	r3, r0, r3
 80035de:	b299      	uxth	r1, r3
 80035e0:	4b0c      	ldr	r3, [pc, #48]	; (8003614 <BSP_LCD_DisplayStringAt+0x188>)
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	480c      	ldr	r0, [pc, #48]	; (8003618 <BSP_LCD_DisplayStringAt+0x18c>)
 80035e6:	4613      	mov	r3, r2
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	4413      	add	r3, r2
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	4403      	add	r3, r0
 80035f0:	3308      	adds	r3, #8
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	889b      	ldrh	r3, [r3, #4]
 80035f6:	4299      	cmp	r1, r3
 80035f8:	bf2c      	ite	cs
 80035fa:	2301      	movcs	r3, #1
 80035fc:	2300      	movcc	r3, #0
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	4023      	ands	r3, r4
 8003602:	b2db      	uxtb	r3, r3
 8003604:	2b00      	cmp	r3, #0
 8003606:	d1b7      	bne.n	8003578 <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 8003608:	bf00      	nop
 800360a:	bf00      	nop
 800360c:	3720      	adds	r7, #32
 800360e:	46bd      	mov	sp, r7
 8003610:	bdb0      	pop	{r4, r5, r7, pc}
 8003612:	bf00      	nop
 8003614:	200001c8 	.word	0x200001c8
 8003618:	200001cc 	.word	0x200001cc

0800361c <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 800361c:	b5b0      	push	{r4, r5, r7, lr}
 800361e:	b082      	sub	sp, #8
 8003620:	af00      	add	r7, sp, #0
 8003622:	4603      	mov	r3, r0
 8003624:	603a      	str	r2, [r7, #0]
 8003626:	80fb      	strh	r3, [r7, #6]
 8003628:	460b      	mov	r3, r1
 800362a:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800362c:	4b1d      	ldr	r3, [pc, #116]	; (80036a4 <BSP_LCD_DrawPixel+0x88>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a1d      	ldr	r2, [pc, #116]	; (80036a8 <BSP_LCD_DrawPixel+0x8c>)
 8003632:	2134      	movs	r1, #52	; 0x34
 8003634:	fb01 f303 	mul.w	r3, r1, r3
 8003638:	4413      	add	r3, r2
 800363a:	3348      	adds	r3, #72	; 0x48
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2b02      	cmp	r3, #2
 8003640:	d116      	bne.n	8003670 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8003642:	4b18      	ldr	r3, [pc, #96]	; (80036a4 <BSP_LCD_DrawPixel+0x88>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a18      	ldr	r2, [pc, #96]	; (80036a8 <BSP_LCD_DrawPixel+0x8c>)
 8003648:	2134      	movs	r1, #52	; 0x34
 800364a:	fb01 f303 	mul.w	r3, r1, r3
 800364e:	4413      	add	r3, r2
 8003650:	335c      	adds	r3, #92	; 0x5c
 8003652:	681c      	ldr	r4, [r3, #0]
 8003654:	88bd      	ldrh	r5, [r7, #4]
 8003656:	f7ff fde3 	bl	8003220 <BSP_LCD_GetXSize>
 800365a:	4603      	mov	r3, r0
 800365c:	fb03 f205 	mul.w	r2, r3, r5
 8003660:	88fb      	ldrh	r3, [r7, #6]
 8003662:	4413      	add	r3, r2
 8003664:	005b      	lsls	r3, r3, #1
 8003666:	4423      	add	r3, r4
 8003668:	683a      	ldr	r2, [r7, #0]
 800366a:	b292      	uxth	r2, r2
 800366c:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 800366e:	e015      	b.n	800369c <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8003670:	4b0c      	ldr	r3, [pc, #48]	; (80036a4 <BSP_LCD_DrawPixel+0x88>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a0c      	ldr	r2, [pc, #48]	; (80036a8 <BSP_LCD_DrawPixel+0x8c>)
 8003676:	2134      	movs	r1, #52	; 0x34
 8003678:	fb01 f303 	mul.w	r3, r1, r3
 800367c:	4413      	add	r3, r2
 800367e:	335c      	adds	r3, #92	; 0x5c
 8003680:	681c      	ldr	r4, [r3, #0]
 8003682:	88bd      	ldrh	r5, [r7, #4]
 8003684:	f7ff fdcc 	bl	8003220 <BSP_LCD_GetXSize>
 8003688:	4603      	mov	r3, r0
 800368a:	fb03 f205 	mul.w	r2, r3, r5
 800368e:	88fb      	ldrh	r3, [r7, #6]
 8003690:	4413      	add	r3, r2
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	4423      	add	r3, r4
 8003696:	461a      	mov	r2, r3
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	6013      	str	r3, [r2, #0]
}
 800369c:	bf00      	nop
 800369e:	3708      	adds	r7, #8
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bdb0      	pop	{r4, r5, r7, pc}
 80036a4:	200001c8 	.word	0x200001c8
 80036a8:	20002ac8 	.word	0x20002ac8

080036ac <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80036ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036b0:	b086      	sub	sp, #24
 80036b2:	af02      	add	r7, sp, #8
 80036b4:	4604      	mov	r4, r0
 80036b6:	4608      	mov	r0, r1
 80036b8:	4611      	mov	r1, r2
 80036ba:	461a      	mov	r2, r3
 80036bc:	4623      	mov	r3, r4
 80036be:	80fb      	strh	r3, [r7, #6]
 80036c0:	4603      	mov	r3, r0
 80036c2:	80bb      	strh	r3, [r7, #4]
 80036c4:	460b      	mov	r3, r1
 80036c6:	807b      	strh	r3, [r7, #2]
 80036c8:	4613      	mov	r3, r2
 80036ca:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 80036cc:	2300      	movs	r3, #0
 80036ce:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80036d0:	4b30      	ldr	r3, [pc, #192]	; (8003794 <BSP_LCD_FillRect+0xe8>)
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	4930      	ldr	r1, [pc, #192]	; (8003798 <BSP_LCD_FillRect+0xec>)
 80036d6:	4613      	mov	r3, r2
 80036d8:	005b      	lsls	r3, r3, #1
 80036da:	4413      	add	r3, r2
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	440b      	add	r3, r1
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4618      	mov	r0, r3
 80036e4:	f7ff fe34 	bl	8003350 <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80036e8:	4b2a      	ldr	r3, [pc, #168]	; (8003794 <BSP_LCD_FillRect+0xe8>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a2b      	ldr	r2, [pc, #172]	; (800379c <BSP_LCD_FillRect+0xf0>)
 80036ee:	2134      	movs	r1, #52	; 0x34
 80036f0:	fb01 f303 	mul.w	r3, r1, r3
 80036f4:	4413      	add	r3, r2
 80036f6:	3348      	adds	r3, #72	; 0x48
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d114      	bne.n	8003728 <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80036fe:	4b25      	ldr	r3, [pc, #148]	; (8003794 <BSP_LCD_FillRect+0xe8>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a26      	ldr	r2, [pc, #152]	; (800379c <BSP_LCD_FillRect+0xf0>)
 8003704:	2134      	movs	r1, #52	; 0x34
 8003706:	fb01 f303 	mul.w	r3, r1, r3
 800370a:	4413      	add	r3, r2
 800370c:	335c      	adds	r3, #92	; 0x5c
 800370e:	681c      	ldr	r4, [r3, #0]
 8003710:	f7ff fd86 	bl	8003220 <BSP_LCD_GetXSize>
 8003714:	4602      	mov	r2, r0
 8003716:	88bb      	ldrh	r3, [r7, #4]
 8003718:	fb03 f202 	mul.w	r2, r3, r2
 800371c:	88fb      	ldrh	r3, [r7, #6]
 800371e:	4413      	add	r3, r2
 8003720:	005b      	lsls	r3, r3, #1
 8003722:	4423      	add	r3, r4
 8003724:	60fb      	str	r3, [r7, #12]
 8003726:	e013      	b.n	8003750 <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003728:	4b1a      	ldr	r3, [pc, #104]	; (8003794 <BSP_LCD_FillRect+0xe8>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a1b      	ldr	r2, [pc, #108]	; (800379c <BSP_LCD_FillRect+0xf0>)
 800372e:	2134      	movs	r1, #52	; 0x34
 8003730:	fb01 f303 	mul.w	r3, r1, r3
 8003734:	4413      	add	r3, r2
 8003736:	335c      	adds	r3, #92	; 0x5c
 8003738:	681c      	ldr	r4, [r3, #0]
 800373a:	f7ff fd71 	bl	8003220 <BSP_LCD_GetXSize>
 800373e:	4602      	mov	r2, r0
 8003740:	88bb      	ldrh	r3, [r7, #4]
 8003742:	fb03 f202 	mul.w	r2, r3, r2
 8003746:	88fb      	ldrh	r3, [r7, #6]
 8003748:	4413      	add	r3, r2
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	4423      	add	r3, r4
 800374e:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8003750:	4b10      	ldr	r3, [pc, #64]	; (8003794 <BSP_LCD_FillRect+0xe8>)
 8003752:	681c      	ldr	r4, [r3, #0]
 8003754:	68fd      	ldr	r5, [r7, #12]
 8003756:	887e      	ldrh	r6, [r7, #2]
 8003758:	f8b7 8000 	ldrh.w	r8, [r7]
 800375c:	f7ff fd60 	bl	8003220 <BSP_LCD_GetXSize>
 8003760:	4602      	mov	r2, r0
 8003762:	887b      	ldrh	r3, [r7, #2]
 8003764:	1ad1      	subs	r1, r2, r3
 8003766:	4b0b      	ldr	r3, [pc, #44]	; (8003794 <BSP_LCD_FillRect+0xe8>)
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	480b      	ldr	r0, [pc, #44]	; (8003798 <BSP_LCD_FillRect+0xec>)
 800376c:	4613      	mov	r3, r2
 800376e:	005b      	lsls	r3, r3, #1
 8003770:	4413      	add	r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	4403      	add	r3, r0
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	9301      	str	r3, [sp, #4]
 800377a:	9100      	str	r1, [sp, #0]
 800377c:	4643      	mov	r3, r8
 800377e:	4632      	mov	r2, r6
 8003780:	4629      	mov	r1, r5
 8003782:	4620      	mov	r0, r4
 8003784:	f000 f9d8 	bl	8003b38 <LL_FillBuffer>
}
 8003788:	bf00      	nop
 800378a:	3710      	adds	r7, #16
 800378c:	46bd      	mov	sp, r7
 800378e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003792:	bf00      	nop
 8003794:	200001c8 	.word	0x200001c8
 8003798:	200001cc 	.word	0x200001cc
 800379c:	20002ac8 	.word	0x20002ac8

080037a0 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 80037a4:	4b0a      	ldr	r3, [pc, #40]	; (80037d0 <BSP_LCD_DisplayOn+0x30>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	699a      	ldr	r2, [r3, #24]
 80037aa:	4b09      	ldr	r3, [pc, #36]	; (80037d0 <BSP_LCD_DisplayOn+0x30>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f042 0201 	orr.w	r2, r2, #1
 80037b2:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 80037b4:	2201      	movs	r2, #1
 80037b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80037ba:	4806      	ldr	r0, [pc, #24]	; (80037d4 <BSP_LCD_DisplayOn+0x34>)
 80037bc:	f002 fd8c 	bl	80062d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 80037c0:	2201      	movs	r2, #1
 80037c2:	2108      	movs	r1, #8
 80037c4:	4804      	ldr	r0, [pc, #16]	; (80037d8 <BSP_LCD_DisplayOn+0x38>)
 80037c6:	f002 fd87 	bl	80062d8 <HAL_GPIO_WritePin>
}
 80037ca:	bf00      	nop
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	20002ac8 	.word	0x20002ac8
 80037d4:	40022000 	.word	0x40022000
 80037d8:	40022800 	.word	0x40022800

080037dc <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b090      	sub	sp, #64	; 0x40
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80037e6:	4b64      	ldr	r3, [pc, #400]	; (8003978 <BSP_LCD_MspInit+0x19c>)
 80037e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ea:	4a63      	ldr	r2, [pc, #396]	; (8003978 <BSP_LCD_MspInit+0x19c>)
 80037ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80037f0:	6453      	str	r3, [r2, #68]	; 0x44
 80037f2:	4b61      	ldr	r3, [pc, #388]	; (8003978 <BSP_LCD_MspInit+0x19c>)
 80037f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80037fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80037fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80037fe:	4b5e      	ldr	r3, [pc, #376]	; (8003978 <BSP_LCD_MspInit+0x19c>)
 8003800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003802:	4a5d      	ldr	r2, [pc, #372]	; (8003978 <BSP_LCD_MspInit+0x19c>)
 8003804:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003808:	6313      	str	r3, [r2, #48]	; 0x30
 800380a:	4b5b      	ldr	r3, [pc, #364]	; (8003978 <BSP_LCD_MspInit+0x19c>)
 800380c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003812:	627b      	str	r3, [r7, #36]	; 0x24
 8003814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003816:	4b58      	ldr	r3, [pc, #352]	; (8003978 <BSP_LCD_MspInit+0x19c>)
 8003818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381a:	4a57      	ldr	r2, [pc, #348]	; (8003978 <BSP_LCD_MspInit+0x19c>)
 800381c:	f043 0310 	orr.w	r3, r3, #16
 8003820:	6313      	str	r3, [r2, #48]	; 0x30
 8003822:	4b55      	ldr	r3, [pc, #340]	; (8003978 <BSP_LCD_MspInit+0x19c>)
 8003824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003826:	f003 0310 	and.w	r3, r3, #16
 800382a:	623b      	str	r3, [r7, #32]
 800382c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800382e:	4b52      	ldr	r3, [pc, #328]	; (8003978 <BSP_LCD_MspInit+0x19c>)
 8003830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003832:	4a51      	ldr	r2, [pc, #324]	; (8003978 <BSP_LCD_MspInit+0x19c>)
 8003834:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003838:	6313      	str	r3, [r2, #48]	; 0x30
 800383a:	4b4f      	ldr	r3, [pc, #316]	; (8003978 <BSP_LCD_MspInit+0x19c>)
 800383c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003842:	61fb      	str	r3, [r7, #28]
 8003844:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8003846:	4b4c      	ldr	r3, [pc, #304]	; (8003978 <BSP_LCD_MspInit+0x19c>)
 8003848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384a:	4a4b      	ldr	r2, [pc, #300]	; (8003978 <BSP_LCD_MspInit+0x19c>)
 800384c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003850:	6313      	str	r3, [r2, #48]	; 0x30
 8003852:	4b49      	ldr	r3, [pc, #292]	; (8003978 <BSP_LCD_MspInit+0x19c>)
 8003854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800385a:	61bb      	str	r3, [r7, #24]
 800385c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800385e:	4b46      	ldr	r3, [pc, #280]	; (8003978 <BSP_LCD_MspInit+0x19c>)
 8003860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003862:	4a45      	ldr	r2, [pc, #276]	; (8003978 <BSP_LCD_MspInit+0x19c>)
 8003864:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003868:	6313      	str	r3, [r2, #48]	; 0x30
 800386a:	4b43      	ldr	r3, [pc, #268]	; (8003978 <BSP_LCD_MspInit+0x19c>)
 800386c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003872:	617b      	str	r3, [r7, #20]
 8003874:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8003876:	4b40      	ldr	r3, [pc, #256]	; (8003978 <BSP_LCD_MspInit+0x19c>)
 8003878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387a:	4a3f      	ldr	r2, [pc, #252]	; (8003978 <BSP_LCD_MspInit+0x19c>)
 800387c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003880:	6313      	str	r3, [r2, #48]	; 0x30
 8003882:	4b3d      	ldr	r3, [pc, #244]	; (8003978 <BSP_LCD_MspInit+0x19c>)
 8003884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003886:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800388a:	613b      	str	r3, [r7, #16]
 800388c:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 800388e:	4b3a      	ldr	r3, [pc, #232]	; (8003978 <BSP_LCD_MspInit+0x19c>)
 8003890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003892:	4a39      	ldr	r2, [pc, #228]	; (8003978 <BSP_LCD_MspInit+0x19c>)
 8003894:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003898:	6313      	str	r3, [r2, #48]	; 0x30
 800389a:	4b37      	ldr	r3, [pc, #220]	; (8003978 <BSP_LCD_MspInit+0x19c>)
 800389c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a2:	60fb      	str	r3, [r7, #12]
 80038a4:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80038a6:	4b34      	ldr	r3, [pc, #208]	; (8003978 <BSP_LCD_MspInit+0x19c>)
 80038a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038aa:	4a33      	ldr	r2, [pc, #204]	; (8003978 <BSP_LCD_MspInit+0x19c>)
 80038ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038b0:	6313      	str	r3, [r2, #48]	; 0x30
 80038b2:	4b31      	ldr	r3, [pc, #196]	; (8003978 <BSP_LCD_MspInit+0x19c>)
 80038b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038ba:	60bb      	str	r3, [r7, #8]
 80038bc:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 80038be:	2310      	movs	r3, #16
 80038c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80038c2:	2302      	movs	r3, #2
 80038c4:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80038c6:	2300      	movs	r3, #0
 80038c8:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80038ca:	2302      	movs	r3, #2
 80038cc:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 80038ce:	230e      	movs	r3, #14
 80038d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80038d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038d6:	4619      	mov	r1, r3
 80038d8:	4828      	ldr	r0, [pc, #160]	; (800397c <BSP_LCD_MspInit+0x1a0>)
 80038da:	f002 fb39 	bl	8005f50 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 80038de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80038e4:	2302      	movs	r3, #2
 80038e6:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 80038e8:	2309      	movs	r3, #9
 80038ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80038ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038f0:	4619      	mov	r1, r3
 80038f2:	4823      	ldr	r0, [pc, #140]	; (8003980 <BSP_LCD_MspInit+0x1a4>)
 80038f4:	f002 fb2c 	bl	8005f50 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 80038f8:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 80038fc:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80038fe:	2302      	movs	r3, #2
 8003900:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003902:	230e      	movs	r3, #14
 8003904:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8003906:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800390a:	4619      	mov	r1, r3
 800390c:	481d      	ldr	r0, [pc, #116]	; (8003984 <BSP_LCD_MspInit+0x1a8>)
 800390e:	f002 fb1f 	bl	8005f50 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8003912:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8003916:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003918:	2302      	movs	r3, #2
 800391a:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800391c:	230e      	movs	r3, #14
 800391e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8003920:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003924:	4619      	mov	r1, r3
 8003926:	4818      	ldr	r0, [pc, #96]	; (8003988 <BSP_LCD_MspInit+0x1ac>)
 8003928:	f002 fb12 	bl	8005f50 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 800392c:	23f7      	movs	r3, #247	; 0xf7
 800392e:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003930:	2302      	movs	r3, #2
 8003932:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003934:	230e      	movs	r3, #14
 8003936:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8003938:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800393c:	4619      	mov	r1, r3
 800393e:	4813      	ldr	r0, [pc, #76]	; (800398c <BSP_LCD_MspInit+0x1b0>)
 8003940:	f002 fb06 	bl	8005f50 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8003944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003948:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800394a:	2301      	movs	r3, #1
 800394c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 800394e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003952:	4619      	mov	r1, r3
 8003954:	480b      	ldr	r0, [pc, #44]	; (8003984 <BSP_LCD_MspInit+0x1a8>)
 8003956:	f002 fafb 	bl	8005f50 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 800395a:	2308      	movs	r3, #8
 800395c:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800395e:	2301      	movs	r3, #1
 8003960:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8003962:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003966:	4619      	mov	r1, r3
 8003968:	4808      	ldr	r0, [pc, #32]	; (800398c <BSP_LCD_MspInit+0x1b0>)
 800396a:	f002 faf1 	bl	8005f50 <HAL_GPIO_Init>
}
 800396e:	bf00      	nop
 8003970:	3740      	adds	r7, #64	; 0x40
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	40023800 	.word	0x40023800
 800397c:	40021000 	.word	0x40021000
 8003980:	40021800 	.word	0x40021800
 8003984:	40022000 	.word	0x40022000
 8003988:	40022400 	.word	0x40022400
 800398c:	40022800 	.word	0x40022800

08003990 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800399a:	4b0a      	ldr	r3, [pc, #40]	; (80039c4 <BSP_LCD_ClockConfig+0x34>)
 800399c:	2208      	movs	r2, #8
 800399e:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 80039a0:	4b08      	ldr	r3, [pc, #32]	; (80039c4 <BSP_LCD_ClockConfig+0x34>)
 80039a2:	22c0      	movs	r2, #192	; 0xc0
 80039a4:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 80039a6:	4b07      	ldr	r3, [pc, #28]	; (80039c4 <BSP_LCD_ClockConfig+0x34>)
 80039a8:	2205      	movs	r2, #5
 80039aa:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80039ac:	4b05      	ldr	r3, [pc, #20]	; (80039c4 <BSP_LCD_ClockConfig+0x34>)
 80039ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80039b2:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 80039b4:	4803      	ldr	r0, [pc, #12]	; (80039c4 <BSP_LCD_ClockConfig+0x34>)
 80039b6:	f003 ff79 	bl	80078ac <HAL_RCCEx_PeriphCLKConfig>
}
 80039ba:	bf00      	nop
 80039bc:	3708      	adds	r7, #8
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	200001e4 	.word	0x200001e4

080039c8 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b088      	sub	sp, #32
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	4603      	mov	r3, r0
 80039d0:	603a      	str	r2, [r7, #0]
 80039d2:	80fb      	strh	r3, [r7, #6]
 80039d4:	460b      	mov	r3, r1
 80039d6:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80039d8:	2300      	movs	r3, #0
 80039da:	61fb      	str	r3, [r7, #28]
 80039dc:	2300      	movs	r3, #0
 80039de:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 80039e0:	4b53      	ldr	r3, [pc, #332]	; (8003b30 <DrawChar+0x168>)
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	4953      	ldr	r1, [pc, #332]	; (8003b34 <DrawChar+0x16c>)
 80039e6:	4613      	mov	r3, r2
 80039e8:	005b      	lsls	r3, r3, #1
 80039ea:	4413      	add	r3, r2
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	440b      	add	r3, r1
 80039f0:	3308      	adds	r3, #8
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	88db      	ldrh	r3, [r3, #6]
 80039f6:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80039f8:	4b4d      	ldr	r3, [pc, #308]	; (8003b30 <DrawChar+0x168>)
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	494d      	ldr	r1, [pc, #308]	; (8003b34 <DrawChar+0x16c>)
 80039fe:	4613      	mov	r3, r2
 8003a00:	005b      	lsls	r3, r3, #1
 8003a02:	4413      	add	r3, r2
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	440b      	add	r3, r1
 8003a08:	3308      	adds	r3, #8
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	889b      	ldrh	r3, [r3, #4]
 8003a0e:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8003a10:	8a3b      	ldrh	r3, [r7, #16]
 8003a12:	3307      	adds	r3, #7
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	da00      	bge.n	8003a1a <DrawChar+0x52>
 8003a18:	3307      	adds	r3, #7
 8003a1a:	10db      	asrs	r3, r3, #3
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	00db      	lsls	r3, r3, #3
 8003a20:	b2da      	uxtb	r2, r3
 8003a22:	8a3b      	ldrh	r3, [r7, #16]
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	61fb      	str	r3, [r7, #28]
 8003a2e:	e076      	b.n	8003b1e <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8003a30:	8a3b      	ldrh	r3, [r7, #16]
 8003a32:	3307      	adds	r3, #7
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	da00      	bge.n	8003a3a <DrawChar+0x72>
 8003a38:	3307      	adds	r3, #7
 8003a3a:	10db      	asrs	r3, r3, #3
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	fb03 f302 	mul.w	r3, r3, r2
 8003a44:	683a      	ldr	r2, [r7, #0]
 8003a46:	4413      	add	r3, r2
 8003a48:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8003a4a:	8a3b      	ldrh	r3, [r7, #16]
 8003a4c:	3307      	adds	r3, #7
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	da00      	bge.n	8003a54 <DrawChar+0x8c>
 8003a52:	3307      	adds	r3, #7
 8003a54:	10db      	asrs	r3, r3, #3
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d002      	beq.n	8003a60 <DrawChar+0x98>
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d004      	beq.n	8003a68 <DrawChar+0xa0>
 8003a5e:	e00c      	b.n	8003a7a <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	617b      	str	r3, [r7, #20]
      break;
 8003a66:	e016      	b.n	8003a96 <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	021b      	lsls	r3, r3, #8
 8003a6e:	68ba      	ldr	r2, [r7, #8]
 8003a70:	3201      	adds	r2, #1
 8003a72:	7812      	ldrb	r2, [r2, #0]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	617b      	str	r3, [r7, #20]
      break;
 8003a78:	e00d      	b.n	8003a96 <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	041a      	lsls	r2, r3, #16
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	3301      	adds	r3, #1
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	021b      	lsls	r3, r3, #8
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	68ba      	ldr	r2, [r7, #8]
 8003a8c:	3202      	adds	r2, #2
 8003a8e:	7812      	ldrb	r2, [r2, #0]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	617b      	str	r3, [r7, #20]
      break;
 8003a94:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8003a96:	2300      	movs	r3, #0
 8003a98:	61bb      	str	r3, [r7, #24]
 8003a9a:	e036      	b.n	8003b0a <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8003a9c:	8a3a      	ldrh	r2, [r7, #16]
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	1ad2      	subs	r2, r2, r3
 8003aa2:	7bfb      	ldrb	r3, [r7, #15]
 8003aa4:	4413      	add	r3, r2
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8003aae:	461a      	mov	r2, r3
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d012      	beq.n	8003ade <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	b29a      	uxth	r2, r3
 8003abc:	88fb      	ldrh	r3, [r7, #6]
 8003abe:	4413      	add	r3, r2
 8003ac0:	b298      	uxth	r0, r3
 8003ac2:	4b1b      	ldr	r3, [pc, #108]	; (8003b30 <DrawChar+0x168>)
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	491b      	ldr	r1, [pc, #108]	; (8003b34 <DrawChar+0x16c>)
 8003ac8:	4613      	mov	r3, r2
 8003aca:	005b      	lsls	r3, r3, #1
 8003acc:	4413      	add	r3, r2
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	440b      	add	r3, r1
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	88bb      	ldrh	r3, [r7, #4]
 8003ad6:	4619      	mov	r1, r3
 8003ad8:	f7ff fda0 	bl	800361c <BSP_LCD_DrawPixel>
 8003adc:	e012      	b.n	8003b04 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	b29a      	uxth	r2, r3
 8003ae2:	88fb      	ldrh	r3, [r7, #6]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	b298      	uxth	r0, r3
 8003ae8:	4b11      	ldr	r3, [pc, #68]	; (8003b30 <DrawChar+0x168>)
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	4911      	ldr	r1, [pc, #68]	; (8003b34 <DrawChar+0x16c>)
 8003aee:	4613      	mov	r3, r2
 8003af0:	005b      	lsls	r3, r3, #1
 8003af2:	4413      	add	r3, r2
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	440b      	add	r3, r1
 8003af8:	3304      	adds	r3, #4
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	88bb      	ldrh	r3, [r7, #4]
 8003afe:	4619      	mov	r1, r3
 8003b00:	f7ff fd8c 	bl	800361c <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	3301      	adds	r3, #1
 8003b08:	61bb      	str	r3, [r7, #24]
 8003b0a:	8a3b      	ldrh	r3, [r7, #16]
 8003b0c:	69ba      	ldr	r2, [r7, #24]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d3c4      	bcc.n	8003a9c <DrawChar+0xd4>
      } 
    }
    Ypos++;
 8003b12:	88bb      	ldrh	r3, [r7, #4]
 8003b14:	3301      	adds	r3, #1
 8003b16:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	61fb      	str	r3, [r7, #28]
 8003b1e:	8a7b      	ldrh	r3, [r7, #18]
 8003b20:	69fa      	ldr	r2, [r7, #28]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d384      	bcc.n	8003a30 <DrawChar+0x68>
  }
}
 8003b26:	bf00      	nop
 8003b28:	bf00      	nop
 8003b2a:	3720      	adds	r7, #32
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	200001c8 	.word	0x200001c8
 8003b34:	200001cc 	.word	0x200001cc

08003b38 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b086      	sub	sp, #24
 8003b3c:	af02      	add	r7, sp, #8
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	607a      	str	r2, [r7, #4]
 8003b44:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8003b46:	4b1e      	ldr	r3, [pc, #120]	; (8003bc0 <LL_FillBuffer+0x88>)
 8003b48:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003b4c:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003b4e:	4b1d      	ldr	r3, [pc, #116]	; (8003bc4 <LL_FillBuffer+0x8c>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a1d      	ldr	r2, [pc, #116]	; (8003bc8 <LL_FillBuffer+0x90>)
 8003b54:	2134      	movs	r1, #52	; 0x34
 8003b56:	fb01 f303 	mul.w	r3, r1, r3
 8003b5a:	4413      	add	r3, r2
 8003b5c:	3348      	adds	r3, #72	; 0x48
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d103      	bne.n	8003b6c <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8003b64:	4b16      	ldr	r3, [pc, #88]	; (8003bc0 <LL_FillBuffer+0x88>)
 8003b66:	2202      	movs	r2, #2
 8003b68:	609a      	str	r2, [r3, #8]
 8003b6a:	e002      	b.n	8003b72 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8003b6c:	4b14      	ldr	r3, [pc, #80]	; (8003bc0 <LL_FillBuffer+0x88>)
 8003b6e:	2200      	movs	r2, #0
 8003b70:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8003b72:	4a13      	ldr	r2, [pc, #76]	; (8003bc0 <LL_FillBuffer+0x88>)
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8003b78:	4b11      	ldr	r3, [pc, #68]	; (8003bc0 <LL_FillBuffer+0x88>)
 8003b7a:	4a14      	ldr	r2, [pc, #80]	; (8003bcc <LL_FillBuffer+0x94>)
 8003b7c:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8003b7e:	4810      	ldr	r0, [pc, #64]	; (8003bc0 <LL_FillBuffer+0x88>)
 8003b80:	f001 fe4a 	bl	8005818 <HAL_DMA2D_Init>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d115      	bne.n	8003bb6 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8003b8a:	68f9      	ldr	r1, [r7, #12]
 8003b8c:	480c      	ldr	r0, [pc, #48]	; (8003bc0 <LL_FillBuffer+0x88>)
 8003b8e:	f002 f8b1 	bl	8005cf4 <HAL_DMA2D_ConfigLayer>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d10e      	bne.n	8003bb6 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8003b98:	68ba      	ldr	r2, [r7, #8]
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	9300      	str	r3, [sp, #0]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	69f9      	ldr	r1, [r7, #28]
 8003ba2:	4807      	ldr	r0, [pc, #28]	; (8003bc0 <LL_FillBuffer+0x88>)
 8003ba4:	f001 fe82 	bl	80058ac <HAL_DMA2D_Start>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d103      	bne.n	8003bb6 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8003bae:	210a      	movs	r1, #10
 8003bb0:	4803      	ldr	r0, [pc, #12]	; (8003bc0 <LL_FillBuffer+0x88>)
 8003bb2:	f001 fea6 	bl	8005902 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8003bb6:	bf00      	nop
 8003bb8:	3710      	adds	r7, #16
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	20000188 	.word	0x20000188
 8003bc4:	200001c8 	.word	0x200001c8
 8003bc8:	20002ac8 	.word	0x20002ac8
 8003bcc:	4002b000 	.word	0x4002b000

08003bd0 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003bd4:	4b29      	ldr	r3, [pc, #164]	; (8003c7c <BSP_SDRAM_Init+0xac>)
 8003bd6:	4a2a      	ldr	r2, [pc, #168]	; (8003c80 <BSP_SDRAM_Init+0xb0>)
 8003bd8:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8003bda:	4b2a      	ldr	r3, [pc, #168]	; (8003c84 <BSP_SDRAM_Init+0xb4>)
 8003bdc:	2202      	movs	r2, #2
 8003bde:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8003be0:	4b28      	ldr	r3, [pc, #160]	; (8003c84 <BSP_SDRAM_Init+0xb4>)
 8003be2:	2207      	movs	r2, #7
 8003be4:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8003be6:	4b27      	ldr	r3, [pc, #156]	; (8003c84 <BSP_SDRAM_Init+0xb4>)
 8003be8:	2204      	movs	r2, #4
 8003bea:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8003bec:	4b25      	ldr	r3, [pc, #148]	; (8003c84 <BSP_SDRAM_Init+0xb4>)
 8003bee:	2207      	movs	r2, #7
 8003bf0:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8003bf2:	4b24      	ldr	r3, [pc, #144]	; (8003c84 <BSP_SDRAM_Init+0xb4>)
 8003bf4:	2202      	movs	r2, #2
 8003bf6:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8003bf8:	4b22      	ldr	r3, [pc, #136]	; (8003c84 <BSP_SDRAM_Init+0xb4>)
 8003bfa:	2202      	movs	r2, #2
 8003bfc:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8003bfe:	4b21      	ldr	r3, [pc, #132]	; (8003c84 <BSP_SDRAM_Init+0xb4>)
 8003c00:	2202      	movs	r2, #2
 8003c02:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8003c04:	4b1d      	ldr	r3, [pc, #116]	; (8003c7c <BSP_SDRAM_Init+0xac>)
 8003c06:	2200      	movs	r2, #0
 8003c08:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003c0a:	4b1c      	ldr	r3, [pc, #112]	; (8003c7c <BSP_SDRAM_Init+0xac>)
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8003c10:	4b1a      	ldr	r3, [pc, #104]	; (8003c7c <BSP_SDRAM_Init+0xac>)
 8003c12:	2204      	movs	r2, #4
 8003c14:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8003c16:	4b19      	ldr	r3, [pc, #100]	; (8003c7c <BSP_SDRAM_Init+0xac>)
 8003c18:	2210      	movs	r2, #16
 8003c1a:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003c1c:	4b17      	ldr	r3, [pc, #92]	; (8003c7c <BSP_SDRAM_Init+0xac>)
 8003c1e:	2240      	movs	r2, #64	; 0x40
 8003c20:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8003c22:	4b16      	ldr	r3, [pc, #88]	; (8003c7c <BSP_SDRAM_Init+0xac>)
 8003c24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c28:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003c2a:	4b14      	ldr	r3, [pc, #80]	; (8003c7c <BSP_SDRAM_Init+0xac>)
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8003c30:	4b12      	ldr	r3, [pc, #72]	; (8003c7c <BSP_SDRAM_Init+0xac>)
 8003c32:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c36:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8003c38:	4b10      	ldr	r3, [pc, #64]	; (8003c7c <BSP_SDRAM_Init+0xac>)
 8003c3a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003c3e:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8003c40:	4b0e      	ldr	r3, [pc, #56]	; (8003c7c <BSP_SDRAM_Init+0xac>)
 8003c42:	2200      	movs	r2, #0
 8003c44:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8003c46:	2100      	movs	r1, #0
 8003c48:	480c      	ldr	r0, [pc, #48]	; (8003c7c <BSP_SDRAM_Init+0xac>)
 8003c4a:	f000 f87f 	bl	8003d4c <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8003c4e:	490d      	ldr	r1, [pc, #52]	; (8003c84 <BSP_SDRAM_Init+0xb4>)
 8003c50:	480a      	ldr	r0, [pc, #40]	; (8003c7c <BSP_SDRAM_Init+0xac>)
 8003c52:	f005 f8ed 	bl	8008e30 <HAL_SDRAM_Init>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d003      	beq.n	8003c64 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8003c5c:	4b0a      	ldr	r3, [pc, #40]	; (8003c88 <BSP_SDRAM_Init+0xb8>)
 8003c5e:	2201      	movs	r2, #1
 8003c60:	701a      	strb	r2, [r3, #0]
 8003c62:	e002      	b.n	8003c6a <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8003c64:	4b08      	ldr	r3, [pc, #32]	; (8003c88 <BSP_SDRAM_Init+0xb8>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8003c6a:	f240 6003 	movw	r0, #1539	; 0x603
 8003c6e:	f000 f80d 	bl	8003c8c <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8003c72:	4b05      	ldr	r3, [pc, #20]	; (8003c88 <BSP_SDRAM_Init+0xb8>)
 8003c74:	781b      	ldrb	r3, [r3, #0]
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	20002b70 	.word	0x20002b70
 8003c80:	a0000140 	.word	0xa0000140
 8003c84:	20000268 	.word	0x20000268
 8003c88:	20000044 	.word	0x20000044

08003c8c <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8003c94:	2300      	movs	r3, #0
 8003c96:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8003c98:	4b2a      	ldr	r3, [pc, #168]	; (8003d44 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003c9e:	4b29      	ldr	r3, [pc, #164]	; (8003d44 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003ca0:	2210      	movs	r2, #16
 8003ca2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003ca4:	4b27      	ldr	r3, [pc, #156]	; (8003d44 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003caa:	4b26      	ldr	r3, [pc, #152]	; (8003d44 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003cac:	2200      	movs	r2, #0
 8003cae:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003cb0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003cb4:	4923      	ldr	r1, [pc, #140]	; (8003d44 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003cb6:	4824      	ldr	r0, [pc, #144]	; (8003d48 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003cb8:	f005 f8ee 	bl	8008e98 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003cbc:	2001      	movs	r0, #1
 8003cbe:	f000 f96b 	bl	8003f98 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8003cc2:	4b20      	ldr	r3, [pc, #128]	; (8003d44 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003cc4:	2202      	movs	r2, #2
 8003cc6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003cc8:	4b1e      	ldr	r3, [pc, #120]	; (8003d44 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003cca:	2210      	movs	r2, #16
 8003ccc:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003cce:	4b1d      	ldr	r3, [pc, #116]	; (8003d44 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003cd4:	4b1b      	ldr	r3, [pc, #108]	; (8003d44 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8003cda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003cde:	4919      	ldr	r1, [pc, #100]	; (8003d44 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003ce0:	4819      	ldr	r0, [pc, #100]	; (8003d48 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003ce2:	f005 f8d9 	bl	8008e98 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003ce6:	4b17      	ldr	r3, [pc, #92]	; (8003d44 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003ce8:	2203      	movs	r2, #3
 8003cea:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003cec:	4b15      	ldr	r3, [pc, #84]	; (8003d44 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003cee:	2210      	movs	r2, #16
 8003cf0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8003cf2:	4b14      	ldr	r3, [pc, #80]	; (8003d44 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003cf4:	2208      	movs	r2, #8
 8003cf6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003cf8:	4b12      	ldr	r3, [pc, #72]	; (8003d44 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003cfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d02:	4910      	ldr	r1, [pc, #64]	; (8003d44 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003d04:	4810      	ldr	r0, [pc, #64]	; (8003d48 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003d06:	f005 f8c7 	bl	8008e98 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8003d0a:	f44f 7308 	mov.w	r3, #544	; 0x220
 8003d0e:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8003d10:	4b0c      	ldr	r3, [pc, #48]	; (8003d44 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003d12:	2204      	movs	r2, #4
 8003d14:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003d16:	4b0b      	ldr	r3, [pc, #44]	; (8003d44 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003d18:	2210      	movs	r2, #16
 8003d1a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003d1c:	4b09      	ldr	r3, [pc, #36]	; (8003d44 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003d1e:	2201      	movs	r2, #1
 8003d20:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	4a07      	ldr	r2, [pc, #28]	; (8003d44 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003d26:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003d28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d2c:	4905      	ldr	r1, [pc, #20]	; (8003d44 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003d2e:	4806      	ldr	r0, [pc, #24]	; (8003d48 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003d30:	f005 f8b2 	bl	8008e98 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8003d34:	6879      	ldr	r1, [r7, #4]
 8003d36:	4804      	ldr	r0, [pc, #16]	; (8003d48 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003d38:	f005 f8d9 	bl	8008eee <HAL_SDRAM_ProgramRefreshRate>
}
 8003d3c:	bf00      	nop
 8003d3e:	3710      	adds	r7, #16
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	20000284 	.word	0x20000284
 8003d48:	20002b70 	.word	0x20002b70

08003d4c <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b090      	sub	sp, #64	; 0x40
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003d56:	4b70      	ldr	r3, [pc, #448]	; (8003f18 <BSP_SDRAM_MspInit+0x1cc>)
 8003d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d5a:	4a6f      	ldr	r2, [pc, #444]	; (8003f18 <BSP_SDRAM_MspInit+0x1cc>)
 8003d5c:	f043 0301 	orr.w	r3, r3, #1
 8003d60:	6393      	str	r3, [r2, #56]	; 0x38
 8003d62:	4b6d      	ldr	r3, [pc, #436]	; (8003f18 <BSP_SDRAM_MspInit+0x1cc>)
 8003d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d66:	f003 0301 	and.w	r3, r3, #1
 8003d6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8003d6e:	4b6a      	ldr	r3, [pc, #424]	; (8003f18 <BSP_SDRAM_MspInit+0x1cc>)
 8003d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d72:	4a69      	ldr	r2, [pc, #420]	; (8003f18 <BSP_SDRAM_MspInit+0x1cc>)
 8003d74:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003d78:	6313      	str	r3, [r2, #48]	; 0x30
 8003d7a:	4b67      	ldr	r3, [pc, #412]	; (8003f18 <BSP_SDRAM_MspInit+0x1cc>)
 8003d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d82:	627b      	str	r3, [r7, #36]	; 0x24
 8003d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d86:	4b64      	ldr	r3, [pc, #400]	; (8003f18 <BSP_SDRAM_MspInit+0x1cc>)
 8003d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8a:	4a63      	ldr	r2, [pc, #396]	; (8003f18 <BSP_SDRAM_MspInit+0x1cc>)
 8003d8c:	f043 0304 	orr.w	r3, r3, #4
 8003d90:	6313      	str	r3, [r2, #48]	; 0x30
 8003d92:	4b61      	ldr	r3, [pc, #388]	; (8003f18 <BSP_SDRAM_MspInit+0x1cc>)
 8003d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d96:	f003 0304 	and.w	r3, r3, #4
 8003d9a:	623b      	str	r3, [r7, #32]
 8003d9c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d9e:	4b5e      	ldr	r3, [pc, #376]	; (8003f18 <BSP_SDRAM_MspInit+0x1cc>)
 8003da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da2:	4a5d      	ldr	r2, [pc, #372]	; (8003f18 <BSP_SDRAM_MspInit+0x1cc>)
 8003da4:	f043 0308 	orr.w	r3, r3, #8
 8003da8:	6313      	str	r3, [r2, #48]	; 0x30
 8003daa:	4b5b      	ldr	r3, [pc, #364]	; (8003f18 <BSP_SDRAM_MspInit+0x1cc>)
 8003dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dae:	f003 0308 	and.w	r3, r3, #8
 8003db2:	61fb      	str	r3, [r7, #28]
 8003db4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003db6:	4b58      	ldr	r3, [pc, #352]	; (8003f18 <BSP_SDRAM_MspInit+0x1cc>)
 8003db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dba:	4a57      	ldr	r2, [pc, #348]	; (8003f18 <BSP_SDRAM_MspInit+0x1cc>)
 8003dbc:	f043 0310 	orr.w	r3, r3, #16
 8003dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8003dc2:	4b55      	ldr	r3, [pc, #340]	; (8003f18 <BSP_SDRAM_MspInit+0x1cc>)
 8003dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc6:	f003 0310 	and.w	r3, r3, #16
 8003dca:	61bb      	str	r3, [r7, #24]
 8003dcc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003dce:	4b52      	ldr	r3, [pc, #328]	; (8003f18 <BSP_SDRAM_MspInit+0x1cc>)
 8003dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd2:	4a51      	ldr	r2, [pc, #324]	; (8003f18 <BSP_SDRAM_MspInit+0x1cc>)
 8003dd4:	f043 0320 	orr.w	r3, r3, #32
 8003dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8003dda:	4b4f      	ldr	r3, [pc, #316]	; (8003f18 <BSP_SDRAM_MspInit+0x1cc>)
 8003ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dde:	f003 0320 	and.w	r3, r3, #32
 8003de2:	617b      	str	r3, [r7, #20]
 8003de4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003de6:	4b4c      	ldr	r3, [pc, #304]	; (8003f18 <BSP_SDRAM_MspInit+0x1cc>)
 8003de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dea:	4a4b      	ldr	r2, [pc, #300]	; (8003f18 <BSP_SDRAM_MspInit+0x1cc>)
 8003dec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003df0:	6313      	str	r3, [r2, #48]	; 0x30
 8003df2:	4b49      	ldr	r3, [pc, #292]	; (8003f18 <BSP_SDRAM_MspInit+0x1cc>)
 8003df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dfa:	613b      	str	r3, [r7, #16]
 8003dfc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003dfe:	4b46      	ldr	r3, [pc, #280]	; (8003f18 <BSP_SDRAM_MspInit+0x1cc>)
 8003e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e02:	4a45      	ldr	r2, [pc, #276]	; (8003f18 <BSP_SDRAM_MspInit+0x1cc>)
 8003e04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e08:	6313      	str	r3, [r2, #48]	; 0x30
 8003e0a:	4b43      	ldr	r3, [pc, #268]	; (8003f18 <BSP_SDRAM_MspInit+0x1cc>)
 8003e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e12:	60fb      	str	r3, [r7, #12]
 8003e14:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003e16:	2302      	movs	r3, #2
 8003e18:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8003e1e:	2302      	movs	r3, #2
 8003e20:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8003e22:	230c      	movs	r3, #12
 8003e24:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8003e26:	2308      	movs	r3, #8
 8003e28:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8003e2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e2e:	4619      	mov	r1, r3
 8003e30:	483a      	ldr	r0, [pc, #232]	; (8003f1c <BSP_SDRAM_MspInit+0x1d0>)
 8003e32:	f002 f88d 	bl	8005f50 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8003e36:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003e3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e40:	4619      	mov	r1, r3
 8003e42:	4837      	ldr	r0, [pc, #220]	; (8003f20 <BSP_SDRAM_MspInit+0x1d4>)
 8003e44:	f002 f884 	bl	8005f50 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8003e48:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003e4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e52:	4619      	mov	r1, r3
 8003e54:	4833      	ldr	r0, [pc, #204]	; (8003f24 <BSP_SDRAM_MspInit+0x1d8>)
 8003e56:	f002 f87b 	bl	8005f50 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8003e5a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8003e60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e64:	4619      	mov	r1, r3
 8003e66:	4830      	ldr	r0, [pc, #192]	; (8003f28 <BSP_SDRAM_MspInit+0x1dc>)
 8003e68:	f002 f872 	bl	8005f50 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8003e6c:	f248 1333 	movw	r3, #33075	; 0x8133
 8003e70:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003e72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e76:	4619      	mov	r1, r3
 8003e78:	482c      	ldr	r0, [pc, #176]	; (8003f2c <BSP_SDRAM_MspInit+0x1e0>)
 8003e7a:	f002 f869 	bl	8005f50 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8003e7e:	2328      	movs	r3, #40	; 0x28
 8003e80:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8003e82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e86:	4619      	mov	r1, r3
 8003e88:	4829      	ldr	r0, [pc, #164]	; (8003f30 <BSP_SDRAM_MspInit+0x1e4>)
 8003e8a:	f002 f861 	bl	8005f50 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8003e8e:	4b29      	ldr	r3, [pc, #164]	; (8003f34 <BSP_SDRAM_MspInit+0x1e8>)
 8003e90:	2200      	movs	r2, #0
 8003e92:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003e94:	4b27      	ldr	r3, [pc, #156]	; (8003f34 <BSP_SDRAM_MspInit+0x1e8>)
 8003e96:	2280      	movs	r2, #128	; 0x80
 8003e98:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8003e9a:	4b26      	ldr	r3, [pc, #152]	; (8003f34 <BSP_SDRAM_MspInit+0x1e8>)
 8003e9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ea0:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8003ea2:	4b24      	ldr	r3, [pc, #144]	; (8003f34 <BSP_SDRAM_MspInit+0x1e8>)
 8003ea4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ea8:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003eaa:	4b22      	ldr	r3, [pc, #136]	; (8003f34 <BSP_SDRAM_MspInit+0x1e8>)
 8003eac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003eb0:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003eb2:	4b20      	ldr	r3, [pc, #128]	; (8003f34 <BSP_SDRAM_MspInit+0x1e8>)
 8003eb4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003eb8:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8003eba:	4b1e      	ldr	r3, [pc, #120]	; (8003f34 <BSP_SDRAM_MspInit+0x1e8>)
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003ec0:	4b1c      	ldr	r3, [pc, #112]	; (8003f34 <BSP_SDRAM_MspInit+0x1e8>)
 8003ec2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003ec6:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8003ec8:	4b1a      	ldr	r3, [pc, #104]	; (8003f34 <BSP_SDRAM_MspInit+0x1e8>)
 8003eca:	2200      	movs	r2, #0
 8003ecc:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003ece:	4b19      	ldr	r3, [pc, #100]	; (8003f34 <BSP_SDRAM_MspInit+0x1e8>)
 8003ed0:	2203      	movs	r2, #3
 8003ed2:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003ed4:	4b17      	ldr	r3, [pc, #92]	; (8003f34 <BSP_SDRAM_MspInit+0x1e8>)
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003eda:	4b16      	ldr	r3, [pc, #88]	; (8003f34 <BSP_SDRAM_MspInit+0x1e8>)
 8003edc:	2200      	movs	r2, #0
 8003ede:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8003ee0:	4b14      	ldr	r3, [pc, #80]	; (8003f34 <BSP_SDRAM_MspInit+0x1e8>)
 8003ee2:	4a15      	ldr	r2, [pc, #84]	; (8003f38 <BSP_SDRAM_MspInit+0x1ec>)
 8003ee4:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a12      	ldr	r2, [pc, #72]	; (8003f34 <BSP_SDRAM_MspInit+0x1e8>)
 8003eea:	631a      	str	r2, [r3, #48]	; 0x30
 8003eec:	4a11      	ldr	r2, [pc, #68]	; (8003f34 <BSP_SDRAM_MspInit+0x1e8>)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8003ef2:	4810      	ldr	r0, [pc, #64]	; (8003f34 <BSP_SDRAM_MspInit+0x1e8>)
 8003ef4:	f001 f8d6 	bl	80050a4 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8003ef8:	480e      	ldr	r0, [pc, #56]	; (8003f34 <BSP_SDRAM_MspInit+0x1e8>)
 8003efa:	f001 f825 	bl	8004f48 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8003efe:	2200      	movs	r2, #0
 8003f00:	210f      	movs	r1, #15
 8003f02:	2038      	movs	r0, #56	; 0x38
 8003f04:	f000 fe92 	bl	8004c2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003f08:	2038      	movs	r0, #56	; 0x38
 8003f0a:	f000 feab 	bl	8004c64 <HAL_NVIC_EnableIRQ>
}
 8003f0e:	bf00      	nop
 8003f10:	3740      	adds	r7, #64	; 0x40
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	40023800 	.word	0x40023800
 8003f1c:	40020800 	.word	0x40020800
 8003f20:	40020c00 	.word	0x40020c00
 8003f24:	40021000 	.word	0x40021000
 8003f28:	40021400 	.word	0x40021400
 8003f2c:	40021800 	.word	0x40021800
 8003f30:	40021c00 	.word	0x40021c00
 8003f34:	20000294 	.word	0x20000294
 8003f38:	40026410 	.word	0x40026410

08003f3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f40:	2003      	movs	r0, #3
 8003f42:	f000 fe68 	bl	8004c16 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003f46:	200f      	movs	r0, #15
 8003f48:	f7fe ff2e 	bl	8002da8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003f4c:	f7fd ffd6 	bl	8001efc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	bd80      	pop	{r7, pc}
	...

08003f58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f5c:	4b06      	ldr	r3, [pc, #24]	; (8003f78 <HAL_IncTick+0x20>)
 8003f5e:	781b      	ldrb	r3, [r3, #0]
 8003f60:	461a      	mov	r2, r3
 8003f62:	4b06      	ldr	r3, [pc, #24]	; (8003f7c <HAL_IncTick+0x24>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4413      	add	r3, r2
 8003f68:	4a04      	ldr	r2, [pc, #16]	; (8003f7c <HAL_IncTick+0x24>)
 8003f6a:	6013      	str	r3, [r2, #0]
}
 8003f6c:	bf00      	nop
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
 8003f76:	bf00      	nop
 8003f78:	2000004c 	.word	0x2000004c
 8003f7c:	20002ba4 	.word	0x20002ba4

08003f80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f80:	b480      	push	{r7}
 8003f82:	af00      	add	r7, sp, #0
  return uwTick;
 8003f84:	4b03      	ldr	r3, [pc, #12]	; (8003f94 <HAL_GetTick+0x14>)
 8003f86:	681b      	ldr	r3, [r3, #0]
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr
 8003f92:	bf00      	nop
 8003f94:	20002ba4 	.word	0x20002ba4

08003f98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003fa0:	f7ff ffee 	bl	8003f80 <HAL_GetTick>
 8003fa4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fb0:	d005      	beq.n	8003fbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003fb2:	4b0a      	ldr	r3, [pc, #40]	; (8003fdc <HAL_Delay+0x44>)
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	4413      	add	r3, r2
 8003fbc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003fbe:	bf00      	nop
 8003fc0:	f7ff ffde 	bl	8003f80 <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d8f7      	bhi.n	8003fc0 <HAL_Delay+0x28>
  {
  }
}
 8003fd0:	bf00      	nop
 8003fd2:	bf00      	nop
 8003fd4:	3710      	adds	r7, #16
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	2000004c 	.word	0x2000004c

08003fe0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d101      	bne.n	8003ff6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e031      	b.n	800405a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d109      	bne.n	8004012 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f7fd ffa0 	bl	8001f44 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004016:	f003 0310 	and.w	r3, r3, #16
 800401a:	2b00      	cmp	r3, #0
 800401c:	d116      	bne.n	800404c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004022:	4b10      	ldr	r3, [pc, #64]	; (8004064 <HAL_ADC_Init+0x84>)
 8004024:	4013      	ands	r3, r2
 8004026:	f043 0202 	orr.w	r2, r3, #2
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 fbbe 	bl	80047b0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403e:	f023 0303 	bic.w	r3, r3, #3
 8004042:	f043 0201 	orr.w	r2, r3, #1
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	641a      	str	r2, [r3, #64]	; 0x40
 800404a:	e001      	b.n	8004050 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004058:	7bfb      	ldrb	r3, [r7, #15]
}
 800405a:	4618      	mov	r0, r3
 800405c:	3710      	adds	r7, #16
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	ffffeefd 	.word	0xffffeefd

08004068 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8004070:	2300      	movs	r3, #0
 8004072:	60fb      	str	r3, [r7, #12]
 8004074:	2300      	movs	r3, #0
 8004076:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0302 	and.w	r3, r3, #2
 8004082:	2b02      	cmp	r3, #2
 8004084:	bf0c      	ite	eq
 8004086:	2301      	moveq	r3, #1
 8004088:	2300      	movne	r3, #0
 800408a:	b2db      	uxtb	r3, r3
 800408c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f003 0320 	and.w	r3, r3, #32
 8004098:	2b20      	cmp	r3, #32
 800409a:	bf0c      	ite	eq
 800409c:	2301      	moveq	r3, #1
 800409e:	2300      	movne	r3, #0
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d049      	beq.n	800413e <HAL_ADC_IRQHandler+0xd6>
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d046      	beq.n	800413e <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b4:	f003 0310 	and.w	r3, r3, #16
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d105      	bne.n	80040c8 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d12b      	bne.n	800412e <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d127      	bne.n	800412e <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d006      	beq.n	80040fa <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d119      	bne.n	800412e <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	685a      	ldr	r2, [r3, #4]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f022 0220 	bic.w	r2, r2, #32
 8004108:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d105      	bne.n	800412e <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004126:	f043 0201 	orr.w	r2, r3, #1
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f7fc fb14 	bl	800075c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f06f 0212 	mvn.w	r2, #18
 800413c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0304 	and.w	r3, r3, #4
 8004148:	2b04      	cmp	r3, #4
 800414a:	bf0c      	ite	eq
 800414c:	2301      	moveq	r3, #1
 800414e:	2300      	movne	r3, #0
 8004150:	b2db      	uxtb	r3, r3
 8004152:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800415e:	2b80      	cmp	r3, #128	; 0x80
 8004160:	bf0c      	ite	eq
 8004162:	2301      	moveq	r3, #1
 8004164:	2300      	movne	r3, #0
 8004166:	b2db      	uxtb	r3, r3
 8004168:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d057      	beq.n	8004220 <HAL_ADC_IRQHandler+0x1b8>
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d054      	beq.n	8004220 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417a:	f003 0310 	and.w	r3, r3, #16
 800417e:	2b00      	cmp	r3, #0
 8004180:	d105      	bne.n	800418e <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004186:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d139      	bne.n	8004210 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d006      	beq.n	80041b8 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d12b      	bne.n	8004210 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d124      	bne.n	8004210 <HAL_ADC_IRQHandler+0x1a8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d11d      	bne.n	8004210 <HAL_ADC_IRQHandler+0x1a8>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d119      	bne.n	8004210 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	685a      	ldr	r2, [r3, #4]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041ea:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004200:	2b00      	cmp	r3, #0
 8004202:	d105      	bne.n	8004210 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004208:	f043 0201 	orr.w	r2, r3, #1
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f000 fc49 	bl	8004aa8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f06f 020c 	mvn.w	r2, #12
 800421e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0301 	and.w	r3, r3, #1
 800422a:	2b01      	cmp	r3, #1
 800422c:	bf0c      	ite	eq
 800422e:	2301      	moveq	r3, #1
 8004230:	2300      	movne	r3, #0
 8004232:	b2db      	uxtb	r3, r3
 8004234:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004240:	2b40      	cmp	r3, #64	; 0x40
 8004242:	bf0c      	ite	eq
 8004244:	2301      	moveq	r3, #1
 8004246:	2300      	movne	r3, #0
 8004248:	b2db      	uxtb	r3, r3
 800424a:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d017      	beq.n	8004282 <HAL_ADC_IRQHandler+0x21a>
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d014      	beq.n	8004282 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0301 	and.w	r3, r3, #1
 8004262:	2b01      	cmp	r3, #1
 8004264:	d10d      	bne.n	8004282 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 f93e 	bl	80044f4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f06f 0201 	mvn.w	r2, #1
 8004280:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0320 	and.w	r3, r3, #32
 800428c:	2b20      	cmp	r3, #32
 800428e:	bf0c      	ite	eq
 8004290:	2301      	moveq	r3, #1
 8004292:	2300      	movne	r3, #0
 8004294:	b2db      	uxtb	r3, r3
 8004296:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80042a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80042a6:	bf0c      	ite	eq
 80042a8:	2301      	moveq	r3, #1
 80042aa:	2300      	movne	r3, #0
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d015      	beq.n	80042e2 <HAL_ADC_IRQHandler+0x27a>
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d012      	beq.n	80042e2 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042c0:	f043 0202 	orr.w	r2, r3, #2
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f06f 0220 	mvn.w	r2, #32
 80042d0:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f000 f918 	bl	8004508 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f06f 0220 	mvn.w	r2, #32
 80042e0:	601a      	str	r2, [r3, #0]
  }
}
 80042e2:	bf00      	nop
 80042e4:	3710      	adds	r7, #16
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
	...

080042ec <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b086      	sub	sp, #24
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 80042f8:	2300      	movs	r3, #0
 80042fa:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004302:	2b01      	cmp	r3, #1
 8004304:	d101      	bne.n	800430a <HAL_ADC_Start_DMA+0x1e>
 8004306:	2302      	movs	r3, #2
 8004308:	e0d4      	b.n	80044b4 <HAL_ADC_Start_DMA+0x1c8>
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2201      	movs	r2, #1
 800430e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	f003 0301 	and.w	r3, r3, #1
 800431c:	2b01      	cmp	r3, #1
 800431e:	d018      	beq.n	8004352 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	689a      	ldr	r2, [r3, #8]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f042 0201 	orr.w	r2, r2, #1
 800432e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8004330:	4b62      	ldr	r3, [pc, #392]	; (80044bc <HAL_ADC_Start_DMA+0x1d0>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a62      	ldr	r2, [pc, #392]	; (80044c0 <HAL_ADC_Start_DMA+0x1d4>)
 8004336:	fba2 2303 	umull	r2, r3, r2, r3
 800433a:	0c9a      	lsrs	r2, r3, #18
 800433c:	4613      	mov	r3, r2
 800433e:	005b      	lsls	r3, r3, #1
 8004340:	4413      	add	r3, r2
 8004342:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8004344:	e002      	b.n	800434c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	3b01      	subs	r3, #1
 800434a:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d1f9      	bne.n	8004346 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	f003 0301 	and.w	r3, r3, #1
 800435c:	2b01      	cmp	r3, #1
 800435e:	f040 809c 	bne.w	800449a <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004366:	4b57      	ldr	r3, [pc, #348]	; (80044c4 <HAL_ADC_Start_DMA+0x1d8>)
 8004368:	4013      	ands	r3, r2
 800436a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800437c:	2b00      	cmp	r3, #0
 800437e:	d007      	beq.n	8004390 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004384:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004388:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004394:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004398:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800439c:	d106      	bne.n	80043ac <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043a2:	f023 0206 	bic.w	r2, r3, #6
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	645a      	str	r2, [r3, #68]	; 0x44
 80043aa:	e002      	b.n	80043b2 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2200      	movs	r2, #0
 80043b0:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2200      	movs	r2, #0
 80043b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043be:	4a42      	ldr	r2, [pc, #264]	; (80044c8 <HAL_ADC_Start_DMA+0x1dc>)
 80043c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c6:	4a41      	ldr	r2, [pc, #260]	; (80044cc <HAL_ADC_Start_DMA+0x1e0>)
 80043c8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ce:	4a40      	ldr	r2, [pc, #256]	; (80044d0 <HAL_ADC_Start_DMA+0x1e4>)
 80043d0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80043da:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	685a      	ldr	r2, [r3, #4]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80043ea:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	689a      	ldr	r2, [r3, #8]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043fa:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	334c      	adds	r3, #76	; 0x4c
 8004406:	4619      	mov	r1, r3
 8004408:	68ba      	ldr	r2, [r7, #8]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f000 fea8 	bl	8005160 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8004410:	4b30      	ldr	r3, [pc, #192]	; (80044d4 <HAL_ADC_Start_DMA+0x1e8>)
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	f003 031f 	and.w	r3, r3, #31
 8004418:	2b00      	cmp	r3, #0
 800441a:	d10f      	bne.n	800443c <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d143      	bne.n	80044b2 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	689a      	ldr	r2, [r3, #8]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004438:	609a      	str	r2, [r3, #8]
 800443a:	e03a      	b.n	80044b2 <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a25      	ldr	r2, [pc, #148]	; (80044d8 <HAL_ADC_Start_DMA+0x1ec>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d10e      	bne.n	8004464 <HAL_ADC_Start_DMA+0x178>
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004450:	2b00      	cmp	r3, #0
 8004452:	d107      	bne.n	8004464 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	689a      	ldr	r2, [r3, #8]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004462:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8004464:	4b1b      	ldr	r3, [pc, #108]	; (80044d4 <HAL_ADC_Start_DMA+0x1e8>)
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	f003 0310 	and.w	r3, r3, #16
 800446c:	2b00      	cmp	r3, #0
 800446e:	d120      	bne.n	80044b2 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a19      	ldr	r2, [pc, #100]	; (80044dc <HAL_ADC_Start_DMA+0x1f0>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d11b      	bne.n	80044b2 <HAL_ADC_Start_DMA+0x1c6>
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d114      	bne.n	80044b2 <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	689a      	ldr	r2, [r3, #8]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004496:	609a      	str	r2, [r3, #8]
 8004498:	e00b      	b.n	80044b2 <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449e:	f043 0210 	orr.w	r2, r3, #16
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044aa:	f043 0201 	orr.w	r2, r3, #1
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80044b2:	2300      	movs	r3, #0
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3718      	adds	r7, #24
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	20000030 	.word	0x20000030
 80044c0:	431bde83 	.word	0x431bde83
 80044c4:	fffff8fe 	.word	0xfffff8fe
 80044c8:	080049a5 	.word	0x080049a5
 80044cc:	08004a5f 	.word	0x08004a5f
 80044d0:	08004a7b 	.word	0x08004a7b
 80044d4:	40012300 	.word	0x40012300
 80044d8:	40012000 	.word	0x40012000
 80044dc:	40012200 	.word	0x40012200

080044e0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80044e8:	bf00      	nop
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80044fc:	bf00      	nop
 80044fe:	370c      	adds	r7, #12
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr

08004508 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004510:	bf00      	nop
 8004512:	370c      	adds	r7, #12
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800451c:	b480      	push	{r7}
 800451e:	b085      	sub	sp, #20
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8004526:	2300      	movs	r3, #0
 8004528:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004530:	2b01      	cmp	r3, #1
 8004532:	d101      	bne.n	8004538 <HAL_ADC_ConfigChannel+0x1c>
 8004534:	2302      	movs	r3, #2
 8004536:	e12a      	b.n	800478e <HAL_ADC_ConfigChannel+0x272>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2b09      	cmp	r3, #9
 8004546:	d93a      	bls.n	80045be <HAL_ADC_ConfigChannel+0xa2>
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004550:	d035      	beq.n	80045be <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68d9      	ldr	r1, [r3, #12]
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	b29b      	uxth	r3, r3
 800455e:	461a      	mov	r2, r3
 8004560:	4613      	mov	r3, r2
 8004562:	005b      	lsls	r3, r3, #1
 8004564:	4413      	add	r3, r2
 8004566:	3b1e      	subs	r3, #30
 8004568:	2207      	movs	r2, #7
 800456a:	fa02 f303 	lsl.w	r3, r2, r3
 800456e:	43da      	mvns	r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	400a      	ands	r2, r1
 8004576:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a87      	ldr	r2, [pc, #540]	; (800479c <HAL_ADC_ConfigChannel+0x280>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d10a      	bne.n	8004598 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	68d9      	ldr	r1, [r3, #12]
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	061a      	lsls	r2, r3, #24
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	430a      	orrs	r2, r1
 8004594:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004596:	e035      	b.n	8004604 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	68d9      	ldr	r1, [r3, #12]
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	689a      	ldr	r2, [r3, #8]
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	4618      	mov	r0, r3
 80045aa:	4603      	mov	r3, r0
 80045ac:	005b      	lsls	r3, r3, #1
 80045ae:	4403      	add	r3, r0
 80045b0:	3b1e      	subs	r3, #30
 80045b2:	409a      	lsls	r2, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	430a      	orrs	r2, r1
 80045ba:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80045bc:	e022      	b.n	8004604 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	6919      	ldr	r1, [r3, #16]
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	461a      	mov	r2, r3
 80045cc:	4613      	mov	r3, r2
 80045ce:	005b      	lsls	r3, r3, #1
 80045d0:	4413      	add	r3, r2
 80045d2:	2207      	movs	r2, #7
 80045d4:	fa02 f303 	lsl.w	r3, r2, r3
 80045d8:	43da      	mvns	r2, r3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	400a      	ands	r2, r1
 80045e0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	6919      	ldr	r1, [r3, #16]
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	689a      	ldr	r2, [r3, #8]
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	4618      	mov	r0, r3
 80045f4:	4603      	mov	r3, r0
 80045f6:	005b      	lsls	r3, r3, #1
 80045f8:	4403      	add	r3, r0
 80045fa:	409a      	lsls	r2, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	430a      	orrs	r2, r1
 8004602:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	2b06      	cmp	r3, #6
 800460a:	d824      	bhi.n	8004656 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	685a      	ldr	r2, [r3, #4]
 8004616:	4613      	mov	r3, r2
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	4413      	add	r3, r2
 800461c:	3b05      	subs	r3, #5
 800461e:	221f      	movs	r2, #31
 8004620:	fa02 f303 	lsl.w	r3, r2, r3
 8004624:	43da      	mvns	r2, r3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	400a      	ands	r2, r1
 800462c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	b29b      	uxth	r3, r3
 800463a:	4618      	mov	r0, r3
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	685a      	ldr	r2, [r3, #4]
 8004640:	4613      	mov	r3, r2
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	4413      	add	r3, r2
 8004646:	3b05      	subs	r3, #5
 8004648:	fa00 f203 	lsl.w	r2, r0, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	430a      	orrs	r2, r1
 8004652:	635a      	str	r2, [r3, #52]	; 0x34
 8004654:	e04c      	b.n	80046f0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	2b0c      	cmp	r3, #12
 800465c:	d824      	bhi.n	80046a8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	685a      	ldr	r2, [r3, #4]
 8004668:	4613      	mov	r3, r2
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	4413      	add	r3, r2
 800466e:	3b23      	subs	r3, #35	; 0x23
 8004670:	221f      	movs	r2, #31
 8004672:	fa02 f303 	lsl.w	r3, r2, r3
 8004676:	43da      	mvns	r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	400a      	ands	r2, r1
 800467e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	b29b      	uxth	r3, r3
 800468c:	4618      	mov	r0, r3
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	685a      	ldr	r2, [r3, #4]
 8004692:	4613      	mov	r3, r2
 8004694:	009b      	lsls	r3, r3, #2
 8004696:	4413      	add	r3, r2
 8004698:	3b23      	subs	r3, #35	; 0x23
 800469a:	fa00 f203 	lsl.w	r2, r0, r3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	430a      	orrs	r2, r1
 80046a4:	631a      	str	r2, [r3, #48]	; 0x30
 80046a6:	e023      	b.n	80046f0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	685a      	ldr	r2, [r3, #4]
 80046b2:	4613      	mov	r3, r2
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	4413      	add	r3, r2
 80046b8:	3b41      	subs	r3, #65	; 0x41
 80046ba:	221f      	movs	r2, #31
 80046bc:	fa02 f303 	lsl.w	r3, r2, r3
 80046c0:	43da      	mvns	r2, r3
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	400a      	ands	r2, r1
 80046c8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	4618      	mov	r0, r3
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	685a      	ldr	r2, [r3, #4]
 80046dc:	4613      	mov	r3, r2
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	4413      	add	r3, r2
 80046e2:	3b41      	subs	r3, #65	; 0x41
 80046e4:	fa00 f203 	lsl.w	r2, r0, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	430a      	orrs	r2, r1
 80046ee:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a2a      	ldr	r2, [pc, #168]	; (80047a0 <HAL_ADC_ConfigChannel+0x284>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d10a      	bne.n	8004710 <HAL_ADC_ConfigChannel+0x1f4>
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004702:	d105      	bne.n	8004710 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8004704:	4b27      	ldr	r3, [pc, #156]	; (80047a4 <HAL_ADC_ConfigChannel+0x288>)
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	4a26      	ldr	r2, [pc, #152]	; (80047a4 <HAL_ADC_ConfigChannel+0x288>)
 800470a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800470e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a22      	ldr	r2, [pc, #136]	; (80047a0 <HAL_ADC_ConfigChannel+0x284>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d109      	bne.n	800472e <HAL_ADC_ConfigChannel+0x212>
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	2b12      	cmp	r3, #18
 8004720:	d105      	bne.n	800472e <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8004722:	4b20      	ldr	r3, [pc, #128]	; (80047a4 <HAL_ADC_ConfigChannel+0x288>)
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	4a1f      	ldr	r2, [pc, #124]	; (80047a4 <HAL_ADC_ConfigChannel+0x288>)
 8004728:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800472c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a1b      	ldr	r2, [pc, #108]	; (80047a0 <HAL_ADC_ConfigChannel+0x284>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d125      	bne.n	8004784 <HAL_ADC_ConfigChannel+0x268>
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a17      	ldr	r2, [pc, #92]	; (800479c <HAL_ADC_ConfigChannel+0x280>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d003      	beq.n	800474a <HAL_ADC_ConfigChannel+0x22e>
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	2b11      	cmp	r3, #17
 8004748:	d11c      	bne.n	8004784 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800474a:	4b16      	ldr	r3, [pc, #88]	; (80047a4 <HAL_ADC_ConfigChannel+0x288>)
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	4a15      	ldr	r2, [pc, #84]	; (80047a4 <HAL_ADC_ConfigChannel+0x288>)
 8004750:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004754:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a10      	ldr	r2, [pc, #64]	; (800479c <HAL_ADC_ConfigChannel+0x280>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d111      	bne.n	8004784 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8004760:	4b11      	ldr	r3, [pc, #68]	; (80047a8 <HAL_ADC_ConfigChannel+0x28c>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a11      	ldr	r2, [pc, #68]	; (80047ac <HAL_ADC_ConfigChannel+0x290>)
 8004766:	fba2 2303 	umull	r2, r3, r2, r3
 800476a:	0c9a      	lsrs	r2, r3, #18
 800476c:	4613      	mov	r3, r2
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	4413      	add	r3, r2
 8004772:	005b      	lsls	r3, r3, #1
 8004774:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004776:	e002      	b.n	800477e <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	3b01      	subs	r3, #1
 800477c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d1f9      	bne.n	8004778 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800478c:	2300      	movs	r3, #0
}
 800478e:	4618      	mov	r0, r3
 8004790:	3714      	adds	r7, #20
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr
 800479a:	bf00      	nop
 800479c:	10000012 	.word	0x10000012
 80047a0:	40012000 	.word	0x40012000
 80047a4:	40012300 	.word	0x40012300
 80047a8:	20000030 	.word	0x20000030
 80047ac:	431bde83 	.word	0x431bde83

080047b0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80047b8:	4b78      	ldr	r3, [pc, #480]	; (800499c <ADC_Init+0x1ec>)
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	4a77      	ldr	r2, [pc, #476]	; (800499c <ADC_Init+0x1ec>)
 80047be:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80047c2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80047c4:	4b75      	ldr	r3, [pc, #468]	; (800499c <ADC_Init+0x1ec>)
 80047c6:	685a      	ldr	r2, [r3, #4]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	4973      	ldr	r1, [pc, #460]	; (800499c <ADC_Init+0x1ec>)
 80047ce:	4313      	orrs	r3, r2
 80047d0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	685a      	ldr	r2, [r3, #4]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80047e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	6859      	ldr	r1, [r3, #4]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	691b      	ldr	r3, [r3, #16]
 80047ec:	021a      	lsls	r2, r3, #8
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	430a      	orrs	r2, r1
 80047f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	685a      	ldr	r2, [r3, #4]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004804:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	6859      	ldr	r1, [r3, #4]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	689a      	ldr	r2, [r3, #8]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	430a      	orrs	r2, r1
 8004816:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	689a      	ldr	r2, [r3, #8]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004826:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	6899      	ldr	r1, [r3, #8]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	68da      	ldr	r2, [r3, #12]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	430a      	orrs	r2, r1
 8004838:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800483e:	4a58      	ldr	r2, [pc, #352]	; (80049a0 <ADC_Init+0x1f0>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d022      	beq.n	800488a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	689a      	ldr	r2, [r3, #8]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004852:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	6899      	ldr	r1, [r3, #8]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	430a      	orrs	r2, r1
 8004864:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	689a      	ldr	r2, [r3, #8]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004874:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	6899      	ldr	r1, [r3, #8]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	430a      	orrs	r2, r1
 8004886:	609a      	str	r2, [r3, #8]
 8004888:	e00f      	b.n	80048aa <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	689a      	ldr	r2, [r3, #8]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004898:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	689a      	ldr	r2, [r3, #8]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80048a8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	689a      	ldr	r2, [r3, #8]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f022 0202 	bic.w	r2, r2, #2
 80048b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	6899      	ldr	r1, [r3, #8]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	699b      	ldr	r3, [r3, #24]
 80048c4:	005a      	lsls	r2, r3, #1
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	430a      	orrs	r2, r1
 80048cc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d01b      	beq.n	8004910 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	685a      	ldr	r2, [r3, #4]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048e6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	685a      	ldr	r2, [r3, #4]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80048f6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	6859      	ldr	r1, [r3, #4]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004902:	3b01      	subs	r3, #1
 8004904:	035a      	lsls	r2, r3, #13
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	430a      	orrs	r2, r1
 800490c:	605a      	str	r2, [r3, #4]
 800490e:	e007      	b.n	8004920 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	685a      	ldr	r2, [r3, #4]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800491e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800492e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	69db      	ldr	r3, [r3, #28]
 800493a:	3b01      	subs	r3, #1
 800493c:	051a      	lsls	r2, r3, #20
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	430a      	orrs	r2, r1
 8004944:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	689a      	ldr	r2, [r3, #8]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004954:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	6899      	ldr	r1, [r3, #8]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004962:	025a      	lsls	r2, r3, #9
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	430a      	orrs	r2, r1
 800496a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	689a      	ldr	r2, [r3, #8]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800497a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	6899      	ldr	r1, [r3, #8]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	695b      	ldr	r3, [r3, #20]
 8004986:	029a      	lsls	r2, r3, #10
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	430a      	orrs	r2, r1
 800498e:	609a      	str	r2, [r3, #8]
}
 8004990:	bf00      	nop
 8004992:	370c      	adds	r7, #12
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr
 800499c:	40012300 	.word	0x40012300
 80049a0:	0f000001 	.word	0x0f000001

080049a4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d13c      	bne.n	8004a38 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d12b      	bne.n	8004a30 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d127      	bne.n	8004a30 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d006      	beq.n	80049fc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d119      	bne.n	8004a30 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	685a      	ldr	r2, [r3, #4]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f022 0220 	bic.w	r2, r2, #32
 8004a0a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a10:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d105      	bne.n	8004a30 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a28:	f043 0201 	orr.w	r2, r3, #1
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004a30:	68f8      	ldr	r0, [r7, #12]
 8004a32:	f7fb fe93 	bl	800075c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004a36:	e00e      	b.n	8004a56 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3c:	f003 0310 	and.w	r3, r3, #16
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d003      	beq.n	8004a4c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004a44:	68f8      	ldr	r0, [r7, #12]
 8004a46:	f7ff fd5f 	bl	8004508 <HAL_ADC_ErrorCallback>
}
 8004a4a:	e004      	b.n	8004a56 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	4798      	blx	r3
}
 8004a56:	bf00      	nop
 8004a58:	3710      	adds	r7, #16
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}

08004a5e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004a5e:	b580      	push	{r7, lr}
 8004a60:	b084      	sub	sp, #16
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a6a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004a6c:	68f8      	ldr	r0, [r7, #12]
 8004a6e:	f7ff fd37 	bl	80044e0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004a72:	bf00      	nop
 8004a74:	3710      	adds	r7, #16
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}

08004a7a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004a7a:	b580      	push	{r7, lr}
 8004a7c:	b084      	sub	sp, #16
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a86:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2240      	movs	r2, #64	; 0x40
 8004a8c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a92:	f043 0204 	orr.w	r2, r3, #4
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004a9a:	68f8      	ldr	r0, [r7, #12]
 8004a9c:	f7ff fd34 	bl	8004508 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004aa0:	bf00      	nop
 8004aa2:	3710      	adds	r7, #16
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b083      	sub	sp, #12
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8004ab0:	bf00      	nop
 8004ab2:	370c      	adds	r7, #12
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b085      	sub	sp, #20
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f003 0307 	and.w	r3, r3, #7
 8004aca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004acc:	4b0b      	ldr	r3, [pc, #44]	; (8004afc <__NVIC_SetPriorityGrouping+0x40>)
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ad2:	68ba      	ldr	r2, [r7, #8]
 8004ad4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004ad8:	4013      	ands	r3, r2
 8004ada:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004ae4:	4b06      	ldr	r3, [pc, #24]	; (8004b00 <__NVIC_SetPriorityGrouping+0x44>)
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004aea:	4a04      	ldr	r2, [pc, #16]	; (8004afc <__NVIC_SetPriorityGrouping+0x40>)
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	60d3      	str	r3, [r2, #12]
}
 8004af0:	bf00      	nop
 8004af2:	3714      	adds	r7, #20
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr
 8004afc:	e000ed00 	.word	0xe000ed00
 8004b00:	05fa0000 	.word	0x05fa0000

08004b04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b04:	b480      	push	{r7}
 8004b06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b08:	4b04      	ldr	r3, [pc, #16]	; (8004b1c <__NVIC_GetPriorityGrouping+0x18>)
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	0a1b      	lsrs	r3, r3, #8
 8004b0e:	f003 0307 	and.w	r3, r3, #7
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr
 8004b1c:	e000ed00 	.word	0xe000ed00

08004b20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	4603      	mov	r3, r0
 8004b28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	db0b      	blt.n	8004b4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b32:	79fb      	ldrb	r3, [r7, #7]
 8004b34:	f003 021f 	and.w	r2, r3, #31
 8004b38:	4907      	ldr	r1, [pc, #28]	; (8004b58 <__NVIC_EnableIRQ+0x38>)
 8004b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b3e:	095b      	lsrs	r3, r3, #5
 8004b40:	2001      	movs	r0, #1
 8004b42:	fa00 f202 	lsl.w	r2, r0, r2
 8004b46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004b4a:	bf00      	nop
 8004b4c:	370c      	adds	r7, #12
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop
 8004b58:	e000e100 	.word	0xe000e100

08004b5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	4603      	mov	r3, r0
 8004b64:	6039      	str	r1, [r7, #0]
 8004b66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	db0a      	blt.n	8004b86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	b2da      	uxtb	r2, r3
 8004b74:	490c      	ldr	r1, [pc, #48]	; (8004ba8 <__NVIC_SetPriority+0x4c>)
 8004b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b7a:	0112      	lsls	r2, r2, #4
 8004b7c:	b2d2      	uxtb	r2, r2
 8004b7e:	440b      	add	r3, r1
 8004b80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b84:	e00a      	b.n	8004b9c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	b2da      	uxtb	r2, r3
 8004b8a:	4908      	ldr	r1, [pc, #32]	; (8004bac <__NVIC_SetPriority+0x50>)
 8004b8c:	79fb      	ldrb	r3, [r7, #7]
 8004b8e:	f003 030f 	and.w	r3, r3, #15
 8004b92:	3b04      	subs	r3, #4
 8004b94:	0112      	lsls	r2, r2, #4
 8004b96:	b2d2      	uxtb	r2, r2
 8004b98:	440b      	add	r3, r1
 8004b9a:	761a      	strb	r2, [r3, #24]
}
 8004b9c:	bf00      	nop
 8004b9e:	370c      	adds	r7, #12
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr
 8004ba8:	e000e100 	.word	0xe000e100
 8004bac:	e000ed00 	.word	0xe000ed00

08004bb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b089      	sub	sp, #36	; 0x24
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	60b9      	str	r1, [r7, #8]
 8004bba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f003 0307 	and.w	r3, r3, #7
 8004bc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	f1c3 0307 	rsb	r3, r3, #7
 8004bca:	2b04      	cmp	r3, #4
 8004bcc:	bf28      	it	cs
 8004bce:	2304      	movcs	r3, #4
 8004bd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	3304      	adds	r3, #4
 8004bd6:	2b06      	cmp	r3, #6
 8004bd8:	d902      	bls.n	8004be0 <NVIC_EncodePriority+0x30>
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	3b03      	subs	r3, #3
 8004bde:	e000      	b.n	8004be2 <NVIC_EncodePriority+0x32>
 8004be0:	2300      	movs	r3, #0
 8004be2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004be4:	f04f 32ff 	mov.w	r2, #4294967295
 8004be8:	69bb      	ldr	r3, [r7, #24]
 8004bea:	fa02 f303 	lsl.w	r3, r2, r3
 8004bee:	43da      	mvns	r2, r3
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	401a      	ands	r2, r3
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004bf8:	f04f 31ff 	mov.w	r1, #4294967295
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8004c02:	43d9      	mvns	r1, r3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c08:	4313      	orrs	r3, r2
         );
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3724      	adds	r7, #36	; 0x24
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr

08004c16 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c16:	b580      	push	{r7, lr}
 8004c18:	b082      	sub	sp, #8
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f7ff ff4c 	bl	8004abc <__NVIC_SetPriorityGrouping>
}
 8004c24:	bf00      	nop
 8004c26:	3708      	adds	r7, #8
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b086      	sub	sp, #24
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	4603      	mov	r3, r0
 8004c34:	60b9      	str	r1, [r7, #8]
 8004c36:	607a      	str	r2, [r7, #4]
 8004c38:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004c3e:	f7ff ff61 	bl	8004b04 <__NVIC_GetPriorityGrouping>
 8004c42:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	68b9      	ldr	r1, [r7, #8]
 8004c48:	6978      	ldr	r0, [r7, #20]
 8004c4a:	f7ff ffb1 	bl	8004bb0 <NVIC_EncodePriority>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c54:	4611      	mov	r1, r2
 8004c56:	4618      	mov	r0, r3
 8004c58:	f7ff ff80 	bl	8004b5c <__NVIC_SetPriority>
}
 8004c5c:	bf00      	nop
 8004c5e:	3718      	adds	r7, #24
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b082      	sub	sp, #8
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c72:	4618      	mov	r0, r3
 8004c74:	f7ff ff54 	bl	8004b20 <__NVIC_EnableIRQ>
}
 8004c78:	bf00      	nop
 8004c7a:	3708      	adds	r7, #8
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b082      	sub	sp, #8
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d101      	bne.n	8004c92 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e054      	b.n	8004d3c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	7f5b      	ldrb	r3, [r3, #29]
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d105      	bne.n	8004ca8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f7fd f9e4 	bl	8002070 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2202      	movs	r2, #2
 8004cac:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	791b      	ldrb	r3, [r3, #4]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d10c      	bne.n	8004cd0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a22      	ldr	r2, [pc, #136]	; (8004d44 <HAL_CRC_Init+0xc4>)
 8004cbc:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	689a      	ldr	r2, [r3, #8]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f022 0218 	bic.w	r2, r2, #24
 8004ccc:	609a      	str	r2, [r3, #8]
 8004cce:	e00c      	b.n	8004cea <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6899      	ldr	r1, [r3, #8]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	461a      	mov	r2, r3
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 f834 	bl	8004d48 <HAL_CRCEx_Polynomial_Set>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d001      	beq.n	8004cea <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e028      	b.n	8004d3c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	795b      	ldrb	r3, [r3, #5]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d105      	bne.n	8004cfe <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f04f 32ff 	mov.w	r2, #4294967295
 8004cfa:	611a      	str	r2, [r3, #16]
 8004cfc:	e004      	b.n	8004d08 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	6912      	ldr	r2, [r2, #16]
 8004d06:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	695a      	ldr	r2, [r3, #20]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	430a      	orrs	r2, r1
 8004d1c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	699a      	ldr	r2, [r3, #24]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	430a      	orrs	r2, r1
 8004d32:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004d3a:	2300      	movs	r3, #0
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3708      	adds	r7, #8
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	04c11db7 	.word	0x04c11db7

08004d48 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b087      	sub	sp, #28
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	60b9      	str	r1, [r7, #8]
 8004d52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d54:	2300      	movs	r3, #0
 8004d56:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004d58:	231f      	movs	r3, #31
 8004d5a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004d5c:	bf00      	nop
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	1e5a      	subs	r2, r3, #1
 8004d62:	613a      	str	r2, [r7, #16]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d009      	beq.n	8004d7c <HAL_CRCEx_Polynomial_Set+0x34>
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	f003 031f 	and.w	r3, r3, #31
 8004d6e:	68ba      	ldr	r2, [r7, #8]
 8004d70:	fa22 f303 	lsr.w	r3, r2, r3
 8004d74:	f003 0301 	and.w	r3, r3, #1
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d0f0      	beq.n	8004d5e <HAL_CRCEx_Polynomial_Set+0x16>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2b18      	cmp	r3, #24
 8004d80:	d846      	bhi.n	8004e10 <HAL_CRCEx_Polynomial_Set+0xc8>
 8004d82:	a201      	add	r2, pc, #4	; (adr r2, 8004d88 <HAL_CRCEx_Polynomial_Set+0x40>)
 8004d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d88:	08004e17 	.word	0x08004e17
 8004d8c:	08004e11 	.word	0x08004e11
 8004d90:	08004e11 	.word	0x08004e11
 8004d94:	08004e11 	.word	0x08004e11
 8004d98:	08004e11 	.word	0x08004e11
 8004d9c:	08004e11 	.word	0x08004e11
 8004da0:	08004e11 	.word	0x08004e11
 8004da4:	08004e11 	.word	0x08004e11
 8004da8:	08004e05 	.word	0x08004e05
 8004dac:	08004e11 	.word	0x08004e11
 8004db0:	08004e11 	.word	0x08004e11
 8004db4:	08004e11 	.word	0x08004e11
 8004db8:	08004e11 	.word	0x08004e11
 8004dbc:	08004e11 	.word	0x08004e11
 8004dc0:	08004e11 	.word	0x08004e11
 8004dc4:	08004e11 	.word	0x08004e11
 8004dc8:	08004df9 	.word	0x08004df9
 8004dcc:	08004e11 	.word	0x08004e11
 8004dd0:	08004e11 	.word	0x08004e11
 8004dd4:	08004e11 	.word	0x08004e11
 8004dd8:	08004e11 	.word	0x08004e11
 8004ddc:	08004e11 	.word	0x08004e11
 8004de0:	08004e11 	.word	0x08004e11
 8004de4:	08004e11 	.word	0x08004e11
 8004de8:	08004ded 	.word	0x08004ded
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	2b06      	cmp	r3, #6
 8004df0:	d913      	bls.n	8004e1a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004df6:	e010      	b.n	8004e1a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	2b07      	cmp	r3, #7
 8004dfc:	d90f      	bls.n	8004e1e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004e02:	e00c      	b.n	8004e1e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	2b0f      	cmp	r3, #15
 8004e08:	d90b      	bls.n	8004e22 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004e0e:	e008      	b.n	8004e22 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	75fb      	strb	r3, [r7, #23]
      break;
 8004e14:	e006      	b.n	8004e24 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004e16:	bf00      	nop
 8004e18:	e004      	b.n	8004e24 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004e1a:	bf00      	nop
 8004e1c:	e002      	b.n	8004e24 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004e1e:	bf00      	nop
 8004e20:	e000      	b.n	8004e24 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004e22:	bf00      	nop
  }
  if (status == HAL_OK)
 8004e24:	7dfb      	ldrb	r3, [r7, #23]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d10d      	bne.n	8004e46 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	68ba      	ldr	r2, [r7, #8]
 8004e30:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	f023 0118 	bic.w	r1, r3, #24
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	430a      	orrs	r2, r1
 8004e44:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004e46:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	371c      	adds	r7, #28
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr

08004e54 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b082      	sub	sp, #8
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d101      	bne.n	8004e66 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e069      	b.n	8004f3a <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d102      	bne.n	8004e78 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f7fd f91c 	bl	80020b0 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2202      	movs	r2, #2
 8004e7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	699b      	ldr	r3, [r3, #24]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d002      	beq.n	8004e8e <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	6819      	ldr	r1, [r3, #0]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	4b2a      	ldr	r3, [pc, #168]	; (8004f44 <HAL_DCMI_Init+0xf0>)
 8004e9a:	400b      	ands	r3, r1
 8004e9c:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	6819      	ldr	r1, [r3, #0]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	685a      	ldr	r2, [r3, #4]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	695b      	ldr	r3, [r3, #20]
 8004eac:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004eb2:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	691b      	ldr	r3, [r3, #16]
 8004eb8:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004ebe:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	699b      	ldr	r3, [r3, #24]
 8004ec4:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004eca:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed0:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004ed6:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004edc:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004ee2:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	430a      	orrs	r2, r1
 8004eea:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	2b10      	cmp	r3, #16
 8004ef2:	d112      	bne.n	8004f1a <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	7f1b      	ldrb	r3, [r3, #28]
 8004ef8:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	7f5b      	ldrb	r3, [r3, #29]
 8004efe:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004f00:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	7f9b      	ldrb	r3, [r3, #30]
 8004f06:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8004f08:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	7fdb      	ldrb	r3, [r3, #31]
 8004f10:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8004f16:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004f18:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	68da      	ldr	r2, [r3, #12]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f042 021e 	orr.w	r2, r2, #30
 8004f28:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3708      	adds	r7, #8
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	ffe0f007 	.word	0xffe0f007

08004f48 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b086      	sub	sp, #24
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004f50:	2300      	movs	r3, #0
 8004f52:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004f54:	f7ff f814 	bl	8003f80 <HAL_GetTick>
 8004f58:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d101      	bne.n	8004f64 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e099      	b.n	8005098 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2202      	movs	r2, #2
 8004f70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f022 0201 	bic.w	r2, r2, #1
 8004f82:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f84:	e00f      	b.n	8004fa6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004f86:	f7fe fffb 	bl	8003f80 <HAL_GetTick>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	1ad3      	subs	r3, r2, r3
 8004f90:	2b05      	cmp	r3, #5
 8004f92:	d908      	bls.n	8004fa6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2220      	movs	r2, #32
 8004f98:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2203      	movs	r2, #3
 8004f9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	e078      	b.n	8005098 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 0301 	and.w	r3, r3, #1
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d1e8      	bne.n	8004f86 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004fbc:	697a      	ldr	r2, [r7, #20]
 8004fbe:	4b38      	ldr	r3, [pc, #224]	; (80050a0 <HAL_DMA_Init+0x158>)
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	685a      	ldr	r2, [r3, #4]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004fd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	691b      	ldr	r3, [r3, #16]
 8004fd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fde:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	699b      	ldr	r3, [r3, #24]
 8004fe4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6a1b      	ldr	r3, [r3, #32]
 8004ff0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004ff2:	697a      	ldr	r2, [r7, #20]
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffc:	2b04      	cmp	r3, #4
 8004ffe:	d107      	bne.n	8005010 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005008:	4313      	orrs	r3, r2
 800500a:	697a      	ldr	r2, [r7, #20]
 800500c:	4313      	orrs	r3, r2
 800500e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	697a      	ldr	r2, [r7, #20]
 8005016:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	695b      	ldr	r3, [r3, #20]
 800501e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	f023 0307 	bic.w	r3, r3, #7
 8005026:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502c:	697a      	ldr	r2, [r7, #20]
 800502e:	4313      	orrs	r3, r2
 8005030:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005036:	2b04      	cmp	r3, #4
 8005038:	d117      	bne.n	800506a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800503e:	697a      	ldr	r2, [r7, #20]
 8005040:	4313      	orrs	r3, r2
 8005042:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005048:	2b00      	cmp	r3, #0
 800504a:	d00e      	beq.n	800506a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f000 fb67 	bl	8005720 <DMA_CheckFifoParam>
 8005052:	4603      	mov	r3, r0
 8005054:	2b00      	cmp	r3, #0
 8005056:	d008      	beq.n	800506a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2240      	movs	r2, #64	; 0x40
 800505c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2201      	movs	r2, #1
 8005062:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005066:	2301      	movs	r3, #1
 8005068:	e016      	b.n	8005098 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	697a      	ldr	r2, [r7, #20]
 8005070:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f000 fb1e 	bl	80056b4 <DMA_CalcBaseAndBitshift>
 8005078:	4603      	mov	r3, r0
 800507a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005080:	223f      	movs	r2, #63	; 0x3f
 8005082:	409a      	lsls	r2, r3
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2201      	movs	r2, #1
 8005092:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005096:	2300      	movs	r3, #0
}
 8005098:	4618      	mov	r0, r3
 800509a:	3718      	adds	r7, #24
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}
 80050a0:	f010803f 	.word	0xf010803f

080050a4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b084      	sub	sp, #16
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d101      	bne.n	80050b6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e050      	b.n	8005158 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d101      	bne.n	80050c6 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80050c2:	2302      	movs	r3, #2
 80050c4:	e048      	b.n	8005158 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f022 0201 	bic.w	r2, r2, #1
 80050d4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	2200      	movs	r2, #0
 80050dc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	2200      	movs	r2, #0
 80050e4:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	2200      	movs	r2, #0
 80050ec:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	2200      	movs	r2, #0
 80050f4:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	2200      	movs	r2, #0
 80050fc:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	2221      	movs	r2, #33	; 0x21
 8005104:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f000 fad4 	bl	80056b4 <DMA_CalcBaseAndBitshift>
 800510c:	4603      	mov	r3, r0
 800510e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005114:	223f      	movs	r2, #63	; 0x3f
 8005116:	409a      	lsls	r2, r3
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2200      	movs	r2, #0
 8005138:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005156:	2300      	movs	r3, #0
}
 8005158:	4618      	mov	r0, r3
 800515a:	3710      	adds	r7, #16
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}

08005160 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b086      	sub	sp, #24
 8005164:	af00      	add	r7, sp, #0
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	607a      	str	r2, [r7, #4]
 800516c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800516e:	2300      	movs	r3, #0
 8005170:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005176:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800517e:	2b01      	cmp	r3, #1
 8005180:	d101      	bne.n	8005186 <HAL_DMA_Start_IT+0x26>
 8005182:	2302      	movs	r3, #2
 8005184:	e048      	b.n	8005218 <HAL_DMA_Start_IT+0xb8>
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2201      	movs	r2, #1
 800518a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005194:	b2db      	uxtb	r3, r3
 8005196:	2b01      	cmp	r3, #1
 8005198:	d137      	bne.n	800520a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2202      	movs	r2, #2
 800519e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2200      	movs	r2, #0
 80051a6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	68b9      	ldr	r1, [r7, #8]
 80051ae:	68f8      	ldr	r0, [r7, #12]
 80051b0:	f000 fa52 	bl	8005658 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051b8:	223f      	movs	r2, #63	; 0x3f
 80051ba:	409a      	lsls	r2, r3
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f042 0216 	orr.w	r2, r2, #22
 80051ce:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	695a      	ldr	r2, [r3, #20]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80051de:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d007      	beq.n	80051f8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f042 0208 	orr.w	r2, r2, #8
 80051f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f042 0201 	orr.w	r2, r2, #1
 8005206:	601a      	str	r2, [r3, #0]
 8005208:	e005      	b.n	8005216 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2200      	movs	r2, #0
 800520e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005212:	2302      	movs	r3, #2
 8005214:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005216:	7dfb      	ldrb	r3, [r7, #23]
}
 8005218:	4618      	mov	r0, r3
 800521a:	3718      	adds	r7, #24
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}

08005220 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800522c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800522e:	f7fe fea7 	bl	8003f80 <HAL_GetTick>
 8005232:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800523a:	b2db      	uxtb	r3, r3
 800523c:	2b02      	cmp	r3, #2
 800523e:	d008      	beq.n	8005252 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2280      	movs	r2, #128	; 0x80
 8005244:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2200      	movs	r2, #0
 800524a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e052      	b.n	80052f8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f022 0216 	bic.w	r2, r2, #22
 8005260:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	695a      	ldr	r2, [r3, #20]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005270:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005276:	2b00      	cmp	r3, #0
 8005278:	d103      	bne.n	8005282 <HAL_DMA_Abort+0x62>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800527e:	2b00      	cmp	r3, #0
 8005280:	d007      	beq.n	8005292 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f022 0208 	bic.w	r2, r2, #8
 8005290:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f022 0201 	bic.w	r2, r2, #1
 80052a0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80052a2:	e013      	b.n	80052cc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80052a4:	f7fe fe6c 	bl	8003f80 <HAL_GetTick>
 80052a8:	4602      	mov	r2, r0
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	1ad3      	subs	r3, r2, r3
 80052ae:	2b05      	cmp	r3, #5
 80052b0:	d90c      	bls.n	80052cc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2220      	movs	r2, #32
 80052b6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2200      	movs	r2, #0
 80052bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2203      	movs	r2, #3
 80052c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80052c8:	2303      	movs	r3, #3
 80052ca:	e015      	b.n	80052f8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 0301 	and.w	r3, r3, #1
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d1e4      	bne.n	80052a4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052de:	223f      	movs	r2, #63	; 0x3f
 80052e0:	409a      	lsls	r2, r3
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2201      	movs	r2, #1
 80052f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80052f6:	2300      	movs	r3, #0
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3710      	adds	r7, #16
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}

08005300 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005300:	b480      	push	{r7}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800530e:	b2db      	uxtb	r3, r3
 8005310:	2b02      	cmp	r3, #2
 8005312:	d004      	beq.n	800531e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2280      	movs	r2, #128	; 0x80
 8005318:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	e00c      	b.n	8005338 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2205      	movs	r2, #5
 8005322:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f022 0201 	bic.w	r2, r2, #1
 8005334:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005336:	2300      	movs	r3, #0
}
 8005338:	4618      	mov	r0, r3
 800533a:	370c      	adds	r7, #12
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b086      	sub	sp, #24
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800534c:	2300      	movs	r3, #0
 800534e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8005350:	4b92      	ldr	r3, [pc, #584]	; (800559c <HAL_DMA_IRQHandler+0x258>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a92      	ldr	r2, [pc, #584]	; (80055a0 <HAL_DMA_IRQHandler+0x25c>)
 8005356:	fba2 2303 	umull	r2, r3, r2, r3
 800535a:	0a9b      	lsrs	r3, r3, #10
 800535c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005362:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800536e:	2208      	movs	r2, #8
 8005370:	409a      	lsls	r2, r3
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	4013      	ands	r3, r2
 8005376:	2b00      	cmp	r3, #0
 8005378:	d01a      	beq.n	80053b0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 0304 	and.w	r3, r3, #4
 8005384:	2b00      	cmp	r3, #0
 8005386:	d013      	beq.n	80053b0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f022 0204 	bic.w	r2, r2, #4
 8005396:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800539c:	2208      	movs	r2, #8
 800539e:	409a      	lsls	r2, r3
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053a8:	f043 0201 	orr.w	r2, r3, #1
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053b4:	2201      	movs	r2, #1
 80053b6:	409a      	lsls	r2, r3
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	4013      	ands	r3, r2
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d012      	beq.n	80053e6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	695b      	ldr	r3, [r3, #20]
 80053c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d00b      	beq.n	80053e6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053d2:	2201      	movs	r2, #1
 80053d4:	409a      	lsls	r2, r3
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053de:	f043 0202 	orr.w	r2, r3, #2
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053ea:	2204      	movs	r2, #4
 80053ec:	409a      	lsls	r2, r3
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	4013      	ands	r3, r2
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d012      	beq.n	800541c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 0302 	and.w	r3, r3, #2
 8005400:	2b00      	cmp	r3, #0
 8005402:	d00b      	beq.n	800541c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005408:	2204      	movs	r2, #4
 800540a:	409a      	lsls	r2, r3
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005414:	f043 0204 	orr.w	r2, r3, #4
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005420:	2210      	movs	r2, #16
 8005422:	409a      	lsls	r2, r3
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	4013      	ands	r3, r2
 8005428:	2b00      	cmp	r3, #0
 800542a:	d043      	beq.n	80054b4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 0308 	and.w	r3, r3, #8
 8005436:	2b00      	cmp	r3, #0
 8005438:	d03c      	beq.n	80054b4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800543e:	2210      	movs	r2, #16
 8005440:	409a      	lsls	r2, r3
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005450:	2b00      	cmp	r3, #0
 8005452:	d018      	beq.n	8005486 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800545e:	2b00      	cmp	r3, #0
 8005460:	d108      	bne.n	8005474 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005466:	2b00      	cmp	r3, #0
 8005468:	d024      	beq.n	80054b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	4798      	blx	r3
 8005472:	e01f      	b.n	80054b4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005478:	2b00      	cmp	r3, #0
 800547a:	d01b      	beq.n	80054b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	4798      	blx	r3
 8005484:	e016      	b.n	80054b4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005490:	2b00      	cmp	r3, #0
 8005492:	d107      	bne.n	80054a4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f022 0208 	bic.w	r2, r2, #8
 80054a2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d003      	beq.n	80054b4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054b8:	2220      	movs	r2, #32
 80054ba:	409a      	lsls	r2, r3
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	4013      	ands	r3, r2
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	f000 808e 	beq.w	80055e2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 0310 	and.w	r3, r3, #16
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	f000 8086 	beq.w	80055e2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054da:	2220      	movs	r2, #32
 80054dc:	409a      	lsls	r2, r3
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	2b05      	cmp	r3, #5
 80054ec:	d136      	bne.n	800555c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f022 0216 	bic.w	r2, r2, #22
 80054fc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	695a      	ldr	r2, [r3, #20]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800550c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005512:	2b00      	cmp	r3, #0
 8005514:	d103      	bne.n	800551e <HAL_DMA_IRQHandler+0x1da>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800551a:	2b00      	cmp	r3, #0
 800551c:	d007      	beq.n	800552e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f022 0208 	bic.w	r2, r2, #8
 800552c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005532:	223f      	movs	r2, #63	; 0x3f
 8005534:	409a      	lsls	r2, r3
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2201      	movs	r2, #1
 8005546:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800554e:	2b00      	cmp	r3, #0
 8005550:	d07d      	beq.n	800564e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	4798      	blx	r3
        }
        return;
 800555a:	e078      	b.n	800564e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005566:	2b00      	cmp	r3, #0
 8005568:	d01c      	beq.n	80055a4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005574:	2b00      	cmp	r3, #0
 8005576:	d108      	bne.n	800558a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800557c:	2b00      	cmp	r3, #0
 800557e:	d030      	beq.n	80055e2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	4798      	blx	r3
 8005588:	e02b      	b.n	80055e2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800558e:	2b00      	cmp	r3, #0
 8005590:	d027      	beq.n	80055e2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	4798      	blx	r3
 800559a:	e022      	b.n	80055e2 <HAL_DMA_IRQHandler+0x29e>
 800559c:	20000030 	.word	0x20000030
 80055a0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d10f      	bne.n	80055d2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f022 0210 	bic.w	r2, r2, #16
 80055c0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2201      	movs	r2, #1
 80055ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d003      	beq.n	80055e2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d032      	beq.n	8005650 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ee:	f003 0301 	and.w	r3, r3, #1
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d022      	beq.n	800563c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2205      	movs	r2, #5
 80055fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f022 0201 	bic.w	r2, r2, #1
 800560c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	3301      	adds	r3, #1
 8005612:	60bb      	str	r3, [r7, #8]
 8005614:	697a      	ldr	r2, [r7, #20]
 8005616:	429a      	cmp	r2, r3
 8005618:	d307      	bcc.n	800562a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 0301 	and.w	r3, r3, #1
 8005624:	2b00      	cmp	r3, #0
 8005626:	d1f2      	bne.n	800560e <HAL_DMA_IRQHandler+0x2ca>
 8005628:	e000      	b.n	800562c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800562a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2200      	movs	r2, #0
 8005630:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005640:	2b00      	cmp	r3, #0
 8005642:	d005      	beq.n	8005650 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	4798      	blx	r3
 800564c:	e000      	b.n	8005650 <HAL_DMA_IRQHandler+0x30c>
        return;
 800564e:	bf00      	nop
    }
  }
}
 8005650:	3718      	adds	r7, #24
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
 8005656:	bf00      	nop

08005658 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005658:	b480      	push	{r7}
 800565a:	b085      	sub	sp, #20
 800565c:	af00      	add	r7, sp, #0
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	607a      	str	r2, [r7, #4]
 8005664:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005674:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	683a      	ldr	r2, [r7, #0]
 800567c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	2b40      	cmp	r3, #64	; 0x40
 8005684:	d108      	bne.n	8005698 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	68ba      	ldr	r2, [r7, #8]
 8005694:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005696:	e007      	b.n	80056a8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	68ba      	ldr	r2, [r7, #8]
 800569e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	60da      	str	r2, [r3, #12]
}
 80056a8:	bf00      	nop
 80056aa:	3714      	adds	r7, #20
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b085      	sub	sp, #20
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	3b10      	subs	r3, #16
 80056c4:	4a13      	ldr	r2, [pc, #76]	; (8005714 <DMA_CalcBaseAndBitshift+0x60>)
 80056c6:	fba2 2303 	umull	r2, r3, r2, r3
 80056ca:	091b      	lsrs	r3, r3, #4
 80056cc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80056ce:	4a12      	ldr	r2, [pc, #72]	; (8005718 <DMA_CalcBaseAndBitshift+0x64>)
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	4413      	add	r3, r2
 80056d4:	781b      	ldrb	r3, [r3, #0]
 80056d6:	461a      	mov	r2, r3
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2b03      	cmp	r3, #3
 80056e0:	d908      	bls.n	80056f4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	461a      	mov	r2, r3
 80056e8:	4b0c      	ldr	r3, [pc, #48]	; (800571c <DMA_CalcBaseAndBitshift+0x68>)
 80056ea:	4013      	ands	r3, r2
 80056ec:	1d1a      	adds	r2, r3, #4
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	659a      	str	r2, [r3, #88]	; 0x58
 80056f2:	e006      	b.n	8005702 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	461a      	mov	r2, r3
 80056fa:	4b08      	ldr	r3, [pc, #32]	; (800571c <DMA_CalcBaseAndBitshift+0x68>)
 80056fc:	4013      	ands	r3, r2
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005706:	4618      	mov	r0, r3
 8005708:	3714      	adds	r7, #20
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr
 8005712:	bf00      	nop
 8005714:	aaaaaaab 	.word	0xaaaaaaab
 8005718:	080129f8 	.word	0x080129f8
 800571c:	fffffc00 	.word	0xfffffc00

08005720 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005720:	b480      	push	{r7}
 8005722:	b085      	sub	sp, #20
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005728:	2300      	movs	r3, #0
 800572a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005730:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	699b      	ldr	r3, [r3, #24]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d11f      	bne.n	800577a <DMA_CheckFifoParam+0x5a>
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	2b03      	cmp	r3, #3
 800573e:	d856      	bhi.n	80057ee <DMA_CheckFifoParam+0xce>
 8005740:	a201      	add	r2, pc, #4	; (adr r2, 8005748 <DMA_CheckFifoParam+0x28>)
 8005742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005746:	bf00      	nop
 8005748:	08005759 	.word	0x08005759
 800574c:	0800576b 	.word	0x0800576b
 8005750:	08005759 	.word	0x08005759
 8005754:	080057ef 	.word	0x080057ef
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800575c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005760:	2b00      	cmp	r3, #0
 8005762:	d046      	beq.n	80057f2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005768:	e043      	b.n	80057f2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800576e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005772:	d140      	bne.n	80057f6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005778:	e03d      	b.n	80057f6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	699b      	ldr	r3, [r3, #24]
 800577e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005782:	d121      	bne.n	80057c8 <DMA_CheckFifoParam+0xa8>
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	2b03      	cmp	r3, #3
 8005788:	d837      	bhi.n	80057fa <DMA_CheckFifoParam+0xda>
 800578a:	a201      	add	r2, pc, #4	; (adr r2, 8005790 <DMA_CheckFifoParam+0x70>)
 800578c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005790:	080057a1 	.word	0x080057a1
 8005794:	080057a7 	.word	0x080057a7
 8005798:	080057a1 	.word	0x080057a1
 800579c:	080057b9 	.word	0x080057b9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80057a0:	2301      	movs	r3, #1
 80057a2:	73fb      	strb	r3, [r7, #15]
      break;
 80057a4:	e030      	b.n	8005808 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d025      	beq.n	80057fe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057b6:	e022      	b.n	80057fe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057bc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80057c0:	d11f      	bne.n	8005802 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80057c6:	e01c      	b.n	8005802 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	2b02      	cmp	r3, #2
 80057cc:	d903      	bls.n	80057d6 <DMA_CheckFifoParam+0xb6>
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	2b03      	cmp	r3, #3
 80057d2:	d003      	beq.n	80057dc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80057d4:	e018      	b.n	8005808 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	73fb      	strb	r3, [r7, #15]
      break;
 80057da:	e015      	b.n	8005808 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d00e      	beq.n	8005806 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	73fb      	strb	r3, [r7, #15]
      break;
 80057ec:	e00b      	b.n	8005806 <DMA_CheckFifoParam+0xe6>
      break;
 80057ee:	bf00      	nop
 80057f0:	e00a      	b.n	8005808 <DMA_CheckFifoParam+0xe8>
      break;
 80057f2:	bf00      	nop
 80057f4:	e008      	b.n	8005808 <DMA_CheckFifoParam+0xe8>
      break;
 80057f6:	bf00      	nop
 80057f8:	e006      	b.n	8005808 <DMA_CheckFifoParam+0xe8>
      break;
 80057fa:	bf00      	nop
 80057fc:	e004      	b.n	8005808 <DMA_CheckFifoParam+0xe8>
      break;
 80057fe:	bf00      	nop
 8005800:	e002      	b.n	8005808 <DMA_CheckFifoParam+0xe8>
      break;   
 8005802:	bf00      	nop
 8005804:	e000      	b.n	8005808 <DMA_CheckFifoParam+0xe8>
      break;
 8005806:	bf00      	nop
    }
  } 
  
  return status; 
 8005808:	7bfb      	ldrb	r3, [r7, #15]
}
 800580a:	4618      	mov	r0, r3
 800580c:	3714      	adds	r7, #20
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr
 8005816:	bf00      	nop

08005818 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b082      	sub	sp, #8
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d101      	bne.n	800582a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	e039      	b.n	800589e <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005830:	b2db      	uxtb	r3, r3
 8005832:	2b00      	cmp	r3, #0
 8005834:	d106      	bne.n	8005844 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f7fc fcf4 	bl	800222c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2202      	movs	r2, #2
 8005848:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	685a      	ldr	r2, [r3, #4]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	430a      	orrs	r2, r1
 8005860:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005868:	f023 0107 	bic.w	r1, r3, #7
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	689a      	ldr	r2, [r3, #8]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	430a      	orrs	r2, r1
 8005876:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800587e:	4b0a      	ldr	r3, [pc, #40]	; (80058a8 <HAL_DMA2D_Init+0x90>)
 8005880:	4013      	ands	r3, r2
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	68d1      	ldr	r1, [r2, #12]
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	6812      	ldr	r2, [r2, #0]
 800588a:	430b      	orrs	r3, r1
 800588c:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800589c:	2300      	movs	r3, #0
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3708      	adds	r7, #8
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	bf00      	nop
 80058a8:	ffffc000 	.word	0xffffc000

080058ac <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b086      	sub	sp, #24
 80058b0:	af02      	add	r7, sp, #8
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	60b9      	str	r1, [r7, #8]
 80058b6:	607a      	str	r2, [r7, #4]
 80058b8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d101      	bne.n	80058c8 <HAL_DMA2D_Start+0x1c>
 80058c4:	2302      	movs	r3, #2
 80058c6:	e018      	b.n	80058fa <HAL_DMA2D_Start+0x4e>
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2202      	movs	r2, #2
 80058d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80058d8:	69bb      	ldr	r3, [r7, #24]
 80058da:	9300      	str	r3, [sp, #0]
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	687a      	ldr	r2, [r7, #4]
 80058e0:	68b9      	ldr	r1, [r7, #8]
 80058e2:	68f8      	ldr	r0, [r7, #12]
 80058e4:	f000 fa98 	bl	8005e18 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f042 0201 	orr.w	r2, r2, #1
 80058f6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80058f8:	2300      	movs	r3, #0
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3710      	adds	r7, #16
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}

08005902 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8005902:	b580      	push	{r7, lr}
 8005904:	b086      	sub	sp, #24
 8005906:	af00      	add	r7, sp, #0
 8005908:	6078      	str	r0, [r7, #4]
 800590a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 800590c:	2300      	movs	r3, #0
 800590e:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 0301 	and.w	r3, r3, #1
 800591a:	2b00      	cmp	r3, #0
 800591c:	d056      	beq.n	80059cc <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800591e:	f7fe fb2f 	bl	8003f80 <HAL_GetTick>
 8005922:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005924:	e04b      	b.n	80059be <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8005934:	2b00      	cmp	r3, #0
 8005936:	d023      	beq.n	8005980 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f003 0320 	and.w	r3, r3, #32
 800593e:	2b00      	cmp	r3, #0
 8005940:	d005      	beq.n	800594e <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005946:	f043 0202 	orr.w	r2, r3, #2
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	f003 0301 	and.w	r3, r3, #1
 8005954:	2b00      	cmp	r3, #0
 8005956:	d005      	beq.n	8005964 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800595c:	f043 0201 	orr.w	r2, r3, #1
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	2221      	movs	r2, #33	; 0x21
 800596a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2204      	movs	r2, #4
 8005970:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800597c:	2301      	movs	r3, #1
 800597e:	e0a5      	b.n	8005acc <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005986:	d01a      	beq.n	80059be <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005988:	f7fe fafa 	bl	8003f80 <HAL_GetTick>
 800598c:	4602      	mov	r2, r0
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	1ad3      	subs	r3, r2, r3
 8005992:	683a      	ldr	r2, [r7, #0]
 8005994:	429a      	cmp	r2, r3
 8005996:	d302      	bcc.n	800599e <HAL_DMA2D_PollForTransfer+0x9c>
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d10f      	bne.n	80059be <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059a2:	f043 0220 	orr.w	r2, r3, #32
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2203      	movs	r2, #3
 80059ae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2200      	movs	r2, #0
 80059b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80059ba:	2303      	movs	r3, #3
 80059bc:	e086      	b.n	8005acc <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	f003 0302 	and.w	r3, r3, #2
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d0ac      	beq.n	8005926 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	69db      	ldr	r3, [r3, #28]
 80059d2:	f003 0320 	and.w	r3, r3, #32
 80059d6:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059de:	f003 0320 	and.w	r3, r3, #32
 80059e2:	693a      	ldr	r2, [r7, #16]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d061      	beq.n	8005ab2 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80059ee:	f7fe fac7 	bl	8003f80 <HAL_GetTick>
 80059f2:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80059f4:	e056      	b.n	8005aa4 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d02e      	beq.n	8005a66 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f003 0308 	and.w	r3, r3, #8
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d005      	beq.n	8005a1e <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a16:	f043 0204 	orr.w	r2, r3, #4
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f003 0320 	and.w	r3, r3, #32
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d005      	beq.n	8005a34 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a2c:	f043 0202 	orr.w	r2, r3, #2
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f003 0301 	and.w	r3, r3, #1
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d005      	beq.n	8005a4a <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a42:	f043 0201 	orr.w	r2, r3, #1
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	2229      	movs	r2, #41	; 0x29
 8005a50:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2204      	movs	r2, #4
 8005a56:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	e032      	b.n	8005acc <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a6c:	d01a      	beq.n	8005aa4 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005a6e:	f7fe fa87 	bl	8003f80 <HAL_GetTick>
 8005a72:	4602      	mov	r2, r0
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	1ad3      	subs	r3, r2, r3
 8005a78:	683a      	ldr	r2, [r7, #0]
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d302      	bcc.n	8005a84 <HAL_DMA2D_PollForTransfer+0x182>
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d10f      	bne.n	8005aa4 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a88:	f043 0220 	orr.w	r2, r3, #32
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2203      	movs	r2, #3
 8005a94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8005aa0:	2303      	movs	r3, #3
 8005aa2:	e013      	b.n	8005acc <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	f003 0310 	and.w	r3, r3, #16
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d0a1      	beq.n	80059f6 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	2212      	movs	r2, #18
 8005ab8:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2201      	movs	r2, #1
 8005abe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005aca:	2300      	movs	r3, #0
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3718      	adds	r7, #24
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}

08005ad4 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b084      	sub	sp, #16
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f003 0301 	and.w	r3, r3, #1
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d026      	beq.n	8005b44 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d021      	beq.n	8005b44 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b0e:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b14:	f043 0201 	orr.w	r2, r3, #1
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	2201      	movs	r2, #1
 8005b22:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2204      	movs	r2, #4
 8005b28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	695b      	ldr	r3, [r3, #20]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d003      	beq.n	8005b44 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	695b      	ldr	r3, [r3, #20]
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f003 0320 	and.w	r3, r3, #32
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d026      	beq.n	8005b9c <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d021      	beq.n	8005b9c <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b66:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	2220      	movs	r2, #32
 8005b6e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b74:	f043 0202 	orr.w	r2, r3, #2
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2204      	movs	r2, #4
 8005b80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2200      	movs	r2, #0
 8005b88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	695b      	ldr	r3, [r3, #20]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d003      	beq.n	8005b9c <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	695b      	ldr	r3, [r3, #20]
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f003 0308 	and.w	r3, r3, #8
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d026      	beq.n	8005bf4 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d021      	beq.n	8005bf4 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005bbe:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	2208      	movs	r2, #8
 8005bc6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bcc:	f043 0204 	orr.w	r2, r3, #4
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2204      	movs	r2, #4
 8005bd8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2200      	movs	r2, #0
 8005be0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	695b      	ldr	r3, [r3, #20]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d003      	beq.n	8005bf4 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	695b      	ldr	r3, [r3, #20]
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f003 0304 	and.w	r3, r3, #4
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d013      	beq.n	8005c26 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d00e      	beq.n	8005c26 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c16:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	2204      	movs	r2, #4
 8005c1e:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f000 f853 	bl	8005ccc <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f003 0302 	and.w	r3, r3, #2
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d024      	beq.n	8005c7a <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d01f      	beq.n	8005c7a <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005c48:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	2202      	movs	r2, #2
 8005c50:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	691b      	ldr	r3, [r3, #16]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d003      	beq.n	8005c7a <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	691b      	ldr	r3, [r3, #16]
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f003 0310 	and.w	r3, r3, #16
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d01f      	beq.n	8005cc4 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d01a      	beq.n	8005cc4 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005c9c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	2210      	movs	r2, #16
 8005ca4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f000 f80e 	bl	8005ce0 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8005cc4:	bf00      	nop
 8005cc6:	3710      	adds	r7, #16
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b083      	sub	sp, #12
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8005cd4:	bf00      	nop
 8005cd6:	370c      	adds	r7, #12
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr

08005ce0 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b083      	sub	sp, #12
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8005ce8:	bf00      	nop
 8005cea:	370c      	adds	r7, #12
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr

08005cf4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b087      	sub	sp, #28
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d101      	bne.n	8005d14 <HAL_DMA2D_ConfigLayer+0x20>
 8005d10:	2302      	movs	r3, #2
 8005d12:	e079      	b.n	8005e08 <HAL_DMA2D_ConfigLayer+0x114>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2202      	movs	r2, #2
 8005d20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	011b      	lsls	r3, r3, #4
 8005d28:	3318      	adds	r3, #24
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	4413      	add	r3, r2
 8005d2e:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	685a      	ldr	r2, [r3, #4]
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	041b      	lsls	r3, r3, #16
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8005d3e:	4b35      	ldr	r3, [pc, #212]	; (8005e14 <HAL_DMA2D_ConfigLayer+0x120>)
 8005d40:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	2b0a      	cmp	r3, #10
 8005d48:	d003      	beq.n	8005d52 <HAL_DMA2D_ConfigLayer+0x5e>
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	2b09      	cmp	r3, #9
 8005d50:	d107      	bne.n	8005d62 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	68db      	ldr	r3, [r3, #12]
 8005d56:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005d5a:	697a      	ldr	r2, [r7, #20]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	617b      	str	r3, [r7, #20]
 8005d60:	e005      	b.n	8005d6e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	68db      	ldr	r3, [r3, #12]
 8005d66:	061b      	lsls	r3, r3, #24
 8005d68:	697a      	ldr	r2, [r7, #20]
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d120      	bne.n	8005db6 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	43db      	mvns	r3, r3
 8005d7e:	ea02 0103 	and.w	r1, r2, r3
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	697a      	ldr	r2, [r7, #20]
 8005d88:	430a      	orrs	r2, r1
 8005d8a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	693a      	ldr	r2, [r7, #16]
 8005d92:	6812      	ldr	r2, [r2, #0]
 8005d94:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	2b0a      	cmp	r3, #10
 8005d9c:	d003      	beq.n	8005da6 <HAL_DMA2D_ConfigLayer+0xb2>
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	2b09      	cmp	r3, #9
 8005da4:	d127      	bne.n	8005df6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	68da      	ldr	r2, [r3, #12]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005db2:	629a      	str	r2, [r3, #40]	; 0x28
 8005db4:	e01f      	b.n	8005df6 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	69da      	ldr	r2, [r3, #28]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	43db      	mvns	r3, r3
 8005dc0:	ea02 0103 	and.w	r1, r2, r3
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	697a      	ldr	r2, [r7, #20]
 8005dca:	430a      	orrs	r2, r1
 8005dcc:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	693a      	ldr	r2, [r7, #16]
 8005dd4:	6812      	ldr	r2, [r2, #0]
 8005dd6:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	2b0a      	cmp	r3, #10
 8005dde:	d003      	beq.n	8005de8 <HAL_DMA2D_ConfigLayer+0xf4>
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	2b09      	cmp	r3, #9
 8005de6:	d106      	bne.n	8005df6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	68da      	ldr	r2, [r3, #12]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005df4:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2200      	movs	r2, #0
 8005e02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005e06:	2300      	movs	r3, #0
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	371c      	adds	r7, #28
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr
 8005e14:	ff03000f 	.word	0xff03000f

08005e18 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b08b      	sub	sp, #44	; 0x2c
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	60f8      	str	r0, [r7, #12]
 8005e20:	60b9      	str	r1, [r7, #8]
 8005e22:	607a      	str	r2, [r7, #4]
 8005e24:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e2c:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	041a      	lsls	r2, r3, #16
 8005e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e36:	431a      	orrs	r2, r3
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	430a      	orrs	r2, r1
 8005e3e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005e50:	d174      	bne.n	8005f3c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005e58:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005e60:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005e68:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d108      	bne.n	8005e8a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8005e78:	69ba      	ldr	r2, [r7, #24]
 8005e7a:	69fb      	ldr	r3, [r7, #28]
 8005e7c:	431a      	orrs	r2, r3
 8005e7e:	6a3b      	ldr	r3, [r7, #32]
 8005e80:	4313      	orrs	r3, r2
 8005e82:	697a      	ldr	r2, [r7, #20]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	627b      	str	r3, [r7, #36]	; 0x24
 8005e88:	e053      	b.n	8005f32 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d106      	bne.n	8005ea0 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8005e92:	69ba      	ldr	r2, [r7, #24]
 8005e94:	69fb      	ldr	r3, [r7, #28]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	697a      	ldr	r2, [r7, #20]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	627b      	str	r3, [r7, #36]	; 0x24
 8005e9e:	e048      	b.n	8005f32 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	2b02      	cmp	r3, #2
 8005ea6:	d111      	bne.n	8005ecc <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8005ea8:	69fb      	ldr	r3, [r7, #28]
 8005eaa:	0cdb      	lsrs	r3, r3, #19
 8005eac:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8005eae:	69bb      	ldr	r3, [r7, #24]
 8005eb0:	0a9b      	lsrs	r3, r3, #10
 8005eb2:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	08db      	lsrs	r3, r3, #3
 8005eb8:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8005eba:	69bb      	ldr	r3, [r7, #24]
 8005ebc:	015a      	lsls	r2, r3, #5
 8005ebe:	69fb      	ldr	r3, [r7, #28]
 8005ec0:	02db      	lsls	r3, r3, #11
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	697a      	ldr	r2, [r7, #20]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	627b      	str	r3, [r7, #36]	; 0x24
 8005eca:	e032      	b.n	8005f32 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	2b03      	cmp	r3, #3
 8005ed2:	d117      	bne.n	8005f04 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8005ed4:	6a3b      	ldr	r3, [r7, #32]
 8005ed6:	0fdb      	lsrs	r3, r3, #31
 8005ed8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8005eda:	69fb      	ldr	r3, [r7, #28]
 8005edc:	0cdb      	lsrs	r3, r3, #19
 8005ede:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8005ee0:	69bb      	ldr	r3, [r7, #24]
 8005ee2:	0adb      	lsrs	r3, r3, #11
 8005ee4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	08db      	lsrs	r3, r3, #3
 8005eea:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8005eec:	69bb      	ldr	r3, [r7, #24]
 8005eee:	015a      	lsls	r2, r3, #5
 8005ef0:	69fb      	ldr	r3, [r7, #28]
 8005ef2:	029b      	lsls	r3, r3, #10
 8005ef4:	431a      	orrs	r2, r3
 8005ef6:	6a3b      	ldr	r3, [r7, #32]
 8005ef8:	03db      	lsls	r3, r3, #15
 8005efa:	4313      	orrs	r3, r2
 8005efc:	697a      	ldr	r2, [r7, #20]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	627b      	str	r3, [r7, #36]	; 0x24
 8005f02:	e016      	b.n	8005f32 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8005f04:	6a3b      	ldr	r3, [r7, #32]
 8005f06:	0f1b      	lsrs	r3, r3, #28
 8005f08:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8005f0a:	69fb      	ldr	r3, [r7, #28]
 8005f0c:	0d1b      	lsrs	r3, r3, #20
 8005f0e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8005f10:	69bb      	ldr	r3, [r7, #24]
 8005f12:	0b1b      	lsrs	r3, r3, #12
 8005f14:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	091b      	lsrs	r3, r3, #4
 8005f1a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8005f1c:	69bb      	ldr	r3, [r7, #24]
 8005f1e:	011a      	lsls	r2, r3, #4
 8005f20:	69fb      	ldr	r3, [r7, #28]
 8005f22:	021b      	lsls	r3, r3, #8
 8005f24:	431a      	orrs	r2, r3
 8005f26:	6a3b      	ldr	r3, [r7, #32]
 8005f28:	031b      	lsls	r3, r3, #12
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	697a      	ldr	r2, [r7, #20]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f38:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8005f3a:	e003      	b.n	8005f44 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	68ba      	ldr	r2, [r7, #8]
 8005f42:	60da      	str	r2, [r3, #12]
}
 8005f44:	bf00      	nop
 8005f46:	372c      	adds	r7, #44	; 0x2c
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b089      	sub	sp, #36	; 0x24
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005f62:	2300      	movs	r3, #0
 8005f64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005f66:	2300      	movs	r3, #0
 8005f68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	61fb      	str	r3, [r7, #28]
 8005f6e:	e175      	b.n	800625c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005f70:	2201      	movs	r2, #1
 8005f72:	69fb      	ldr	r3, [r7, #28]
 8005f74:	fa02 f303 	lsl.w	r3, r2, r3
 8005f78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	697a      	ldr	r2, [r7, #20]
 8005f80:	4013      	ands	r3, r2
 8005f82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005f84:	693a      	ldr	r2, [r7, #16]
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	f040 8164 	bne.w	8006256 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d00b      	beq.n	8005fae <HAL_GPIO_Init+0x5e>
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	2b02      	cmp	r3, #2
 8005f9c:	d007      	beq.n	8005fae <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005fa2:	2b11      	cmp	r3, #17
 8005fa4:	d003      	beq.n	8005fae <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	2b12      	cmp	r3, #18
 8005fac:	d130      	bne.n	8006010 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005fb4:	69fb      	ldr	r3, [r7, #28]
 8005fb6:	005b      	lsls	r3, r3, #1
 8005fb8:	2203      	movs	r2, #3
 8005fba:	fa02 f303 	lsl.w	r3, r2, r3
 8005fbe:	43db      	mvns	r3, r3
 8005fc0:	69ba      	ldr	r2, [r7, #24]
 8005fc2:	4013      	ands	r3, r2
 8005fc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	68da      	ldr	r2, [r3, #12]
 8005fca:	69fb      	ldr	r3, [r7, #28]
 8005fcc:	005b      	lsls	r3, r3, #1
 8005fce:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd2:	69ba      	ldr	r2, [r7, #24]
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	69ba      	ldr	r2, [r7, #24]
 8005fdc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	69fb      	ldr	r3, [r7, #28]
 8005fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8005fec:	43db      	mvns	r3, r3
 8005fee:	69ba      	ldr	r2, [r7, #24]
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	091b      	lsrs	r3, r3, #4
 8005ffa:	f003 0201 	and.w	r2, r3, #1
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	fa02 f303 	lsl.w	r3, r2, r3
 8006004:	69ba      	ldr	r2, [r7, #24]
 8006006:	4313      	orrs	r3, r2
 8006008:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	69ba      	ldr	r2, [r7, #24]
 800600e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	68db      	ldr	r3, [r3, #12]
 8006014:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006016:	69fb      	ldr	r3, [r7, #28]
 8006018:	005b      	lsls	r3, r3, #1
 800601a:	2203      	movs	r2, #3
 800601c:	fa02 f303 	lsl.w	r3, r2, r3
 8006020:	43db      	mvns	r3, r3
 8006022:	69ba      	ldr	r2, [r7, #24]
 8006024:	4013      	ands	r3, r2
 8006026:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	689a      	ldr	r2, [r3, #8]
 800602c:	69fb      	ldr	r3, [r7, #28]
 800602e:	005b      	lsls	r3, r3, #1
 8006030:	fa02 f303 	lsl.w	r3, r2, r3
 8006034:	69ba      	ldr	r2, [r7, #24]
 8006036:	4313      	orrs	r3, r2
 8006038:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	69ba      	ldr	r2, [r7, #24]
 800603e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	2b02      	cmp	r3, #2
 8006046:	d003      	beq.n	8006050 <HAL_GPIO_Init+0x100>
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	2b12      	cmp	r3, #18
 800604e:	d123      	bne.n	8006098 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8006050:	69fb      	ldr	r3, [r7, #28]
 8006052:	08da      	lsrs	r2, r3, #3
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	3208      	adds	r2, #8
 8006058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800605c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800605e:	69fb      	ldr	r3, [r7, #28]
 8006060:	f003 0307 	and.w	r3, r3, #7
 8006064:	009b      	lsls	r3, r3, #2
 8006066:	220f      	movs	r2, #15
 8006068:	fa02 f303 	lsl.w	r3, r2, r3
 800606c:	43db      	mvns	r3, r3
 800606e:	69ba      	ldr	r2, [r7, #24]
 8006070:	4013      	ands	r3, r2
 8006072:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	691a      	ldr	r2, [r3, #16]
 8006078:	69fb      	ldr	r3, [r7, #28]
 800607a:	f003 0307 	and.w	r3, r3, #7
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	fa02 f303 	lsl.w	r3, r2, r3
 8006084:	69ba      	ldr	r2, [r7, #24]
 8006086:	4313      	orrs	r3, r2
 8006088:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800608a:	69fb      	ldr	r3, [r7, #28]
 800608c:	08da      	lsrs	r2, r3, #3
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	3208      	adds	r2, #8
 8006092:	69b9      	ldr	r1, [r7, #24]
 8006094:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800609e:	69fb      	ldr	r3, [r7, #28]
 80060a0:	005b      	lsls	r3, r3, #1
 80060a2:	2203      	movs	r2, #3
 80060a4:	fa02 f303 	lsl.w	r3, r2, r3
 80060a8:	43db      	mvns	r3, r3
 80060aa:	69ba      	ldr	r2, [r7, #24]
 80060ac:	4013      	ands	r3, r2
 80060ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	f003 0203 	and.w	r2, r3, #3
 80060b8:	69fb      	ldr	r3, [r7, #28]
 80060ba:	005b      	lsls	r3, r3, #1
 80060bc:	fa02 f303 	lsl.w	r3, r2, r3
 80060c0:	69ba      	ldr	r2, [r7, #24]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	69ba      	ldr	r2, [r7, #24]
 80060ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	f000 80be 	beq.w	8006256 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80060da:	4b66      	ldr	r3, [pc, #408]	; (8006274 <HAL_GPIO_Init+0x324>)
 80060dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060de:	4a65      	ldr	r2, [pc, #404]	; (8006274 <HAL_GPIO_Init+0x324>)
 80060e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80060e4:	6453      	str	r3, [r2, #68]	; 0x44
 80060e6:	4b63      	ldr	r3, [pc, #396]	; (8006274 <HAL_GPIO_Init+0x324>)
 80060e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060ee:	60fb      	str	r3, [r7, #12]
 80060f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80060f2:	4a61      	ldr	r2, [pc, #388]	; (8006278 <HAL_GPIO_Init+0x328>)
 80060f4:	69fb      	ldr	r3, [r7, #28]
 80060f6:	089b      	lsrs	r3, r3, #2
 80060f8:	3302      	adds	r3, #2
 80060fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006100:	69fb      	ldr	r3, [r7, #28]
 8006102:	f003 0303 	and.w	r3, r3, #3
 8006106:	009b      	lsls	r3, r3, #2
 8006108:	220f      	movs	r2, #15
 800610a:	fa02 f303 	lsl.w	r3, r2, r3
 800610e:	43db      	mvns	r3, r3
 8006110:	69ba      	ldr	r2, [r7, #24]
 8006112:	4013      	ands	r3, r2
 8006114:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	4a58      	ldr	r2, [pc, #352]	; (800627c <HAL_GPIO_Init+0x32c>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d037      	beq.n	800618e <HAL_GPIO_Init+0x23e>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	4a57      	ldr	r2, [pc, #348]	; (8006280 <HAL_GPIO_Init+0x330>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d031      	beq.n	800618a <HAL_GPIO_Init+0x23a>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	4a56      	ldr	r2, [pc, #344]	; (8006284 <HAL_GPIO_Init+0x334>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d02b      	beq.n	8006186 <HAL_GPIO_Init+0x236>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	4a55      	ldr	r2, [pc, #340]	; (8006288 <HAL_GPIO_Init+0x338>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d025      	beq.n	8006182 <HAL_GPIO_Init+0x232>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	4a54      	ldr	r2, [pc, #336]	; (800628c <HAL_GPIO_Init+0x33c>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d01f      	beq.n	800617e <HAL_GPIO_Init+0x22e>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	4a53      	ldr	r2, [pc, #332]	; (8006290 <HAL_GPIO_Init+0x340>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d019      	beq.n	800617a <HAL_GPIO_Init+0x22a>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	4a52      	ldr	r2, [pc, #328]	; (8006294 <HAL_GPIO_Init+0x344>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d013      	beq.n	8006176 <HAL_GPIO_Init+0x226>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	4a51      	ldr	r2, [pc, #324]	; (8006298 <HAL_GPIO_Init+0x348>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d00d      	beq.n	8006172 <HAL_GPIO_Init+0x222>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	4a50      	ldr	r2, [pc, #320]	; (800629c <HAL_GPIO_Init+0x34c>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d007      	beq.n	800616e <HAL_GPIO_Init+0x21e>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	4a4f      	ldr	r2, [pc, #316]	; (80062a0 <HAL_GPIO_Init+0x350>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d101      	bne.n	800616a <HAL_GPIO_Init+0x21a>
 8006166:	2309      	movs	r3, #9
 8006168:	e012      	b.n	8006190 <HAL_GPIO_Init+0x240>
 800616a:	230a      	movs	r3, #10
 800616c:	e010      	b.n	8006190 <HAL_GPIO_Init+0x240>
 800616e:	2308      	movs	r3, #8
 8006170:	e00e      	b.n	8006190 <HAL_GPIO_Init+0x240>
 8006172:	2307      	movs	r3, #7
 8006174:	e00c      	b.n	8006190 <HAL_GPIO_Init+0x240>
 8006176:	2306      	movs	r3, #6
 8006178:	e00a      	b.n	8006190 <HAL_GPIO_Init+0x240>
 800617a:	2305      	movs	r3, #5
 800617c:	e008      	b.n	8006190 <HAL_GPIO_Init+0x240>
 800617e:	2304      	movs	r3, #4
 8006180:	e006      	b.n	8006190 <HAL_GPIO_Init+0x240>
 8006182:	2303      	movs	r3, #3
 8006184:	e004      	b.n	8006190 <HAL_GPIO_Init+0x240>
 8006186:	2302      	movs	r3, #2
 8006188:	e002      	b.n	8006190 <HAL_GPIO_Init+0x240>
 800618a:	2301      	movs	r3, #1
 800618c:	e000      	b.n	8006190 <HAL_GPIO_Init+0x240>
 800618e:	2300      	movs	r3, #0
 8006190:	69fa      	ldr	r2, [r7, #28]
 8006192:	f002 0203 	and.w	r2, r2, #3
 8006196:	0092      	lsls	r2, r2, #2
 8006198:	4093      	lsls	r3, r2
 800619a:	69ba      	ldr	r2, [r7, #24]
 800619c:	4313      	orrs	r3, r2
 800619e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80061a0:	4935      	ldr	r1, [pc, #212]	; (8006278 <HAL_GPIO_Init+0x328>)
 80061a2:	69fb      	ldr	r3, [r7, #28]
 80061a4:	089b      	lsrs	r3, r3, #2
 80061a6:	3302      	adds	r3, #2
 80061a8:	69ba      	ldr	r2, [r7, #24]
 80061aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80061ae:	4b3d      	ldr	r3, [pc, #244]	; (80062a4 <HAL_GPIO_Init+0x354>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	43db      	mvns	r3, r3
 80061b8:	69ba      	ldr	r2, [r7, #24]
 80061ba:	4013      	ands	r3, r2
 80061bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d003      	beq.n	80061d2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80061ca:	69ba      	ldr	r2, [r7, #24]
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	4313      	orrs	r3, r2
 80061d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80061d2:	4a34      	ldr	r2, [pc, #208]	; (80062a4 <HAL_GPIO_Init+0x354>)
 80061d4:	69bb      	ldr	r3, [r7, #24]
 80061d6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80061d8:	4b32      	ldr	r3, [pc, #200]	; (80062a4 <HAL_GPIO_Init+0x354>)
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	43db      	mvns	r3, r3
 80061e2:	69ba      	ldr	r2, [r7, #24]
 80061e4:	4013      	ands	r3, r2
 80061e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d003      	beq.n	80061fc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80061f4:	69ba      	ldr	r2, [r7, #24]
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	4313      	orrs	r3, r2
 80061fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80061fc:	4a29      	ldr	r2, [pc, #164]	; (80062a4 <HAL_GPIO_Init+0x354>)
 80061fe:	69bb      	ldr	r3, [r7, #24]
 8006200:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006202:	4b28      	ldr	r3, [pc, #160]	; (80062a4 <HAL_GPIO_Init+0x354>)
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	43db      	mvns	r3, r3
 800620c:	69ba      	ldr	r2, [r7, #24]
 800620e:	4013      	ands	r3, r2
 8006210:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800621a:	2b00      	cmp	r3, #0
 800621c:	d003      	beq.n	8006226 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800621e:	69ba      	ldr	r2, [r7, #24]
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	4313      	orrs	r3, r2
 8006224:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006226:	4a1f      	ldr	r2, [pc, #124]	; (80062a4 <HAL_GPIO_Init+0x354>)
 8006228:	69bb      	ldr	r3, [r7, #24]
 800622a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800622c:	4b1d      	ldr	r3, [pc, #116]	; (80062a4 <HAL_GPIO_Init+0x354>)
 800622e:	68db      	ldr	r3, [r3, #12]
 8006230:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	43db      	mvns	r3, r3
 8006236:	69ba      	ldr	r2, [r7, #24]
 8006238:	4013      	ands	r3, r2
 800623a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006244:	2b00      	cmp	r3, #0
 8006246:	d003      	beq.n	8006250 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006248:	69ba      	ldr	r2, [r7, #24]
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	4313      	orrs	r3, r2
 800624e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006250:	4a14      	ldr	r2, [pc, #80]	; (80062a4 <HAL_GPIO_Init+0x354>)
 8006252:	69bb      	ldr	r3, [r7, #24]
 8006254:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006256:	69fb      	ldr	r3, [r7, #28]
 8006258:	3301      	adds	r3, #1
 800625a:	61fb      	str	r3, [r7, #28]
 800625c:	69fb      	ldr	r3, [r7, #28]
 800625e:	2b0f      	cmp	r3, #15
 8006260:	f67f ae86 	bls.w	8005f70 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8006264:	bf00      	nop
 8006266:	bf00      	nop
 8006268:	3724      	adds	r7, #36	; 0x24
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr
 8006272:	bf00      	nop
 8006274:	40023800 	.word	0x40023800
 8006278:	40013800 	.word	0x40013800
 800627c:	40020000 	.word	0x40020000
 8006280:	40020400 	.word	0x40020400
 8006284:	40020800 	.word	0x40020800
 8006288:	40020c00 	.word	0x40020c00
 800628c:	40021000 	.word	0x40021000
 8006290:	40021400 	.word	0x40021400
 8006294:	40021800 	.word	0x40021800
 8006298:	40021c00 	.word	0x40021c00
 800629c:	40022000 	.word	0x40022000
 80062a0:	40022400 	.word	0x40022400
 80062a4:	40013c00 	.word	0x40013c00

080062a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b085      	sub	sp, #20
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	460b      	mov	r3, r1
 80062b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	691a      	ldr	r2, [r3, #16]
 80062b8:	887b      	ldrh	r3, [r7, #2]
 80062ba:	4013      	ands	r3, r2
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d002      	beq.n	80062c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80062c0:	2301      	movs	r3, #1
 80062c2:	73fb      	strb	r3, [r7, #15]
 80062c4:	e001      	b.n	80062ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80062c6:	2300      	movs	r3, #0
 80062c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80062ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3714      	adds	r7, #20
 80062d0:	46bd      	mov	sp, r7
 80062d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d6:	4770      	bx	lr

080062d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80062d8:	b480      	push	{r7}
 80062da:	b083      	sub	sp, #12
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	460b      	mov	r3, r1
 80062e2:	807b      	strh	r3, [r7, #2]
 80062e4:	4613      	mov	r3, r2
 80062e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80062e8:	787b      	ldrb	r3, [r7, #1]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d003      	beq.n	80062f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80062ee:	887a      	ldrh	r2, [r7, #2]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80062f4:	e003      	b.n	80062fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80062f6:	887b      	ldrh	r3, [r7, #2]
 80062f8:	041a      	lsls	r2, r3, #16
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	619a      	str	r2, [r3, #24]
}
 80062fe:	bf00      	nop
 8006300:	370c      	adds	r7, #12
 8006302:	46bd      	mov	sp, r7
 8006304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006308:	4770      	bx	lr

0800630a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800630a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800630c:	b08f      	sub	sp, #60	; 0x3c
 800630e:	af0a      	add	r7, sp, #40	; 0x28
 8006310:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d101      	bne.n	800631c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8006318:	2301      	movs	r3, #1
 800631a:	e054      	b.n	80063c6 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8006328:	b2db      	uxtb	r3, r3
 800632a:	2b00      	cmp	r3, #0
 800632c:	d106      	bne.n	800633c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2200      	movs	r2, #0
 8006332:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f7fc fbe4 	bl	8002b04 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2203      	movs	r2, #3
 8006340:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006348:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800634c:	2b00      	cmp	r3, #0
 800634e:	d102      	bne.n	8006356 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2200      	movs	r2, #0
 8006354:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4618      	mov	r0, r3
 800635c:	f005 f91e 	bl	800b59c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	603b      	str	r3, [r7, #0]
 8006366:	687e      	ldr	r6, [r7, #4]
 8006368:	466d      	mov	r5, sp
 800636a:	f106 0410 	add.w	r4, r6, #16
 800636e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006370:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006372:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006374:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006376:	e894 0003 	ldmia.w	r4, {r0, r1}
 800637a:	e885 0003 	stmia.w	r5, {r0, r1}
 800637e:	1d33      	adds	r3, r6, #4
 8006380:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006382:	6838      	ldr	r0, [r7, #0]
 8006384:	f005 f8b2 	bl	800b4ec <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	2101      	movs	r1, #1
 800638e:	4618      	mov	r0, r3
 8006390:	f005 f915 	bl	800b5be <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	603b      	str	r3, [r7, #0]
 800639a:	687e      	ldr	r6, [r7, #4]
 800639c:	466d      	mov	r5, sp
 800639e:	f106 0410 	add.w	r4, r6, #16
 80063a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80063a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80063a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80063a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80063aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80063ae:	e885 0003 	stmia.w	r5, {r0, r1}
 80063b2:	1d33      	adds	r3, r6, #4
 80063b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80063b6:	6838      	ldr	r0, [r7, #0]
 80063b8:	f005 f9a8 	bl	800b70c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80063c4:	2300      	movs	r3, #0
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3714      	adds	r7, #20
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080063d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b082      	sub	sp, #8
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d101      	bne.n	80063e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80063de:	2301      	movs	r3, #1
 80063e0:	e07f      	b.n	80064e2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d106      	bne.n	80063fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2200      	movs	r2, #0
 80063f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f7fb ff3e 	bl	8002278 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2224      	movs	r2, #36	; 0x24
 8006400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f022 0201 	bic.w	r2, r2, #1
 8006412:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	685a      	ldr	r2, [r3, #4]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006420:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	689a      	ldr	r2, [r3, #8]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006430:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	68db      	ldr	r3, [r3, #12]
 8006436:	2b01      	cmp	r3, #1
 8006438:	d107      	bne.n	800644a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	689a      	ldr	r2, [r3, #8]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006446:	609a      	str	r2, [r3, #8]
 8006448:	e006      	b.n	8006458 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	689a      	ldr	r2, [r3, #8]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006456:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	68db      	ldr	r3, [r3, #12]
 800645c:	2b02      	cmp	r3, #2
 800645e:	d104      	bne.n	800646a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006468:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	6859      	ldr	r1, [r3, #4]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	4b1d      	ldr	r3, [pc, #116]	; (80064ec <HAL_I2C_Init+0x11c>)
 8006476:	430b      	orrs	r3, r1
 8006478:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	68da      	ldr	r2, [r3, #12]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006488:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	691a      	ldr	r2, [r3, #16]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	695b      	ldr	r3, [r3, #20]
 8006492:	ea42 0103 	orr.w	r1, r2, r3
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	699b      	ldr	r3, [r3, #24]
 800649a:	021a      	lsls	r2, r3, #8
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	430a      	orrs	r2, r1
 80064a2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	69d9      	ldr	r1, [r3, #28]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6a1a      	ldr	r2, [r3, #32]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	430a      	orrs	r2, r1
 80064b2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f042 0201 	orr.w	r2, r2, #1
 80064c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2200      	movs	r2, #0
 80064c8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2220      	movs	r2, #32
 80064ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2200      	movs	r2, #0
 80064d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2200      	movs	r2, #0
 80064dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80064e0:	2300      	movs	r3, #0
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3708      	adds	r7, #8
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
 80064ea:	bf00      	nop
 80064ec:	02008000 	.word	0x02008000

080064f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006500:	b2db      	uxtb	r3, r3
 8006502:	2b20      	cmp	r3, #32
 8006504:	d138      	bne.n	8006578 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800650c:	2b01      	cmp	r3, #1
 800650e:	d101      	bne.n	8006514 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006510:	2302      	movs	r3, #2
 8006512:	e032      	b.n	800657a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2201      	movs	r2, #1
 8006518:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2224      	movs	r2, #36	; 0x24
 8006520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f022 0201 	bic.w	r2, r2, #1
 8006532:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006542:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	6819      	ldr	r1, [r3, #0]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	683a      	ldr	r2, [r7, #0]
 8006550:	430a      	orrs	r2, r1
 8006552:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f042 0201 	orr.w	r2, r2, #1
 8006562:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2220      	movs	r2, #32
 8006568:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2200      	movs	r2, #0
 8006570:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006574:	2300      	movs	r3, #0
 8006576:	e000      	b.n	800657a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006578:	2302      	movs	r3, #2
  }
}
 800657a:	4618      	mov	r0, r3
 800657c:	370c      	adds	r7, #12
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr

08006586 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006586:	b480      	push	{r7}
 8006588:	b085      	sub	sp, #20
 800658a:	af00      	add	r7, sp, #0
 800658c:	6078      	str	r0, [r7, #4]
 800658e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006596:	b2db      	uxtb	r3, r3
 8006598:	2b20      	cmp	r3, #32
 800659a:	d139      	bne.n	8006610 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80065a2:	2b01      	cmp	r3, #1
 80065a4:	d101      	bne.n	80065aa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80065a6:	2302      	movs	r3, #2
 80065a8:	e033      	b.n	8006612 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2201      	movs	r2, #1
 80065ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2224      	movs	r2, #36	; 0x24
 80065b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f022 0201 	bic.w	r2, r2, #1
 80065c8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80065d8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	021b      	lsls	r3, r3, #8
 80065de:	68fa      	ldr	r2, [r7, #12]
 80065e0:	4313      	orrs	r3, r2
 80065e2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	68fa      	ldr	r2, [r7, #12]
 80065ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f042 0201 	orr.w	r2, r2, #1
 80065fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2220      	movs	r2, #32
 8006600:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2200      	movs	r2, #0
 8006608:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800660c:	2300      	movs	r3, #0
 800660e:	e000      	b.n	8006612 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006610:	2302      	movs	r3, #2
  }
}
 8006612:	4618      	mov	r0, r3
 8006614:	3714      	adds	r7, #20
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr
	...

08006620 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b084      	sub	sp, #16
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d101      	bne.n	8006632 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800662e:	2301      	movs	r3, #1
 8006630:	e0bf      	b.n	80067b2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006638:	b2db      	uxtb	r3, r3
 800663a:	2b00      	cmp	r3, #0
 800663c:	d106      	bne.n	800664c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2200      	movs	r2, #0
 8006642:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f7fb fe76 	bl	8002338 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2202      	movs	r2, #2
 8006650:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	699a      	ldr	r2, [r3, #24]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8006662:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	6999      	ldr	r1, [r3, #24]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	685a      	ldr	r2, [r3, #4]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	689b      	ldr	r3, [r3, #8]
 8006672:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006678:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	691b      	ldr	r3, [r3, #16]
 800667e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	430a      	orrs	r2, r1
 8006686:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	6899      	ldr	r1, [r3, #8]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	4b4a      	ldr	r3, [pc, #296]	; (80067bc <HAL_LTDC_Init+0x19c>)
 8006694:	400b      	ands	r3, r1
 8006696:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	695b      	ldr	r3, [r3, #20]
 800669c:	041b      	lsls	r3, r3, #16
 800669e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	6899      	ldr	r1, [r3, #8]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	699a      	ldr	r2, [r3, #24]
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	431a      	orrs	r2, r3
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	430a      	orrs	r2, r1
 80066b4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	68d9      	ldr	r1, [r3, #12]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	4b3e      	ldr	r3, [pc, #248]	; (80067bc <HAL_LTDC_Init+0x19c>)
 80066c2:	400b      	ands	r3, r1
 80066c4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	69db      	ldr	r3, [r3, #28]
 80066ca:	041b      	lsls	r3, r3, #16
 80066cc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	68d9      	ldr	r1, [r3, #12]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6a1a      	ldr	r2, [r3, #32]
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	431a      	orrs	r2, r3
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	430a      	orrs	r2, r1
 80066e2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	6919      	ldr	r1, [r3, #16]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681a      	ldr	r2, [r3, #0]
 80066ee:	4b33      	ldr	r3, [pc, #204]	; (80067bc <HAL_LTDC_Init+0x19c>)
 80066f0:	400b      	ands	r3, r1
 80066f2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f8:	041b      	lsls	r3, r3, #16
 80066fa:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	6919      	ldr	r1, [r3, #16]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	431a      	orrs	r2, r3
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	430a      	orrs	r2, r1
 8006710:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	6959      	ldr	r1, [r3, #20]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	4b27      	ldr	r3, [pc, #156]	; (80067bc <HAL_LTDC_Init+0x19c>)
 800671e:	400b      	ands	r3, r1
 8006720:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006726:	041b      	lsls	r3, r3, #16
 8006728:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	6959      	ldr	r1, [r3, #20]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	431a      	orrs	r2, r3
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	430a      	orrs	r2, r1
 800673e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006746:	021b      	lsls	r3, r3, #8
 8006748:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006750:	041b      	lsls	r3, r3, #16
 8006752:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8006762:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800676a:	68ba      	ldr	r2, [r7, #8]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	4313      	orrs	r3, r2
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006776:	431a      	orrs	r2, r3
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	430a      	orrs	r2, r1
 800677e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f042 0206 	orr.w	r2, r2, #6
 800678e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	699a      	ldr	r2, [r3, #24]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f042 0201 	orr.w	r2, r2, #1
 800679e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2200      	movs	r2, #0
 80067a4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2201      	movs	r2, #1
 80067ac:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80067b0:	2300      	movs	r3, #0
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	3710      	adds	r7, #16
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}
 80067ba:	bf00      	nop
 80067bc:	f000f800 	.word	0xf000f800

080067c0 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b084      	sub	sp, #16
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ce:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067d6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f003 0304 	and.w	r3, r3, #4
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d023      	beq.n	800682a <HAL_LTDC_IRQHandler+0x6a>
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	f003 0304 	and.w	r3, r3, #4
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d01e      	beq.n	800682a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f022 0204 	bic.w	r2, r2, #4
 80067fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	2204      	movs	r2, #4
 8006802:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800680a:	f043 0201 	orr.w	r2, r3, #1
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2204      	movs	r2, #4
 8006818:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2200      	movs	r2, #0
 8006820:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f000 f86f 	bl	8006908 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	f003 0302 	and.w	r3, r3, #2
 8006830:	2b00      	cmp	r3, #0
 8006832:	d023      	beq.n	800687c <HAL_LTDC_IRQHandler+0xbc>
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	f003 0302 	and.w	r3, r3, #2
 800683a:	2b00      	cmp	r3, #0
 800683c:	d01e      	beq.n	800687c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f022 0202 	bic.w	r2, r2, #2
 800684c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	2202      	movs	r2, #2
 8006854:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800685c:	f043 0202 	orr.w	r2, r3, #2
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2204      	movs	r2, #4
 800686a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2200      	movs	r2, #0
 8006872:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f000 f846 	bl	8006908 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f003 0301 	and.w	r3, r3, #1
 8006882:	2b00      	cmp	r3, #0
 8006884:	d01b      	beq.n	80068be <HAL_LTDC_IRQHandler+0xfe>
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	f003 0301 	and.w	r3, r3, #1
 800688c:	2b00      	cmp	r3, #0
 800688e:	d016      	beq.n	80068be <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f022 0201 	bic.w	r2, r2, #1
 800689e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	2201      	movs	r2, #1
 80068a6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2201      	movs	r2, #1
 80068ac:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2200      	movs	r2, #0
 80068b4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f000 f82f 	bl	800691c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	f003 0308 	and.w	r3, r3, #8
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d01b      	beq.n	8006900 <HAL_LTDC_IRQHandler+0x140>
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	f003 0308 	and.w	r3, r3, #8
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d016      	beq.n	8006900 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f022 0208 	bic.w	r2, r2, #8
 80068e0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	2208      	movs	r2, #8
 80068e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2201      	movs	r2, #1
 80068ee:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2200      	movs	r2, #0
 80068f6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f000 f818 	bl	8006930 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8006900:	bf00      	nop
 8006902:	3710      	adds	r7, #16
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}

08006908 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8006908:	b480      	push	{r7}
 800690a:	b083      	sub	sp, #12
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8006910:	bf00      	nop
 8006912:	370c      	adds	r7, #12
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr

0800691c <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800691c:	b480      	push	{r7}
 800691e:	b083      	sub	sp, #12
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8006924:	bf00      	nop
 8006926:	370c      	adds	r7, #12
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr

08006930 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006930:	b480      	push	{r7}
 8006932:	b083      	sub	sp, #12
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8006938:	bf00      	nop
 800693a:	370c      	adds	r7, #12
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr

08006944 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006944:	b5b0      	push	{r4, r5, r7, lr}
 8006946:	b084      	sub	sp, #16
 8006948:	af00      	add	r7, sp, #0
 800694a:	60f8      	str	r0, [r7, #12]
 800694c:	60b9      	str	r1, [r7, #8]
 800694e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006956:	2b01      	cmp	r3, #1
 8006958:	d101      	bne.n	800695e <HAL_LTDC_ConfigLayer+0x1a>
 800695a:	2302      	movs	r3, #2
 800695c:	e02c      	b.n	80069b8 <HAL_LTDC_ConfigLayer+0x74>
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2201      	movs	r2, #1
 8006962:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2202      	movs	r2, #2
 800696a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800696e:	68fa      	ldr	r2, [r7, #12]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2134      	movs	r1, #52	; 0x34
 8006974:	fb01 f303 	mul.w	r3, r1, r3
 8006978:	4413      	add	r3, r2
 800697a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	4614      	mov	r4, r2
 8006982:	461d      	mov	r5, r3
 8006984:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006986:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006988:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800698a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800698c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800698e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006990:	682b      	ldr	r3, [r5, #0]
 8006992:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006994:	687a      	ldr	r2, [r7, #4]
 8006996:	68b9      	ldr	r1, [r7, #8]
 8006998:	68f8      	ldr	r0, [r7, #12]
 800699a:	f000 f81f 	bl	80069dc <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	2201      	movs	r2, #1
 80069a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2201      	movs	r2, #1
 80069aa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2200      	movs	r2, #0
 80069b2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80069b6:	2300      	movs	r3, #0
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3710      	adds	r7, #16
 80069bc:	46bd      	mov	sp, r7
 80069be:	bdb0      	pop	{r4, r5, r7, pc}

080069c0 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b083      	sub	sp, #12
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80069ce:	b2db      	uxtb	r3, r3
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	370c      	adds	r7, #12
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr

080069dc <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80069dc:	b480      	push	{r7}
 80069de:	b089      	sub	sp, #36	; 0x24
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	60f8      	str	r0, [r7, #12]
 80069e4:	60b9      	str	r1, [r7, #8]
 80069e6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	685a      	ldr	r2, [r3, #4]
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	68db      	ldr	r3, [r3, #12]
 80069f2:	0c1b      	lsrs	r3, r3, #16
 80069f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069f8:	4413      	add	r3, r2
 80069fa:	041b      	lsls	r3, r3, #16
 80069fc:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	461a      	mov	r2, r3
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	01db      	lsls	r3, r3, #7
 8006a08:	4413      	add	r3, r2
 8006a0a:	3384      	adds	r3, #132	; 0x84
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	68fa      	ldr	r2, [r7, #12]
 8006a10:	6812      	ldr	r2, [r2, #0]
 8006a12:	4611      	mov	r1, r2
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	01d2      	lsls	r2, r2, #7
 8006a18:	440a      	add	r2, r1
 8006a1a:	3284      	adds	r2, #132	; 0x84
 8006a1c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006a20:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	681a      	ldr	r2, [r3, #0]
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	68db      	ldr	r3, [r3, #12]
 8006a2c:	0c1b      	lsrs	r3, r3, #16
 8006a2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a32:	4413      	add	r3, r2
 8006a34:	1c5a      	adds	r2, r3, #1
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4619      	mov	r1, r3
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	01db      	lsls	r3, r3, #7
 8006a40:	440b      	add	r3, r1
 8006a42:	3384      	adds	r3, #132	; 0x84
 8006a44:	4619      	mov	r1, r3
 8006a46:	69fb      	ldr	r3, [r7, #28]
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	68da      	ldr	r2, [r3, #12]
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	68db      	ldr	r3, [r3, #12]
 8006a56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a5a:	4413      	add	r3, r2
 8006a5c:	041b      	lsls	r3, r3, #16
 8006a5e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	461a      	mov	r2, r3
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	01db      	lsls	r3, r3, #7
 8006a6a:	4413      	add	r3, r2
 8006a6c:	3384      	adds	r3, #132	; 0x84
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	68fa      	ldr	r2, [r7, #12]
 8006a72:	6812      	ldr	r2, [r2, #0]
 8006a74:	4611      	mov	r1, r2
 8006a76:	687a      	ldr	r2, [r7, #4]
 8006a78:	01d2      	lsls	r2, r2, #7
 8006a7a:	440a      	add	r2, r1
 8006a7c:	3284      	adds	r2, #132	; 0x84
 8006a7e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006a82:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	689a      	ldr	r2, [r3, #8]
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	68db      	ldr	r3, [r3, #12]
 8006a8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a92:	4413      	add	r3, r2
 8006a94:	1c5a      	adds	r2, r3, #1
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4619      	mov	r1, r3
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	01db      	lsls	r3, r3, #7
 8006aa0:	440b      	add	r3, r1
 8006aa2:	3384      	adds	r3, #132	; 0x84
 8006aa4:	4619      	mov	r1, r3
 8006aa6:	69fb      	ldr	r3, [r7, #28]
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	01db      	lsls	r3, r3, #7
 8006ab6:	4413      	add	r3, r2
 8006ab8:	3384      	adds	r3, #132	; 0x84
 8006aba:	691b      	ldr	r3, [r3, #16]
 8006abc:	68fa      	ldr	r2, [r7, #12]
 8006abe:	6812      	ldr	r2, [r2, #0]
 8006ac0:	4611      	mov	r1, r2
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	01d2      	lsls	r2, r2, #7
 8006ac6:	440a      	add	r2, r1
 8006ac8:	3284      	adds	r2, #132	; 0x84
 8006aca:	f023 0307 	bic.w	r3, r3, #7
 8006ace:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	461a      	mov	r2, r3
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	01db      	lsls	r3, r3, #7
 8006ada:	4413      	add	r3, r2
 8006adc:	3384      	adds	r3, #132	; 0x84
 8006ade:	461a      	mov	r2, r3
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	691b      	ldr	r3, [r3, #16]
 8006ae4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006aec:	021b      	lsls	r3, r3, #8
 8006aee:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006af6:	041b      	lsls	r3, r3, #16
 8006af8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	699b      	ldr	r3, [r3, #24]
 8006afe:	061b      	lsls	r3, r3, #24
 8006b00:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	461a      	mov	r2, r3
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	01db      	lsls	r3, r3, #7
 8006b0c:	4413      	add	r3, r2
 8006b0e:	3384      	adds	r3, #132	; 0x84
 8006b10:	699b      	ldr	r3, [r3, #24]
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	461a      	mov	r2, r3
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	01db      	lsls	r3, r3, #7
 8006b1c:	4413      	add	r3, r2
 8006b1e:	3384      	adds	r3, #132	; 0x84
 8006b20:	461a      	mov	r2, r3
 8006b22:	2300      	movs	r3, #0
 8006b24:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	69fb      	ldr	r3, [r7, #28]
 8006b30:	431a      	orrs	r2, r3
 8006b32:	69bb      	ldr	r3, [r7, #24]
 8006b34:	431a      	orrs	r2, r3
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4619      	mov	r1, r3
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	01db      	lsls	r3, r3, #7
 8006b40:	440b      	add	r3, r1
 8006b42:	3384      	adds	r3, #132	; 0x84
 8006b44:	4619      	mov	r1, r3
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	461a      	mov	r2, r3
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	01db      	lsls	r3, r3, #7
 8006b56:	4413      	add	r3, r2
 8006b58:	3384      	adds	r3, #132	; 0x84
 8006b5a:	695b      	ldr	r3, [r3, #20]
 8006b5c:	68fa      	ldr	r2, [r7, #12]
 8006b5e:	6812      	ldr	r2, [r2, #0]
 8006b60:	4611      	mov	r1, r2
 8006b62:	687a      	ldr	r2, [r7, #4]
 8006b64:	01d2      	lsls	r2, r2, #7
 8006b66:	440a      	add	r2, r1
 8006b68:	3284      	adds	r2, #132	; 0x84
 8006b6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006b6e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	461a      	mov	r2, r3
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	01db      	lsls	r3, r3, #7
 8006b7a:	4413      	add	r3, r2
 8006b7c:	3384      	adds	r3, #132	; 0x84
 8006b7e:	461a      	mov	r2, r3
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	695b      	ldr	r3, [r3, #20]
 8006b84:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	01db      	lsls	r3, r3, #7
 8006b90:	4413      	add	r3, r2
 8006b92:	3384      	adds	r3, #132	; 0x84
 8006b94:	69da      	ldr	r2, [r3, #28]
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	01db      	lsls	r3, r3, #7
 8006ba0:	440b      	add	r3, r1
 8006ba2:	3384      	adds	r3, #132	; 0x84
 8006ba4:	4619      	mov	r1, r3
 8006ba6:	4b58      	ldr	r3, [pc, #352]	; (8006d08 <LTDC_SetConfig+0x32c>)
 8006ba8:	4013      	ands	r3, r2
 8006baa:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	69da      	ldr	r2, [r3, #28]
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	6a1b      	ldr	r3, [r3, #32]
 8006bb4:	68f9      	ldr	r1, [r7, #12]
 8006bb6:	6809      	ldr	r1, [r1, #0]
 8006bb8:	4608      	mov	r0, r1
 8006bba:	6879      	ldr	r1, [r7, #4]
 8006bbc:	01c9      	lsls	r1, r1, #7
 8006bbe:	4401      	add	r1, r0
 8006bc0:	3184      	adds	r1, #132	; 0x84
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	461a      	mov	r2, r3
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	01db      	lsls	r3, r3, #7
 8006bd0:	4413      	add	r3, r2
 8006bd2:	3384      	adds	r3, #132	; 0x84
 8006bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	461a      	mov	r2, r3
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	01db      	lsls	r3, r3, #7
 8006be0:	4413      	add	r3, r2
 8006be2:	3384      	adds	r3, #132	; 0x84
 8006be4:	461a      	mov	r2, r3
 8006be6:	2300      	movs	r3, #0
 8006be8:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	461a      	mov	r2, r3
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	01db      	lsls	r3, r3, #7
 8006bf4:	4413      	add	r3, r2
 8006bf6:	3384      	adds	r3, #132	; 0x84
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bfe:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	691b      	ldr	r3, [r3, #16]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d102      	bne.n	8006c0e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8006c08:	2304      	movs	r3, #4
 8006c0a:	61fb      	str	r3, [r7, #28]
 8006c0c:	e01b      	b.n	8006c46 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	691b      	ldr	r3, [r3, #16]
 8006c12:	2b01      	cmp	r3, #1
 8006c14:	d102      	bne.n	8006c1c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8006c16:	2303      	movs	r3, #3
 8006c18:	61fb      	str	r3, [r7, #28]
 8006c1a:	e014      	b.n	8006c46 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	691b      	ldr	r3, [r3, #16]
 8006c20:	2b04      	cmp	r3, #4
 8006c22:	d00b      	beq.n	8006c3c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006c28:	2b02      	cmp	r3, #2
 8006c2a:	d007      	beq.n	8006c3c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006c30:	2b03      	cmp	r3, #3
 8006c32:	d003      	beq.n	8006c3c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006c38:	2b07      	cmp	r3, #7
 8006c3a:	d102      	bne.n	8006c42 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8006c3c:	2302      	movs	r3, #2
 8006c3e:	61fb      	str	r3, [r7, #28]
 8006c40:	e001      	b.n	8006c46 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8006c42:	2301      	movs	r3, #1
 8006c44:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	461a      	mov	r2, r3
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	01db      	lsls	r3, r3, #7
 8006c50:	4413      	add	r3, r2
 8006c52:	3384      	adds	r3, #132	; 0x84
 8006c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c56:	68fa      	ldr	r2, [r7, #12]
 8006c58:	6812      	ldr	r2, [r2, #0]
 8006c5a:	4611      	mov	r1, r2
 8006c5c:	687a      	ldr	r2, [r7, #4]
 8006c5e:	01d2      	lsls	r2, r2, #7
 8006c60:	440a      	add	r2, r1
 8006c62:	3284      	adds	r2, #132	; 0x84
 8006c64:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006c68:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c6e:	69fa      	ldr	r2, [r7, #28]
 8006c70:	fb02 f303 	mul.w	r3, r2, r3
 8006c74:	041a      	lsls	r2, r3, #16
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	6859      	ldr	r1, [r3, #4]
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	1acb      	subs	r3, r1, r3
 8006c80:	69f9      	ldr	r1, [r7, #28]
 8006c82:	fb01 f303 	mul.w	r3, r1, r3
 8006c86:	3303      	adds	r3, #3
 8006c88:	68f9      	ldr	r1, [r7, #12]
 8006c8a:	6809      	ldr	r1, [r1, #0]
 8006c8c:	4608      	mov	r0, r1
 8006c8e:	6879      	ldr	r1, [r7, #4]
 8006c90:	01c9      	lsls	r1, r1, #7
 8006c92:	4401      	add	r1, r0
 8006c94:	3184      	adds	r1, #132	; 0x84
 8006c96:	4313      	orrs	r3, r2
 8006c98:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	461a      	mov	r2, r3
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	01db      	lsls	r3, r3, #7
 8006ca4:	4413      	add	r3, r2
 8006ca6:	3384      	adds	r3, #132	; 0x84
 8006ca8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4619      	mov	r1, r3
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	01db      	lsls	r3, r3, #7
 8006cb4:	440b      	add	r3, r1
 8006cb6:	3384      	adds	r3, #132	; 0x84
 8006cb8:	4619      	mov	r1, r3
 8006cba:	4b14      	ldr	r3, [pc, #80]	; (8006d0c <LTDC_SetConfig+0x330>)
 8006cbc:	4013      	ands	r3, r2
 8006cbe:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	461a      	mov	r2, r3
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	01db      	lsls	r3, r3, #7
 8006cca:	4413      	add	r3, r2
 8006ccc:	3384      	adds	r3, #132	; 0x84
 8006cce:	461a      	mov	r2, r3
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	461a      	mov	r2, r3
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	01db      	lsls	r3, r3, #7
 8006ce0:	4413      	add	r3, r2
 8006ce2:	3384      	adds	r3, #132	; 0x84
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	68fa      	ldr	r2, [r7, #12]
 8006ce8:	6812      	ldr	r2, [r2, #0]
 8006cea:	4611      	mov	r1, r2
 8006cec:	687a      	ldr	r2, [r7, #4]
 8006cee:	01d2      	lsls	r2, r2, #7
 8006cf0:	440a      	add	r2, r1
 8006cf2:	3284      	adds	r2, #132	; 0x84
 8006cf4:	f043 0301 	orr.w	r3, r3, #1
 8006cf8:	6013      	str	r3, [r2, #0]
}
 8006cfa:	bf00      	nop
 8006cfc:	3724      	adds	r7, #36	; 0x24
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr
 8006d06:	bf00      	nop
 8006d08:	fffff8f8 	.word	0xfffff8f8
 8006d0c:	fffff800 	.word	0xfffff800

08006d10 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006d10:	b480      	push	{r7}
 8006d12:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006d14:	4b05      	ldr	r3, [pc, #20]	; (8006d2c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a04      	ldr	r2, [pc, #16]	; (8006d2c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006d1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d1e:	6013      	str	r3, [r2, #0]
}
 8006d20:	bf00      	nop
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr
 8006d2a:	bf00      	nop
 8006d2c:	40007000 	.word	0x40007000

08006d30 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b082      	sub	sp, #8
 8006d34:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006d36:	2300      	movs	r3, #0
 8006d38:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006d3a:	4b23      	ldr	r3, [pc, #140]	; (8006dc8 <HAL_PWREx_EnableOverDrive+0x98>)
 8006d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d3e:	4a22      	ldr	r2, [pc, #136]	; (8006dc8 <HAL_PWREx_EnableOverDrive+0x98>)
 8006d40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d44:	6413      	str	r3, [r2, #64]	; 0x40
 8006d46:	4b20      	ldr	r3, [pc, #128]	; (8006dc8 <HAL_PWREx_EnableOverDrive+0x98>)
 8006d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d4e:	603b      	str	r3, [r7, #0]
 8006d50:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006d52:	4b1e      	ldr	r3, [pc, #120]	; (8006dcc <HAL_PWREx_EnableOverDrive+0x9c>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a1d      	ldr	r2, [pc, #116]	; (8006dcc <HAL_PWREx_EnableOverDrive+0x9c>)
 8006d58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d5c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006d5e:	f7fd f90f 	bl	8003f80 <HAL_GetTick>
 8006d62:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006d64:	e009      	b.n	8006d7a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006d66:	f7fd f90b 	bl	8003f80 <HAL_GetTick>
 8006d6a:	4602      	mov	r2, r0
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	1ad3      	subs	r3, r2, r3
 8006d70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d74:	d901      	bls.n	8006d7a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006d76:	2303      	movs	r3, #3
 8006d78:	e022      	b.n	8006dc0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006d7a:	4b14      	ldr	r3, [pc, #80]	; (8006dcc <HAL_PWREx_EnableOverDrive+0x9c>)
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d86:	d1ee      	bne.n	8006d66 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006d88:	4b10      	ldr	r3, [pc, #64]	; (8006dcc <HAL_PWREx_EnableOverDrive+0x9c>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a0f      	ldr	r2, [pc, #60]	; (8006dcc <HAL_PWREx_EnableOverDrive+0x9c>)
 8006d8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d92:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006d94:	f7fd f8f4 	bl	8003f80 <HAL_GetTick>
 8006d98:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006d9a:	e009      	b.n	8006db0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006d9c:	f7fd f8f0 	bl	8003f80 <HAL_GetTick>
 8006da0:	4602      	mov	r2, r0
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	1ad3      	subs	r3, r2, r3
 8006da6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006daa:	d901      	bls.n	8006db0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006dac:	2303      	movs	r3, #3
 8006dae:	e007      	b.n	8006dc0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006db0:	4b06      	ldr	r3, [pc, #24]	; (8006dcc <HAL_PWREx_EnableOverDrive+0x9c>)
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006db8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006dbc:	d1ee      	bne.n	8006d9c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006dbe:	2300      	movs	r3, #0
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3708      	adds	r7, #8
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}
 8006dc8:	40023800 	.word	0x40023800
 8006dcc:	40007000 	.word	0x40007000

08006dd0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b086      	sub	sp, #24
 8006dd4:	af02      	add	r7, sp, #8
 8006dd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006dd8:	f7fd f8d2 	bl	8003f80 <HAL_GetTick>
 8006ddc:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d101      	bne.n	8006de8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8006de4:	2301      	movs	r3, #1
 8006de6:	e067      	b.n	8006eb8 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006dee:	b2db      	uxtb	r3, r3
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d10b      	bne.n	8006e0c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2200      	movs	r2, #0
 8006df8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f7fb fb63 	bl	80024c8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8006e02:	f241 3188 	movw	r1, #5000	; 0x1388
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f000 f85e 	bl	8006ec8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	689b      	ldr	r3, [r3, #8]
 8006e1a:	3b01      	subs	r3, #1
 8006e1c:	021a      	lsls	r2, r3, #8
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	430a      	orrs	r2, r1
 8006e24:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e2a:	9300      	str	r3, [sp, #0]
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	2120      	movs	r1, #32
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f000 f856 	bl	8006ee4 <QSPI_WaitFlagStateUntilTimeout>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006e3c:	7afb      	ldrb	r3, [r7, #11]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d135      	bne.n	8006eae <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	681a      	ldr	r2, [r3, #0]
 8006e48:	4b1d      	ldr	r3, [pc, #116]	; (8006ec0 <HAL_QSPI_Init+0xf0>)
 8006e4a:	4013      	ands	r3, r2
 8006e4c:	687a      	ldr	r2, [r7, #4]
 8006e4e:	6852      	ldr	r2, [r2, #4]
 8006e50:	0611      	lsls	r1, r2, #24
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	68d2      	ldr	r2, [r2, #12]
 8006e56:	4311      	orrs	r1, r2
 8006e58:	687a      	ldr	r2, [r7, #4]
 8006e5a:	69d2      	ldr	r2, [r2, #28]
 8006e5c:	4311      	orrs	r1, r2
 8006e5e:	687a      	ldr	r2, [r7, #4]
 8006e60:	6a12      	ldr	r2, [r2, #32]
 8006e62:	4311      	orrs	r1, r2
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	6812      	ldr	r2, [r2, #0]
 8006e68:	430b      	orrs	r3, r1
 8006e6a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	685a      	ldr	r2, [r3, #4]
 8006e72:	4b14      	ldr	r3, [pc, #80]	; (8006ec4 <HAL_QSPI_Init+0xf4>)
 8006e74:	4013      	ands	r3, r2
 8006e76:	687a      	ldr	r2, [r7, #4]
 8006e78:	6912      	ldr	r2, [r2, #16]
 8006e7a:	0411      	lsls	r1, r2, #16
 8006e7c:	687a      	ldr	r2, [r7, #4]
 8006e7e:	6952      	ldr	r2, [r2, #20]
 8006e80:	4311      	orrs	r1, r2
 8006e82:	687a      	ldr	r2, [r7, #4]
 8006e84:	6992      	ldr	r2, [r2, #24]
 8006e86:	4311      	orrs	r1, r2
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	6812      	ldr	r2, [r2, #0]
 8006e8c:	430b      	orrs	r3, r1
 8006e8e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f042 0201 	orr.w	r2, r2, #1
 8006e9e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2201      	movs	r2, #1
 8006eaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8006eb6:	7afb      	ldrb	r3, [r7, #11]
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3710      	adds	r7, #16
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}
 8006ec0:	00ffff2f 	.word	0x00ffff2f
 8006ec4:	ffe0f8fe 	.word	0xffe0f8fe

08006ec8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b083      	sub	sp, #12
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	683a      	ldr	r2, [r7, #0]
 8006ed6:	649a      	str	r2, [r3, #72]	; 0x48
}
 8006ed8:	bf00      	nop
 8006eda:	370c      	adds	r7, #12
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr

08006ee4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b084      	sub	sp, #16
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	60f8      	str	r0, [r7, #12]
 8006eec:	60b9      	str	r1, [r7, #8]
 8006eee:	603b      	str	r3, [r7, #0]
 8006ef0:	4613      	mov	r3, r2
 8006ef2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006ef4:	e01a      	b.n	8006f2c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ef6:	69bb      	ldr	r3, [r7, #24]
 8006ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006efc:	d016      	beq.n	8006f2c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006efe:	f7fd f83f 	bl	8003f80 <HAL_GetTick>
 8006f02:	4602      	mov	r2, r0
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	1ad3      	subs	r3, r2, r3
 8006f08:	69ba      	ldr	r2, [r7, #24]
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	d302      	bcc.n	8006f14 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8006f0e:	69bb      	ldr	r3, [r7, #24]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d10b      	bne.n	8006f2c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2204      	movs	r2, #4
 8006f18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f20:	f043 0201 	orr.w	r2, r3, #1
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	e00e      	b.n	8006f4a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	689a      	ldr	r2, [r3, #8]
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	4013      	ands	r3, r2
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	bf14      	ite	ne
 8006f3a:	2301      	movne	r3, #1
 8006f3c:	2300      	moveq	r3, #0
 8006f3e:	b2db      	uxtb	r3, r3
 8006f40:	461a      	mov	r2, r3
 8006f42:	79fb      	ldrb	r3, [r7, #7]
 8006f44:	429a      	cmp	r2, r3
 8006f46:	d1d6      	bne.n	8006ef6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006f48:	2300      	movs	r3, #0
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3710      	adds	r7, #16
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}
	...

08006f54 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b086      	sub	sp, #24
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d101      	bne.n	8006f6a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006f66:	2301      	movs	r3, #1
 8006f68:	e291      	b.n	800748e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f003 0301 	and.w	r3, r3, #1
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	f000 8087 	beq.w	8007086 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006f78:	4b96      	ldr	r3, [pc, #600]	; (80071d4 <HAL_RCC_OscConfig+0x280>)
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	f003 030c 	and.w	r3, r3, #12
 8006f80:	2b04      	cmp	r3, #4
 8006f82:	d00c      	beq.n	8006f9e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006f84:	4b93      	ldr	r3, [pc, #588]	; (80071d4 <HAL_RCC_OscConfig+0x280>)
 8006f86:	689b      	ldr	r3, [r3, #8]
 8006f88:	f003 030c 	and.w	r3, r3, #12
 8006f8c:	2b08      	cmp	r3, #8
 8006f8e:	d112      	bne.n	8006fb6 <HAL_RCC_OscConfig+0x62>
 8006f90:	4b90      	ldr	r3, [pc, #576]	; (80071d4 <HAL_RCC_OscConfig+0x280>)
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f9c:	d10b      	bne.n	8006fb6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f9e:	4b8d      	ldr	r3, [pc, #564]	; (80071d4 <HAL_RCC_OscConfig+0x280>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d06c      	beq.n	8007084 <HAL_RCC_OscConfig+0x130>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d168      	bne.n	8007084 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	e26b      	b.n	800748e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fbe:	d106      	bne.n	8006fce <HAL_RCC_OscConfig+0x7a>
 8006fc0:	4b84      	ldr	r3, [pc, #528]	; (80071d4 <HAL_RCC_OscConfig+0x280>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a83      	ldr	r2, [pc, #524]	; (80071d4 <HAL_RCC_OscConfig+0x280>)
 8006fc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fca:	6013      	str	r3, [r2, #0]
 8006fcc:	e02e      	b.n	800702c <HAL_RCC_OscConfig+0xd8>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d10c      	bne.n	8006ff0 <HAL_RCC_OscConfig+0x9c>
 8006fd6:	4b7f      	ldr	r3, [pc, #508]	; (80071d4 <HAL_RCC_OscConfig+0x280>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a7e      	ldr	r2, [pc, #504]	; (80071d4 <HAL_RCC_OscConfig+0x280>)
 8006fdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fe0:	6013      	str	r3, [r2, #0]
 8006fe2:	4b7c      	ldr	r3, [pc, #496]	; (80071d4 <HAL_RCC_OscConfig+0x280>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a7b      	ldr	r2, [pc, #492]	; (80071d4 <HAL_RCC_OscConfig+0x280>)
 8006fe8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006fec:	6013      	str	r3, [r2, #0]
 8006fee:	e01d      	b.n	800702c <HAL_RCC_OscConfig+0xd8>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ff8:	d10c      	bne.n	8007014 <HAL_RCC_OscConfig+0xc0>
 8006ffa:	4b76      	ldr	r3, [pc, #472]	; (80071d4 <HAL_RCC_OscConfig+0x280>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a75      	ldr	r2, [pc, #468]	; (80071d4 <HAL_RCC_OscConfig+0x280>)
 8007000:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007004:	6013      	str	r3, [r2, #0]
 8007006:	4b73      	ldr	r3, [pc, #460]	; (80071d4 <HAL_RCC_OscConfig+0x280>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a72      	ldr	r2, [pc, #456]	; (80071d4 <HAL_RCC_OscConfig+0x280>)
 800700c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007010:	6013      	str	r3, [r2, #0]
 8007012:	e00b      	b.n	800702c <HAL_RCC_OscConfig+0xd8>
 8007014:	4b6f      	ldr	r3, [pc, #444]	; (80071d4 <HAL_RCC_OscConfig+0x280>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a6e      	ldr	r2, [pc, #440]	; (80071d4 <HAL_RCC_OscConfig+0x280>)
 800701a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800701e:	6013      	str	r3, [r2, #0]
 8007020:	4b6c      	ldr	r3, [pc, #432]	; (80071d4 <HAL_RCC_OscConfig+0x280>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a6b      	ldr	r2, [pc, #428]	; (80071d4 <HAL_RCC_OscConfig+0x280>)
 8007026:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800702a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d013      	beq.n	800705c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007034:	f7fc ffa4 	bl	8003f80 <HAL_GetTick>
 8007038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800703a:	e008      	b.n	800704e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800703c:	f7fc ffa0 	bl	8003f80 <HAL_GetTick>
 8007040:	4602      	mov	r2, r0
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	1ad3      	subs	r3, r2, r3
 8007046:	2b64      	cmp	r3, #100	; 0x64
 8007048:	d901      	bls.n	800704e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800704a:	2303      	movs	r3, #3
 800704c:	e21f      	b.n	800748e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800704e:	4b61      	ldr	r3, [pc, #388]	; (80071d4 <HAL_RCC_OscConfig+0x280>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007056:	2b00      	cmp	r3, #0
 8007058:	d0f0      	beq.n	800703c <HAL_RCC_OscConfig+0xe8>
 800705a:	e014      	b.n	8007086 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800705c:	f7fc ff90 	bl	8003f80 <HAL_GetTick>
 8007060:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007062:	e008      	b.n	8007076 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007064:	f7fc ff8c 	bl	8003f80 <HAL_GetTick>
 8007068:	4602      	mov	r2, r0
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	1ad3      	subs	r3, r2, r3
 800706e:	2b64      	cmp	r3, #100	; 0x64
 8007070:	d901      	bls.n	8007076 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007072:	2303      	movs	r3, #3
 8007074:	e20b      	b.n	800748e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007076:	4b57      	ldr	r3, [pc, #348]	; (80071d4 <HAL_RCC_OscConfig+0x280>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800707e:	2b00      	cmp	r3, #0
 8007080:	d1f0      	bne.n	8007064 <HAL_RCC_OscConfig+0x110>
 8007082:	e000      	b.n	8007086 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007084:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f003 0302 	and.w	r3, r3, #2
 800708e:	2b00      	cmp	r3, #0
 8007090:	d069      	beq.n	8007166 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007092:	4b50      	ldr	r3, [pc, #320]	; (80071d4 <HAL_RCC_OscConfig+0x280>)
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	f003 030c 	and.w	r3, r3, #12
 800709a:	2b00      	cmp	r3, #0
 800709c:	d00b      	beq.n	80070b6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800709e:	4b4d      	ldr	r3, [pc, #308]	; (80071d4 <HAL_RCC_OscConfig+0x280>)
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	f003 030c 	and.w	r3, r3, #12
 80070a6:	2b08      	cmp	r3, #8
 80070a8:	d11c      	bne.n	80070e4 <HAL_RCC_OscConfig+0x190>
 80070aa:	4b4a      	ldr	r3, [pc, #296]	; (80071d4 <HAL_RCC_OscConfig+0x280>)
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d116      	bne.n	80070e4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80070b6:	4b47      	ldr	r3, [pc, #284]	; (80071d4 <HAL_RCC_OscConfig+0x280>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f003 0302 	and.w	r3, r3, #2
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d005      	beq.n	80070ce <HAL_RCC_OscConfig+0x17a>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	68db      	ldr	r3, [r3, #12]
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	d001      	beq.n	80070ce <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80070ca:	2301      	movs	r3, #1
 80070cc:	e1df      	b.n	800748e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070ce:	4b41      	ldr	r3, [pc, #260]	; (80071d4 <HAL_RCC_OscConfig+0x280>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	691b      	ldr	r3, [r3, #16]
 80070da:	00db      	lsls	r3, r3, #3
 80070dc:	493d      	ldr	r1, [pc, #244]	; (80071d4 <HAL_RCC_OscConfig+0x280>)
 80070de:	4313      	orrs	r3, r2
 80070e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80070e2:	e040      	b.n	8007166 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	68db      	ldr	r3, [r3, #12]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d023      	beq.n	8007134 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80070ec:	4b39      	ldr	r3, [pc, #228]	; (80071d4 <HAL_RCC_OscConfig+0x280>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a38      	ldr	r2, [pc, #224]	; (80071d4 <HAL_RCC_OscConfig+0x280>)
 80070f2:	f043 0301 	orr.w	r3, r3, #1
 80070f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070f8:	f7fc ff42 	bl	8003f80 <HAL_GetTick>
 80070fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070fe:	e008      	b.n	8007112 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007100:	f7fc ff3e 	bl	8003f80 <HAL_GetTick>
 8007104:	4602      	mov	r2, r0
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	1ad3      	subs	r3, r2, r3
 800710a:	2b02      	cmp	r3, #2
 800710c:	d901      	bls.n	8007112 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800710e:	2303      	movs	r3, #3
 8007110:	e1bd      	b.n	800748e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007112:	4b30      	ldr	r3, [pc, #192]	; (80071d4 <HAL_RCC_OscConfig+0x280>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f003 0302 	and.w	r3, r3, #2
 800711a:	2b00      	cmp	r3, #0
 800711c:	d0f0      	beq.n	8007100 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800711e:	4b2d      	ldr	r3, [pc, #180]	; (80071d4 <HAL_RCC_OscConfig+0x280>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	691b      	ldr	r3, [r3, #16]
 800712a:	00db      	lsls	r3, r3, #3
 800712c:	4929      	ldr	r1, [pc, #164]	; (80071d4 <HAL_RCC_OscConfig+0x280>)
 800712e:	4313      	orrs	r3, r2
 8007130:	600b      	str	r3, [r1, #0]
 8007132:	e018      	b.n	8007166 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007134:	4b27      	ldr	r3, [pc, #156]	; (80071d4 <HAL_RCC_OscConfig+0x280>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a26      	ldr	r2, [pc, #152]	; (80071d4 <HAL_RCC_OscConfig+0x280>)
 800713a:	f023 0301 	bic.w	r3, r3, #1
 800713e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007140:	f7fc ff1e 	bl	8003f80 <HAL_GetTick>
 8007144:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007146:	e008      	b.n	800715a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007148:	f7fc ff1a 	bl	8003f80 <HAL_GetTick>
 800714c:	4602      	mov	r2, r0
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	1ad3      	subs	r3, r2, r3
 8007152:	2b02      	cmp	r3, #2
 8007154:	d901      	bls.n	800715a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007156:	2303      	movs	r3, #3
 8007158:	e199      	b.n	800748e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800715a:	4b1e      	ldr	r3, [pc, #120]	; (80071d4 <HAL_RCC_OscConfig+0x280>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f003 0302 	and.w	r3, r3, #2
 8007162:	2b00      	cmp	r3, #0
 8007164:	d1f0      	bne.n	8007148 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f003 0308 	and.w	r3, r3, #8
 800716e:	2b00      	cmp	r3, #0
 8007170:	d038      	beq.n	80071e4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	695b      	ldr	r3, [r3, #20]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d019      	beq.n	80071ae <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800717a:	4b16      	ldr	r3, [pc, #88]	; (80071d4 <HAL_RCC_OscConfig+0x280>)
 800717c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800717e:	4a15      	ldr	r2, [pc, #84]	; (80071d4 <HAL_RCC_OscConfig+0x280>)
 8007180:	f043 0301 	orr.w	r3, r3, #1
 8007184:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007186:	f7fc fefb 	bl	8003f80 <HAL_GetTick>
 800718a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800718c:	e008      	b.n	80071a0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800718e:	f7fc fef7 	bl	8003f80 <HAL_GetTick>
 8007192:	4602      	mov	r2, r0
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	1ad3      	subs	r3, r2, r3
 8007198:	2b02      	cmp	r3, #2
 800719a:	d901      	bls.n	80071a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800719c:	2303      	movs	r3, #3
 800719e:	e176      	b.n	800748e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80071a0:	4b0c      	ldr	r3, [pc, #48]	; (80071d4 <HAL_RCC_OscConfig+0x280>)
 80071a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071a4:	f003 0302 	and.w	r3, r3, #2
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d0f0      	beq.n	800718e <HAL_RCC_OscConfig+0x23a>
 80071ac:	e01a      	b.n	80071e4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80071ae:	4b09      	ldr	r3, [pc, #36]	; (80071d4 <HAL_RCC_OscConfig+0x280>)
 80071b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071b2:	4a08      	ldr	r2, [pc, #32]	; (80071d4 <HAL_RCC_OscConfig+0x280>)
 80071b4:	f023 0301 	bic.w	r3, r3, #1
 80071b8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071ba:	f7fc fee1 	bl	8003f80 <HAL_GetTick>
 80071be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80071c0:	e00a      	b.n	80071d8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80071c2:	f7fc fedd 	bl	8003f80 <HAL_GetTick>
 80071c6:	4602      	mov	r2, r0
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	1ad3      	subs	r3, r2, r3
 80071cc:	2b02      	cmp	r3, #2
 80071ce:	d903      	bls.n	80071d8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80071d0:	2303      	movs	r3, #3
 80071d2:	e15c      	b.n	800748e <HAL_RCC_OscConfig+0x53a>
 80071d4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80071d8:	4b91      	ldr	r3, [pc, #580]	; (8007420 <HAL_RCC_OscConfig+0x4cc>)
 80071da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071dc:	f003 0302 	and.w	r3, r3, #2
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d1ee      	bne.n	80071c2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f003 0304 	and.w	r3, r3, #4
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	f000 80a4 	beq.w	800733a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80071f2:	4b8b      	ldr	r3, [pc, #556]	; (8007420 <HAL_RCC_OscConfig+0x4cc>)
 80071f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d10d      	bne.n	800721a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80071fe:	4b88      	ldr	r3, [pc, #544]	; (8007420 <HAL_RCC_OscConfig+0x4cc>)
 8007200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007202:	4a87      	ldr	r2, [pc, #540]	; (8007420 <HAL_RCC_OscConfig+0x4cc>)
 8007204:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007208:	6413      	str	r3, [r2, #64]	; 0x40
 800720a:	4b85      	ldr	r3, [pc, #532]	; (8007420 <HAL_RCC_OscConfig+0x4cc>)
 800720c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800720e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007212:	60bb      	str	r3, [r7, #8]
 8007214:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007216:	2301      	movs	r3, #1
 8007218:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800721a:	4b82      	ldr	r3, [pc, #520]	; (8007424 <HAL_RCC_OscConfig+0x4d0>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007222:	2b00      	cmp	r3, #0
 8007224:	d118      	bne.n	8007258 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007226:	4b7f      	ldr	r3, [pc, #508]	; (8007424 <HAL_RCC_OscConfig+0x4d0>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a7e      	ldr	r2, [pc, #504]	; (8007424 <HAL_RCC_OscConfig+0x4d0>)
 800722c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007230:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007232:	f7fc fea5 	bl	8003f80 <HAL_GetTick>
 8007236:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007238:	e008      	b.n	800724c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800723a:	f7fc fea1 	bl	8003f80 <HAL_GetTick>
 800723e:	4602      	mov	r2, r0
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	1ad3      	subs	r3, r2, r3
 8007244:	2b64      	cmp	r3, #100	; 0x64
 8007246:	d901      	bls.n	800724c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007248:	2303      	movs	r3, #3
 800724a:	e120      	b.n	800748e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800724c:	4b75      	ldr	r3, [pc, #468]	; (8007424 <HAL_RCC_OscConfig+0x4d0>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007254:	2b00      	cmp	r3, #0
 8007256:	d0f0      	beq.n	800723a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	2b01      	cmp	r3, #1
 800725e:	d106      	bne.n	800726e <HAL_RCC_OscConfig+0x31a>
 8007260:	4b6f      	ldr	r3, [pc, #444]	; (8007420 <HAL_RCC_OscConfig+0x4cc>)
 8007262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007264:	4a6e      	ldr	r2, [pc, #440]	; (8007420 <HAL_RCC_OscConfig+0x4cc>)
 8007266:	f043 0301 	orr.w	r3, r3, #1
 800726a:	6713      	str	r3, [r2, #112]	; 0x70
 800726c:	e02d      	b.n	80072ca <HAL_RCC_OscConfig+0x376>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	689b      	ldr	r3, [r3, #8]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d10c      	bne.n	8007290 <HAL_RCC_OscConfig+0x33c>
 8007276:	4b6a      	ldr	r3, [pc, #424]	; (8007420 <HAL_RCC_OscConfig+0x4cc>)
 8007278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800727a:	4a69      	ldr	r2, [pc, #420]	; (8007420 <HAL_RCC_OscConfig+0x4cc>)
 800727c:	f023 0301 	bic.w	r3, r3, #1
 8007280:	6713      	str	r3, [r2, #112]	; 0x70
 8007282:	4b67      	ldr	r3, [pc, #412]	; (8007420 <HAL_RCC_OscConfig+0x4cc>)
 8007284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007286:	4a66      	ldr	r2, [pc, #408]	; (8007420 <HAL_RCC_OscConfig+0x4cc>)
 8007288:	f023 0304 	bic.w	r3, r3, #4
 800728c:	6713      	str	r3, [r2, #112]	; 0x70
 800728e:	e01c      	b.n	80072ca <HAL_RCC_OscConfig+0x376>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	689b      	ldr	r3, [r3, #8]
 8007294:	2b05      	cmp	r3, #5
 8007296:	d10c      	bne.n	80072b2 <HAL_RCC_OscConfig+0x35e>
 8007298:	4b61      	ldr	r3, [pc, #388]	; (8007420 <HAL_RCC_OscConfig+0x4cc>)
 800729a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800729c:	4a60      	ldr	r2, [pc, #384]	; (8007420 <HAL_RCC_OscConfig+0x4cc>)
 800729e:	f043 0304 	orr.w	r3, r3, #4
 80072a2:	6713      	str	r3, [r2, #112]	; 0x70
 80072a4:	4b5e      	ldr	r3, [pc, #376]	; (8007420 <HAL_RCC_OscConfig+0x4cc>)
 80072a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072a8:	4a5d      	ldr	r2, [pc, #372]	; (8007420 <HAL_RCC_OscConfig+0x4cc>)
 80072aa:	f043 0301 	orr.w	r3, r3, #1
 80072ae:	6713      	str	r3, [r2, #112]	; 0x70
 80072b0:	e00b      	b.n	80072ca <HAL_RCC_OscConfig+0x376>
 80072b2:	4b5b      	ldr	r3, [pc, #364]	; (8007420 <HAL_RCC_OscConfig+0x4cc>)
 80072b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072b6:	4a5a      	ldr	r2, [pc, #360]	; (8007420 <HAL_RCC_OscConfig+0x4cc>)
 80072b8:	f023 0301 	bic.w	r3, r3, #1
 80072bc:	6713      	str	r3, [r2, #112]	; 0x70
 80072be:	4b58      	ldr	r3, [pc, #352]	; (8007420 <HAL_RCC_OscConfig+0x4cc>)
 80072c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072c2:	4a57      	ldr	r2, [pc, #348]	; (8007420 <HAL_RCC_OscConfig+0x4cc>)
 80072c4:	f023 0304 	bic.w	r3, r3, #4
 80072c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	689b      	ldr	r3, [r3, #8]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d015      	beq.n	80072fe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072d2:	f7fc fe55 	bl	8003f80 <HAL_GetTick>
 80072d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072d8:	e00a      	b.n	80072f0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072da:	f7fc fe51 	bl	8003f80 <HAL_GetTick>
 80072de:	4602      	mov	r2, r0
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	1ad3      	subs	r3, r2, r3
 80072e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d901      	bls.n	80072f0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80072ec:	2303      	movs	r3, #3
 80072ee:	e0ce      	b.n	800748e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072f0:	4b4b      	ldr	r3, [pc, #300]	; (8007420 <HAL_RCC_OscConfig+0x4cc>)
 80072f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072f4:	f003 0302 	and.w	r3, r3, #2
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d0ee      	beq.n	80072da <HAL_RCC_OscConfig+0x386>
 80072fc:	e014      	b.n	8007328 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072fe:	f7fc fe3f 	bl	8003f80 <HAL_GetTick>
 8007302:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007304:	e00a      	b.n	800731c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007306:	f7fc fe3b 	bl	8003f80 <HAL_GetTick>
 800730a:	4602      	mov	r2, r0
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	1ad3      	subs	r3, r2, r3
 8007310:	f241 3288 	movw	r2, #5000	; 0x1388
 8007314:	4293      	cmp	r3, r2
 8007316:	d901      	bls.n	800731c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007318:	2303      	movs	r3, #3
 800731a:	e0b8      	b.n	800748e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800731c:	4b40      	ldr	r3, [pc, #256]	; (8007420 <HAL_RCC_OscConfig+0x4cc>)
 800731e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007320:	f003 0302 	and.w	r3, r3, #2
 8007324:	2b00      	cmp	r3, #0
 8007326:	d1ee      	bne.n	8007306 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007328:	7dfb      	ldrb	r3, [r7, #23]
 800732a:	2b01      	cmp	r3, #1
 800732c:	d105      	bne.n	800733a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800732e:	4b3c      	ldr	r3, [pc, #240]	; (8007420 <HAL_RCC_OscConfig+0x4cc>)
 8007330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007332:	4a3b      	ldr	r2, [pc, #236]	; (8007420 <HAL_RCC_OscConfig+0x4cc>)
 8007334:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007338:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	699b      	ldr	r3, [r3, #24]
 800733e:	2b00      	cmp	r3, #0
 8007340:	f000 80a4 	beq.w	800748c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007344:	4b36      	ldr	r3, [pc, #216]	; (8007420 <HAL_RCC_OscConfig+0x4cc>)
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	f003 030c 	and.w	r3, r3, #12
 800734c:	2b08      	cmp	r3, #8
 800734e:	d06b      	beq.n	8007428 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	699b      	ldr	r3, [r3, #24]
 8007354:	2b02      	cmp	r3, #2
 8007356:	d149      	bne.n	80073ec <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007358:	4b31      	ldr	r3, [pc, #196]	; (8007420 <HAL_RCC_OscConfig+0x4cc>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a30      	ldr	r2, [pc, #192]	; (8007420 <HAL_RCC_OscConfig+0x4cc>)
 800735e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007362:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007364:	f7fc fe0c 	bl	8003f80 <HAL_GetTick>
 8007368:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800736a:	e008      	b.n	800737e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800736c:	f7fc fe08 	bl	8003f80 <HAL_GetTick>
 8007370:	4602      	mov	r2, r0
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	1ad3      	subs	r3, r2, r3
 8007376:	2b02      	cmp	r3, #2
 8007378:	d901      	bls.n	800737e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800737a:	2303      	movs	r3, #3
 800737c:	e087      	b.n	800748e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800737e:	4b28      	ldr	r3, [pc, #160]	; (8007420 <HAL_RCC_OscConfig+0x4cc>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007386:	2b00      	cmp	r3, #0
 8007388:	d1f0      	bne.n	800736c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	69da      	ldr	r2, [r3, #28]
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6a1b      	ldr	r3, [r3, #32]
 8007392:	431a      	orrs	r2, r3
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007398:	019b      	lsls	r3, r3, #6
 800739a:	431a      	orrs	r2, r3
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073a0:	085b      	lsrs	r3, r3, #1
 80073a2:	3b01      	subs	r3, #1
 80073a4:	041b      	lsls	r3, r3, #16
 80073a6:	431a      	orrs	r2, r3
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ac:	061b      	lsls	r3, r3, #24
 80073ae:	4313      	orrs	r3, r2
 80073b0:	4a1b      	ldr	r2, [pc, #108]	; (8007420 <HAL_RCC_OscConfig+0x4cc>)
 80073b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80073b6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80073b8:	4b19      	ldr	r3, [pc, #100]	; (8007420 <HAL_RCC_OscConfig+0x4cc>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a18      	ldr	r2, [pc, #96]	; (8007420 <HAL_RCC_OscConfig+0x4cc>)
 80073be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80073c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073c4:	f7fc fddc 	bl	8003f80 <HAL_GetTick>
 80073c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80073ca:	e008      	b.n	80073de <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073cc:	f7fc fdd8 	bl	8003f80 <HAL_GetTick>
 80073d0:	4602      	mov	r2, r0
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	1ad3      	subs	r3, r2, r3
 80073d6:	2b02      	cmp	r3, #2
 80073d8:	d901      	bls.n	80073de <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80073da:	2303      	movs	r3, #3
 80073dc:	e057      	b.n	800748e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80073de:	4b10      	ldr	r3, [pc, #64]	; (8007420 <HAL_RCC_OscConfig+0x4cc>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d0f0      	beq.n	80073cc <HAL_RCC_OscConfig+0x478>
 80073ea:	e04f      	b.n	800748c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073ec:	4b0c      	ldr	r3, [pc, #48]	; (8007420 <HAL_RCC_OscConfig+0x4cc>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a0b      	ldr	r2, [pc, #44]	; (8007420 <HAL_RCC_OscConfig+0x4cc>)
 80073f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80073f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073f8:	f7fc fdc2 	bl	8003f80 <HAL_GetTick>
 80073fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073fe:	e008      	b.n	8007412 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007400:	f7fc fdbe 	bl	8003f80 <HAL_GetTick>
 8007404:	4602      	mov	r2, r0
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	1ad3      	subs	r3, r2, r3
 800740a:	2b02      	cmp	r3, #2
 800740c:	d901      	bls.n	8007412 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800740e:	2303      	movs	r3, #3
 8007410:	e03d      	b.n	800748e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007412:	4b03      	ldr	r3, [pc, #12]	; (8007420 <HAL_RCC_OscConfig+0x4cc>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800741a:	2b00      	cmp	r3, #0
 800741c:	d1f0      	bne.n	8007400 <HAL_RCC_OscConfig+0x4ac>
 800741e:	e035      	b.n	800748c <HAL_RCC_OscConfig+0x538>
 8007420:	40023800 	.word	0x40023800
 8007424:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007428:	4b1b      	ldr	r3, [pc, #108]	; (8007498 <HAL_RCC_OscConfig+0x544>)
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	699b      	ldr	r3, [r3, #24]
 8007432:	2b01      	cmp	r3, #1
 8007434:	d028      	beq.n	8007488 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007440:	429a      	cmp	r2, r3
 8007442:	d121      	bne.n	8007488 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800744e:	429a      	cmp	r2, r3
 8007450:	d11a      	bne.n	8007488 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007452:	68fa      	ldr	r2, [r7, #12]
 8007454:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007458:	4013      	ands	r3, r2
 800745a:	687a      	ldr	r2, [r7, #4]
 800745c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800745e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007460:	4293      	cmp	r3, r2
 8007462:	d111      	bne.n	8007488 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800746e:	085b      	lsrs	r3, r3, #1
 8007470:	3b01      	subs	r3, #1
 8007472:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007474:	429a      	cmp	r2, r3
 8007476:	d107      	bne.n	8007488 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007482:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007484:	429a      	cmp	r2, r3
 8007486:	d001      	beq.n	800748c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007488:	2301      	movs	r3, #1
 800748a:	e000      	b.n	800748e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800748c:	2300      	movs	r3, #0
}
 800748e:	4618      	mov	r0, r3
 8007490:	3718      	adds	r7, #24
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}
 8007496:	bf00      	nop
 8007498:	40023800 	.word	0x40023800

0800749c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
 80074a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80074a6:	2300      	movs	r3, #0
 80074a8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d101      	bne.n	80074b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80074b0:	2301      	movs	r3, #1
 80074b2:	e0d0      	b.n	8007656 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80074b4:	4b6a      	ldr	r3, [pc, #424]	; (8007660 <HAL_RCC_ClockConfig+0x1c4>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f003 030f 	and.w	r3, r3, #15
 80074bc:	683a      	ldr	r2, [r7, #0]
 80074be:	429a      	cmp	r2, r3
 80074c0:	d910      	bls.n	80074e4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074c2:	4b67      	ldr	r3, [pc, #412]	; (8007660 <HAL_RCC_ClockConfig+0x1c4>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f023 020f 	bic.w	r2, r3, #15
 80074ca:	4965      	ldr	r1, [pc, #404]	; (8007660 <HAL_RCC_ClockConfig+0x1c4>)
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	4313      	orrs	r3, r2
 80074d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80074d2:	4b63      	ldr	r3, [pc, #396]	; (8007660 <HAL_RCC_ClockConfig+0x1c4>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f003 030f 	and.w	r3, r3, #15
 80074da:	683a      	ldr	r2, [r7, #0]
 80074dc:	429a      	cmp	r2, r3
 80074de:	d001      	beq.n	80074e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80074e0:	2301      	movs	r3, #1
 80074e2:	e0b8      	b.n	8007656 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f003 0302 	and.w	r3, r3, #2
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d020      	beq.n	8007532 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f003 0304 	and.w	r3, r3, #4
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d005      	beq.n	8007508 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80074fc:	4b59      	ldr	r3, [pc, #356]	; (8007664 <HAL_RCC_ClockConfig+0x1c8>)
 80074fe:	689b      	ldr	r3, [r3, #8]
 8007500:	4a58      	ldr	r2, [pc, #352]	; (8007664 <HAL_RCC_ClockConfig+0x1c8>)
 8007502:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007506:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f003 0308 	and.w	r3, r3, #8
 8007510:	2b00      	cmp	r3, #0
 8007512:	d005      	beq.n	8007520 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007514:	4b53      	ldr	r3, [pc, #332]	; (8007664 <HAL_RCC_ClockConfig+0x1c8>)
 8007516:	689b      	ldr	r3, [r3, #8]
 8007518:	4a52      	ldr	r2, [pc, #328]	; (8007664 <HAL_RCC_ClockConfig+0x1c8>)
 800751a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800751e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007520:	4b50      	ldr	r3, [pc, #320]	; (8007664 <HAL_RCC_ClockConfig+0x1c8>)
 8007522:	689b      	ldr	r3, [r3, #8]
 8007524:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	689b      	ldr	r3, [r3, #8]
 800752c:	494d      	ldr	r1, [pc, #308]	; (8007664 <HAL_RCC_ClockConfig+0x1c8>)
 800752e:	4313      	orrs	r3, r2
 8007530:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f003 0301 	and.w	r3, r3, #1
 800753a:	2b00      	cmp	r3, #0
 800753c:	d040      	beq.n	80075c0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	2b01      	cmp	r3, #1
 8007544:	d107      	bne.n	8007556 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007546:	4b47      	ldr	r3, [pc, #284]	; (8007664 <HAL_RCC_ClockConfig+0x1c8>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800754e:	2b00      	cmp	r3, #0
 8007550:	d115      	bne.n	800757e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007552:	2301      	movs	r3, #1
 8007554:	e07f      	b.n	8007656 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	2b02      	cmp	r3, #2
 800755c:	d107      	bne.n	800756e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800755e:	4b41      	ldr	r3, [pc, #260]	; (8007664 <HAL_RCC_ClockConfig+0x1c8>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007566:	2b00      	cmp	r3, #0
 8007568:	d109      	bne.n	800757e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800756a:	2301      	movs	r3, #1
 800756c:	e073      	b.n	8007656 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800756e:	4b3d      	ldr	r3, [pc, #244]	; (8007664 <HAL_RCC_ClockConfig+0x1c8>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f003 0302 	and.w	r3, r3, #2
 8007576:	2b00      	cmp	r3, #0
 8007578:	d101      	bne.n	800757e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800757a:	2301      	movs	r3, #1
 800757c:	e06b      	b.n	8007656 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800757e:	4b39      	ldr	r3, [pc, #228]	; (8007664 <HAL_RCC_ClockConfig+0x1c8>)
 8007580:	689b      	ldr	r3, [r3, #8]
 8007582:	f023 0203 	bic.w	r2, r3, #3
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	4936      	ldr	r1, [pc, #216]	; (8007664 <HAL_RCC_ClockConfig+0x1c8>)
 800758c:	4313      	orrs	r3, r2
 800758e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007590:	f7fc fcf6 	bl	8003f80 <HAL_GetTick>
 8007594:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007596:	e00a      	b.n	80075ae <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007598:	f7fc fcf2 	bl	8003f80 <HAL_GetTick>
 800759c:	4602      	mov	r2, r0
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	1ad3      	subs	r3, r2, r3
 80075a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d901      	bls.n	80075ae <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80075aa:	2303      	movs	r3, #3
 80075ac:	e053      	b.n	8007656 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075ae:	4b2d      	ldr	r3, [pc, #180]	; (8007664 <HAL_RCC_ClockConfig+0x1c8>)
 80075b0:	689b      	ldr	r3, [r3, #8]
 80075b2:	f003 020c 	and.w	r2, r3, #12
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	685b      	ldr	r3, [r3, #4]
 80075ba:	009b      	lsls	r3, r3, #2
 80075bc:	429a      	cmp	r2, r3
 80075be:	d1eb      	bne.n	8007598 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80075c0:	4b27      	ldr	r3, [pc, #156]	; (8007660 <HAL_RCC_ClockConfig+0x1c4>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f003 030f 	and.w	r3, r3, #15
 80075c8:	683a      	ldr	r2, [r7, #0]
 80075ca:	429a      	cmp	r2, r3
 80075cc:	d210      	bcs.n	80075f0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075ce:	4b24      	ldr	r3, [pc, #144]	; (8007660 <HAL_RCC_ClockConfig+0x1c4>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f023 020f 	bic.w	r2, r3, #15
 80075d6:	4922      	ldr	r1, [pc, #136]	; (8007660 <HAL_RCC_ClockConfig+0x1c4>)
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	4313      	orrs	r3, r2
 80075dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80075de:	4b20      	ldr	r3, [pc, #128]	; (8007660 <HAL_RCC_ClockConfig+0x1c4>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f003 030f 	and.w	r3, r3, #15
 80075e6:	683a      	ldr	r2, [r7, #0]
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d001      	beq.n	80075f0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80075ec:	2301      	movs	r3, #1
 80075ee:	e032      	b.n	8007656 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f003 0304 	and.w	r3, r3, #4
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d008      	beq.n	800760e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80075fc:	4b19      	ldr	r3, [pc, #100]	; (8007664 <HAL_RCC_ClockConfig+0x1c8>)
 80075fe:	689b      	ldr	r3, [r3, #8]
 8007600:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	68db      	ldr	r3, [r3, #12]
 8007608:	4916      	ldr	r1, [pc, #88]	; (8007664 <HAL_RCC_ClockConfig+0x1c8>)
 800760a:	4313      	orrs	r3, r2
 800760c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f003 0308 	and.w	r3, r3, #8
 8007616:	2b00      	cmp	r3, #0
 8007618:	d009      	beq.n	800762e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800761a:	4b12      	ldr	r3, [pc, #72]	; (8007664 <HAL_RCC_ClockConfig+0x1c8>)
 800761c:	689b      	ldr	r3, [r3, #8]
 800761e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	691b      	ldr	r3, [r3, #16]
 8007626:	00db      	lsls	r3, r3, #3
 8007628:	490e      	ldr	r1, [pc, #56]	; (8007664 <HAL_RCC_ClockConfig+0x1c8>)
 800762a:	4313      	orrs	r3, r2
 800762c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800762e:	f000 f821 	bl	8007674 <HAL_RCC_GetSysClockFreq>
 8007632:	4602      	mov	r2, r0
 8007634:	4b0b      	ldr	r3, [pc, #44]	; (8007664 <HAL_RCC_ClockConfig+0x1c8>)
 8007636:	689b      	ldr	r3, [r3, #8]
 8007638:	091b      	lsrs	r3, r3, #4
 800763a:	f003 030f 	and.w	r3, r3, #15
 800763e:	490a      	ldr	r1, [pc, #40]	; (8007668 <HAL_RCC_ClockConfig+0x1cc>)
 8007640:	5ccb      	ldrb	r3, [r1, r3]
 8007642:	fa22 f303 	lsr.w	r3, r2, r3
 8007646:	4a09      	ldr	r2, [pc, #36]	; (800766c <HAL_RCC_ClockConfig+0x1d0>)
 8007648:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800764a:	4b09      	ldr	r3, [pc, #36]	; (8007670 <HAL_RCC_ClockConfig+0x1d4>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4618      	mov	r0, r3
 8007650:	f7fb fbaa 	bl	8002da8 <HAL_InitTick>

  return HAL_OK;
 8007654:	2300      	movs	r3, #0
}
 8007656:	4618      	mov	r0, r3
 8007658:	3710      	adds	r7, #16
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}
 800765e:	bf00      	nop
 8007660:	40023c00 	.word	0x40023c00
 8007664:	40023800 	.word	0x40023800
 8007668:	08010348 	.word	0x08010348
 800766c:	20000030 	.word	0x20000030
 8007670:	20000048 	.word	0x20000048

08007674 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007674:	b5b0      	push	{r4, r5, r7, lr}
 8007676:	b084      	sub	sp, #16
 8007678:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800767a:	2100      	movs	r1, #0
 800767c:	6079      	str	r1, [r7, #4]
 800767e:	2100      	movs	r1, #0
 8007680:	60f9      	str	r1, [r7, #12]
 8007682:	2100      	movs	r1, #0
 8007684:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8007686:	2100      	movs	r1, #0
 8007688:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800768a:	4952      	ldr	r1, [pc, #328]	; (80077d4 <HAL_RCC_GetSysClockFreq+0x160>)
 800768c:	6889      	ldr	r1, [r1, #8]
 800768e:	f001 010c 	and.w	r1, r1, #12
 8007692:	2908      	cmp	r1, #8
 8007694:	d00d      	beq.n	80076b2 <HAL_RCC_GetSysClockFreq+0x3e>
 8007696:	2908      	cmp	r1, #8
 8007698:	f200 8094 	bhi.w	80077c4 <HAL_RCC_GetSysClockFreq+0x150>
 800769c:	2900      	cmp	r1, #0
 800769e:	d002      	beq.n	80076a6 <HAL_RCC_GetSysClockFreq+0x32>
 80076a0:	2904      	cmp	r1, #4
 80076a2:	d003      	beq.n	80076ac <HAL_RCC_GetSysClockFreq+0x38>
 80076a4:	e08e      	b.n	80077c4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80076a6:	4b4c      	ldr	r3, [pc, #304]	; (80077d8 <HAL_RCC_GetSysClockFreq+0x164>)
 80076a8:	60bb      	str	r3, [r7, #8]
      break;
 80076aa:	e08e      	b.n	80077ca <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80076ac:	4b4b      	ldr	r3, [pc, #300]	; (80077dc <HAL_RCC_GetSysClockFreq+0x168>)
 80076ae:	60bb      	str	r3, [r7, #8]
      break;
 80076b0:	e08b      	b.n	80077ca <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80076b2:	4948      	ldr	r1, [pc, #288]	; (80077d4 <HAL_RCC_GetSysClockFreq+0x160>)
 80076b4:	6849      	ldr	r1, [r1, #4]
 80076b6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80076ba:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80076bc:	4945      	ldr	r1, [pc, #276]	; (80077d4 <HAL_RCC_GetSysClockFreq+0x160>)
 80076be:	6849      	ldr	r1, [r1, #4]
 80076c0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80076c4:	2900      	cmp	r1, #0
 80076c6:	d024      	beq.n	8007712 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80076c8:	4942      	ldr	r1, [pc, #264]	; (80077d4 <HAL_RCC_GetSysClockFreq+0x160>)
 80076ca:	6849      	ldr	r1, [r1, #4]
 80076cc:	0989      	lsrs	r1, r1, #6
 80076ce:	4608      	mov	r0, r1
 80076d0:	f04f 0100 	mov.w	r1, #0
 80076d4:	f240 14ff 	movw	r4, #511	; 0x1ff
 80076d8:	f04f 0500 	mov.w	r5, #0
 80076dc:	ea00 0204 	and.w	r2, r0, r4
 80076e0:	ea01 0305 	and.w	r3, r1, r5
 80076e4:	493d      	ldr	r1, [pc, #244]	; (80077dc <HAL_RCC_GetSysClockFreq+0x168>)
 80076e6:	fb01 f003 	mul.w	r0, r1, r3
 80076ea:	2100      	movs	r1, #0
 80076ec:	fb01 f102 	mul.w	r1, r1, r2
 80076f0:	1844      	adds	r4, r0, r1
 80076f2:	493a      	ldr	r1, [pc, #232]	; (80077dc <HAL_RCC_GetSysClockFreq+0x168>)
 80076f4:	fba2 0101 	umull	r0, r1, r2, r1
 80076f8:	1863      	adds	r3, r4, r1
 80076fa:	4619      	mov	r1, r3
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	461a      	mov	r2, r3
 8007700:	f04f 0300 	mov.w	r3, #0
 8007704:	f7f8 fdd4 	bl	80002b0 <__aeabi_uldivmod>
 8007708:	4602      	mov	r2, r0
 800770a:	460b      	mov	r3, r1
 800770c:	4613      	mov	r3, r2
 800770e:	60fb      	str	r3, [r7, #12]
 8007710:	e04a      	b.n	80077a8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007712:	4b30      	ldr	r3, [pc, #192]	; (80077d4 <HAL_RCC_GetSysClockFreq+0x160>)
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	099b      	lsrs	r3, r3, #6
 8007718:	461a      	mov	r2, r3
 800771a:	f04f 0300 	mov.w	r3, #0
 800771e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007722:	f04f 0100 	mov.w	r1, #0
 8007726:	ea02 0400 	and.w	r4, r2, r0
 800772a:	ea03 0501 	and.w	r5, r3, r1
 800772e:	4620      	mov	r0, r4
 8007730:	4629      	mov	r1, r5
 8007732:	f04f 0200 	mov.w	r2, #0
 8007736:	f04f 0300 	mov.w	r3, #0
 800773a:	014b      	lsls	r3, r1, #5
 800773c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007740:	0142      	lsls	r2, r0, #5
 8007742:	4610      	mov	r0, r2
 8007744:	4619      	mov	r1, r3
 8007746:	1b00      	subs	r0, r0, r4
 8007748:	eb61 0105 	sbc.w	r1, r1, r5
 800774c:	f04f 0200 	mov.w	r2, #0
 8007750:	f04f 0300 	mov.w	r3, #0
 8007754:	018b      	lsls	r3, r1, #6
 8007756:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800775a:	0182      	lsls	r2, r0, #6
 800775c:	1a12      	subs	r2, r2, r0
 800775e:	eb63 0301 	sbc.w	r3, r3, r1
 8007762:	f04f 0000 	mov.w	r0, #0
 8007766:	f04f 0100 	mov.w	r1, #0
 800776a:	00d9      	lsls	r1, r3, #3
 800776c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007770:	00d0      	lsls	r0, r2, #3
 8007772:	4602      	mov	r2, r0
 8007774:	460b      	mov	r3, r1
 8007776:	1912      	adds	r2, r2, r4
 8007778:	eb45 0303 	adc.w	r3, r5, r3
 800777c:	f04f 0000 	mov.w	r0, #0
 8007780:	f04f 0100 	mov.w	r1, #0
 8007784:	0299      	lsls	r1, r3, #10
 8007786:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800778a:	0290      	lsls	r0, r2, #10
 800778c:	4602      	mov	r2, r0
 800778e:	460b      	mov	r3, r1
 8007790:	4610      	mov	r0, r2
 8007792:	4619      	mov	r1, r3
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	461a      	mov	r2, r3
 8007798:	f04f 0300 	mov.w	r3, #0
 800779c:	f7f8 fd88 	bl	80002b0 <__aeabi_uldivmod>
 80077a0:	4602      	mov	r2, r0
 80077a2:	460b      	mov	r3, r1
 80077a4:	4613      	mov	r3, r2
 80077a6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80077a8:	4b0a      	ldr	r3, [pc, #40]	; (80077d4 <HAL_RCC_GetSysClockFreq+0x160>)
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	0c1b      	lsrs	r3, r3, #16
 80077ae:	f003 0303 	and.w	r3, r3, #3
 80077b2:	3301      	adds	r3, #1
 80077b4:	005b      	lsls	r3, r3, #1
 80077b6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80077b8:	68fa      	ldr	r2, [r7, #12]
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80077c0:	60bb      	str	r3, [r7, #8]
      break;
 80077c2:	e002      	b.n	80077ca <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80077c4:	4b04      	ldr	r3, [pc, #16]	; (80077d8 <HAL_RCC_GetSysClockFreq+0x164>)
 80077c6:	60bb      	str	r3, [r7, #8]
      break;
 80077c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80077ca:	68bb      	ldr	r3, [r7, #8]
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	3710      	adds	r7, #16
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bdb0      	pop	{r4, r5, r7, pc}
 80077d4:	40023800 	.word	0x40023800
 80077d8:	00f42400 	.word	0x00f42400
 80077dc:	017d7840 	.word	0x017d7840

080077e0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80077e0:	b480      	push	{r7}
 80077e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80077e4:	4b03      	ldr	r3, [pc, #12]	; (80077f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80077e6:	681b      	ldr	r3, [r3, #0]
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	46bd      	mov	sp, r7
 80077ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f0:	4770      	bx	lr
 80077f2:	bf00      	nop
 80077f4:	20000030 	.word	0x20000030

080077f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80077fc:	f7ff fff0 	bl	80077e0 <HAL_RCC_GetHCLKFreq>
 8007800:	4602      	mov	r2, r0
 8007802:	4b05      	ldr	r3, [pc, #20]	; (8007818 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007804:	689b      	ldr	r3, [r3, #8]
 8007806:	0a9b      	lsrs	r3, r3, #10
 8007808:	f003 0307 	and.w	r3, r3, #7
 800780c:	4903      	ldr	r1, [pc, #12]	; (800781c <HAL_RCC_GetPCLK1Freq+0x24>)
 800780e:	5ccb      	ldrb	r3, [r1, r3]
 8007810:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007814:	4618      	mov	r0, r3
 8007816:	bd80      	pop	{r7, pc}
 8007818:	40023800 	.word	0x40023800
 800781c:	08010358 	.word	0x08010358

08007820 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007824:	f7ff ffdc 	bl	80077e0 <HAL_RCC_GetHCLKFreq>
 8007828:	4602      	mov	r2, r0
 800782a:	4b05      	ldr	r3, [pc, #20]	; (8007840 <HAL_RCC_GetPCLK2Freq+0x20>)
 800782c:	689b      	ldr	r3, [r3, #8]
 800782e:	0b5b      	lsrs	r3, r3, #13
 8007830:	f003 0307 	and.w	r3, r3, #7
 8007834:	4903      	ldr	r1, [pc, #12]	; (8007844 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007836:	5ccb      	ldrb	r3, [r1, r3]
 8007838:	fa22 f303 	lsr.w	r3, r2, r3
}
 800783c:	4618      	mov	r0, r3
 800783e:	bd80      	pop	{r7, pc}
 8007840:	40023800 	.word	0x40023800
 8007844:	08010358 	.word	0x08010358

08007848 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007848:	b480      	push	{r7}
 800784a:	b083      	sub	sp, #12
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
 8007850:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	220f      	movs	r2, #15
 8007856:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007858:	4b12      	ldr	r3, [pc, #72]	; (80078a4 <HAL_RCC_GetClockConfig+0x5c>)
 800785a:	689b      	ldr	r3, [r3, #8]
 800785c:	f003 0203 	and.w	r2, r3, #3
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007864:	4b0f      	ldr	r3, [pc, #60]	; (80078a4 <HAL_RCC_GetClockConfig+0x5c>)
 8007866:	689b      	ldr	r3, [r3, #8]
 8007868:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007870:	4b0c      	ldr	r3, [pc, #48]	; (80078a4 <HAL_RCC_GetClockConfig+0x5c>)
 8007872:	689b      	ldr	r3, [r3, #8]
 8007874:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800787c:	4b09      	ldr	r3, [pc, #36]	; (80078a4 <HAL_RCC_GetClockConfig+0x5c>)
 800787e:	689b      	ldr	r3, [r3, #8]
 8007880:	08db      	lsrs	r3, r3, #3
 8007882:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800788a:	4b07      	ldr	r3, [pc, #28]	; (80078a8 <HAL_RCC_GetClockConfig+0x60>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f003 020f 	and.w	r2, r3, #15
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	601a      	str	r2, [r3, #0]
}
 8007896:	bf00      	nop
 8007898:	370c      	adds	r7, #12
 800789a:	46bd      	mov	sp, r7
 800789c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a0:	4770      	bx	lr
 80078a2:	bf00      	nop
 80078a4:	40023800 	.word	0x40023800
 80078a8:	40023c00 	.word	0x40023c00

080078ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b088      	sub	sp, #32
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80078b4:	2300      	movs	r3, #0
 80078b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80078b8:	2300      	movs	r3, #0
 80078ba:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80078bc:	2300      	movs	r3, #0
 80078be:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80078c0:	2300      	movs	r3, #0
 80078c2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80078c4:	2300      	movs	r3, #0
 80078c6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f003 0301 	and.w	r3, r3, #1
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d012      	beq.n	80078fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80078d4:	4b69      	ldr	r3, [pc, #420]	; (8007a7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078d6:	689b      	ldr	r3, [r3, #8]
 80078d8:	4a68      	ldr	r2, [pc, #416]	; (8007a7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078da:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80078de:	6093      	str	r3, [r2, #8]
 80078e0:	4b66      	ldr	r3, [pc, #408]	; (8007a7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078e2:	689a      	ldr	r2, [r3, #8]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078e8:	4964      	ldr	r1, [pc, #400]	; (8007a7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078ea:	4313      	orrs	r3, r2
 80078ec:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d101      	bne.n	80078fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80078f6:	2301      	movs	r3, #1
 80078f8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007902:	2b00      	cmp	r3, #0
 8007904:	d017      	beq.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007906:	4b5d      	ldr	r3, [pc, #372]	; (8007a7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007908:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800790c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007914:	4959      	ldr	r1, [pc, #356]	; (8007a7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007916:	4313      	orrs	r3, r2
 8007918:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007920:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007924:	d101      	bne.n	800792a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007926:	2301      	movs	r3, #1
 8007928:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800792e:	2b00      	cmp	r3, #0
 8007930:	d101      	bne.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007932:	2301      	movs	r3, #1
 8007934:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800793e:	2b00      	cmp	r3, #0
 8007940:	d017      	beq.n	8007972 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007942:	4b4e      	ldr	r3, [pc, #312]	; (8007a7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007944:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007948:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007950:	494a      	ldr	r1, [pc, #296]	; (8007a7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007952:	4313      	orrs	r3, r2
 8007954:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800795c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007960:	d101      	bne.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007962:	2301      	movs	r3, #1
 8007964:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800796a:	2b00      	cmp	r3, #0
 800796c:	d101      	bne.n	8007972 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800796e:	2301      	movs	r3, #1
 8007970:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800797a:	2b00      	cmp	r3, #0
 800797c:	d001      	beq.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800797e:	2301      	movs	r3, #1
 8007980:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f003 0320 	and.w	r3, r3, #32
 800798a:	2b00      	cmp	r3, #0
 800798c:	f000 808b 	beq.w	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007990:	4b3a      	ldr	r3, [pc, #232]	; (8007a7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007994:	4a39      	ldr	r2, [pc, #228]	; (8007a7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007996:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800799a:	6413      	str	r3, [r2, #64]	; 0x40
 800799c:	4b37      	ldr	r3, [pc, #220]	; (8007a7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800799e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079a4:	60bb      	str	r3, [r7, #8]
 80079a6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80079a8:	4b35      	ldr	r3, [pc, #212]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a34      	ldr	r2, [pc, #208]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80079ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079b4:	f7fc fae4 	bl	8003f80 <HAL_GetTick>
 80079b8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80079ba:	e008      	b.n	80079ce <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80079bc:	f7fc fae0 	bl	8003f80 <HAL_GetTick>
 80079c0:	4602      	mov	r2, r0
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	1ad3      	subs	r3, r2, r3
 80079c6:	2b64      	cmp	r3, #100	; 0x64
 80079c8:	d901      	bls.n	80079ce <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80079ca:	2303      	movs	r3, #3
 80079cc:	e357      	b.n	800807e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80079ce:	4b2c      	ldr	r3, [pc, #176]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d0f0      	beq.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80079da:	4b28      	ldr	r3, [pc, #160]	; (8007a7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079e2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d035      	beq.n	8007a56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079f2:	693a      	ldr	r2, [r7, #16]
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d02e      	beq.n	8007a56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80079f8:	4b20      	ldr	r3, [pc, #128]	; (8007a7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a00:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007a02:	4b1e      	ldr	r3, [pc, #120]	; (8007a7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a06:	4a1d      	ldr	r2, [pc, #116]	; (8007a7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a0c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007a0e:	4b1b      	ldr	r3, [pc, #108]	; (8007a7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a12:	4a1a      	ldr	r2, [pc, #104]	; (8007a7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a18:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007a1a:	4a18      	ldr	r2, [pc, #96]	; (8007a7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007a20:	4b16      	ldr	r3, [pc, #88]	; (8007a7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a24:	f003 0301 	and.w	r3, r3, #1
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d114      	bne.n	8007a56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a2c:	f7fc faa8 	bl	8003f80 <HAL_GetTick>
 8007a30:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a32:	e00a      	b.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007a34:	f7fc faa4 	bl	8003f80 <HAL_GetTick>
 8007a38:	4602      	mov	r2, r0
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	1ad3      	subs	r3, r2, r3
 8007a3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d901      	bls.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007a46:	2303      	movs	r3, #3
 8007a48:	e319      	b.n	800807e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a4a:	4b0c      	ldr	r3, [pc, #48]	; (8007a7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a4e:	f003 0302 	and.w	r3, r3, #2
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d0ee      	beq.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a62:	d111      	bne.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007a64:	4b05      	ldr	r3, [pc, #20]	; (8007a7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a66:	689b      	ldr	r3, [r3, #8]
 8007a68:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007a70:	4b04      	ldr	r3, [pc, #16]	; (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007a72:	400b      	ands	r3, r1
 8007a74:	4901      	ldr	r1, [pc, #4]	; (8007a7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a76:	4313      	orrs	r3, r2
 8007a78:	608b      	str	r3, [r1, #8]
 8007a7a:	e00b      	b.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007a7c:	40023800 	.word	0x40023800
 8007a80:	40007000 	.word	0x40007000
 8007a84:	0ffffcff 	.word	0x0ffffcff
 8007a88:	4bb1      	ldr	r3, [pc, #708]	; (8007d50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007a8a:	689b      	ldr	r3, [r3, #8]
 8007a8c:	4ab0      	ldr	r2, [pc, #704]	; (8007d50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007a8e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007a92:	6093      	str	r3, [r2, #8]
 8007a94:	4bae      	ldr	r3, [pc, #696]	; (8007d50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007a96:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007aa0:	49ab      	ldr	r1, [pc, #684]	; (8007d50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f003 0310 	and.w	r3, r3, #16
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d010      	beq.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007ab2:	4ba7      	ldr	r3, [pc, #668]	; (8007d50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007ab4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ab8:	4aa5      	ldr	r2, [pc, #660]	; (8007d50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007aba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007abe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8007ac2:	4ba3      	ldr	r3, [pc, #652]	; (8007d50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007ac4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007acc:	49a0      	ldr	r1, [pc, #640]	; (8007d50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d00a      	beq.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007ae0:	4b9b      	ldr	r3, [pc, #620]	; (8007d50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ae6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007aee:	4998      	ldr	r1, [pc, #608]	; (8007d50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007af0:	4313      	orrs	r3, r2
 8007af2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d00a      	beq.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007b02:	4b93      	ldr	r3, [pc, #588]	; (8007d50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b08:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b10:	498f      	ldr	r1, [pc, #572]	; (8007d50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007b12:	4313      	orrs	r3, r2
 8007b14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d00a      	beq.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007b24:	4b8a      	ldr	r3, [pc, #552]	; (8007d50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b2a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b32:	4987      	ldr	r1, [pc, #540]	; (8007d50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007b34:	4313      	orrs	r3, r2
 8007b36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d00a      	beq.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007b46:	4b82      	ldr	r3, [pc, #520]	; (8007d50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b4c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b54:	497e      	ldr	r1, [pc, #504]	; (8007d50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007b56:	4313      	orrs	r3, r2
 8007b58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d00a      	beq.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007b68:	4b79      	ldr	r3, [pc, #484]	; (8007d50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b6e:	f023 0203 	bic.w	r2, r3, #3
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b76:	4976      	ldr	r1, [pc, #472]	; (8007d50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d00a      	beq.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007b8a:	4b71      	ldr	r3, [pc, #452]	; (8007d50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b90:	f023 020c 	bic.w	r2, r3, #12
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b98:	496d      	ldr	r1, [pc, #436]	; (8007d50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d00a      	beq.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007bac:	4b68      	ldr	r3, [pc, #416]	; (8007d50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bb2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bba:	4965      	ldr	r1, [pc, #404]	; (8007d50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d00a      	beq.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007bce:	4b60      	ldr	r3, [pc, #384]	; (8007d50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bd4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bdc:	495c      	ldr	r1, [pc, #368]	; (8007d50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007bde:	4313      	orrs	r3, r2
 8007be0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d00a      	beq.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007bf0:	4b57      	ldr	r3, [pc, #348]	; (8007d50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bf6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bfe:	4954      	ldr	r1, [pc, #336]	; (8007d50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007c00:	4313      	orrs	r3, r2
 8007c02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d00a      	beq.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007c12:	4b4f      	ldr	r3, [pc, #316]	; (8007d50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c18:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c20:	494b      	ldr	r1, [pc, #300]	; (8007d50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007c22:	4313      	orrs	r3, r2
 8007c24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d00a      	beq.n	8007c4a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007c34:	4b46      	ldr	r3, [pc, #280]	; (8007d50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c3a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c42:	4943      	ldr	r1, [pc, #268]	; (8007d50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007c44:	4313      	orrs	r3, r2
 8007c46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d00a      	beq.n	8007c6c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007c56:	4b3e      	ldr	r3, [pc, #248]	; (8007d50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c5c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c64:	493a      	ldr	r1, [pc, #232]	; (8007d50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007c66:	4313      	orrs	r3, r2
 8007c68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d00a      	beq.n	8007c8e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007c78:	4b35      	ldr	r3, [pc, #212]	; (8007d50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c7e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c86:	4932      	ldr	r1, [pc, #200]	; (8007d50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007c88:	4313      	orrs	r3, r2
 8007c8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d011      	beq.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007c9a:	4b2d      	ldr	r3, [pc, #180]	; (8007d50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ca0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ca8:	4929      	ldr	r1, [pc, #164]	; (8007d50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007caa:	4313      	orrs	r3, r2
 8007cac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cb4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007cb8:	d101      	bne.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007cba:	2301      	movs	r3, #1
 8007cbc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f003 0308 	and.w	r3, r3, #8
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d001      	beq.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007cca:	2301      	movs	r3, #1
 8007ccc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d00a      	beq.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007cda:	4b1d      	ldr	r3, [pc, #116]	; (8007d50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ce0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ce8:	4919      	ldr	r1, [pc, #100]	; (8007d50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007cea:	4313      	orrs	r3, r2
 8007cec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d00b      	beq.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007cfc:	4b14      	ldr	r3, [pc, #80]	; (8007d50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d02:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d0c:	4910      	ldr	r1, [pc, #64]	; (8007d50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007d0e:	4313      	orrs	r3, r2
 8007d10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007d14:	69fb      	ldr	r3, [r7, #28]
 8007d16:	2b01      	cmp	r3, #1
 8007d18:	d006      	beq.n	8007d28 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	f000 80d9 	beq.w	8007eda <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007d28:	4b09      	ldr	r3, [pc, #36]	; (8007d50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a08      	ldr	r2, [pc, #32]	; (8007d50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007d2e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007d32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d34:	f7fc f924 	bl	8003f80 <HAL_GetTick>
 8007d38:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007d3a:	e00b      	b.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007d3c:	f7fc f920 	bl	8003f80 <HAL_GetTick>
 8007d40:	4602      	mov	r2, r0
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	1ad3      	subs	r3, r2, r3
 8007d46:	2b64      	cmp	r3, #100	; 0x64
 8007d48:	d904      	bls.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007d4a:	2303      	movs	r3, #3
 8007d4c:	e197      	b.n	800807e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8007d4e:	bf00      	nop
 8007d50:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007d54:	4b6c      	ldr	r3, [pc, #432]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d1ed      	bne.n	8007d3c <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f003 0301 	and.w	r3, r3, #1
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d021      	beq.n	8007db0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d11d      	bne.n	8007db0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007d74:	4b64      	ldr	r3, [pc, #400]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d7a:	0c1b      	lsrs	r3, r3, #16
 8007d7c:	f003 0303 	and.w	r3, r3, #3
 8007d80:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007d82:	4b61      	ldr	r3, [pc, #388]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d88:	0e1b      	lsrs	r3, r3, #24
 8007d8a:	f003 030f 	and.w	r3, r3, #15
 8007d8e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	019a      	lsls	r2, r3, #6
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	041b      	lsls	r3, r3, #16
 8007d9a:	431a      	orrs	r2, r3
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	061b      	lsls	r3, r3, #24
 8007da0:	431a      	orrs	r2, r3
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	689b      	ldr	r3, [r3, #8]
 8007da6:	071b      	lsls	r3, r3, #28
 8007da8:	4957      	ldr	r1, [pc, #348]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007daa:	4313      	orrs	r3, r2
 8007dac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d004      	beq.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dc0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007dc4:	d00a      	beq.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d02e      	beq.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007dda:	d129      	bne.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007ddc:	4b4a      	ldr	r3, [pc, #296]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007dde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007de2:	0c1b      	lsrs	r3, r3, #16
 8007de4:	f003 0303 	and.w	r3, r3, #3
 8007de8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007dea:	4b47      	ldr	r3, [pc, #284]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007dec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007df0:	0f1b      	lsrs	r3, r3, #28
 8007df2:	f003 0307 	and.w	r3, r3, #7
 8007df6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	685b      	ldr	r3, [r3, #4]
 8007dfc:	019a      	lsls	r2, r3, #6
 8007dfe:	693b      	ldr	r3, [r7, #16]
 8007e00:	041b      	lsls	r3, r3, #16
 8007e02:	431a      	orrs	r2, r3
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	68db      	ldr	r3, [r3, #12]
 8007e08:	061b      	lsls	r3, r3, #24
 8007e0a:	431a      	orrs	r2, r3
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	071b      	lsls	r3, r3, #28
 8007e10:	493d      	ldr	r1, [pc, #244]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e12:	4313      	orrs	r3, r2
 8007e14:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007e18:	4b3b      	ldr	r3, [pc, #236]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e1e:	f023 021f 	bic.w	r2, r3, #31
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e26:	3b01      	subs	r3, #1
 8007e28:	4937      	ldr	r1, [pc, #220]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d01d      	beq.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007e3c:	4b32      	ldr	r3, [pc, #200]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e42:	0e1b      	lsrs	r3, r3, #24
 8007e44:	f003 030f 	and.w	r3, r3, #15
 8007e48:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007e4a:	4b2f      	ldr	r3, [pc, #188]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e50:	0f1b      	lsrs	r3, r3, #28
 8007e52:	f003 0307 	and.w	r3, r3, #7
 8007e56:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	685b      	ldr	r3, [r3, #4]
 8007e5c:	019a      	lsls	r2, r3, #6
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	691b      	ldr	r3, [r3, #16]
 8007e62:	041b      	lsls	r3, r3, #16
 8007e64:	431a      	orrs	r2, r3
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	061b      	lsls	r3, r3, #24
 8007e6a:	431a      	orrs	r2, r3
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	071b      	lsls	r3, r3, #28
 8007e70:	4925      	ldr	r1, [pc, #148]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e72:	4313      	orrs	r3, r2
 8007e74:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d011      	beq.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	019a      	lsls	r2, r3, #6
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	691b      	ldr	r3, [r3, #16]
 8007e8e:	041b      	lsls	r3, r3, #16
 8007e90:	431a      	orrs	r2, r3
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	68db      	ldr	r3, [r3, #12]
 8007e96:	061b      	lsls	r3, r3, #24
 8007e98:	431a      	orrs	r2, r3
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	689b      	ldr	r3, [r3, #8]
 8007e9e:	071b      	lsls	r3, r3, #28
 8007ea0:	4919      	ldr	r1, [pc, #100]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007ea8:	4b17      	ldr	r3, [pc, #92]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4a16      	ldr	r2, [pc, #88]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007eae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007eb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007eb4:	f7fc f864 	bl	8003f80 <HAL_GetTick>
 8007eb8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007eba:	e008      	b.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007ebc:	f7fc f860 	bl	8003f80 <HAL_GetTick>
 8007ec0:	4602      	mov	r2, r0
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	1ad3      	subs	r3, r2, r3
 8007ec6:	2b64      	cmp	r3, #100	; 0x64
 8007ec8:	d901      	bls.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007eca:	2303      	movs	r3, #3
 8007ecc:	e0d7      	b.n	800807e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007ece:	4b0e      	ldr	r3, [pc, #56]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d0f0      	beq.n	8007ebc <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007eda:	69bb      	ldr	r3, [r7, #24]
 8007edc:	2b01      	cmp	r3, #1
 8007ede:	f040 80cd 	bne.w	800807c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007ee2:	4b09      	ldr	r3, [pc, #36]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4a08      	ldr	r2, [pc, #32]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007ee8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007eec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007eee:	f7fc f847 	bl	8003f80 <HAL_GetTick>
 8007ef2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007ef4:	e00a      	b.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007ef6:	f7fc f843 	bl	8003f80 <HAL_GetTick>
 8007efa:	4602      	mov	r2, r0
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	1ad3      	subs	r3, r2, r3
 8007f00:	2b64      	cmp	r3, #100	; 0x64
 8007f02:	d903      	bls.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007f04:	2303      	movs	r3, #3
 8007f06:	e0ba      	b.n	800807e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8007f08:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007f0c:	4b5e      	ldr	r3, [pc, #376]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f18:	d0ed      	beq.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d003      	beq.n	8007f2e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d009      	beq.n	8007f42 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d02e      	beq.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d12a      	bne.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007f42:	4b51      	ldr	r3, [pc, #324]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f48:	0c1b      	lsrs	r3, r3, #16
 8007f4a:	f003 0303 	and.w	r3, r3, #3
 8007f4e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007f50:	4b4d      	ldr	r3, [pc, #308]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f56:	0f1b      	lsrs	r3, r3, #28
 8007f58:	f003 0307 	and.w	r3, r3, #7
 8007f5c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	695b      	ldr	r3, [r3, #20]
 8007f62:	019a      	lsls	r2, r3, #6
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	041b      	lsls	r3, r3, #16
 8007f68:	431a      	orrs	r2, r3
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	699b      	ldr	r3, [r3, #24]
 8007f6e:	061b      	lsls	r3, r3, #24
 8007f70:	431a      	orrs	r2, r3
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	071b      	lsls	r3, r3, #28
 8007f76:	4944      	ldr	r1, [pc, #272]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007f78:	4313      	orrs	r3, r2
 8007f7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007f7e:	4b42      	ldr	r3, [pc, #264]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007f80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f84:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f8c:	3b01      	subs	r3, #1
 8007f8e:	021b      	lsls	r3, r3, #8
 8007f90:	493d      	ldr	r1, [pc, #244]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007f92:	4313      	orrs	r3, r2
 8007f94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d022      	beq.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007fa8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007fac:	d11d      	bne.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007fae:	4b36      	ldr	r3, [pc, #216]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fb4:	0e1b      	lsrs	r3, r3, #24
 8007fb6:	f003 030f 	and.w	r3, r3, #15
 8007fba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007fbc:	4b32      	ldr	r3, [pc, #200]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fc2:	0f1b      	lsrs	r3, r3, #28
 8007fc4:	f003 0307 	and.w	r3, r3, #7
 8007fc8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	695b      	ldr	r3, [r3, #20]
 8007fce:	019a      	lsls	r2, r3, #6
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6a1b      	ldr	r3, [r3, #32]
 8007fd4:	041b      	lsls	r3, r3, #16
 8007fd6:	431a      	orrs	r2, r3
 8007fd8:	693b      	ldr	r3, [r7, #16]
 8007fda:	061b      	lsls	r3, r3, #24
 8007fdc:	431a      	orrs	r2, r3
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	071b      	lsls	r3, r3, #28
 8007fe2:	4929      	ldr	r1, [pc, #164]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007fe4:	4313      	orrs	r3, r2
 8007fe6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f003 0308 	and.w	r3, r3, #8
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d028      	beq.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007ff6:	4b24      	ldr	r3, [pc, #144]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ffc:	0e1b      	lsrs	r3, r3, #24
 8007ffe:	f003 030f 	and.w	r3, r3, #15
 8008002:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008004:	4b20      	ldr	r3, [pc, #128]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800800a:	0c1b      	lsrs	r3, r3, #16
 800800c:	f003 0303 	and.w	r3, r3, #3
 8008010:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	695b      	ldr	r3, [r3, #20]
 8008016:	019a      	lsls	r2, r3, #6
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	041b      	lsls	r3, r3, #16
 800801c:	431a      	orrs	r2, r3
 800801e:	693b      	ldr	r3, [r7, #16]
 8008020:	061b      	lsls	r3, r3, #24
 8008022:	431a      	orrs	r2, r3
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	69db      	ldr	r3, [r3, #28]
 8008028:	071b      	lsls	r3, r3, #28
 800802a:	4917      	ldr	r1, [pc, #92]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800802c:	4313      	orrs	r3, r2
 800802e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008032:	4b15      	ldr	r3, [pc, #84]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008034:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008038:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008040:	4911      	ldr	r1, [pc, #68]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008042:	4313      	orrs	r3, r2
 8008044:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008048:	4b0f      	ldr	r3, [pc, #60]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4a0e      	ldr	r2, [pc, #56]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800804e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008052:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008054:	f7fb ff94 	bl	8003f80 <HAL_GetTick>
 8008058:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800805a:	e008      	b.n	800806e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800805c:	f7fb ff90 	bl	8003f80 <HAL_GetTick>
 8008060:	4602      	mov	r2, r0
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	1ad3      	subs	r3, r2, r3
 8008066:	2b64      	cmp	r3, #100	; 0x64
 8008068:	d901      	bls.n	800806e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800806a:	2303      	movs	r3, #3
 800806c:	e007      	b.n	800807e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800806e:	4b06      	ldr	r3, [pc, #24]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008076:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800807a:	d1ef      	bne.n	800805c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800807c:	2300      	movs	r3, #0
}
 800807e:	4618      	mov	r0, r3
 8008080:	3720      	adds	r7, #32
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}
 8008086:	bf00      	nop
 8008088:	40023800 	.word	0x40023800

0800808c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800808c:	b480      	push	{r7}
 800808e:	b087      	sub	sp, #28
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8008094:	2300      	movs	r3, #0
 8008096:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8008098:	2300      	movs	r3, #0
 800809a:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800809c:	2300      	movs	r3, #0
 800809e:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 80080a0:	2300      	movs	r3, #0
 80080a2:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80080aa:	f040 808c 	bne.w	80081c6 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
  {
    saiclocksource = RCC->DCKCFGR1;
 80080ae:	4b95      	ldr	r3, [pc, #596]	; (8008304 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80080b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080b4:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80080bc:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80080c4:	d07c      	beq.n	80081c0 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80080c6:	68bb      	ldr	r3, [r7, #8]
 80080c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80080cc:	d87d      	bhi.n	80081ca <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d004      	beq.n	80080de <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80080da:	d039      	beq.n	8008150 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80080dc:	e075      	b.n	80081ca <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80080de:	4b89      	ldr	r3, [pc, #548]	; (8008304 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d108      	bne.n	80080fc <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80080ea:	4b86      	ldr	r3, [pc, #536]	; (8008304 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80080ec:	685b      	ldr	r3, [r3, #4]
 80080ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80080f2:	4a85      	ldr	r2, [pc, #532]	; (8008308 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80080f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80080f8:	613b      	str	r3, [r7, #16]
 80080fa:	e007      	b.n	800810c <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80080fc:	4b81      	ldr	r3, [pc, #516]	; (8008304 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008104:	4a81      	ldr	r2, [pc, #516]	; (800830c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8008106:	fbb2 f3f3 	udiv	r3, r2, r3
 800810a:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800810c:	4b7d      	ldr	r3, [pc, #500]	; (8008304 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800810e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008112:	0e1b      	lsrs	r3, r3, #24
 8008114:	f003 030f 	and.w	r3, r3, #15
 8008118:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800811a:	4b7a      	ldr	r3, [pc, #488]	; (8008304 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800811c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008120:	099b      	lsrs	r3, r3, #6
 8008122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008126:	693a      	ldr	r2, [r7, #16]
 8008128:	fb02 f203 	mul.w	r2, r2, r3
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008132:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8008134:	4b73      	ldr	r3, [pc, #460]	; (8008304 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008136:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800813a:	0a1b      	lsrs	r3, r3, #8
 800813c:	f003 031f 	and.w	r3, r3, #31
 8008140:	3301      	adds	r3, #1
 8008142:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008144:	697a      	ldr	r2, [r7, #20]
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	fbb2 f3f3 	udiv	r3, r2, r3
 800814c:	617b      	str	r3, [r7, #20]
        break;
 800814e:	e03d      	b.n	80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008150:	4b6c      	ldr	r3, [pc, #432]	; (8008304 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008152:	685b      	ldr	r3, [r3, #4]
 8008154:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008158:	2b00      	cmp	r3, #0
 800815a:	d108      	bne.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800815c:	4b69      	ldr	r3, [pc, #420]	; (8008304 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008164:	4a68      	ldr	r2, [pc, #416]	; (8008308 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8008166:	fbb2 f3f3 	udiv	r3, r2, r3
 800816a:	613b      	str	r3, [r7, #16]
 800816c:	e007      	b.n	800817e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800816e:	4b65      	ldr	r3, [pc, #404]	; (8008304 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008176:	4a65      	ldr	r2, [pc, #404]	; (800830c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8008178:	fbb2 f3f3 	udiv	r3, r2, r3
 800817c:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800817e:	4b61      	ldr	r3, [pc, #388]	; (8008304 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008180:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008184:	0e1b      	lsrs	r3, r3, #24
 8008186:	f003 030f 	and.w	r3, r3, #15
 800818a:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800818c:	4b5d      	ldr	r3, [pc, #372]	; (8008304 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800818e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008192:	099b      	lsrs	r3, r3, #6
 8008194:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008198:	693a      	ldr	r2, [r7, #16]
 800819a:	fb02 f203 	mul.w	r2, r2, r3
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80081a4:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80081a6:	4b57      	ldr	r3, [pc, #348]	; (8008304 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80081a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081ac:	f003 031f 	and.w	r3, r3, #31
 80081b0:	3301      	adds	r3, #1
 80081b2:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80081b4:	697a      	ldr	r2, [r7, #20]
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80081bc:	617b      	str	r3, [r7, #20]
        break;
 80081be:	e005      	b.n	80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        frequency = EXTERNAL_CLOCK_VALUE;
 80081c0:	4b53      	ldr	r3, [pc, #332]	; (8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80081c2:	617b      	str	r3, [r7, #20]
        break;
 80081c4:	e002      	b.n	80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      }
    }
  }
 80081c6:	bf00      	nop
 80081c8:	e000      	b.n	80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        break;
 80081ca:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80081d2:	f040 808c 	bne.w	80082ee <HAL_RCCEx_GetPeriphCLKFreq+0x262>
  {
    saiclocksource = RCC->DCKCFGR1;
 80081d6:	4b4b      	ldr	r3, [pc, #300]	; (8008304 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80081d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081dc:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80081e4:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80081ec:	d07c      	beq.n	80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80081f4:	d87d      	bhi.n	80082f2 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d004      	beq.n	8008206 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008202:	d039      	beq.n	8008278 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8008204:	e075      	b.n	80082f2 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008206:	4b3f      	ldr	r3, [pc, #252]	; (8008304 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008208:	685b      	ldr	r3, [r3, #4]
 800820a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800820e:	2b00      	cmp	r3, #0
 8008210:	d108      	bne.n	8008224 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008212:	4b3c      	ldr	r3, [pc, #240]	; (8008304 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008214:	685b      	ldr	r3, [r3, #4]
 8008216:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800821a:	4a3b      	ldr	r2, [pc, #236]	; (8008308 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800821c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008220:	613b      	str	r3, [r7, #16]
 8008222:	e007      	b.n	8008234 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008224:	4b37      	ldr	r3, [pc, #220]	; (8008304 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800822c:	4a37      	ldr	r2, [pc, #220]	; (800830c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800822e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008232:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8008234:	4b33      	ldr	r3, [pc, #204]	; (8008304 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800823a:	0e1b      	lsrs	r3, r3, #24
 800823c:	f003 030f 	and.w	r3, r3, #15
 8008240:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8008242:	4b30      	ldr	r3, [pc, #192]	; (8008304 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008244:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008248:	099b      	lsrs	r3, r3, #6
 800824a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800824e:	693a      	ldr	r2, [r7, #16]
 8008250:	fb02 f203 	mul.w	r2, r2, r3
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	fbb2 f3f3 	udiv	r3, r2, r3
 800825a:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800825c:	4b29      	ldr	r3, [pc, #164]	; (8008304 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800825e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008262:	0a1b      	lsrs	r3, r3, #8
 8008264:	f003 031f 	and.w	r3, r3, #31
 8008268:	3301      	adds	r3, #1
 800826a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800826c:	697a      	ldr	r2, [r7, #20]
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	fbb2 f3f3 	udiv	r3, r2, r3
 8008274:	617b      	str	r3, [r7, #20]
        break;
 8008276:	e03d      	b.n	80082f4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008278:	4b22      	ldr	r3, [pc, #136]	; (8008304 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800827a:	685b      	ldr	r3, [r3, #4]
 800827c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008280:	2b00      	cmp	r3, #0
 8008282:	d108      	bne.n	8008296 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008284:	4b1f      	ldr	r3, [pc, #124]	; (8008304 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800828c:	4a1e      	ldr	r2, [pc, #120]	; (8008308 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800828e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008292:	613b      	str	r3, [r7, #16]
 8008294:	e007      	b.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008296:	4b1b      	ldr	r3, [pc, #108]	; (8008304 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008298:	685b      	ldr	r3, [r3, #4]
 800829a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800829e:	4a1b      	ldr	r2, [pc, #108]	; (800830c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80082a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80082a4:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80082a6:	4b17      	ldr	r3, [pc, #92]	; (8008304 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80082a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082ac:	0e1b      	lsrs	r3, r3, #24
 80082ae:	f003 030f 	and.w	r3, r3, #15
 80082b2:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80082b4:	4b13      	ldr	r3, [pc, #76]	; (8008304 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80082b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082ba:	099b      	lsrs	r3, r3, #6
 80082bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082c0:	693a      	ldr	r2, [r7, #16]
 80082c2:	fb02 f203 	mul.w	r2, r2, r3
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80082cc:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80082ce:	4b0d      	ldr	r3, [pc, #52]	; (8008304 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80082d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082d4:	f003 031f 	and.w	r3, r3, #31
 80082d8:	3301      	adds	r3, #1
 80082da:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80082dc:	697a      	ldr	r2, [r7, #20]
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80082e4:	617b      	str	r3, [r7, #20]
        break;
 80082e6:	e005      	b.n	80082f4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        frequency = EXTERNAL_CLOCK_VALUE;
 80082e8:	4b09      	ldr	r3, [pc, #36]	; (8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80082ea:	617b      	str	r3, [r7, #20]
        break;
 80082ec:	e002      	b.n	80082f4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
      }
    }
  }
 80082ee:	bf00      	nop
 80082f0:	e000      	b.n	80082f4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        break;
 80082f2:	bf00      	nop

  return frequency;
 80082f4:	697b      	ldr	r3, [r7, #20]
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	371c      	adds	r7, #28
 80082fa:	46bd      	mov	sp, r7
 80082fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008300:	4770      	bx	lr
 8008302:	bf00      	nop
 8008304:	40023800 	.word	0x40023800
 8008308:	00f42400 	.word	0x00f42400
 800830c:	017d7840 	.word	0x017d7840
 8008310:	00bb8000 	.word	0x00bb8000

08008314 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b082      	sub	sp, #8
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d101      	bne.n	8008326 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8008322:	2301      	movs	r3, #1
 8008324:	e081      	b.n	800842a <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	7f5b      	ldrb	r3, [r3, #29]
 800832a:	b2db      	uxtb	r3, r3
 800832c:	2b00      	cmp	r3, #0
 800832e:	d105      	bne.n	800833c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2200      	movs	r2, #0
 8008334:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f7fa f956 	bl	80025e8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2202      	movs	r2, #2
 8008340:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	22ca      	movs	r2, #202	; 0xca
 8008348:	625a      	str	r2, [r3, #36]	; 0x24
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	2253      	movs	r2, #83	; 0x53
 8008350:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f000 fb16 	bl	8008984 <RTC_EnterInitMode>
 8008358:	4603      	mov	r3, r0
 800835a:	2b00      	cmp	r3, #0
 800835c:	d008      	beq.n	8008370 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	22ff      	movs	r2, #255	; 0xff
 8008364:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2204      	movs	r2, #4
 800836a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800836c:	2301      	movs	r3, #1
 800836e:	e05c      	b.n	800842a <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	6899      	ldr	r1, [r3, #8]
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681a      	ldr	r2, [r3, #0]
 800837a:	4b2e      	ldr	r3, [pc, #184]	; (8008434 <HAL_RTC_Init+0x120>)
 800837c:	400b      	ands	r3, r1
 800837e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	6899      	ldr	r1, [r3, #8]
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	685a      	ldr	r2, [r3, #4]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	691b      	ldr	r3, [r3, #16]
 800838e:	431a      	orrs	r2, r3
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	695b      	ldr	r3, [r3, #20]
 8008394:	431a      	orrs	r2, r3
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	430a      	orrs	r2, r1
 800839c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	687a      	ldr	r2, [r7, #4]
 80083a4:	68d2      	ldr	r2, [r2, #12]
 80083a6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	6919      	ldr	r1, [r3, #16]
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	689b      	ldr	r3, [r3, #8]
 80083b2:	041a      	lsls	r2, r3, #16
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	430a      	orrs	r2, r1
 80083ba:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	68da      	ldr	r2, [r3, #12]
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80083ca:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	689b      	ldr	r3, [r3, #8]
 80083d2:	f003 0320 	and.w	r3, r3, #32
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d10e      	bne.n	80083f8 <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f000 faaa 	bl	8008934 <HAL_RTC_WaitForSynchro>
 80083e0:	4603      	mov	r3, r0
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d008      	beq.n	80083f8 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	22ff      	movs	r2, #255	; 0xff
 80083ec:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2204      	movs	r2, #4
 80083f2:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80083f4:	2301      	movs	r3, #1
 80083f6:	e018      	b.n	800842a <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f022 0208 	bic.w	r2, r2, #8
 8008406:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	699a      	ldr	r2, [r3, #24]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	430a      	orrs	r2, r1
 8008418:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	22ff      	movs	r2, #255	; 0xff
 8008420:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2201      	movs	r2, #1
 8008426:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8008428:	2300      	movs	r3, #0
  }
}
 800842a:	4618      	mov	r0, r3
 800842c:	3708      	adds	r7, #8
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}
 8008432:	bf00      	nop
 8008434:	ff8fffbf 	.word	0xff8fffbf

08008438 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008438:	b590      	push	{r4, r7, lr}
 800843a:	b087      	sub	sp, #28
 800843c:	af00      	add	r7, sp, #0
 800843e:	60f8      	str	r0, [r7, #12]
 8008440:	60b9      	str	r1, [r7, #8]
 8008442:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008444:	2300      	movs	r3, #0
 8008446:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	7f1b      	ldrb	r3, [r3, #28]
 800844c:	2b01      	cmp	r3, #1
 800844e:	d101      	bne.n	8008454 <HAL_RTC_SetTime+0x1c>
 8008450:	2302      	movs	r3, #2
 8008452:	e0a8      	b.n	80085a6 <HAL_RTC_SetTime+0x16e>
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	2201      	movs	r2, #1
 8008458:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2202      	movs	r2, #2
 800845e:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d126      	bne.n	80084b4 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	689b      	ldr	r3, [r3, #8]
 800846c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008470:	2b00      	cmp	r3, #0
 8008472:	d102      	bne.n	800847a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	2200      	movs	r2, #0
 8008478:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	781b      	ldrb	r3, [r3, #0]
 800847e:	4618      	mov	r0, r3
 8008480:	f000 faac 	bl	80089dc <RTC_ByteToBcd2>
 8008484:	4603      	mov	r3, r0
 8008486:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	785b      	ldrb	r3, [r3, #1]
 800848c:	4618      	mov	r0, r3
 800848e:	f000 faa5 	bl	80089dc <RTC_ByteToBcd2>
 8008492:	4603      	mov	r3, r0
 8008494:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8008496:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	789b      	ldrb	r3, [r3, #2]
 800849c:	4618      	mov	r0, r3
 800849e:	f000 fa9d 	bl	80089dc <RTC_ByteToBcd2>
 80084a2:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80084a4:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	7b1b      	ldrb	r3, [r3, #12]
 80084ac:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80084ae:	4313      	orrs	r3, r2
 80084b0:	617b      	str	r3, [r7, #20]
 80084b2:	e018      	b.n	80084e6 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	689b      	ldr	r3, [r3, #8]
 80084ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d102      	bne.n	80084c8 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	2200      	movs	r2, #0
 80084c6:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	781b      	ldrb	r3, [r3, #0]
 80084cc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	785b      	ldrb	r3, [r3, #1]
 80084d2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80084d4:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80084d6:	68ba      	ldr	r2, [r7, #8]
 80084d8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 80084da:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	7b1b      	ldrb	r3, [r3, #12]
 80084e0:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80084e2:	4313      	orrs	r3, r2
 80084e4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	22ca      	movs	r2, #202	; 0xca
 80084ec:	625a      	str	r2, [r3, #36]	; 0x24
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	2253      	movs	r2, #83	; 0x53
 80084f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80084f6:	68f8      	ldr	r0, [r7, #12]
 80084f8:	f000 fa44 	bl	8008984 <RTC_EnterInitMode>
 80084fc:	4603      	mov	r3, r0
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d00b      	beq.n	800851a <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	22ff      	movs	r2, #255	; 0xff
 8008508:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	2204      	movs	r2, #4
 800850e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	2200      	movs	r2, #0
 8008514:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008516:	2301      	movs	r3, #1
 8008518:	e045      	b.n	80085a6 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681a      	ldr	r2, [r3, #0]
 800851e:	6979      	ldr	r1, [r7, #20]
 8008520:	4b23      	ldr	r3, [pc, #140]	; (80085b0 <HAL_RTC_SetTime+0x178>)
 8008522:	400b      	ands	r3, r1
 8008524:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	689a      	ldr	r2, [r3, #8]
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008534:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	6899      	ldr	r1, [r3, #8]
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	691a      	ldr	r2, [r3, #16]
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	695b      	ldr	r3, [r3, #20]
 8008544:	431a      	orrs	r2, r3
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	430a      	orrs	r2, r1
 800854c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	68da      	ldr	r2, [r3, #12]
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800855c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	689b      	ldr	r3, [r3, #8]
 8008564:	f003 0320 	and.w	r3, r3, #32
 8008568:	2b00      	cmp	r3, #0
 800856a:	d111      	bne.n	8008590 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800856c:	68f8      	ldr	r0, [r7, #12]
 800856e:	f000 f9e1 	bl	8008934 <HAL_RTC_WaitForSynchro>
 8008572:	4603      	mov	r3, r0
 8008574:	2b00      	cmp	r3, #0
 8008576:	d00b      	beq.n	8008590 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	22ff      	movs	r2, #255	; 0xff
 800857e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	2204      	movs	r2, #4
 8008584:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	2200      	movs	r2, #0
 800858a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800858c:	2301      	movs	r3, #1
 800858e:	e00a      	b.n	80085a6 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	22ff      	movs	r2, #255	; 0xff
 8008596:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	2201      	movs	r2, #1
 800859c:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	2200      	movs	r2, #0
 80085a2:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80085a4:	2300      	movs	r3, #0
  }
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	371c      	adds	r7, #28
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd90      	pop	{r4, r7, pc}
 80085ae:	bf00      	nop
 80085b0:	007f7f7f 	.word	0x007f7f7f

080085b4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80085b4:	b590      	push	{r4, r7, lr}
 80085b6:	b087      	sub	sp, #28
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	60f8      	str	r0, [r7, #12]
 80085bc:	60b9      	str	r1, [r7, #8]
 80085be:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 80085c0:	2300      	movs	r3, #0
 80085c2:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	7f1b      	ldrb	r3, [r3, #28]
 80085c8:	2b01      	cmp	r3, #1
 80085ca:	d101      	bne.n	80085d0 <HAL_RTC_SetDate+0x1c>
 80085cc:	2302      	movs	r3, #2
 80085ce:	e092      	b.n	80086f6 <HAL_RTC_SetDate+0x142>
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	2201      	movs	r2, #1
 80085d4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	2202      	movs	r2, #2
 80085da:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d10e      	bne.n	8008600 <HAL_RTC_SetDate+0x4c>
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	785b      	ldrb	r3, [r3, #1]
 80085e6:	f003 0310 	and.w	r3, r3, #16
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d008      	beq.n	8008600 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	785b      	ldrb	r3, [r3, #1]
 80085f2:	f023 0310 	bic.w	r3, r3, #16
 80085f6:	b2db      	uxtb	r3, r3
 80085f8:	330a      	adds	r3, #10
 80085fa:	b2da      	uxtb	r2, r3
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d11c      	bne.n	8008640 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	78db      	ldrb	r3, [r3, #3]
 800860a:	4618      	mov	r0, r3
 800860c:	f000 f9e6 	bl	80089dc <RTC_ByteToBcd2>
 8008610:	4603      	mov	r3, r0
 8008612:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	785b      	ldrb	r3, [r3, #1]
 8008618:	4618      	mov	r0, r3
 800861a:	f000 f9df 	bl	80089dc <RTC_ByteToBcd2>
 800861e:	4603      	mov	r3, r0
 8008620:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008622:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	789b      	ldrb	r3, [r3, #2]
 8008628:	4618      	mov	r0, r3
 800862a:	f000 f9d7 	bl	80089dc <RTC_ByteToBcd2>
 800862e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8008630:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	781b      	ldrb	r3, [r3, #0]
 8008638:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800863a:	4313      	orrs	r3, r2
 800863c:	617b      	str	r3, [r7, #20]
 800863e:	e00e      	b.n	800865e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	78db      	ldrb	r3, [r3, #3]
 8008644:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	785b      	ldrb	r3, [r3, #1]
 800864a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800864c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800864e:	68ba      	ldr	r2, [r7, #8]
 8008650:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8008652:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	781b      	ldrb	r3, [r3, #0]
 8008658:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800865a:	4313      	orrs	r3, r2
 800865c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	22ca      	movs	r2, #202	; 0xca
 8008664:	625a      	str	r2, [r3, #36]	; 0x24
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	2253      	movs	r2, #83	; 0x53
 800866c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800866e:	68f8      	ldr	r0, [r7, #12]
 8008670:	f000 f988 	bl	8008984 <RTC_EnterInitMode>
 8008674:	4603      	mov	r3, r0
 8008676:	2b00      	cmp	r3, #0
 8008678:	d00b      	beq.n	8008692 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	22ff      	movs	r2, #255	; 0xff
 8008680:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	2204      	movs	r2, #4
 8008686:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2200      	movs	r2, #0
 800868c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800868e:	2301      	movs	r3, #1
 8008690:	e031      	b.n	80086f6 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681a      	ldr	r2, [r3, #0]
 8008696:	6979      	ldr	r1, [r7, #20]
 8008698:	4b19      	ldr	r3, [pc, #100]	; (8008700 <HAL_RTC_SetDate+0x14c>)
 800869a:	400b      	ands	r3, r1
 800869c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	68da      	ldr	r2, [r3, #12]
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80086ac:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	689b      	ldr	r3, [r3, #8]
 80086b4:	f003 0320 	and.w	r3, r3, #32
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d111      	bne.n	80086e0 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80086bc:	68f8      	ldr	r0, [r7, #12]
 80086be:	f000 f939 	bl	8008934 <HAL_RTC_WaitForSynchro>
 80086c2:	4603      	mov	r3, r0
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d00b      	beq.n	80086e0 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	22ff      	movs	r2, #255	; 0xff
 80086ce:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	2204      	movs	r2, #4
 80086d4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	2200      	movs	r2, #0
 80086da:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80086dc:	2301      	movs	r3, #1
 80086de:	e00a      	b.n	80086f6 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	22ff      	movs	r2, #255	; 0xff
 80086e6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	2201      	movs	r2, #1
 80086ec:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	2200      	movs	r2, #0
 80086f2:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80086f4:	2300      	movs	r3, #0
  }
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	371c      	adds	r7, #28
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd90      	pop	{r4, r7, pc}
 80086fe:	bf00      	nop
 8008700:	00ffff3f 	.word	0x00ffff3f

08008704 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008704:	b590      	push	{r4, r7, lr}
 8008706:	b089      	sub	sp, #36	; 0x24
 8008708:	af00      	add	r7, sp, #0
 800870a:	60f8      	str	r0, [r7, #12]
 800870c:	60b9      	str	r1, [r7, #8]
 800870e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8008710:	2300      	movs	r3, #0
 8008712:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8008714:	2300      	movs	r3, #0
 8008716:	61fb      	str	r3, [r7, #28]
 8008718:	2300      	movs	r3, #0
 800871a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	7f1b      	ldrb	r3, [r3, #28]
 8008720:	2b01      	cmp	r3, #1
 8008722:	d101      	bne.n	8008728 <HAL_RTC_SetAlarm+0x24>
 8008724:	2302      	movs	r3, #2
 8008726:	e101      	b.n	800892c <HAL_RTC_SetAlarm+0x228>
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	2201      	movs	r2, #1
 800872c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	2202      	movs	r2, #2
 8008732:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d137      	bne.n	80087aa <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	689b      	ldr	r3, [r3, #8]
 8008740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008744:	2b00      	cmp	r3, #0
 8008746:	d102      	bne.n	800874e <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	2200      	movs	r2, #0
 800874c:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	781b      	ldrb	r3, [r3, #0]
 8008752:	4618      	mov	r0, r3
 8008754:	f000 f942 	bl	80089dc <RTC_ByteToBcd2>
 8008758:	4603      	mov	r3, r0
 800875a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	785b      	ldrb	r3, [r3, #1]
 8008760:	4618      	mov	r0, r3
 8008762:	f000 f93b 	bl	80089dc <RTC_ByteToBcd2>
 8008766:	4603      	mov	r3, r0
 8008768:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800876a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	789b      	ldrb	r3, [r3, #2]
 8008770:	4618      	mov	r0, r3
 8008772:	f000 f933 	bl	80089dc <RTC_ByteToBcd2>
 8008776:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8008778:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	7b1b      	ldrb	r3, [r3, #12]
 8008780:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8008782:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800878c:	4618      	mov	r0, r3
 800878e:	f000 f925 	bl	80089dc <RTC_ByteToBcd2>
 8008792:	4603      	mov	r3, r0
 8008794:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008796:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800879e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80087a4:	4313      	orrs	r3, r2
 80087a6:	61fb      	str	r3, [r7, #28]
 80087a8:	e023      	b.n	80087f2 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	689b      	ldr	r3, [r3, #8]
 80087b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d102      	bne.n	80087be <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	2200      	movs	r2, #0
 80087bc:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	781b      	ldrb	r3, [r3, #0]
 80087c2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	785b      	ldrb	r3, [r3, #1]
 80087c8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80087ca:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80087cc:	68ba      	ldr	r2, [r7, #8]
 80087ce:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 80087d0:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	7b1b      	ldrb	r3, [r3, #12]
 80087d6:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80087d8:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80087e0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80087e2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 80087e8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80087ee:	4313      	orrs	r3, r2
 80087f0:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	685a      	ldr	r2, [r3, #4]
 80087f6:	68bb      	ldr	r3, [r7, #8]
 80087f8:	69db      	ldr	r3, [r3, #28]
 80087fa:	4313      	orrs	r3, r2
 80087fc:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	22ca      	movs	r2, #202	; 0xca
 8008804:	625a      	str	r2, [r3, #36]	; 0x24
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	2253      	movs	r2, #83	; 0x53
 800880c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008812:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008816:	d13f      	bne.n	8008898 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	689a      	ldr	r2, [r3, #8]
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008826:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	689a      	ldr	r2, [r3, #8]
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008836:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008838:	f7fb fba2 	bl	8003f80 <HAL_GetTick>
 800883c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800883e:	e013      	b.n	8008868 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008840:	f7fb fb9e 	bl	8003f80 <HAL_GetTick>
 8008844:	4602      	mov	r2, r0
 8008846:	69bb      	ldr	r3, [r7, #24]
 8008848:	1ad3      	subs	r3, r2, r3
 800884a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800884e:	d90b      	bls.n	8008868 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	22ff      	movs	r2, #255	; 0xff
 8008856:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	2203      	movs	r2, #3
 800885c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	2200      	movs	r2, #0
 8008862:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008864:	2303      	movs	r3, #3
 8008866:	e061      	b.n	800892c <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	68db      	ldr	r3, [r3, #12]
 800886e:	f003 0301 	and.w	r3, r3, #1
 8008872:	2b00      	cmp	r3, #0
 8008874:	d0e4      	beq.n	8008840 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	69fa      	ldr	r2, [r7, #28]
 800887c:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	697a      	ldr	r2, [r7, #20]
 8008884:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	689a      	ldr	r2, [r3, #8]
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008894:	609a      	str	r2, [r3, #8]
 8008896:	e03e      	b.n	8008916 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	689a      	ldr	r2, [r3, #8]
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80088a6:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	689a      	ldr	r2, [r3, #8]
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80088b6:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 80088b8:	f7fb fb62 	bl	8003f80 <HAL_GetTick>
 80088bc:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80088be:	e013      	b.n	80088e8 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80088c0:	f7fb fb5e 	bl	8003f80 <HAL_GetTick>
 80088c4:	4602      	mov	r2, r0
 80088c6:	69bb      	ldr	r3, [r7, #24]
 80088c8:	1ad3      	subs	r3, r2, r3
 80088ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80088ce:	d90b      	bls.n	80088e8 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	22ff      	movs	r2, #255	; 0xff
 80088d6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2203      	movs	r2, #3
 80088dc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	2200      	movs	r2, #0
 80088e2:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80088e4:	2303      	movs	r3, #3
 80088e6:	e021      	b.n	800892c <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	68db      	ldr	r3, [r3, #12]
 80088ee:	f003 0302 	and.w	r3, r3, #2
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d0e4      	beq.n	80088c0 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	69fa      	ldr	r2, [r7, #28]
 80088fc:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	697a      	ldr	r2, [r7, #20]
 8008904:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	689a      	ldr	r2, [r3, #8]
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008914:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	22ff      	movs	r2, #255	; 0xff
 800891c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	2201      	movs	r2, #1
 8008922:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	2200      	movs	r2, #0
 8008928:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800892a:	2300      	movs	r3, #0
}
 800892c:	4618      	mov	r0, r3
 800892e:	3724      	adds	r7, #36	; 0x24
 8008930:	46bd      	mov	sp, r7
 8008932:	bd90      	pop	{r4, r7, pc}

08008934 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b084      	sub	sp, #16
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800893c:	2300      	movs	r3, #0
 800893e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	68da      	ldr	r2, [r3, #12]
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800894e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008950:	f7fb fb16 	bl	8003f80 <HAL_GetTick>
 8008954:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008956:	e009      	b.n	800896c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008958:	f7fb fb12 	bl	8003f80 <HAL_GetTick>
 800895c:	4602      	mov	r2, r0
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	1ad3      	subs	r3, r2, r3
 8008962:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008966:	d901      	bls.n	800896c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8008968:	2303      	movs	r3, #3
 800896a:	e007      	b.n	800897c <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	68db      	ldr	r3, [r3, #12]
 8008972:	f003 0320 	and.w	r3, r3, #32
 8008976:	2b00      	cmp	r3, #0
 8008978:	d0ee      	beq.n	8008958 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800897a:	2300      	movs	r3, #0
}
 800897c:	4618      	mov	r0, r3
 800897e:	3710      	adds	r7, #16
 8008980:	46bd      	mov	sp, r7
 8008982:	bd80      	pop	{r7, pc}

08008984 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b084      	sub	sp, #16
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800898c:	2300      	movs	r3, #0
 800898e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	68db      	ldr	r3, [r3, #12]
 8008996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800899a:	2b00      	cmp	r3, #0
 800899c:	d119      	bne.n	80089d2 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f04f 32ff 	mov.w	r2, #4294967295
 80089a6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80089a8:	f7fb faea 	bl	8003f80 <HAL_GetTick>
 80089ac:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80089ae:	e009      	b.n	80089c4 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80089b0:	f7fb fae6 	bl	8003f80 <HAL_GetTick>
 80089b4:	4602      	mov	r2, r0
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	1ad3      	subs	r3, r2, r3
 80089ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80089be:	d901      	bls.n	80089c4 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80089c0:	2303      	movs	r3, #3
 80089c2:	e007      	b.n	80089d4 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	68db      	ldr	r3, [r3, #12]
 80089ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d0ee      	beq.n	80089b0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80089d2:	2300      	movs	r3, #0
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	3710      	adds	r7, #16
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}

080089dc <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80089dc:	b480      	push	{r7}
 80089de:	b085      	sub	sp, #20
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	4603      	mov	r3, r0
 80089e4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 80089e6:	2300      	movs	r3, #0
 80089e8:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 80089ea:	e005      	b.n	80089f8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	3301      	adds	r3, #1
 80089f0:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 80089f2:	79fb      	ldrb	r3, [r7, #7]
 80089f4:	3b0a      	subs	r3, #10
 80089f6:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 80089f8:	79fb      	ldrb	r3, [r7, #7]
 80089fa:	2b09      	cmp	r3, #9
 80089fc:	d8f6      	bhi.n	80089ec <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	b2db      	uxtb	r3, r3
 8008a02:	011b      	lsls	r3, r3, #4
 8008a04:	b2da      	uxtb	r2, r3
 8008a06:	79fb      	ldrb	r3, [r7, #7]
 8008a08:	4313      	orrs	r3, r2
 8008a0a:	b2db      	uxtb	r3, r3
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3714      	adds	r7, #20
 8008a10:	46bd      	mov	sp, r7
 8008a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a16:	4770      	bx	lr

08008a18 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b087      	sub	sp, #28
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	60f8      	str	r0, [r7, #12]
 8008a20:	60b9      	str	r1, [r7, #8]
 8008a22:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008a24:	2300      	movs	r3, #0
 8008a26:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	7f1b      	ldrb	r3, [r3, #28]
 8008a2c:	2b01      	cmp	r3, #1
 8008a2e:	d101      	bne.n	8008a34 <HAL_RTCEx_SetTimeStamp+0x1c>
 8008a30:	2302      	movs	r3, #2
 8008a32:	e03e      	b.n	8008ab2 <HAL_RTCEx_SetTimeStamp+0x9a>
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	2201      	movs	r2, #1
 8008a38:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	2202      	movs	r2, #2
 8008a3e:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	689a      	ldr	r2, [r3, #8]
 8008a46:	4b1e      	ldr	r3, [pc, #120]	; (8008ac0 <HAL_RTCEx_SetTimeStamp+0xa8>)
 8008a48:	4013      	ands	r3, r2
 8008a4a:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 8008a4c:	697a      	ldr	r2, [r7, #20]
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	4313      	orrs	r3, r2
 8008a52:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	22ca      	movs	r2, #202	; 0xca
 8008a5a:	625a      	str	r2, [r3, #36]	; 0x24
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	2253      	movs	r2, #83	; 0x53
 8008a62:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f022 0206 	bic.w	r2, r2, #6
 8008a72:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	687a      	ldr	r2, [r7, #4]
 8008a80:	430a      	orrs	r2, r1
 8008a82:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	697a      	ldr	r2, [r7, #20]
 8008a8a:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	689a      	ldr	r2, [r3, #8]
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a9a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	22ff      	movs	r2, #255	; 0xff
 8008aa2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	2201      	movs	r2, #1
 8008aa8:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	2200      	movs	r2, #0
 8008aae:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008ab0:	2300      	movs	r3, #0
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	371c      	adds	r7, #28
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abc:	4770      	bx	lr
 8008abe:	bf00      	nop
 8008ac0:	fffff7f7 	.word	0xfffff7f7

08008ac4 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b088      	sub	sp, #32
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8008acc:	2300      	movs	r3, #0
 8008ace:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d101      	bne.n	8008ae2 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8008ade:	2301      	movs	r3, #1
 8008ae0:	e156      	b.n	8008d90 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8008ae8:	b2db      	uxtb	r3, r3
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d106      	bne.n	8008afc <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2200      	movs	r2, #0
 8008af2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f7fa f8ec 	bl	8002cd4 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2202      	movs	r2, #2
 8008b00:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f000 f95b 	bl	8008dc0 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	68db      	ldr	r3, [r3, #12]
 8008b0e:	2b02      	cmp	r3, #2
 8008b10:	d00c      	beq.n	8008b2c <HAL_SAI_Init+0x68>
 8008b12:	2b02      	cmp	r3, #2
 8008b14:	d80d      	bhi.n	8008b32 <HAL_SAI_Init+0x6e>
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d002      	beq.n	8008b20 <HAL_SAI_Init+0x5c>
 8008b1a:	2b01      	cmp	r3, #1
 8008b1c:	d003      	beq.n	8008b26 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 8008b1e:	e008      	b.n	8008b32 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8008b20:	2300      	movs	r3, #0
 8008b22:	61fb      	str	r3, [r7, #28]
      break;
 8008b24:	e006      	b.n	8008b34 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8008b26:	2310      	movs	r3, #16
 8008b28:	61fb      	str	r3, [r7, #28]
      break;
 8008b2a:	e003      	b.n	8008b34 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8008b2c:	2320      	movs	r3, #32
 8008b2e:	61fb      	str	r3, [r7, #28]
      break;
 8008b30:	e000      	b.n	8008b34 <HAL_SAI_Init+0x70>
      break;
 8008b32:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	689b      	ldr	r3, [r3, #8]
 8008b38:	2b03      	cmp	r3, #3
 8008b3a:	d81e      	bhi.n	8008b7a <HAL_SAI_Init+0xb6>
 8008b3c:	a201      	add	r2, pc, #4	; (adr r2, 8008b44 <HAL_SAI_Init+0x80>)
 8008b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b42:	bf00      	nop
 8008b44:	08008b55 	.word	0x08008b55
 8008b48:	08008b5b 	.word	0x08008b5b
 8008b4c:	08008b63 	.word	0x08008b63
 8008b50:	08008b6b 	.word	0x08008b6b
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 8008b54:	2300      	movs	r3, #0
 8008b56:	617b      	str	r3, [r7, #20]
    }
    break;
 8008b58:	e010      	b.n	8008b7c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8008b5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b5e:	617b      	str	r3, [r7, #20]
    }
    break;
 8008b60:	e00c      	b.n	8008b7c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008b62:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008b66:	617b      	str	r3, [r7, #20]
    }
    break;
 8008b68:	e008      	b.n	8008b7c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008b6a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008b6e:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8008b70:	69fb      	ldr	r3, [r7, #28]
 8008b72:	f043 0301 	orr.w	r3, r3, #1
 8008b76:	61fb      	str	r3, [r7, #28]
    }
    break;
 8008b78:	e000      	b.n	8008b7c <HAL_SAI_Init+0xb8>
    default:
      break;
 8008b7a:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4a85      	ldr	r2, [pc, #532]	; (8008d98 <HAL_SAI_Init+0x2d4>)
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d004      	beq.n	8008b90 <HAL_SAI_Init+0xcc>
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	4a84      	ldr	r2, [pc, #528]	; (8008d9c <HAL_SAI_Init+0x2d8>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d103      	bne.n	8008b98 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8008b90:	4a83      	ldr	r2, [pc, #524]	; (8008da0 <HAL_SAI_Init+0x2dc>)
 8008b92:	69fb      	ldr	r3, [r7, #28]
 8008b94:	6013      	str	r3, [r2, #0]
 8008b96:	e002      	b.n	8008b9e <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8008b98:	4a82      	ldr	r2, [pc, #520]	; (8008da4 <HAL_SAI_Init+0x2e0>)
 8008b9a:	69fb      	ldr	r3, [r7, #28]
 8008b9c:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	69db      	ldr	r3, [r3, #28]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d04c      	beq.n	8008c40 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	4a7a      	ldr	r2, [pc, #488]	; (8008d98 <HAL_SAI_Init+0x2d4>)
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d004      	beq.n	8008bbe <HAL_SAI_Init+0xfa>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	4a78      	ldr	r2, [pc, #480]	; (8008d9c <HAL_SAI_Init+0x2d8>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d104      	bne.n	8008bc8 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8008bbe:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8008bc2:	f7ff fa63 	bl	800808c <HAL_RCCEx_GetPeriphCLKFreq>
 8008bc6:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	4a76      	ldr	r2, [pc, #472]	; (8008da8 <HAL_SAI_Init+0x2e4>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d004      	beq.n	8008bdc <HAL_SAI_Init+0x118>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	4a75      	ldr	r2, [pc, #468]	; (8008dac <HAL_SAI_Init+0x2e8>)
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	d104      	bne.n	8008be6 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8008bdc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8008be0:	f7ff fa54 	bl	800808c <HAL_RCCEx_GetPeriphCLKFreq>
 8008be4:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8008be6:	693a      	ldr	r2, [r7, #16]
 8008be8:	4613      	mov	r3, r2
 8008bea:	009b      	lsls	r3, r3, #2
 8008bec:	4413      	add	r3, r2
 8008bee:	005b      	lsls	r3, r3, #1
 8008bf0:	461a      	mov	r2, r3
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	69db      	ldr	r3, [r3, #28]
 8008bf6:	025b      	lsls	r3, r3, #9
 8008bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bfc:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	4a6b      	ldr	r2, [pc, #428]	; (8008db0 <HAL_SAI_Init+0x2ec>)
 8008c02:	fba2 2303 	umull	r2, r3, r2, r3
 8008c06:	08da      	lsrs	r2, r3, #3
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8008c0c:	68f9      	ldr	r1, [r7, #12]
 8008c0e:	4b68      	ldr	r3, [pc, #416]	; (8008db0 <HAL_SAI_Init+0x2ec>)
 8008c10:	fba3 2301 	umull	r2, r3, r3, r1
 8008c14:	08da      	lsrs	r2, r3, #3
 8008c16:	4613      	mov	r3, r2
 8008c18:	009b      	lsls	r3, r3, #2
 8008c1a:	4413      	add	r3, r2
 8008c1c:	005b      	lsls	r3, r3, #1
 8008c1e:	1aca      	subs	r2, r1, r3
 8008c20:	2a08      	cmp	r2, #8
 8008c22:	d904      	bls.n	8008c2e <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6a1b      	ldr	r3, [r3, #32]
 8008c28:	1c5a      	adds	r2, r3, #1
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c32:	2b04      	cmp	r3, #4
 8008c34:	d104      	bne.n	8008c40 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6a1b      	ldr	r3, [r3, #32]
 8008c3a:	085a      	lsrs	r2, r3, #1
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	685b      	ldr	r3, [r3, #4]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d003      	beq.n	8008c50 <HAL_SAI_Init+0x18c>
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	685b      	ldr	r3, [r3, #4]
 8008c4c:	2b02      	cmp	r3, #2
 8008c4e:	d109      	bne.n	8008c64 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c54:	2b01      	cmp	r3, #1
 8008c56:	d101      	bne.n	8008c5c <HAL_SAI_Init+0x198>
 8008c58:	2300      	movs	r3, #0
 8008c5a:	e001      	b.n	8008c60 <HAL_SAI_Init+0x19c>
 8008c5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c60:	61bb      	str	r3, [r7, #24]
 8008c62:	e008      	b.n	8008c76 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c68:	2b01      	cmp	r3, #1
 8008c6a:	d102      	bne.n	8008c72 <HAL_SAI_Init+0x1ae>
 8008c6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c70:	e000      	b.n	8008c74 <HAL_SAI_Init+0x1b0>
 8008c72:	2300      	movs	r3, #0
 8008c74:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	6819      	ldr	r1, [r3, #0]
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681a      	ldr	r2, [r3, #0]
 8008c80:	4b4c      	ldr	r3, [pc, #304]	; (8008db4 <HAL_SAI_Init+0x2f0>)
 8008c82:	400b      	ands	r3, r1
 8008c84:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	6819      	ldr	r1, [r3, #0]
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	685a      	ldr	r2, [r3, #4]
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c94:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008c9a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ca0:	431a      	orrs	r2, r3
 8008ca2:	69bb      	ldr	r3, [r7, #24]
 8008ca4:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 8008ca6:	697b      	ldr	r3, [r7, #20]
 8008ca8:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 8008cae:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	691b      	ldr	r3, [r3, #16]
 8008cb4:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008cba:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6a1b      	ldr	r3, [r3, #32]
 8008cc0:	051b      	lsls	r3, r3, #20
 8008cc2:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	430a      	orrs	r2, r1
 8008cca:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	6859      	ldr	r1, [r3, #4]
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681a      	ldr	r2, [r3, #0]
 8008cd6:	4b38      	ldr	r3, [pc, #224]	; (8008db8 <HAL_SAI_Init+0x2f4>)
 8008cd8:	400b      	ands	r3, r1
 8008cda:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	6859      	ldr	r1, [r3, #4]
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	699a      	ldr	r2, [r3, #24]
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cea:	431a      	orrs	r2, r3
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cf0:	431a      	orrs	r2, r3
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	430a      	orrs	r2, r1
 8008cf8:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	6899      	ldr	r1, [r3, #8]
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681a      	ldr	r2, [r3, #0]
 8008d04:	4b2d      	ldr	r3, [pc, #180]	; (8008dbc <HAL_SAI_Init+0x2f8>)
 8008d06:	400b      	ands	r3, r1
 8008d08:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	6899      	ldr	r1, [r3, #8]
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d14:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8008d1a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8008d20:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8008d26:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d2c:	3b01      	subs	r3, #1
 8008d2e:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8008d30:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	430a      	orrs	r2, r1
 8008d38:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	68d9      	ldr	r1, [r3, #12]
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681a      	ldr	r2, [r3, #0]
 8008d44:	f24f 0320 	movw	r3, #61472	; 0xf020
 8008d48:	400b      	ands	r3, r1
 8008d4a:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	68d9      	ldr	r1, [r3, #12]
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d5a:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d60:	041b      	lsls	r3, r3, #16
 8008d62:	431a      	orrs	r2, r3
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d68:	3b01      	subs	r3, #1
 8008d6a:	021b      	lsls	r3, r3, #8
 8008d6c:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	430a      	orrs	r2, r1
 8008d74:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2201      	movs	r2, #1
 8008d82:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008d8e:	2300      	movs	r3, #0
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	3720      	adds	r7, #32
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd80      	pop	{r7, pc}
 8008d98:	40015804 	.word	0x40015804
 8008d9c:	40015824 	.word	0x40015824
 8008da0:	40015800 	.word	0x40015800
 8008da4:	40015c00 	.word	0x40015c00
 8008da8:	40015c04 	.word	0x40015c04
 8008dac:	40015c24 	.word	0x40015c24
 8008db0:	cccccccd 	.word	0xcccccccd
 8008db4:	ff05c010 	.word	0xff05c010
 8008db8:	ffff1ff0 	.word	0xffff1ff0
 8008dbc:	fff88000 	.word	0xfff88000

08008dc0 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	b085      	sub	sp, #20
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8008dc8:	4b17      	ldr	r3, [pc, #92]	; (8008e28 <SAI_Disable+0x68>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	4a17      	ldr	r2, [pc, #92]	; (8008e2c <SAI_Disable+0x6c>)
 8008dce:	fba2 2303 	umull	r2, r3, r2, r3
 8008dd2:	0b1b      	lsrs	r3, r3, #12
 8008dd4:	009b      	lsls	r3, r3, #2
 8008dd6:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8008dd8:	2300      	movs	r3, #0
 8008dda:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	681a      	ldr	r2, [r3, #0]
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008dea:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	1e5a      	subs	r2, r3, #1
 8008df0:	60fa      	str	r2, [r7, #12]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d10a      	bne.n	8008e0c <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008dfc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8008e06:	2303      	movs	r3, #3
 8008e08:	72fb      	strb	r3, [r7, #11]
      break;
 8008e0a:	e006      	b.n	8008e1a <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d1e8      	bne.n	8008dec <SAI_Disable+0x2c>

  return status;
 8008e1a:	7afb      	ldrb	r3, [r7, #11]
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	3714      	adds	r7, #20
 8008e20:	46bd      	mov	sp, r7
 8008e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e26:	4770      	bx	lr
 8008e28:	20000030 	.word	0x20000030
 8008e2c:	95cbec1b 	.word	0x95cbec1b

08008e30 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b082      	sub	sp, #8
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
 8008e38:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d101      	bne.n	8008e44 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008e40:	2301      	movs	r3, #1
 8008e42:	e025      	b.n	8008e90 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008e4a:	b2db      	uxtb	r3, r3
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d106      	bne.n	8008e5e <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2200      	movs	r2, #0
 8008e54:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f7f9 ff31 	bl	8002cc0 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2202      	movs	r2, #2
 8008e62:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681a      	ldr	r2, [r3, #0]
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	3304      	adds	r3, #4
 8008e6e:	4619      	mov	r1, r3
 8008e70:	4610      	mov	r0, r2
 8008e72:	f002 fa11 	bl	800b298 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6818      	ldr	r0, [r3, #0]
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	685b      	ldr	r3, [r3, #4]
 8008e7e:	461a      	mov	r2, r3
 8008e80:	6839      	ldr	r1, [r7, #0]
 8008e82:	f002 fa7b 	bl	800b37c <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2201      	movs	r2, #1
 8008e8a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8008e8e:	2300      	movs	r3, #0
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3708      	adds	r7, #8
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}

08008e98 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b084      	sub	sp, #16
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	60f8      	str	r0, [r7, #12]
 8008ea0:	60b9      	str	r1, [r7, #8]
 8008ea2:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008eaa:	b2db      	uxtb	r3, r3
 8008eac:	2b02      	cmp	r3, #2
 8008eae:	d101      	bne.n	8008eb4 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8008eb0:	2302      	movs	r3, #2
 8008eb2:	e018      	b.n	8008ee6 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	2202      	movs	r2, #2
 8008eb8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	687a      	ldr	r2, [r7, #4]
 8008ec2:	68b9      	ldr	r1, [r7, #8]
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	f002 fad9 	bl	800b47c <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	2b02      	cmp	r3, #2
 8008ed0:	d104      	bne.n	8008edc <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	2205      	movs	r2, #5
 8008ed6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8008eda:	e003      	b.n	8008ee4 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	2201      	movs	r2, #1
 8008ee0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8008ee4:	2300      	movs	r3, #0
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	3710      	adds	r7, #16
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}

08008eee <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8008eee:	b580      	push	{r7, lr}
 8008ef0:	b082      	sub	sp, #8
 8008ef2:	af00      	add	r7, sp, #0
 8008ef4:	6078      	str	r0, [r7, #4]
 8008ef6:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008efe:	b2db      	uxtb	r3, r3
 8008f00:	2b02      	cmp	r3, #2
 8008f02:	d101      	bne.n	8008f08 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8008f04:	2302      	movs	r3, #2
 8008f06:	e00e      	b.n	8008f26 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2202      	movs	r2, #2
 8008f0c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	6839      	ldr	r1, [r7, #0]
 8008f16:	4618      	mov	r0, r3
 8008f18:	f002 fad4 	bl	800b4c4 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2201      	movs	r2, #1
 8008f20:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8008f24:	2300      	movs	r3, #0
}
 8008f26:	4618      	mov	r0, r3
 8008f28:	3708      	adds	r7, #8
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}
	...

08008f30 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b084      	sub	sp, #16
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d101      	bne.n	8008f42 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 8008f3e:	2301      	movs	r3, #1
 8008f40:	e04c      	b.n	8008fdc <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f48:	b2db      	uxtb	r3, r3
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d106      	bne.n	8008f5c <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2200      	movs	r2, #0
 8008f52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f7f9 fb74 	bl	8002644 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2202      	movs	r2, #2
 8008f60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	681a      	ldr	r2, [r3, #0]
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f022 0203 	bic.w	r2, r2, #3
 8008f72:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8008f7c:	68fa      	ldr	r2, [r7, #12]
 8008f7e:	4b19      	ldr	r3, [pc, #100]	; (8008fe4 <HAL_SPDIFRX_Init+0xb4>)
 8008f80:	4013      	ands	r3, r2
 8008f82:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8008f8c:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 8008f92:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8008f98:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 8008f9e:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 8008fa4:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 8008faa:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 8008fb0:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 8008fb6:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 8008fbc:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 8008fbe:	68fa      	ldr	r2, [r7, #12]
 8008fc0:	4313      	orrs	r3, r2
 8008fc2:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	68fa      	ldr	r2, [r7, #12]
 8008fca:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2200      	movs	r2, #0
 8008fd0:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2201      	movs	r2, #1
 8008fd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 8008fda:	2300      	movs	r3, #0
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3710      	adds	r7, #16
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}
 8008fe4:	fff88407 	.word	0xfff88407

08008fe8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b082      	sub	sp, #8
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d101      	bne.n	8008ffa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	e049      	b.n	800908e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009000:	b2db      	uxtb	r3, r3
 8009002:	2b00      	cmp	r3, #0
 8009004:	d106      	bne.n	8009014 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2200      	movs	r2, #0
 800900a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f7f9 fb7c 	bl	800270c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2202      	movs	r2, #2
 8009018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681a      	ldr	r2, [r3, #0]
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	3304      	adds	r3, #4
 8009024:	4619      	mov	r1, r3
 8009026:	4610      	mov	r0, r2
 8009028:	f000 fc22 	bl	8009870 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2201      	movs	r2, #1
 8009030:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2201      	movs	r2, #1
 8009038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2201      	movs	r2, #1
 8009040:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2201      	movs	r2, #1
 8009048:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2201      	movs	r2, #1
 8009050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2201      	movs	r2, #1
 8009058:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2201      	movs	r2, #1
 8009060:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2201      	movs	r2, #1
 8009068:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2201      	movs	r2, #1
 8009070:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2201      	movs	r2, #1
 8009078:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2201      	movs	r2, #1
 8009080:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2201      	movs	r2, #1
 8009088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800908c:	2300      	movs	r3, #0
}
 800908e:	4618      	mov	r0, r3
 8009090:	3708      	adds	r7, #8
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}
	...

08009098 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009098:	b480      	push	{r7}
 800909a:	b085      	sub	sp, #20
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090a6:	b2db      	uxtb	r3, r3
 80090a8:	2b01      	cmp	r3, #1
 80090aa:	d001      	beq.n	80090b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80090ac:	2301      	movs	r3, #1
 80090ae:	e054      	b.n	800915a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2202      	movs	r2, #2
 80090b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	68da      	ldr	r2, [r3, #12]
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f042 0201 	orr.w	r2, r2, #1
 80090c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	4a26      	ldr	r2, [pc, #152]	; (8009168 <HAL_TIM_Base_Start_IT+0xd0>)
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d022      	beq.n	8009118 <HAL_TIM_Base_Start_IT+0x80>
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090da:	d01d      	beq.n	8009118 <HAL_TIM_Base_Start_IT+0x80>
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	4a22      	ldr	r2, [pc, #136]	; (800916c <HAL_TIM_Base_Start_IT+0xd4>)
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d018      	beq.n	8009118 <HAL_TIM_Base_Start_IT+0x80>
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	4a21      	ldr	r2, [pc, #132]	; (8009170 <HAL_TIM_Base_Start_IT+0xd8>)
 80090ec:	4293      	cmp	r3, r2
 80090ee:	d013      	beq.n	8009118 <HAL_TIM_Base_Start_IT+0x80>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	4a1f      	ldr	r2, [pc, #124]	; (8009174 <HAL_TIM_Base_Start_IT+0xdc>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d00e      	beq.n	8009118 <HAL_TIM_Base_Start_IT+0x80>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	4a1e      	ldr	r2, [pc, #120]	; (8009178 <HAL_TIM_Base_Start_IT+0xe0>)
 8009100:	4293      	cmp	r3, r2
 8009102:	d009      	beq.n	8009118 <HAL_TIM_Base_Start_IT+0x80>
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	4a1c      	ldr	r2, [pc, #112]	; (800917c <HAL_TIM_Base_Start_IT+0xe4>)
 800910a:	4293      	cmp	r3, r2
 800910c:	d004      	beq.n	8009118 <HAL_TIM_Base_Start_IT+0x80>
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	4a1b      	ldr	r2, [pc, #108]	; (8009180 <HAL_TIM_Base_Start_IT+0xe8>)
 8009114:	4293      	cmp	r3, r2
 8009116:	d115      	bne.n	8009144 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	689a      	ldr	r2, [r3, #8]
 800911e:	4b19      	ldr	r3, [pc, #100]	; (8009184 <HAL_TIM_Base_Start_IT+0xec>)
 8009120:	4013      	ands	r3, r2
 8009122:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	2b06      	cmp	r3, #6
 8009128:	d015      	beq.n	8009156 <HAL_TIM_Base_Start_IT+0xbe>
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009130:	d011      	beq.n	8009156 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	681a      	ldr	r2, [r3, #0]
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	f042 0201 	orr.w	r2, r2, #1
 8009140:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009142:	e008      	b.n	8009156 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	681a      	ldr	r2, [r3, #0]
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f042 0201 	orr.w	r2, r2, #1
 8009152:	601a      	str	r2, [r3, #0]
 8009154:	e000      	b.n	8009158 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009156:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009158:	2300      	movs	r3, #0
}
 800915a:	4618      	mov	r0, r3
 800915c:	3714      	adds	r7, #20
 800915e:	46bd      	mov	sp, r7
 8009160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009164:	4770      	bx	lr
 8009166:	bf00      	nop
 8009168:	40010000 	.word	0x40010000
 800916c:	40000400 	.word	0x40000400
 8009170:	40000800 	.word	0x40000800
 8009174:	40000c00 	.word	0x40000c00
 8009178:	40010400 	.word	0x40010400
 800917c:	40014000 	.word	0x40014000
 8009180:	40001800 	.word	0x40001800
 8009184:	00010007 	.word	0x00010007

08009188 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b082      	sub	sp, #8
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d101      	bne.n	800919a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009196:	2301      	movs	r3, #1
 8009198:	e049      	b.n	800922e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091a0:	b2db      	uxtb	r3, r3
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d106      	bne.n	80091b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2200      	movs	r2, #0
 80091aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f7f9 fb34 	bl	800281c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2202      	movs	r2, #2
 80091b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681a      	ldr	r2, [r3, #0]
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	3304      	adds	r3, #4
 80091c4:	4619      	mov	r1, r3
 80091c6:	4610      	mov	r0, r2
 80091c8:	f000 fb52 	bl	8009870 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2201      	movs	r2, #1
 80091d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2201      	movs	r2, #1
 80091d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2201      	movs	r2, #1
 80091e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2201      	movs	r2, #1
 80091e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2201      	movs	r2, #1
 80091f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2201      	movs	r2, #1
 80091f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2201      	movs	r2, #1
 8009200:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2201      	movs	r2, #1
 8009208:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2201      	movs	r2, #1
 8009210:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2201      	movs	r2, #1
 8009218:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2201      	movs	r2, #1
 8009220:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2201      	movs	r2, #1
 8009228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800922c:	2300      	movs	r3, #0
}
 800922e:	4618      	mov	r0, r3
 8009230:	3708      	adds	r7, #8
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}

08009236 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009236:	b580      	push	{r7, lr}
 8009238:	b082      	sub	sp, #8
 800923a:	af00      	add	r7, sp, #0
 800923c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	691b      	ldr	r3, [r3, #16]
 8009244:	f003 0302 	and.w	r3, r3, #2
 8009248:	2b02      	cmp	r3, #2
 800924a:	d122      	bne.n	8009292 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	68db      	ldr	r3, [r3, #12]
 8009252:	f003 0302 	and.w	r3, r3, #2
 8009256:	2b02      	cmp	r3, #2
 8009258:	d11b      	bne.n	8009292 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f06f 0202 	mvn.w	r2, #2
 8009262:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2201      	movs	r2, #1
 8009268:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	699b      	ldr	r3, [r3, #24]
 8009270:	f003 0303 	and.w	r3, r3, #3
 8009274:	2b00      	cmp	r3, #0
 8009276:	d003      	beq.n	8009280 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f000 fadb 	bl	8009834 <HAL_TIM_IC_CaptureCallback>
 800927e:	e005      	b.n	800928c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f000 facd 	bl	8009820 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f000 fade 	bl	8009848 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2200      	movs	r2, #0
 8009290:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	691b      	ldr	r3, [r3, #16]
 8009298:	f003 0304 	and.w	r3, r3, #4
 800929c:	2b04      	cmp	r3, #4
 800929e:	d122      	bne.n	80092e6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	68db      	ldr	r3, [r3, #12]
 80092a6:	f003 0304 	and.w	r3, r3, #4
 80092aa:	2b04      	cmp	r3, #4
 80092ac:	d11b      	bne.n	80092e6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f06f 0204 	mvn.w	r2, #4
 80092b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2202      	movs	r2, #2
 80092bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	699b      	ldr	r3, [r3, #24]
 80092c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d003      	beq.n	80092d4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	f000 fab1 	bl	8009834 <HAL_TIM_IC_CaptureCallback>
 80092d2:	e005      	b.n	80092e0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f000 faa3 	bl	8009820 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	f000 fab4 	bl	8009848 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2200      	movs	r2, #0
 80092e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	691b      	ldr	r3, [r3, #16]
 80092ec:	f003 0308 	and.w	r3, r3, #8
 80092f0:	2b08      	cmp	r3, #8
 80092f2:	d122      	bne.n	800933a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	68db      	ldr	r3, [r3, #12]
 80092fa:	f003 0308 	and.w	r3, r3, #8
 80092fe:	2b08      	cmp	r3, #8
 8009300:	d11b      	bne.n	800933a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f06f 0208 	mvn.w	r2, #8
 800930a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2204      	movs	r2, #4
 8009310:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	69db      	ldr	r3, [r3, #28]
 8009318:	f003 0303 	and.w	r3, r3, #3
 800931c:	2b00      	cmp	r3, #0
 800931e:	d003      	beq.n	8009328 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f000 fa87 	bl	8009834 <HAL_TIM_IC_CaptureCallback>
 8009326:	e005      	b.n	8009334 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f000 fa79 	bl	8009820 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	f000 fa8a 	bl	8009848 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2200      	movs	r2, #0
 8009338:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	691b      	ldr	r3, [r3, #16]
 8009340:	f003 0310 	and.w	r3, r3, #16
 8009344:	2b10      	cmp	r3, #16
 8009346:	d122      	bne.n	800938e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	68db      	ldr	r3, [r3, #12]
 800934e:	f003 0310 	and.w	r3, r3, #16
 8009352:	2b10      	cmp	r3, #16
 8009354:	d11b      	bne.n	800938e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f06f 0210 	mvn.w	r2, #16
 800935e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2208      	movs	r2, #8
 8009364:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	69db      	ldr	r3, [r3, #28]
 800936c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009370:	2b00      	cmp	r3, #0
 8009372:	d003      	beq.n	800937c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	f000 fa5d 	bl	8009834 <HAL_TIM_IC_CaptureCallback>
 800937a:	e005      	b.n	8009388 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800937c:	6878      	ldr	r0, [r7, #4]
 800937e:	f000 fa4f 	bl	8009820 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f000 fa60 	bl	8009848 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2200      	movs	r2, #0
 800938c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	691b      	ldr	r3, [r3, #16]
 8009394:	f003 0301 	and.w	r3, r3, #1
 8009398:	2b01      	cmp	r3, #1
 800939a:	d10e      	bne.n	80093ba <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	68db      	ldr	r3, [r3, #12]
 80093a2:	f003 0301 	and.w	r3, r3, #1
 80093a6:	2b01      	cmp	r3, #1
 80093a8:	d107      	bne.n	80093ba <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f06f 0201 	mvn.w	r2, #1
 80093b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f7f7 fa83 	bl	80008c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	691b      	ldr	r3, [r3, #16]
 80093c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093c4:	2b80      	cmp	r3, #128	; 0x80
 80093c6:	d10e      	bne.n	80093e6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	68db      	ldr	r3, [r3, #12]
 80093ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093d2:	2b80      	cmp	r3, #128	; 0x80
 80093d4:	d107      	bne.n	80093e6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80093de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80093e0:	6878      	ldr	r0, [r7, #4]
 80093e2:	f000 fe75 	bl	800a0d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	691b      	ldr	r3, [r3, #16]
 80093ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093f4:	d10e      	bne.n	8009414 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	68db      	ldr	r3, [r3, #12]
 80093fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009400:	2b80      	cmp	r3, #128	; 0x80
 8009402:	d107      	bne.n	8009414 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800940c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f000 fe68 	bl	800a0e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	691b      	ldr	r3, [r3, #16]
 800941a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800941e:	2b40      	cmp	r3, #64	; 0x40
 8009420:	d10e      	bne.n	8009440 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	68db      	ldr	r3, [r3, #12]
 8009428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800942c:	2b40      	cmp	r3, #64	; 0x40
 800942e:	d107      	bne.n	8009440 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009438:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f000 fa0e 	bl	800985c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	691b      	ldr	r3, [r3, #16]
 8009446:	f003 0320 	and.w	r3, r3, #32
 800944a:	2b20      	cmp	r3, #32
 800944c:	d10e      	bne.n	800946c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	68db      	ldr	r3, [r3, #12]
 8009454:	f003 0320 	and.w	r3, r3, #32
 8009458:	2b20      	cmp	r3, #32
 800945a:	d107      	bne.n	800946c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f06f 0220 	mvn.w	r2, #32
 8009464:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	f000 fe28 	bl	800a0bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800946c:	bf00      	nop
 800946e:	3708      	adds	r7, #8
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}

08009474 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b084      	sub	sp, #16
 8009478:	af00      	add	r7, sp, #0
 800947a:	60f8      	str	r0, [r7, #12]
 800947c:	60b9      	str	r1, [r7, #8]
 800947e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009486:	2b01      	cmp	r3, #1
 8009488:	d101      	bne.n	800948e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800948a:	2302      	movs	r3, #2
 800948c:	e0fd      	b.n	800968a <HAL_TIM_PWM_ConfigChannel+0x216>
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	2201      	movs	r2, #1
 8009492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2b14      	cmp	r3, #20
 800949a:	f200 80f0 	bhi.w	800967e <HAL_TIM_PWM_ConfigChannel+0x20a>
 800949e:	a201      	add	r2, pc, #4	; (adr r2, 80094a4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80094a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094a4:	080094f9 	.word	0x080094f9
 80094a8:	0800967f 	.word	0x0800967f
 80094ac:	0800967f 	.word	0x0800967f
 80094b0:	0800967f 	.word	0x0800967f
 80094b4:	08009539 	.word	0x08009539
 80094b8:	0800967f 	.word	0x0800967f
 80094bc:	0800967f 	.word	0x0800967f
 80094c0:	0800967f 	.word	0x0800967f
 80094c4:	0800957b 	.word	0x0800957b
 80094c8:	0800967f 	.word	0x0800967f
 80094cc:	0800967f 	.word	0x0800967f
 80094d0:	0800967f 	.word	0x0800967f
 80094d4:	080095bb 	.word	0x080095bb
 80094d8:	0800967f 	.word	0x0800967f
 80094dc:	0800967f 	.word	0x0800967f
 80094e0:	0800967f 	.word	0x0800967f
 80094e4:	080095fd 	.word	0x080095fd
 80094e8:	0800967f 	.word	0x0800967f
 80094ec:	0800967f 	.word	0x0800967f
 80094f0:	0800967f 	.word	0x0800967f
 80094f4:	0800963d 	.word	0x0800963d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	68b9      	ldr	r1, [r7, #8]
 80094fe:	4618      	mov	r0, r3
 8009500:	f000 fa56 	bl	80099b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	699a      	ldr	r2, [r3, #24]
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f042 0208 	orr.w	r2, r2, #8
 8009512:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	699a      	ldr	r2, [r3, #24]
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f022 0204 	bic.w	r2, r2, #4
 8009522:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	6999      	ldr	r1, [r3, #24]
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	691a      	ldr	r2, [r3, #16]
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	430a      	orrs	r2, r1
 8009534:	619a      	str	r2, [r3, #24]
      break;
 8009536:	e0a3      	b.n	8009680 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	68b9      	ldr	r1, [r7, #8]
 800953e:	4618      	mov	r0, r3
 8009540:	f000 faa8 	bl	8009a94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	699a      	ldr	r2, [r3, #24]
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009552:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	699a      	ldr	r2, [r3, #24]
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009562:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	6999      	ldr	r1, [r3, #24]
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	691b      	ldr	r3, [r3, #16]
 800956e:	021a      	lsls	r2, r3, #8
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	430a      	orrs	r2, r1
 8009576:	619a      	str	r2, [r3, #24]
      break;
 8009578:	e082      	b.n	8009680 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	68b9      	ldr	r1, [r7, #8]
 8009580:	4618      	mov	r0, r3
 8009582:	f000 faff 	bl	8009b84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	69da      	ldr	r2, [r3, #28]
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f042 0208 	orr.w	r2, r2, #8
 8009594:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	69da      	ldr	r2, [r3, #28]
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	f022 0204 	bic.w	r2, r2, #4
 80095a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	69d9      	ldr	r1, [r3, #28]
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	691a      	ldr	r2, [r3, #16]
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	430a      	orrs	r2, r1
 80095b6:	61da      	str	r2, [r3, #28]
      break;
 80095b8:	e062      	b.n	8009680 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	68b9      	ldr	r1, [r7, #8]
 80095c0:	4618      	mov	r0, r3
 80095c2:	f000 fb55 	bl	8009c70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	69da      	ldr	r2, [r3, #28]
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80095d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	69da      	ldr	r2, [r3, #28]
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80095e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	69d9      	ldr	r1, [r3, #28]
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	691b      	ldr	r3, [r3, #16]
 80095f0:	021a      	lsls	r2, r3, #8
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	430a      	orrs	r2, r1
 80095f8:	61da      	str	r2, [r3, #28]
      break;
 80095fa:	e041      	b.n	8009680 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	68b9      	ldr	r1, [r7, #8]
 8009602:	4618      	mov	r0, r3
 8009604:	f000 fb8c 	bl	8009d20 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f042 0208 	orr.w	r2, r2, #8
 8009616:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f022 0204 	bic.w	r2, r2, #4
 8009626:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	691a      	ldr	r2, [r3, #16]
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	430a      	orrs	r2, r1
 8009638:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800963a:	e021      	b.n	8009680 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	68b9      	ldr	r1, [r7, #8]
 8009642:	4618      	mov	r0, r3
 8009644:	f000 fbbe 	bl	8009dc4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009656:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009666:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	691b      	ldr	r3, [r3, #16]
 8009672:	021a      	lsls	r2, r3, #8
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	430a      	orrs	r2, r1
 800967a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800967c:	e000      	b.n	8009680 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800967e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	2200      	movs	r2, #0
 8009684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009688:	2300      	movs	r3, #0
}
 800968a:	4618      	mov	r0, r3
 800968c:	3710      	adds	r7, #16
 800968e:	46bd      	mov	sp, r7
 8009690:	bd80      	pop	{r7, pc}
 8009692:	bf00      	nop

08009694 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b084      	sub	sp, #16
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
 800969c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096a4:	2b01      	cmp	r3, #1
 80096a6:	d101      	bne.n	80096ac <HAL_TIM_ConfigClockSource+0x18>
 80096a8:	2302      	movs	r3, #2
 80096aa:	e0b3      	b.n	8009814 <HAL_TIM_ConfigClockSource+0x180>
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2201      	movs	r2, #1
 80096b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2202      	movs	r2, #2
 80096b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	689b      	ldr	r3, [r3, #8]
 80096c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80096c4:	68fa      	ldr	r2, [r7, #12]
 80096c6:	4b55      	ldr	r3, [pc, #340]	; (800981c <HAL_TIM_ConfigClockSource+0x188>)
 80096c8:	4013      	ands	r3, r2
 80096ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80096d2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	68fa      	ldr	r2, [r7, #12]
 80096da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80096e4:	d03e      	beq.n	8009764 <HAL_TIM_ConfigClockSource+0xd0>
 80096e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80096ea:	f200 8087 	bhi.w	80097fc <HAL_TIM_ConfigClockSource+0x168>
 80096ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096f2:	f000 8085 	beq.w	8009800 <HAL_TIM_ConfigClockSource+0x16c>
 80096f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096fa:	d87f      	bhi.n	80097fc <HAL_TIM_ConfigClockSource+0x168>
 80096fc:	2b70      	cmp	r3, #112	; 0x70
 80096fe:	d01a      	beq.n	8009736 <HAL_TIM_ConfigClockSource+0xa2>
 8009700:	2b70      	cmp	r3, #112	; 0x70
 8009702:	d87b      	bhi.n	80097fc <HAL_TIM_ConfigClockSource+0x168>
 8009704:	2b60      	cmp	r3, #96	; 0x60
 8009706:	d050      	beq.n	80097aa <HAL_TIM_ConfigClockSource+0x116>
 8009708:	2b60      	cmp	r3, #96	; 0x60
 800970a:	d877      	bhi.n	80097fc <HAL_TIM_ConfigClockSource+0x168>
 800970c:	2b50      	cmp	r3, #80	; 0x50
 800970e:	d03c      	beq.n	800978a <HAL_TIM_ConfigClockSource+0xf6>
 8009710:	2b50      	cmp	r3, #80	; 0x50
 8009712:	d873      	bhi.n	80097fc <HAL_TIM_ConfigClockSource+0x168>
 8009714:	2b40      	cmp	r3, #64	; 0x40
 8009716:	d058      	beq.n	80097ca <HAL_TIM_ConfigClockSource+0x136>
 8009718:	2b40      	cmp	r3, #64	; 0x40
 800971a:	d86f      	bhi.n	80097fc <HAL_TIM_ConfigClockSource+0x168>
 800971c:	2b30      	cmp	r3, #48	; 0x30
 800971e:	d064      	beq.n	80097ea <HAL_TIM_ConfigClockSource+0x156>
 8009720:	2b30      	cmp	r3, #48	; 0x30
 8009722:	d86b      	bhi.n	80097fc <HAL_TIM_ConfigClockSource+0x168>
 8009724:	2b20      	cmp	r3, #32
 8009726:	d060      	beq.n	80097ea <HAL_TIM_ConfigClockSource+0x156>
 8009728:	2b20      	cmp	r3, #32
 800972a:	d867      	bhi.n	80097fc <HAL_TIM_ConfigClockSource+0x168>
 800972c:	2b00      	cmp	r3, #0
 800972e:	d05c      	beq.n	80097ea <HAL_TIM_ConfigClockSource+0x156>
 8009730:	2b10      	cmp	r3, #16
 8009732:	d05a      	beq.n	80097ea <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8009734:	e062      	b.n	80097fc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6818      	ldr	r0, [r3, #0]
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	6899      	ldr	r1, [r3, #8]
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	685a      	ldr	r2, [r3, #4]
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	68db      	ldr	r3, [r3, #12]
 8009746:	f000 fc0b 	bl	8009f60 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	689b      	ldr	r3, [r3, #8]
 8009750:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009758:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	68fa      	ldr	r2, [r7, #12]
 8009760:	609a      	str	r2, [r3, #8]
      break;
 8009762:	e04e      	b.n	8009802 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6818      	ldr	r0, [r3, #0]
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	6899      	ldr	r1, [r3, #8]
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	685a      	ldr	r2, [r3, #4]
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	68db      	ldr	r3, [r3, #12]
 8009774:	f000 fbf4 	bl	8009f60 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	689a      	ldr	r2, [r3, #8]
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009786:	609a      	str	r2, [r3, #8]
      break;
 8009788:	e03b      	b.n	8009802 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6818      	ldr	r0, [r3, #0]
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	6859      	ldr	r1, [r3, #4]
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	68db      	ldr	r3, [r3, #12]
 8009796:	461a      	mov	r2, r3
 8009798:	f000 fb68 	bl	8009e6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	2150      	movs	r1, #80	; 0x50
 80097a2:	4618      	mov	r0, r3
 80097a4:	f000 fbc1 	bl	8009f2a <TIM_ITRx_SetConfig>
      break;
 80097a8:	e02b      	b.n	8009802 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6818      	ldr	r0, [r3, #0]
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	6859      	ldr	r1, [r3, #4]
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	68db      	ldr	r3, [r3, #12]
 80097b6:	461a      	mov	r2, r3
 80097b8:	f000 fb87 	bl	8009eca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	2160      	movs	r1, #96	; 0x60
 80097c2:	4618      	mov	r0, r3
 80097c4:	f000 fbb1 	bl	8009f2a <TIM_ITRx_SetConfig>
      break;
 80097c8:	e01b      	b.n	8009802 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6818      	ldr	r0, [r3, #0]
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	6859      	ldr	r1, [r3, #4]
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	68db      	ldr	r3, [r3, #12]
 80097d6:	461a      	mov	r2, r3
 80097d8:	f000 fb48 	bl	8009e6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	2140      	movs	r1, #64	; 0x40
 80097e2:	4618      	mov	r0, r3
 80097e4:	f000 fba1 	bl	8009f2a <TIM_ITRx_SetConfig>
      break;
 80097e8:	e00b      	b.n	8009802 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681a      	ldr	r2, [r3, #0]
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	4619      	mov	r1, r3
 80097f4:	4610      	mov	r0, r2
 80097f6:	f000 fb98 	bl	8009f2a <TIM_ITRx_SetConfig>
        break;
 80097fa:	e002      	b.n	8009802 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80097fc:	bf00      	nop
 80097fe:	e000      	b.n	8009802 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8009800:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	2201      	movs	r2, #1
 8009806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	2200      	movs	r2, #0
 800980e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009812:	2300      	movs	r3, #0
}
 8009814:	4618      	mov	r0, r3
 8009816:	3710      	adds	r7, #16
 8009818:	46bd      	mov	sp, r7
 800981a:	bd80      	pop	{r7, pc}
 800981c:	fffeff88 	.word	0xfffeff88

08009820 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009820:	b480      	push	{r7}
 8009822:	b083      	sub	sp, #12
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009828:	bf00      	nop
 800982a:	370c      	adds	r7, #12
 800982c:	46bd      	mov	sp, r7
 800982e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009832:	4770      	bx	lr

08009834 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009834:	b480      	push	{r7}
 8009836:	b083      	sub	sp, #12
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800983c:	bf00      	nop
 800983e:	370c      	adds	r7, #12
 8009840:	46bd      	mov	sp, r7
 8009842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009846:	4770      	bx	lr

08009848 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009848:	b480      	push	{r7}
 800984a:	b083      	sub	sp, #12
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009850:	bf00      	nop
 8009852:	370c      	adds	r7, #12
 8009854:	46bd      	mov	sp, r7
 8009856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985a:	4770      	bx	lr

0800985c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800985c:	b480      	push	{r7}
 800985e:	b083      	sub	sp, #12
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009864:	bf00      	nop
 8009866:	370c      	adds	r7, #12
 8009868:	46bd      	mov	sp, r7
 800986a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986e:	4770      	bx	lr

08009870 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009870:	b480      	push	{r7}
 8009872:	b085      	sub	sp, #20
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
 8009878:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	4a40      	ldr	r2, [pc, #256]	; (8009984 <TIM_Base_SetConfig+0x114>)
 8009884:	4293      	cmp	r3, r2
 8009886:	d013      	beq.n	80098b0 <TIM_Base_SetConfig+0x40>
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800988e:	d00f      	beq.n	80098b0 <TIM_Base_SetConfig+0x40>
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	4a3d      	ldr	r2, [pc, #244]	; (8009988 <TIM_Base_SetConfig+0x118>)
 8009894:	4293      	cmp	r3, r2
 8009896:	d00b      	beq.n	80098b0 <TIM_Base_SetConfig+0x40>
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	4a3c      	ldr	r2, [pc, #240]	; (800998c <TIM_Base_SetConfig+0x11c>)
 800989c:	4293      	cmp	r3, r2
 800989e:	d007      	beq.n	80098b0 <TIM_Base_SetConfig+0x40>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	4a3b      	ldr	r2, [pc, #236]	; (8009990 <TIM_Base_SetConfig+0x120>)
 80098a4:	4293      	cmp	r3, r2
 80098a6:	d003      	beq.n	80098b0 <TIM_Base_SetConfig+0x40>
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	4a3a      	ldr	r2, [pc, #232]	; (8009994 <TIM_Base_SetConfig+0x124>)
 80098ac:	4293      	cmp	r3, r2
 80098ae:	d108      	bne.n	80098c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	685b      	ldr	r3, [r3, #4]
 80098bc:	68fa      	ldr	r2, [r7, #12]
 80098be:	4313      	orrs	r3, r2
 80098c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	4a2f      	ldr	r2, [pc, #188]	; (8009984 <TIM_Base_SetConfig+0x114>)
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d02b      	beq.n	8009922 <TIM_Base_SetConfig+0xb2>
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098d0:	d027      	beq.n	8009922 <TIM_Base_SetConfig+0xb2>
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	4a2c      	ldr	r2, [pc, #176]	; (8009988 <TIM_Base_SetConfig+0x118>)
 80098d6:	4293      	cmp	r3, r2
 80098d8:	d023      	beq.n	8009922 <TIM_Base_SetConfig+0xb2>
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	4a2b      	ldr	r2, [pc, #172]	; (800998c <TIM_Base_SetConfig+0x11c>)
 80098de:	4293      	cmp	r3, r2
 80098e0:	d01f      	beq.n	8009922 <TIM_Base_SetConfig+0xb2>
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	4a2a      	ldr	r2, [pc, #168]	; (8009990 <TIM_Base_SetConfig+0x120>)
 80098e6:	4293      	cmp	r3, r2
 80098e8:	d01b      	beq.n	8009922 <TIM_Base_SetConfig+0xb2>
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	4a29      	ldr	r2, [pc, #164]	; (8009994 <TIM_Base_SetConfig+0x124>)
 80098ee:	4293      	cmp	r3, r2
 80098f0:	d017      	beq.n	8009922 <TIM_Base_SetConfig+0xb2>
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	4a28      	ldr	r2, [pc, #160]	; (8009998 <TIM_Base_SetConfig+0x128>)
 80098f6:	4293      	cmp	r3, r2
 80098f8:	d013      	beq.n	8009922 <TIM_Base_SetConfig+0xb2>
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	4a27      	ldr	r2, [pc, #156]	; (800999c <TIM_Base_SetConfig+0x12c>)
 80098fe:	4293      	cmp	r3, r2
 8009900:	d00f      	beq.n	8009922 <TIM_Base_SetConfig+0xb2>
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	4a26      	ldr	r2, [pc, #152]	; (80099a0 <TIM_Base_SetConfig+0x130>)
 8009906:	4293      	cmp	r3, r2
 8009908:	d00b      	beq.n	8009922 <TIM_Base_SetConfig+0xb2>
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	4a25      	ldr	r2, [pc, #148]	; (80099a4 <TIM_Base_SetConfig+0x134>)
 800990e:	4293      	cmp	r3, r2
 8009910:	d007      	beq.n	8009922 <TIM_Base_SetConfig+0xb2>
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	4a24      	ldr	r2, [pc, #144]	; (80099a8 <TIM_Base_SetConfig+0x138>)
 8009916:	4293      	cmp	r3, r2
 8009918:	d003      	beq.n	8009922 <TIM_Base_SetConfig+0xb2>
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	4a23      	ldr	r2, [pc, #140]	; (80099ac <TIM_Base_SetConfig+0x13c>)
 800991e:	4293      	cmp	r3, r2
 8009920:	d108      	bne.n	8009934 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009928:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	68db      	ldr	r3, [r3, #12]
 800992e:	68fa      	ldr	r2, [r7, #12]
 8009930:	4313      	orrs	r3, r2
 8009932:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	695b      	ldr	r3, [r3, #20]
 800993e:	4313      	orrs	r3, r2
 8009940:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	68fa      	ldr	r2, [r7, #12]
 8009946:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	689a      	ldr	r2, [r3, #8]
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	681a      	ldr	r2, [r3, #0]
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	4a0a      	ldr	r2, [pc, #40]	; (8009984 <TIM_Base_SetConfig+0x114>)
 800995c:	4293      	cmp	r3, r2
 800995e:	d003      	beq.n	8009968 <TIM_Base_SetConfig+0xf8>
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	4a0c      	ldr	r2, [pc, #48]	; (8009994 <TIM_Base_SetConfig+0x124>)
 8009964:	4293      	cmp	r3, r2
 8009966:	d103      	bne.n	8009970 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	691a      	ldr	r2, [r3, #16]
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2201      	movs	r2, #1
 8009974:	615a      	str	r2, [r3, #20]
}
 8009976:	bf00      	nop
 8009978:	3714      	adds	r7, #20
 800997a:	46bd      	mov	sp, r7
 800997c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009980:	4770      	bx	lr
 8009982:	bf00      	nop
 8009984:	40010000 	.word	0x40010000
 8009988:	40000400 	.word	0x40000400
 800998c:	40000800 	.word	0x40000800
 8009990:	40000c00 	.word	0x40000c00
 8009994:	40010400 	.word	0x40010400
 8009998:	40014000 	.word	0x40014000
 800999c:	40014400 	.word	0x40014400
 80099a0:	40014800 	.word	0x40014800
 80099a4:	40001800 	.word	0x40001800
 80099a8:	40001c00 	.word	0x40001c00
 80099ac:	40002000 	.word	0x40002000

080099b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80099b0:	b480      	push	{r7}
 80099b2:	b087      	sub	sp, #28
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
 80099b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	6a1b      	ldr	r3, [r3, #32]
 80099be:	f023 0201 	bic.w	r2, r3, #1
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	6a1b      	ldr	r3, [r3, #32]
 80099ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	685b      	ldr	r3, [r3, #4]
 80099d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	699b      	ldr	r3, [r3, #24]
 80099d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80099d8:	68fa      	ldr	r2, [r7, #12]
 80099da:	4b2b      	ldr	r3, [pc, #172]	; (8009a88 <TIM_OC1_SetConfig+0xd8>)
 80099dc:	4013      	ands	r3, r2
 80099de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	f023 0303 	bic.w	r3, r3, #3
 80099e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	68fa      	ldr	r2, [r7, #12]
 80099ee:	4313      	orrs	r3, r2
 80099f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80099f2:	697b      	ldr	r3, [r7, #20]
 80099f4:	f023 0302 	bic.w	r3, r3, #2
 80099f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	689b      	ldr	r3, [r3, #8]
 80099fe:	697a      	ldr	r2, [r7, #20]
 8009a00:	4313      	orrs	r3, r2
 8009a02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	4a21      	ldr	r2, [pc, #132]	; (8009a8c <TIM_OC1_SetConfig+0xdc>)
 8009a08:	4293      	cmp	r3, r2
 8009a0a:	d003      	beq.n	8009a14 <TIM_OC1_SetConfig+0x64>
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	4a20      	ldr	r2, [pc, #128]	; (8009a90 <TIM_OC1_SetConfig+0xe0>)
 8009a10:	4293      	cmp	r3, r2
 8009a12:	d10c      	bne.n	8009a2e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009a14:	697b      	ldr	r3, [r7, #20]
 8009a16:	f023 0308 	bic.w	r3, r3, #8
 8009a1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	68db      	ldr	r3, [r3, #12]
 8009a20:	697a      	ldr	r2, [r7, #20]
 8009a22:	4313      	orrs	r3, r2
 8009a24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009a26:	697b      	ldr	r3, [r7, #20]
 8009a28:	f023 0304 	bic.w	r3, r3, #4
 8009a2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	4a16      	ldr	r2, [pc, #88]	; (8009a8c <TIM_OC1_SetConfig+0xdc>)
 8009a32:	4293      	cmp	r3, r2
 8009a34:	d003      	beq.n	8009a3e <TIM_OC1_SetConfig+0x8e>
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	4a15      	ldr	r2, [pc, #84]	; (8009a90 <TIM_OC1_SetConfig+0xe0>)
 8009a3a:	4293      	cmp	r3, r2
 8009a3c:	d111      	bne.n	8009a62 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009a3e:	693b      	ldr	r3, [r7, #16]
 8009a40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009a46:	693b      	ldr	r3, [r7, #16]
 8009a48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009a4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	695b      	ldr	r3, [r3, #20]
 8009a52:	693a      	ldr	r2, [r7, #16]
 8009a54:	4313      	orrs	r3, r2
 8009a56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	699b      	ldr	r3, [r3, #24]
 8009a5c:	693a      	ldr	r2, [r7, #16]
 8009a5e:	4313      	orrs	r3, r2
 8009a60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	693a      	ldr	r2, [r7, #16]
 8009a66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	68fa      	ldr	r2, [r7, #12]
 8009a6c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	685a      	ldr	r2, [r3, #4]
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	697a      	ldr	r2, [r7, #20]
 8009a7a:	621a      	str	r2, [r3, #32]
}
 8009a7c:	bf00      	nop
 8009a7e:	371c      	adds	r7, #28
 8009a80:	46bd      	mov	sp, r7
 8009a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a86:	4770      	bx	lr
 8009a88:	fffeff8f 	.word	0xfffeff8f
 8009a8c:	40010000 	.word	0x40010000
 8009a90:	40010400 	.word	0x40010400

08009a94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009a94:	b480      	push	{r7}
 8009a96:	b087      	sub	sp, #28
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
 8009a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6a1b      	ldr	r3, [r3, #32]
 8009aa2:	f023 0210 	bic.w	r2, r3, #16
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6a1b      	ldr	r3, [r3, #32]
 8009aae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	685b      	ldr	r3, [r3, #4]
 8009ab4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	699b      	ldr	r3, [r3, #24]
 8009aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009abc:	68fa      	ldr	r2, [r7, #12]
 8009abe:	4b2e      	ldr	r3, [pc, #184]	; (8009b78 <TIM_OC2_SetConfig+0xe4>)
 8009ac0:	4013      	ands	r3, r2
 8009ac2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009aca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	021b      	lsls	r3, r3, #8
 8009ad2:	68fa      	ldr	r2, [r7, #12]
 8009ad4:	4313      	orrs	r3, r2
 8009ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009ad8:	697b      	ldr	r3, [r7, #20]
 8009ada:	f023 0320 	bic.w	r3, r3, #32
 8009ade:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	689b      	ldr	r3, [r3, #8]
 8009ae4:	011b      	lsls	r3, r3, #4
 8009ae6:	697a      	ldr	r2, [r7, #20]
 8009ae8:	4313      	orrs	r3, r2
 8009aea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	4a23      	ldr	r2, [pc, #140]	; (8009b7c <TIM_OC2_SetConfig+0xe8>)
 8009af0:	4293      	cmp	r3, r2
 8009af2:	d003      	beq.n	8009afc <TIM_OC2_SetConfig+0x68>
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	4a22      	ldr	r2, [pc, #136]	; (8009b80 <TIM_OC2_SetConfig+0xec>)
 8009af8:	4293      	cmp	r3, r2
 8009afa:	d10d      	bne.n	8009b18 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009afc:	697b      	ldr	r3, [r7, #20]
 8009afe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	68db      	ldr	r3, [r3, #12]
 8009b08:	011b      	lsls	r3, r3, #4
 8009b0a:	697a      	ldr	r2, [r7, #20]
 8009b0c:	4313      	orrs	r3, r2
 8009b0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009b10:	697b      	ldr	r3, [r7, #20]
 8009b12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b16:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	4a18      	ldr	r2, [pc, #96]	; (8009b7c <TIM_OC2_SetConfig+0xe8>)
 8009b1c:	4293      	cmp	r3, r2
 8009b1e:	d003      	beq.n	8009b28 <TIM_OC2_SetConfig+0x94>
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	4a17      	ldr	r2, [pc, #92]	; (8009b80 <TIM_OC2_SetConfig+0xec>)
 8009b24:	4293      	cmp	r3, r2
 8009b26:	d113      	bne.n	8009b50 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009b28:	693b      	ldr	r3, [r7, #16]
 8009b2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009b2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009b30:	693b      	ldr	r3, [r7, #16]
 8009b32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009b36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	695b      	ldr	r3, [r3, #20]
 8009b3c:	009b      	lsls	r3, r3, #2
 8009b3e:	693a      	ldr	r2, [r7, #16]
 8009b40:	4313      	orrs	r3, r2
 8009b42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	699b      	ldr	r3, [r3, #24]
 8009b48:	009b      	lsls	r3, r3, #2
 8009b4a:	693a      	ldr	r2, [r7, #16]
 8009b4c:	4313      	orrs	r3, r2
 8009b4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	693a      	ldr	r2, [r7, #16]
 8009b54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	68fa      	ldr	r2, [r7, #12]
 8009b5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	685a      	ldr	r2, [r3, #4]
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	697a      	ldr	r2, [r7, #20]
 8009b68:	621a      	str	r2, [r3, #32]
}
 8009b6a:	bf00      	nop
 8009b6c:	371c      	adds	r7, #28
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b74:	4770      	bx	lr
 8009b76:	bf00      	nop
 8009b78:	feff8fff 	.word	0xfeff8fff
 8009b7c:	40010000 	.word	0x40010000
 8009b80:	40010400 	.word	0x40010400

08009b84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009b84:	b480      	push	{r7}
 8009b86:	b087      	sub	sp, #28
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
 8009b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6a1b      	ldr	r3, [r3, #32]
 8009b92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6a1b      	ldr	r3, [r3, #32]
 8009b9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	685b      	ldr	r3, [r3, #4]
 8009ba4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	69db      	ldr	r3, [r3, #28]
 8009baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009bac:	68fa      	ldr	r2, [r7, #12]
 8009bae:	4b2d      	ldr	r3, [pc, #180]	; (8009c64 <TIM_OC3_SetConfig+0xe0>)
 8009bb0:	4013      	ands	r3, r2
 8009bb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	f023 0303 	bic.w	r3, r3, #3
 8009bba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	68fa      	ldr	r2, [r7, #12]
 8009bc2:	4313      	orrs	r3, r2
 8009bc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009bc6:	697b      	ldr	r3, [r7, #20]
 8009bc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009bcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	689b      	ldr	r3, [r3, #8]
 8009bd2:	021b      	lsls	r3, r3, #8
 8009bd4:	697a      	ldr	r2, [r7, #20]
 8009bd6:	4313      	orrs	r3, r2
 8009bd8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	4a22      	ldr	r2, [pc, #136]	; (8009c68 <TIM_OC3_SetConfig+0xe4>)
 8009bde:	4293      	cmp	r3, r2
 8009be0:	d003      	beq.n	8009bea <TIM_OC3_SetConfig+0x66>
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	4a21      	ldr	r2, [pc, #132]	; (8009c6c <TIM_OC3_SetConfig+0xe8>)
 8009be6:	4293      	cmp	r3, r2
 8009be8:	d10d      	bne.n	8009c06 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009bea:	697b      	ldr	r3, [r7, #20]
 8009bec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009bf0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	68db      	ldr	r3, [r3, #12]
 8009bf6:	021b      	lsls	r3, r3, #8
 8009bf8:	697a      	ldr	r2, [r7, #20]
 8009bfa:	4313      	orrs	r3, r2
 8009bfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009bfe:	697b      	ldr	r3, [r7, #20]
 8009c00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009c04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	4a17      	ldr	r2, [pc, #92]	; (8009c68 <TIM_OC3_SetConfig+0xe4>)
 8009c0a:	4293      	cmp	r3, r2
 8009c0c:	d003      	beq.n	8009c16 <TIM_OC3_SetConfig+0x92>
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	4a16      	ldr	r2, [pc, #88]	; (8009c6c <TIM_OC3_SetConfig+0xe8>)
 8009c12:	4293      	cmp	r3, r2
 8009c14:	d113      	bne.n	8009c3e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009c16:	693b      	ldr	r3, [r7, #16]
 8009c18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009c1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009c1e:	693b      	ldr	r3, [r7, #16]
 8009c20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009c24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	695b      	ldr	r3, [r3, #20]
 8009c2a:	011b      	lsls	r3, r3, #4
 8009c2c:	693a      	ldr	r2, [r7, #16]
 8009c2e:	4313      	orrs	r3, r2
 8009c30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	699b      	ldr	r3, [r3, #24]
 8009c36:	011b      	lsls	r3, r3, #4
 8009c38:	693a      	ldr	r2, [r7, #16]
 8009c3a:	4313      	orrs	r3, r2
 8009c3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	693a      	ldr	r2, [r7, #16]
 8009c42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	68fa      	ldr	r2, [r7, #12]
 8009c48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	685a      	ldr	r2, [r3, #4]
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	697a      	ldr	r2, [r7, #20]
 8009c56:	621a      	str	r2, [r3, #32]
}
 8009c58:	bf00      	nop
 8009c5a:	371c      	adds	r7, #28
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c62:	4770      	bx	lr
 8009c64:	fffeff8f 	.word	0xfffeff8f
 8009c68:	40010000 	.word	0x40010000
 8009c6c:	40010400 	.word	0x40010400

08009c70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009c70:	b480      	push	{r7}
 8009c72:	b087      	sub	sp, #28
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
 8009c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	6a1b      	ldr	r3, [r3, #32]
 8009c7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6a1b      	ldr	r3, [r3, #32]
 8009c8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	685b      	ldr	r3, [r3, #4]
 8009c90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	69db      	ldr	r3, [r3, #28]
 8009c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009c98:	68fa      	ldr	r2, [r7, #12]
 8009c9a:	4b1e      	ldr	r3, [pc, #120]	; (8009d14 <TIM_OC4_SetConfig+0xa4>)
 8009c9c:	4013      	ands	r3, r2
 8009c9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ca6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	021b      	lsls	r3, r3, #8
 8009cae:	68fa      	ldr	r2, [r7, #12]
 8009cb0:	4313      	orrs	r3, r2
 8009cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009cb4:	693b      	ldr	r3, [r7, #16]
 8009cb6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009cba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	689b      	ldr	r3, [r3, #8]
 8009cc0:	031b      	lsls	r3, r3, #12
 8009cc2:	693a      	ldr	r2, [r7, #16]
 8009cc4:	4313      	orrs	r3, r2
 8009cc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	4a13      	ldr	r2, [pc, #76]	; (8009d18 <TIM_OC4_SetConfig+0xa8>)
 8009ccc:	4293      	cmp	r3, r2
 8009cce:	d003      	beq.n	8009cd8 <TIM_OC4_SetConfig+0x68>
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	4a12      	ldr	r2, [pc, #72]	; (8009d1c <TIM_OC4_SetConfig+0xac>)
 8009cd4:	4293      	cmp	r3, r2
 8009cd6:	d109      	bne.n	8009cec <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009cd8:	697b      	ldr	r3, [r7, #20]
 8009cda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009cde:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	695b      	ldr	r3, [r3, #20]
 8009ce4:	019b      	lsls	r3, r3, #6
 8009ce6:	697a      	ldr	r2, [r7, #20]
 8009ce8:	4313      	orrs	r3, r2
 8009cea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	697a      	ldr	r2, [r7, #20]
 8009cf0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	68fa      	ldr	r2, [r7, #12]
 8009cf6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	685a      	ldr	r2, [r3, #4]
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	693a      	ldr	r2, [r7, #16]
 8009d04:	621a      	str	r2, [r3, #32]
}
 8009d06:	bf00      	nop
 8009d08:	371c      	adds	r7, #28
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d10:	4770      	bx	lr
 8009d12:	bf00      	nop
 8009d14:	feff8fff 	.word	0xfeff8fff
 8009d18:	40010000 	.word	0x40010000
 8009d1c:	40010400 	.word	0x40010400

08009d20 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009d20:	b480      	push	{r7}
 8009d22:	b087      	sub	sp, #28
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
 8009d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6a1b      	ldr	r3, [r3, #32]
 8009d2e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	6a1b      	ldr	r3, [r3, #32]
 8009d3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	685b      	ldr	r3, [r3, #4]
 8009d40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009d48:	68fa      	ldr	r2, [r7, #12]
 8009d4a:	4b1b      	ldr	r3, [pc, #108]	; (8009db8 <TIM_OC5_SetConfig+0x98>)
 8009d4c:	4013      	ands	r3, r2
 8009d4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	68fa      	ldr	r2, [r7, #12]
 8009d56:	4313      	orrs	r3, r2
 8009d58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009d5a:	693b      	ldr	r3, [r7, #16]
 8009d5c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009d60:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	689b      	ldr	r3, [r3, #8]
 8009d66:	041b      	lsls	r3, r3, #16
 8009d68:	693a      	ldr	r2, [r7, #16]
 8009d6a:	4313      	orrs	r3, r2
 8009d6c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	4a12      	ldr	r2, [pc, #72]	; (8009dbc <TIM_OC5_SetConfig+0x9c>)
 8009d72:	4293      	cmp	r3, r2
 8009d74:	d003      	beq.n	8009d7e <TIM_OC5_SetConfig+0x5e>
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	4a11      	ldr	r2, [pc, #68]	; (8009dc0 <TIM_OC5_SetConfig+0xa0>)
 8009d7a:	4293      	cmp	r3, r2
 8009d7c:	d109      	bne.n	8009d92 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009d7e:	697b      	ldr	r3, [r7, #20]
 8009d80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d84:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	695b      	ldr	r3, [r3, #20]
 8009d8a:	021b      	lsls	r3, r3, #8
 8009d8c:	697a      	ldr	r2, [r7, #20]
 8009d8e:	4313      	orrs	r3, r2
 8009d90:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	697a      	ldr	r2, [r7, #20]
 8009d96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	68fa      	ldr	r2, [r7, #12]
 8009d9c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	685a      	ldr	r2, [r3, #4]
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	693a      	ldr	r2, [r7, #16]
 8009daa:	621a      	str	r2, [r3, #32]
}
 8009dac:	bf00      	nop
 8009dae:	371c      	adds	r7, #28
 8009db0:	46bd      	mov	sp, r7
 8009db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db6:	4770      	bx	lr
 8009db8:	fffeff8f 	.word	0xfffeff8f
 8009dbc:	40010000 	.word	0x40010000
 8009dc0:	40010400 	.word	0x40010400

08009dc4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009dc4:	b480      	push	{r7}
 8009dc6:	b087      	sub	sp, #28
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
 8009dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6a1b      	ldr	r3, [r3, #32]
 8009dd2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6a1b      	ldr	r3, [r3, #32]
 8009dde:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	685b      	ldr	r3, [r3, #4]
 8009de4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009dec:	68fa      	ldr	r2, [r7, #12]
 8009dee:	4b1c      	ldr	r3, [pc, #112]	; (8009e60 <TIM_OC6_SetConfig+0x9c>)
 8009df0:	4013      	ands	r3, r2
 8009df2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	021b      	lsls	r3, r3, #8
 8009dfa:	68fa      	ldr	r2, [r7, #12]
 8009dfc:	4313      	orrs	r3, r2
 8009dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009e00:	693b      	ldr	r3, [r7, #16]
 8009e02:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009e06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	689b      	ldr	r3, [r3, #8]
 8009e0c:	051b      	lsls	r3, r3, #20
 8009e0e:	693a      	ldr	r2, [r7, #16]
 8009e10:	4313      	orrs	r3, r2
 8009e12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	4a13      	ldr	r2, [pc, #76]	; (8009e64 <TIM_OC6_SetConfig+0xa0>)
 8009e18:	4293      	cmp	r3, r2
 8009e1a:	d003      	beq.n	8009e24 <TIM_OC6_SetConfig+0x60>
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	4a12      	ldr	r2, [pc, #72]	; (8009e68 <TIM_OC6_SetConfig+0xa4>)
 8009e20:	4293      	cmp	r3, r2
 8009e22:	d109      	bne.n	8009e38 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009e24:	697b      	ldr	r3, [r7, #20]
 8009e26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009e2a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	695b      	ldr	r3, [r3, #20]
 8009e30:	029b      	lsls	r3, r3, #10
 8009e32:	697a      	ldr	r2, [r7, #20]
 8009e34:	4313      	orrs	r3, r2
 8009e36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	697a      	ldr	r2, [r7, #20]
 8009e3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	68fa      	ldr	r2, [r7, #12]
 8009e42:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	685a      	ldr	r2, [r3, #4]
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	693a      	ldr	r2, [r7, #16]
 8009e50:	621a      	str	r2, [r3, #32]
}
 8009e52:	bf00      	nop
 8009e54:	371c      	adds	r7, #28
 8009e56:	46bd      	mov	sp, r7
 8009e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5c:	4770      	bx	lr
 8009e5e:	bf00      	nop
 8009e60:	feff8fff 	.word	0xfeff8fff
 8009e64:	40010000 	.word	0x40010000
 8009e68:	40010400 	.word	0x40010400

08009e6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009e6c:	b480      	push	{r7}
 8009e6e:	b087      	sub	sp, #28
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	60f8      	str	r0, [r7, #12]
 8009e74:	60b9      	str	r1, [r7, #8]
 8009e76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	6a1b      	ldr	r3, [r3, #32]
 8009e7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	6a1b      	ldr	r3, [r3, #32]
 8009e82:	f023 0201 	bic.w	r2, r3, #1
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	699b      	ldr	r3, [r3, #24]
 8009e8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009e90:	693b      	ldr	r3, [r7, #16]
 8009e92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009e96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	011b      	lsls	r3, r3, #4
 8009e9c:	693a      	ldr	r2, [r7, #16]
 8009e9e:	4313      	orrs	r3, r2
 8009ea0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009ea2:	697b      	ldr	r3, [r7, #20]
 8009ea4:	f023 030a 	bic.w	r3, r3, #10
 8009ea8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009eaa:	697a      	ldr	r2, [r7, #20]
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	4313      	orrs	r3, r2
 8009eb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	693a      	ldr	r2, [r7, #16]
 8009eb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	697a      	ldr	r2, [r7, #20]
 8009ebc:	621a      	str	r2, [r3, #32]
}
 8009ebe:	bf00      	nop
 8009ec0:	371c      	adds	r7, #28
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec8:	4770      	bx	lr

08009eca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009eca:	b480      	push	{r7}
 8009ecc:	b087      	sub	sp, #28
 8009ece:	af00      	add	r7, sp, #0
 8009ed0:	60f8      	str	r0, [r7, #12]
 8009ed2:	60b9      	str	r1, [r7, #8]
 8009ed4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	6a1b      	ldr	r3, [r3, #32]
 8009eda:	f023 0210 	bic.w	r2, r3, #16
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	699b      	ldr	r3, [r3, #24]
 8009ee6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	6a1b      	ldr	r3, [r3, #32]
 8009eec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009eee:	697b      	ldr	r3, [r7, #20]
 8009ef0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009ef4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	031b      	lsls	r3, r3, #12
 8009efa:	697a      	ldr	r2, [r7, #20]
 8009efc:	4313      	orrs	r3, r2
 8009efe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009f00:	693b      	ldr	r3, [r7, #16]
 8009f02:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009f06:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009f08:	68bb      	ldr	r3, [r7, #8]
 8009f0a:	011b      	lsls	r3, r3, #4
 8009f0c:	693a      	ldr	r2, [r7, #16]
 8009f0e:	4313      	orrs	r3, r2
 8009f10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	697a      	ldr	r2, [r7, #20]
 8009f16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	693a      	ldr	r2, [r7, #16]
 8009f1c:	621a      	str	r2, [r3, #32]
}
 8009f1e:	bf00      	nop
 8009f20:	371c      	adds	r7, #28
 8009f22:	46bd      	mov	sp, r7
 8009f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f28:	4770      	bx	lr

08009f2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009f2a:	b480      	push	{r7}
 8009f2c:	b085      	sub	sp, #20
 8009f2e:	af00      	add	r7, sp, #0
 8009f30:	6078      	str	r0, [r7, #4]
 8009f32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	689b      	ldr	r3, [r3, #8]
 8009f38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009f42:	683a      	ldr	r2, [r7, #0]
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	4313      	orrs	r3, r2
 8009f48:	f043 0307 	orr.w	r3, r3, #7
 8009f4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	68fa      	ldr	r2, [r7, #12]
 8009f52:	609a      	str	r2, [r3, #8]
}
 8009f54:	bf00      	nop
 8009f56:	3714      	adds	r7, #20
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5e:	4770      	bx	lr

08009f60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009f60:	b480      	push	{r7}
 8009f62:	b087      	sub	sp, #28
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	60f8      	str	r0, [r7, #12]
 8009f68:	60b9      	str	r1, [r7, #8]
 8009f6a:	607a      	str	r2, [r7, #4]
 8009f6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	689b      	ldr	r3, [r3, #8]
 8009f72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f74:	697b      	ldr	r3, [r7, #20]
 8009f76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009f7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	021a      	lsls	r2, r3, #8
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	431a      	orrs	r2, r3
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	4313      	orrs	r3, r2
 8009f88:	697a      	ldr	r2, [r7, #20]
 8009f8a:	4313      	orrs	r3, r2
 8009f8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	697a      	ldr	r2, [r7, #20]
 8009f92:	609a      	str	r2, [r3, #8]
}
 8009f94:	bf00      	nop
 8009f96:	371c      	adds	r7, #28
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9e:	4770      	bx	lr

08009fa0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009fa0:	b480      	push	{r7}
 8009fa2:	b085      	sub	sp, #20
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
 8009fa8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009fb0:	2b01      	cmp	r3, #1
 8009fb2:	d101      	bne.n	8009fb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009fb4:	2302      	movs	r3, #2
 8009fb6:	e06d      	b.n	800a094 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2201      	movs	r2, #1
 8009fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2202      	movs	r2, #2
 8009fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	685b      	ldr	r3, [r3, #4]
 8009fce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	689b      	ldr	r3, [r3, #8]
 8009fd6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	4a30      	ldr	r2, [pc, #192]	; (800a0a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009fde:	4293      	cmp	r3, r2
 8009fe0:	d004      	beq.n	8009fec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	4a2f      	ldr	r2, [pc, #188]	; (800a0a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009fe8:	4293      	cmp	r3, r2
 8009fea:	d108      	bne.n	8009ffe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009ff2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	685b      	ldr	r3, [r3, #4]
 8009ff8:	68fa      	ldr	r2, [r7, #12]
 8009ffa:	4313      	orrs	r3, r2
 8009ffc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a004:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	68fa      	ldr	r2, [r7, #12]
 800a00c:	4313      	orrs	r3, r2
 800a00e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	68fa      	ldr	r2, [r7, #12]
 800a016:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	4a20      	ldr	r2, [pc, #128]	; (800a0a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a01e:	4293      	cmp	r3, r2
 800a020:	d022      	beq.n	800a068 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a02a:	d01d      	beq.n	800a068 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	4a1d      	ldr	r2, [pc, #116]	; (800a0a8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a032:	4293      	cmp	r3, r2
 800a034:	d018      	beq.n	800a068 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	4a1c      	ldr	r2, [pc, #112]	; (800a0ac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a03c:	4293      	cmp	r3, r2
 800a03e:	d013      	beq.n	800a068 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	4a1a      	ldr	r2, [pc, #104]	; (800a0b0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a046:	4293      	cmp	r3, r2
 800a048:	d00e      	beq.n	800a068 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	4a15      	ldr	r2, [pc, #84]	; (800a0a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a050:	4293      	cmp	r3, r2
 800a052:	d009      	beq.n	800a068 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	4a16      	ldr	r2, [pc, #88]	; (800a0b4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a05a:	4293      	cmp	r3, r2
 800a05c:	d004      	beq.n	800a068 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	4a15      	ldr	r2, [pc, #84]	; (800a0b8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a064:	4293      	cmp	r3, r2
 800a066:	d10c      	bne.n	800a082 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a06e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	689b      	ldr	r3, [r3, #8]
 800a074:	68ba      	ldr	r2, [r7, #8]
 800a076:	4313      	orrs	r3, r2
 800a078:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	68ba      	ldr	r2, [r7, #8]
 800a080:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2201      	movs	r2, #1
 800a086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2200      	movs	r2, #0
 800a08e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a092:	2300      	movs	r3, #0
}
 800a094:	4618      	mov	r0, r3
 800a096:	3714      	adds	r7, #20
 800a098:	46bd      	mov	sp, r7
 800a09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09e:	4770      	bx	lr
 800a0a0:	40010000 	.word	0x40010000
 800a0a4:	40010400 	.word	0x40010400
 800a0a8:	40000400 	.word	0x40000400
 800a0ac:	40000800 	.word	0x40000800
 800a0b0:	40000c00 	.word	0x40000c00
 800a0b4:	40014000 	.word	0x40014000
 800a0b8:	40001800 	.word	0x40001800

0800a0bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a0bc:	b480      	push	{r7}
 800a0be:	b083      	sub	sp, #12
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a0c4:	bf00      	nop
 800a0c6:	370c      	adds	r7, #12
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ce:	4770      	bx	lr

0800a0d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a0d0:	b480      	push	{r7}
 800a0d2:	b083      	sub	sp, #12
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a0d8:	bf00      	nop
 800a0da:	370c      	adds	r7, #12
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e2:	4770      	bx	lr

0800a0e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a0e4:	b480      	push	{r7}
 800a0e6:	b083      	sub	sp, #12
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a0ec:	bf00      	nop
 800a0ee:	370c      	adds	r7, #12
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f6:	4770      	bx	lr

0800a0f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b082      	sub	sp, #8
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d101      	bne.n	800a10a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a106:	2301      	movs	r3, #1
 800a108:	e040      	b.n	800a18c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d106      	bne.n	800a120 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2200      	movs	r2, #0
 800a116:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a11a:	6878      	ldr	r0, [r7, #4]
 800a11c:	f7f8 fc22 	bl	8002964 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2224      	movs	r2, #36	; 0x24
 800a124:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	681a      	ldr	r2, [r3, #0]
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	f022 0201 	bic.w	r2, r2, #1
 800a134:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a136:	6878      	ldr	r0, [r7, #4]
 800a138:	f000 fac8 	bl	800a6cc <UART_SetConfig>
 800a13c:	4603      	mov	r3, r0
 800a13e:	2b01      	cmp	r3, #1
 800a140:	d101      	bne.n	800a146 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a142:	2301      	movs	r3, #1
 800a144:	e022      	b.n	800a18c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d002      	beq.n	800a154 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a14e:	6878      	ldr	r0, [r7, #4]
 800a150:	f000 fd1e 	bl	800ab90 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	685a      	ldr	r2, [r3, #4]
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a162:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	689a      	ldr	r2, [r3, #8]
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a172:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	681a      	ldr	r2, [r3, #0]
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	f042 0201 	orr.w	r2, r2, #1
 800a182:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a184:	6878      	ldr	r0, [r7, #4]
 800a186:	f000 fda5 	bl	800acd4 <UART_CheckIdleState>
 800a18a:	4603      	mov	r3, r0
}
 800a18c:	4618      	mov	r0, r3
 800a18e:	3708      	adds	r7, #8
 800a190:	46bd      	mov	sp, r7
 800a192:	bd80      	pop	{r7, pc}

0800a194 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a194:	b480      	push	{r7}
 800a196:	b085      	sub	sp, #20
 800a198:	af00      	add	r7, sp, #0
 800a19a:	60f8      	str	r0, [r7, #12]
 800a19c:	60b9      	str	r1, [r7, #8]
 800a19e:	4613      	mov	r3, r2
 800a1a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a1a6:	2b20      	cmp	r3, #32
 800a1a8:	d145      	bne.n	800a236 <HAL_UART_Transmit_IT+0xa2>
  {
    if ((pData == NULL) || (Size == 0U))
 800a1aa:	68bb      	ldr	r3, [r7, #8]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d002      	beq.n	800a1b6 <HAL_UART_Transmit_IT+0x22>
 800a1b0:	88fb      	ldrh	r3, [r7, #6]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d101      	bne.n	800a1ba <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800a1b6:	2301      	movs	r3, #1
 800a1b8:	e03e      	b.n	800a238 <HAL_UART_Transmit_IT+0xa4>
    }

    __HAL_LOCK(huart);
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800a1c0:	2b01      	cmp	r3, #1
 800a1c2:	d101      	bne.n	800a1c8 <HAL_UART_Transmit_IT+0x34>
 800a1c4:	2302      	movs	r3, #2
 800a1c6:	e037      	b.n	800a238 <HAL_UART_Transmit_IT+0xa4>
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	2201      	movs	r2, #1
 800a1cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	68ba      	ldr	r2, [r7, #8]
 800a1d4:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	88fa      	ldrh	r2, [r7, #6]
 800a1da:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	88fa      	ldrh	r2, [r7, #6]
 800a1e2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	2221      	movs	r2, #33	; 0x21
 800a1f8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	689b      	ldr	r3, [r3, #8]
 800a1fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a202:	d107      	bne.n	800a214 <HAL_UART_Transmit_IT+0x80>
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	691b      	ldr	r3, [r3, #16]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d103      	bne.n	800a214 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	4a0d      	ldr	r2, [pc, #52]	; (800a244 <HAL_UART_Transmit_IT+0xb0>)
 800a210:	669a      	str	r2, [r3, #104]	; 0x68
 800a212:	e002      	b.n	800a21a <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	4a0c      	ldr	r2, [pc, #48]	; (800a248 <HAL_UART_Transmit_IT+0xb4>)
 800a218:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	2200      	movs	r2, #0
 800a21e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	681a      	ldr	r2, [r3, #0]
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a230:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800a232:	2300      	movs	r3, #0
 800a234:	e000      	b.n	800a238 <HAL_UART_Transmit_IT+0xa4>
  }
  else
  {
    return HAL_BUSY;
 800a236:	2302      	movs	r3, #2
  }
}
 800a238:	4618      	mov	r0, r3
 800a23a:	3714      	adds	r7, #20
 800a23c:	46bd      	mov	sp, r7
 800a23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a242:	4770      	bx	lr
 800a244:	0800b041 	.word	0x0800b041
 800a248:	0800afcf 	.word	0x0800afcf

0800a24c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b084      	sub	sp, #16
 800a250:	af00      	add	r7, sp, #0
 800a252:	60f8      	str	r0, [r7, #12]
 800a254:	60b9      	str	r1, [r7, #8]
 800a256:	4613      	mov	r3, r2
 800a258:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a25e:	2b20      	cmp	r3, #32
 800a260:	d12c      	bne.n	800a2bc <HAL_UART_Receive_IT+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 800a262:	68bb      	ldr	r3, [r7, #8]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d002      	beq.n	800a26e <HAL_UART_Receive_IT+0x22>
 800a268:	88fb      	ldrh	r3, [r7, #6]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d101      	bne.n	800a272 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800a26e:	2301      	movs	r3, #1
 800a270:	e025      	b.n	800a2be <HAL_UART_Receive_IT+0x72>
    }

    __HAL_LOCK(huart);
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800a278:	2b01      	cmp	r3, #1
 800a27a:	d101      	bne.n	800a280 <HAL_UART_Receive_IT+0x34>
 800a27c:	2302      	movs	r3, #2
 800a27e:	e01e      	b.n	800a2be <HAL_UART_Receive_IT+0x72>
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	2201      	movs	r2, #1
 800a284:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	2200      	movs	r2, #0
 800a28c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	685b      	ldr	r3, [r3, #4]
 800a294:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d007      	beq.n	800a2ac <HAL_UART_Receive_IT+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	681a      	ldr	r2, [r3, #0]
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800a2aa:	601a      	str	r2, [r3, #0]
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a2ac:	88fb      	ldrh	r3, [r7, #6]
 800a2ae:	461a      	mov	r2, r3
 800a2b0:	68b9      	ldr	r1, [r7, #8]
 800a2b2:	68f8      	ldr	r0, [r7, #12]
 800a2b4:	f000 fdbe 	bl	800ae34 <UART_Start_Receive_IT>
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	e000      	b.n	800a2be <HAL_UART_Receive_IT+0x72>
  }
  else
  {
    return HAL_BUSY;
 800a2bc:	2302      	movs	r3, #2
  }
}
 800a2be:	4618      	mov	r0, r3
 800a2c0:	3710      	adds	r7, #16
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	bd80      	pop	{r7, pc}
	...

0800a2c8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b088      	sub	sp, #32
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	69db      	ldr	r3, [r3, #28]
 800a2d6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	689b      	ldr	r3, [r3, #8]
 800a2e6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a2e8:	69fa      	ldr	r2, [r7, #28]
 800a2ea:	f640 030f 	movw	r3, #2063	; 0x80f
 800a2ee:	4013      	ands	r3, r2
 800a2f0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800a2f2:	693b      	ldr	r3, [r7, #16]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d113      	bne.n	800a320 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800a2f8:	69fb      	ldr	r3, [r7, #28]
 800a2fa:	f003 0320 	and.w	r3, r3, #32
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d00e      	beq.n	800a320 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a302:	69bb      	ldr	r3, [r7, #24]
 800a304:	f003 0320 	and.w	r3, r3, #32
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d009      	beq.n	800a320 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a310:	2b00      	cmp	r3, #0
 800a312:	f000 81b9 	beq.w	800a688 <HAL_UART_IRQHandler+0x3c0>
      {
        huart->RxISR(huart);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	4798      	blx	r3
      }
      return;
 800a31e:	e1b3      	b.n	800a688 <HAL_UART_IRQHandler+0x3c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a320:	693b      	ldr	r3, [r7, #16]
 800a322:	2b00      	cmp	r3, #0
 800a324:	f000 80e3 	beq.w	800a4ee <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800a328:	697b      	ldr	r3, [r7, #20]
 800a32a:	f003 0301 	and.w	r3, r3, #1
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d105      	bne.n	800a33e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800a332:	69ba      	ldr	r2, [r7, #24]
 800a334:	4ba5      	ldr	r3, [pc, #660]	; (800a5cc <HAL_UART_IRQHandler+0x304>)
 800a336:	4013      	ands	r3, r2
 800a338:	2b00      	cmp	r3, #0
 800a33a:	f000 80d8 	beq.w	800a4ee <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a33e:	69fb      	ldr	r3, [r7, #28]
 800a340:	f003 0301 	and.w	r3, r3, #1
 800a344:	2b00      	cmp	r3, #0
 800a346:	d010      	beq.n	800a36a <HAL_UART_IRQHandler+0xa2>
 800a348:	69bb      	ldr	r3, [r7, #24]
 800a34a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d00b      	beq.n	800a36a <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	2201      	movs	r2, #1
 800a358:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a360:	f043 0201 	orr.w	r2, r3, #1
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a36a:	69fb      	ldr	r3, [r7, #28]
 800a36c:	f003 0302 	and.w	r3, r3, #2
 800a370:	2b00      	cmp	r3, #0
 800a372:	d010      	beq.n	800a396 <HAL_UART_IRQHandler+0xce>
 800a374:	697b      	ldr	r3, [r7, #20]
 800a376:	f003 0301 	and.w	r3, r3, #1
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d00b      	beq.n	800a396 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	2202      	movs	r2, #2
 800a384:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a38c:	f043 0204 	orr.w	r2, r3, #4
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a396:	69fb      	ldr	r3, [r7, #28]
 800a398:	f003 0304 	and.w	r3, r3, #4
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d010      	beq.n	800a3c2 <HAL_UART_IRQHandler+0xfa>
 800a3a0:	697b      	ldr	r3, [r7, #20]
 800a3a2:	f003 0301 	and.w	r3, r3, #1
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d00b      	beq.n	800a3c2 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	2204      	movs	r2, #4
 800a3b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a3b8:	f043 0202 	orr.w	r2, r3, #2
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a3c2:	69fb      	ldr	r3, [r7, #28]
 800a3c4:	f003 0308 	and.w	r3, r3, #8
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d015      	beq.n	800a3f8 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a3cc:	69bb      	ldr	r3, [r7, #24]
 800a3ce:	f003 0320 	and.w	r3, r3, #32
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d104      	bne.n	800a3e0 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800a3d6:	697b      	ldr	r3, [r7, #20]
 800a3d8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d00b      	beq.n	800a3f8 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	2208      	movs	r2, #8
 800a3e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a3ee:	f043 0208 	orr.w	r2, r3, #8
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a3f8:	69fb      	ldr	r3, [r7, #28]
 800a3fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d011      	beq.n	800a426 <HAL_UART_IRQHandler+0x15e>
 800a402:	69bb      	ldr	r3, [r7, #24]
 800a404:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d00c      	beq.n	800a426 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a414:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a41c:	f043 0220 	orr.w	r2, r3, #32
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	f000 812d 	beq.w	800a68c <HAL_UART_IRQHandler+0x3c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800a432:	69fb      	ldr	r3, [r7, #28]
 800a434:	f003 0320 	and.w	r3, r3, #32
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d00c      	beq.n	800a456 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a43c:	69bb      	ldr	r3, [r7, #24]
 800a43e:	f003 0320 	and.w	r3, r3, #32
 800a442:	2b00      	cmp	r3, #0
 800a444:	d007      	beq.n	800a456 <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d003      	beq.n	800a456 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a452:	6878      	ldr	r0, [r7, #4]
 800a454:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a45c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	689b      	ldr	r3, [r3, #8]
 800a464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a468:	2b40      	cmp	r3, #64	; 0x40
 800a46a:	d004      	beq.n	800a476 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a472:	2b00      	cmp	r3, #0
 800a474:	d031      	beq.n	800a4da <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a476:	6878      	ldr	r0, [r7, #4]
 800a478:	f000 fd64 	bl	800af44 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	689b      	ldr	r3, [r3, #8]
 800a482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a486:	2b40      	cmp	r3, #64	; 0x40
 800a488:	d123      	bne.n	800a4d2 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	689a      	ldr	r2, [r3, #8]
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a498:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d013      	beq.n	800a4ca <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4a6:	4a4a      	ldr	r2, [pc, #296]	; (800a5d0 <HAL_UART_IRQHandler+0x308>)
 800a4a8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	f7fa ff26 	bl	8005300 <HAL_DMA_Abort_IT>
 800a4b4:	4603      	mov	r3, r0
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d017      	beq.n	800a4ea <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4c0:	687a      	ldr	r2, [r7, #4]
 800a4c2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800a4c4:	4610      	mov	r0, r2
 800a4c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a4c8:	e00f      	b.n	800a4ea <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a4ca:	6878      	ldr	r0, [r7, #4]
 800a4cc:	f000 f8e8 	bl	800a6a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a4d0:	e00b      	b.n	800a4ea <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a4d2:	6878      	ldr	r0, [r7, #4]
 800a4d4:	f000 f8e4 	bl	800a6a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a4d8:	e007      	b.n	800a4ea <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a4da:	6878      	ldr	r0, [r7, #4]
 800a4dc:	f000 f8e0 	bl	800a6a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800a4e8:	e0d0      	b.n	800a68c <HAL_UART_IRQHandler+0x3c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a4ea:	bf00      	nop
    return;
 800a4ec:	e0ce      	b.n	800a68c <HAL_UART_IRQHandler+0x3c4>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a4f2:	2b01      	cmp	r3, #1
 800a4f4:	f040 80a7 	bne.w	800a646 <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a4f8:	69fb      	ldr	r3, [r7, #28]
 800a4fa:	f003 0310 	and.w	r3, r3, #16
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	f000 80a1 	beq.w	800a646 <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a504:	69bb      	ldr	r3, [r7, #24]
 800a506:	f003 0310 	and.w	r3, r3, #16
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	f000 809b 	beq.w	800a646 <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	2210      	movs	r2, #16
 800a516:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	689b      	ldr	r3, [r3, #8]
 800a51e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a522:	2b40      	cmp	r3, #64	; 0x40
 800a524:	d156      	bne.n	800a5d4 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	685b      	ldr	r3, [r3, #4]
 800a52e:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800a530:	893b      	ldrh	r3, [r7, #8]
 800a532:	2b00      	cmp	r3, #0
 800a534:	f000 80ac 	beq.w	800a690 <HAL_UART_IRQHandler+0x3c8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a53e:	893a      	ldrh	r2, [r7, #8]
 800a540:	429a      	cmp	r2, r3
 800a542:	f080 80a5 	bcs.w	800a690 <HAL_UART_IRQHandler+0x3c8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	893a      	ldrh	r2, [r7, #8]
 800a54a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a552:	69db      	ldr	r3, [r3, #28]
 800a554:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a558:	d02a      	beq.n	800a5b0 <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	681a      	ldr	r2, [r3, #0]
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a568:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	689a      	ldr	r2, [r3, #8]
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	f022 0201 	bic.w	r2, r2, #1
 800a578:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	689a      	ldr	r2, [r3, #8]
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a588:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2220      	movs	r2, #32
 800a58e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2200      	movs	r2, #0
 800a594:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	681a      	ldr	r2, [r3, #0]
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	f022 0210 	bic.w	r2, r2, #16
 800a5a4:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	f7fa fe38 	bl	8005220 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a5bc:	b29b      	uxth	r3, r3
 800a5be:	1ad3      	subs	r3, r2, r3
 800a5c0:	b29b      	uxth	r3, r3
 800a5c2:	4619      	mov	r1, r3
 800a5c4:	6878      	ldr	r0, [r7, #4]
 800a5c6:	f000 f875 	bl	800a6b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a5ca:	e061      	b.n	800a690 <HAL_UART_IRQHandler+0x3c8>
 800a5cc:	04000120 	.word	0x04000120
 800a5d0:	0800afa3 	.word	0x0800afa3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a5e0:	b29b      	uxth	r3, r3
 800a5e2:	1ad3      	subs	r3, r2, r3
 800a5e4:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a5ec:	b29b      	uxth	r3, r3
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d050      	beq.n	800a694 <HAL_UART_IRQHandler+0x3cc>
          && (nb_rx_data > 0U))
 800a5f2:	897b      	ldrh	r3, [r7, #10]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d04d      	beq.n	800a694 <HAL_UART_IRQHandler+0x3cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	681a      	ldr	r2, [r3, #0]
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a606:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	689a      	ldr	r2, [r3, #8]
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	f022 0201 	bic.w	r2, r2, #1
 800a616:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2220      	movs	r2, #32
 800a61c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2200      	movs	r2, #0
 800a622:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2200      	movs	r2, #0
 800a628:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	681a      	ldr	r2, [r3, #0]
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	f022 0210 	bic.w	r2, r2, #16
 800a638:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a63a:	897b      	ldrh	r3, [r7, #10]
 800a63c:	4619      	mov	r1, r3
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	f000 f838 	bl	800a6b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a644:	e026      	b.n	800a694 <HAL_UART_IRQHandler+0x3cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800a646:	69fb      	ldr	r3, [r7, #28]
 800a648:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d00d      	beq.n	800a66c <HAL_UART_IRQHandler+0x3a4>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800a650:	69bb      	ldr	r3, [r7, #24]
 800a652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a656:	2b00      	cmp	r3, #0
 800a658:	d008      	beq.n	800a66c <HAL_UART_IRQHandler+0x3a4>
  {
    if (huart->TxISR != NULL)
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d01a      	beq.n	800a698 <HAL_UART_IRQHandler+0x3d0>
    {
      huart->TxISR(huart);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a666:	6878      	ldr	r0, [r7, #4]
 800a668:	4798      	blx	r3
    }
    return;
 800a66a:	e015      	b.n	800a698 <HAL_UART_IRQHandler+0x3d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a66c:	69fb      	ldr	r3, [r7, #28]
 800a66e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a672:	2b00      	cmp	r3, #0
 800a674:	d011      	beq.n	800a69a <HAL_UART_IRQHandler+0x3d2>
 800a676:	69bb      	ldr	r3, [r7, #24]
 800a678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d00c      	beq.n	800a69a <HAL_UART_IRQHandler+0x3d2>
  {
    UART_EndTransmit_IT(huart);
 800a680:	6878      	ldr	r0, [r7, #4]
 800a682:	f000 fd1b 	bl	800b0bc <UART_EndTransmit_IT>
    return;
 800a686:	e008      	b.n	800a69a <HAL_UART_IRQHandler+0x3d2>
      return;
 800a688:	bf00      	nop
 800a68a:	e006      	b.n	800a69a <HAL_UART_IRQHandler+0x3d2>
    return;
 800a68c:	bf00      	nop
 800a68e:	e004      	b.n	800a69a <HAL_UART_IRQHandler+0x3d2>
      return;
 800a690:	bf00      	nop
 800a692:	e002      	b.n	800a69a <HAL_UART_IRQHandler+0x3d2>
      return;
 800a694:	bf00      	nop
 800a696:	e000      	b.n	800a69a <HAL_UART_IRQHandler+0x3d2>
    return;
 800a698:	bf00      	nop
  }

}
 800a69a:	3720      	adds	r7, #32
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bd80      	pop	{r7, pc}

0800a6a0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a6a0:	b480      	push	{r7}
 800a6a2:	b083      	sub	sp, #12
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a6a8:	bf00      	nop
 800a6aa:	370c      	adds	r7, #12
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b2:	4770      	bx	lr

0800a6b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a6b4:	b480      	push	{r7}
 800a6b6:	b083      	sub	sp, #12
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
 800a6bc:	460b      	mov	r3, r1
 800a6be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a6c0:	bf00      	nop
 800a6c2:	370c      	adds	r7, #12
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ca:	4770      	bx	lr

0800a6cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b088      	sub	sp, #32
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	689a      	ldr	r2, [r3, #8]
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	691b      	ldr	r3, [r3, #16]
 800a6e0:	431a      	orrs	r2, r3
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	695b      	ldr	r3, [r3, #20]
 800a6e6:	431a      	orrs	r2, r3
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	69db      	ldr	r3, [r3, #28]
 800a6ec:	4313      	orrs	r3, r2
 800a6ee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	681a      	ldr	r2, [r3, #0]
 800a6f6:	4ba7      	ldr	r3, [pc, #668]	; (800a994 <UART_SetConfig+0x2c8>)
 800a6f8:	4013      	ands	r3, r2
 800a6fa:	687a      	ldr	r2, [r7, #4]
 800a6fc:	6812      	ldr	r2, [r2, #0]
 800a6fe:	6979      	ldr	r1, [r7, #20]
 800a700:	430b      	orrs	r3, r1
 800a702:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	685b      	ldr	r3, [r3, #4]
 800a70a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	68da      	ldr	r2, [r3, #12]
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	430a      	orrs	r2, r1
 800a718:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	699b      	ldr	r3, [r3, #24]
 800a71e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	6a1b      	ldr	r3, [r3, #32]
 800a724:	697a      	ldr	r2, [r7, #20]
 800a726:	4313      	orrs	r3, r2
 800a728:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	689b      	ldr	r3, [r3, #8]
 800a730:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	697a      	ldr	r2, [r7, #20]
 800a73a:	430a      	orrs	r2, r1
 800a73c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	4a95      	ldr	r2, [pc, #596]	; (800a998 <UART_SetConfig+0x2cc>)
 800a744:	4293      	cmp	r3, r2
 800a746:	d120      	bne.n	800a78a <UART_SetConfig+0xbe>
 800a748:	4b94      	ldr	r3, [pc, #592]	; (800a99c <UART_SetConfig+0x2d0>)
 800a74a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a74e:	f003 0303 	and.w	r3, r3, #3
 800a752:	2b03      	cmp	r3, #3
 800a754:	d816      	bhi.n	800a784 <UART_SetConfig+0xb8>
 800a756:	a201      	add	r2, pc, #4	; (adr r2, 800a75c <UART_SetConfig+0x90>)
 800a758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a75c:	0800a76d 	.word	0x0800a76d
 800a760:	0800a779 	.word	0x0800a779
 800a764:	0800a773 	.word	0x0800a773
 800a768:	0800a77f 	.word	0x0800a77f
 800a76c:	2301      	movs	r3, #1
 800a76e:	77fb      	strb	r3, [r7, #31]
 800a770:	e14f      	b.n	800aa12 <UART_SetConfig+0x346>
 800a772:	2302      	movs	r3, #2
 800a774:	77fb      	strb	r3, [r7, #31]
 800a776:	e14c      	b.n	800aa12 <UART_SetConfig+0x346>
 800a778:	2304      	movs	r3, #4
 800a77a:	77fb      	strb	r3, [r7, #31]
 800a77c:	e149      	b.n	800aa12 <UART_SetConfig+0x346>
 800a77e:	2308      	movs	r3, #8
 800a780:	77fb      	strb	r3, [r7, #31]
 800a782:	e146      	b.n	800aa12 <UART_SetConfig+0x346>
 800a784:	2310      	movs	r3, #16
 800a786:	77fb      	strb	r3, [r7, #31]
 800a788:	e143      	b.n	800aa12 <UART_SetConfig+0x346>
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	4a84      	ldr	r2, [pc, #528]	; (800a9a0 <UART_SetConfig+0x2d4>)
 800a790:	4293      	cmp	r3, r2
 800a792:	d132      	bne.n	800a7fa <UART_SetConfig+0x12e>
 800a794:	4b81      	ldr	r3, [pc, #516]	; (800a99c <UART_SetConfig+0x2d0>)
 800a796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a79a:	f003 030c 	and.w	r3, r3, #12
 800a79e:	2b0c      	cmp	r3, #12
 800a7a0:	d828      	bhi.n	800a7f4 <UART_SetConfig+0x128>
 800a7a2:	a201      	add	r2, pc, #4	; (adr r2, 800a7a8 <UART_SetConfig+0xdc>)
 800a7a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7a8:	0800a7dd 	.word	0x0800a7dd
 800a7ac:	0800a7f5 	.word	0x0800a7f5
 800a7b0:	0800a7f5 	.word	0x0800a7f5
 800a7b4:	0800a7f5 	.word	0x0800a7f5
 800a7b8:	0800a7e9 	.word	0x0800a7e9
 800a7bc:	0800a7f5 	.word	0x0800a7f5
 800a7c0:	0800a7f5 	.word	0x0800a7f5
 800a7c4:	0800a7f5 	.word	0x0800a7f5
 800a7c8:	0800a7e3 	.word	0x0800a7e3
 800a7cc:	0800a7f5 	.word	0x0800a7f5
 800a7d0:	0800a7f5 	.word	0x0800a7f5
 800a7d4:	0800a7f5 	.word	0x0800a7f5
 800a7d8:	0800a7ef 	.word	0x0800a7ef
 800a7dc:	2300      	movs	r3, #0
 800a7de:	77fb      	strb	r3, [r7, #31]
 800a7e0:	e117      	b.n	800aa12 <UART_SetConfig+0x346>
 800a7e2:	2302      	movs	r3, #2
 800a7e4:	77fb      	strb	r3, [r7, #31]
 800a7e6:	e114      	b.n	800aa12 <UART_SetConfig+0x346>
 800a7e8:	2304      	movs	r3, #4
 800a7ea:	77fb      	strb	r3, [r7, #31]
 800a7ec:	e111      	b.n	800aa12 <UART_SetConfig+0x346>
 800a7ee:	2308      	movs	r3, #8
 800a7f0:	77fb      	strb	r3, [r7, #31]
 800a7f2:	e10e      	b.n	800aa12 <UART_SetConfig+0x346>
 800a7f4:	2310      	movs	r3, #16
 800a7f6:	77fb      	strb	r3, [r7, #31]
 800a7f8:	e10b      	b.n	800aa12 <UART_SetConfig+0x346>
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	4a69      	ldr	r2, [pc, #420]	; (800a9a4 <UART_SetConfig+0x2d8>)
 800a800:	4293      	cmp	r3, r2
 800a802:	d120      	bne.n	800a846 <UART_SetConfig+0x17a>
 800a804:	4b65      	ldr	r3, [pc, #404]	; (800a99c <UART_SetConfig+0x2d0>)
 800a806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a80a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a80e:	2b30      	cmp	r3, #48	; 0x30
 800a810:	d013      	beq.n	800a83a <UART_SetConfig+0x16e>
 800a812:	2b30      	cmp	r3, #48	; 0x30
 800a814:	d814      	bhi.n	800a840 <UART_SetConfig+0x174>
 800a816:	2b20      	cmp	r3, #32
 800a818:	d009      	beq.n	800a82e <UART_SetConfig+0x162>
 800a81a:	2b20      	cmp	r3, #32
 800a81c:	d810      	bhi.n	800a840 <UART_SetConfig+0x174>
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d002      	beq.n	800a828 <UART_SetConfig+0x15c>
 800a822:	2b10      	cmp	r3, #16
 800a824:	d006      	beq.n	800a834 <UART_SetConfig+0x168>
 800a826:	e00b      	b.n	800a840 <UART_SetConfig+0x174>
 800a828:	2300      	movs	r3, #0
 800a82a:	77fb      	strb	r3, [r7, #31]
 800a82c:	e0f1      	b.n	800aa12 <UART_SetConfig+0x346>
 800a82e:	2302      	movs	r3, #2
 800a830:	77fb      	strb	r3, [r7, #31]
 800a832:	e0ee      	b.n	800aa12 <UART_SetConfig+0x346>
 800a834:	2304      	movs	r3, #4
 800a836:	77fb      	strb	r3, [r7, #31]
 800a838:	e0eb      	b.n	800aa12 <UART_SetConfig+0x346>
 800a83a:	2308      	movs	r3, #8
 800a83c:	77fb      	strb	r3, [r7, #31]
 800a83e:	e0e8      	b.n	800aa12 <UART_SetConfig+0x346>
 800a840:	2310      	movs	r3, #16
 800a842:	77fb      	strb	r3, [r7, #31]
 800a844:	e0e5      	b.n	800aa12 <UART_SetConfig+0x346>
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	4a57      	ldr	r2, [pc, #348]	; (800a9a8 <UART_SetConfig+0x2dc>)
 800a84c:	4293      	cmp	r3, r2
 800a84e:	d120      	bne.n	800a892 <UART_SetConfig+0x1c6>
 800a850:	4b52      	ldr	r3, [pc, #328]	; (800a99c <UART_SetConfig+0x2d0>)
 800a852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a856:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a85a:	2bc0      	cmp	r3, #192	; 0xc0
 800a85c:	d013      	beq.n	800a886 <UART_SetConfig+0x1ba>
 800a85e:	2bc0      	cmp	r3, #192	; 0xc0
 800a860:	d814      	bhi.n	800a88c <UART_SetConfig+0x1c0>
 800a862:	2b80      	cmp	r3, #128	; 0x80
 800a864:	d009      	beq.n	800a87a <UART_SetConfig+0x1ae>
 800a866:	2b80      	cmp	r3, #128	; 0x80
 800a868:	d810      	bhi.n	800a88c <UART_SetConfig+0x1c0>
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d002      	beq.n	800a874 <UART_SetConfig+0x1a8>
 800a86e:	2b40      	cmp	r3, #64	; 0x40
 800a870:	d006      	beq.n	800a880 <UART_SetConfig+0x1b4>
 800a872:	e00b      	b.n	800a88c <UART_SetConfig+0x1c0>
 800a874:	2300      	movs	r3, #0
 800a876:	77fb      	strb	r3, [r7, #31]
 800a878:	e0cb      	b.n	800aa12 <UART_SetConfig+0x346>
 800a87a:	2302      	movs	r3, #2
 800a87c:	77fb      	strb	r3, [r7, #31]
 800a87e:	e0c8      	b.n	800aa12 <UART_SetConfig+0x346>
 800a880:	2304      	movs	r3, #4
 800a882:	77fb      	strb	r3, [r7, #31]
 800a884:	e0c5      	b.n	800aa12 <UART_SetConfig+0x346>
 800a886:	2308      	movs	r3, #8
 800a888:	77fb      	strb	r3, [r7, #31]
 800a88a:	e0c2      	b.n	800aa12 <UART_SetConfig+0x346>
 800a88c:	2310      	movs	r3, #16
 800a88e:	77fb      	strb	r3, [r7, #31]
 800a890:	e0bf      	b.n	800aa12 <UART_SetConfig+0x346>
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	4a45      	ldr	r2, [pc, #276]	; (800a9ac <UART_SetConfig+0x2e0>)
 800a898:	4293      	cmp	r3, r2
 800a89a:	d125      	bne.n	800a8e8 <UART_SetConfig+0x21c>
 800a89c:	4b3f      	ldr	r3, [pc, #252]	; (800a99c <UART_SetConfig+0x2d0>)
 800a89e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a8a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a8a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a8aa:	d017      	beq.n	800a8dc <UART_SetConfig+0x210>
 800a8ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a8b0:	d817      	bhi.n	800a8e2 <UART_SetConfig+0x216>
 800a8b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a8b6:	d00b      	beq.n	800a8d0 <UART_SetConfig+0x204>
 800a8b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a8bc:	d811      	bhi.n	800a8e2 <UART_SetConfig+0x216>
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d003      	beq.n	800a8ca <UART_SetConfig+0x1fe>
 800a8c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a8c6:	d006      	beq.n	800a8d6 <UART_SetConfig+0x20a>
 800a8c8:	e00b      	b.n	800a8e2 <UART_SetConfig+0x216>
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	77fb      	strb	r3, [r7, #31]
 800a8ce:	e0a0      	b.n	800aa12 <UART_SetConfig+0x346>
 800a8d0:	2302      	movs	r3, #2
 800a8d2:	77fb      	strb	r3, [r7, #31]
 800a8d4:	e09d      	b.n	800aa12 <UART_SetConfig+0x346>
 800a8d6:	2304      	movs	r3, #4
 800a8d8:	77fb      	strb	r3, [r7, #31]
 800a8da:	e09a      	b.n	800aa12 <UART_SetConfig+0x346>
 800a8dc:	2308      	movs	r3, #8
 800a8de:	77fb      	strb	r3, [r7, #31]
 800a8e0:	e097      	b.n	800aa12 <UART_SetConfig+0x346>
 800a8e2:	2310      	movs	r3, #16
 800a8e4:	77fb      	strb	r3, [r7, #31]
 800a8e6:	e094      	b.n	800aa12 <UART_SetConfig+0x346>
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	4a30      	ldr	r2, [pc, #192]	; (800a9b0 <UART_SetConfig+0x2e4>)
 800a8ee:	4293      	cmp	r3, r2
 800a8f0:	d125      	bne.n	800a93e <UART_SetConfig+0x272>
 800a8f2:	4b2a      	ldr	r3, [pc, #168]	; (800a99c <UART_SetConfig+0x2d0>)
 800a8f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a8f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a8fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a900:	d017      	beq.n	800a932 <UART_SetConfig+0x266>
 800a902:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a906:	d817      	bhi.n	800a938 <UART_SetConfig+0x26c>
 800a908:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a90c:	d00b      	beq.n	800a926 <UART_SetConfig+0x25a>
 800a90e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a912:	d811      	bhi.n	800a938 <UART_SetConfig+0x26c>
 800a914:	2b00      	cmp	r3, #0
 800a916:	d003      	beq.n	800a920 <UART_SetConfig+0x254>
 800a918:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a91c:	d006      	beq.n	800a92c <UART_SetConfig+0x260>
 800a91e:	e00b      	b.n	800a938 <UART_SetConfig+0x26c>
 800a920:	2301      	movs	r3, #1
 800a922:	77fb      	strb	r3, [r7, #31]
 800a924:	e075      	b.n	800aa12 <UART_SetConfig+0x346>
 800a926:	2302      	movs	r3, #2
 800a928:	77fb      	strb	r3, [r7, #31]
 800a92a:	e072      	b.n	800aa12 <UART_SetConfig+0x346>
 800a92c:	2304      	movs	r3, #4
 800a92e:	77fb      	strb	r3, [r7, #31]
 800a930:	e06f      	b.n	800aa12 <UART_SetConfig+0x346>
 800a932:	2308      	movs	r3, #8
 800a934:	77fb      	strb	r3, [r7, #31]
 800a936:	e06c      	b.n	800aa12 <UART_SetConfig+0x346>
 800a938:	2310      	movs	r3, #16
 800a93a:	77fb      	strb	r3, [r7, #31]
 800a93c:	e069      	b.n	800aa12 <UART_SetConfig+0x346>
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	4a1c      	ldr	r2, [pc, #112]	; (800a9b4 <UART_SetConfig+0x2e8>)
 800a944:	4293      	cmp	r3, r2
 800a946:	d137      	bne.n	800a9b8 <UART_SetConfig+0x2ec>
 800a948:	4b14      	ldr	r3, [pc, #80]	; (800a99c <UART_SetConfig+0x2d0>)
 800a94a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a94e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a952:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a956:	d017      	beq.n	800a988 <UART_SetConfig+0x2bc>
 800a958:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a95c:	d817      	bhi.n	800a98e <UART_SetConfig+0x2c2>
 800a95e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a962:	d00b      	beq.n	800a97c <UART_SetConfig+0x2b0>
 800a964:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a968:	d811      	bhi.n	800a98e <UART_SetConfig+0x2c2>
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d003      	beq.n	800a976 <UART_SetConfig+0x2aa>
 800a96e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a972:	d006      	beq.n	800a982 <UART_SetConfig+0x2b6>
 800a974:	e00b      	b.n	800a98e <UART_SetConfig+0x2c2>
 800a976:	2300      	movs	r3, #0
 800a978:	77fb      	strb	r3, [r7, #31]
 800a97a:	e04a      	b.n	800aa12 <UART_SetConfig+0x346>
 800a97c:	2302      	movs	r3, #2
 800a97e:	77fb      	strb	r3, [r7, #31]
 800a980:	e047      	b.n	800aa12 <UART_SetConfig+0x346>
 800a982:	2304      	movs	r3, #4
 800a984:	77fb      	strb	r3, [r7, #31]
 800a986:	e044      	b.n	800aa12 <UART_SetConfig+0x346>
 800a988:	2308      	movs	r3, #8
 800a98a:	77fb      	strb	r3, [r7, #31]
 800a98c:	e041      	b.n	800aa12 <UART_SetConfig+0x346>
 800a98e:	2310      	movs	r3, #16
 800a990:	77fb      	strb	r3, [r7, #31]
 800a992:	e03e      	b.n	800aa12 <UART_SetConfig+0x346>
 800a994:	efff69f3 	.word	0xefff69f3
 800a998:	40011000 	.word	0x40011000
 800a99c:	40023800 	.word	0x40023800
 800a9a0:	40004400 	.word	0x40004400
 800a9a4:	40004800 	.word	0x40004800
 800a9a8:	40004c00 	.word	0x40004c00
 800a9ac:	40005000 	.word	0x40005000
 800a9b0:	40011400 	.word	0x40011400
 800a9b4:	40007800 	.word	0x40007800
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	4a71      	ldr	r2, [pc, #452]	; (800ab84 <UART_SetConfig+0x4b8>)
 800a9be:	4293      	cmp	r3, r2
 800a9c0:	d125      	bne.n	800aa0e <UART_SetConfig+0x342>
 800a9c2:	4b71      	ldr	r3, [pc, #452]	; (800ab88 <UART_SetConfig+0x4bc>)
 800a9c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a9cc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a9d0:	d017      	beq.n	800aa02 <UART_SetConfig+0x336>
 800a9d2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a9d6:	d817      	bhi.n	800aa08 <UART_SetConfig+0x33c>
 800a9d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a9dc:	d00b      	beq.n	800a9f6 <UART_SetConfig+0x32a>
 800a9de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a9e2:	d811      	bhi.n	800aa08 <UART_SetConfig+0x33c>
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d003      	beq.n	800a9f0 <UART_SetConfig+0x324>
 800a9e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a9ec:	d006      	beq.n	800a9fc <UART_SetConfig+0x330>
 800a9ee:	e00b      	b.n	800aa08 <UART_SetConfig+0x33c>
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	77fb      	strb	r3, [r7, #31]
 800a9f4:	e00d      	b.n	800aa12 <UART_SetConfig+0x346>
 800a9f6:	2302      	movs	r3, #2
 800a9f8:	77fb      	strb	r3, [r7, #31]
 800a9fa:	e00a      	b.n	800aa12 <UART_SetConfig+0x346>
 800a9fc:	2304      	movs	r3, #4
 800a9fe:	77fb      	strb	r3, [r7, #31]
 800aa00:	e007      	b.n	800aa12 <UART_SetConfig+0x346>
 800aa02:	2308      	movs	r3, #8
 800aa04:	77fb      	strb	r3, [r7, #31]
 800aa06:	e004      	b.n	800aa12 <UART_SetConfig+0x346>
 800aa08:	2310      	movs	r3, #16
 800aa0a:	77fb      	strb	r3, [r7, #31]
 800aa0c:	e001      	b.n	800aa12 <UART_SetConfig+0x346>
 800aa0e:	2310      	movs	r3, #16
 800aa10:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	69db      	ldr	r3, [r3, #28]
 800aa16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa1a:	d15b      	bne.n	800aad4 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800aa1c:	7ffb      	ldrb	r3, [r7, #31]
 800aa1e:	2b08      	cmp	r3, #8
 800aa20:	d827      	bhi.n	800aa72 <UART_SetConfig+0x3a6>
 800aa22:	a201      	add	r2, pc, #4	; (adr r2, 800aa28 <UART_SetConfig+0x35c>)
 800aa24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa28:	0800aa4d 	.word	0x0800aa4d
 800aa2c:	0800aa55 	.word	0x0800aa55
 800aa30:	0800aa5d 	.word	0x0800aa5d
 800aa34:	0800aa73 	.word	0x0800aa73
 800aa38:	0800aa63 	.word	0x0800aa63
 800aa3c:	0800aa73 	.word	0x0800aa73
 800aa40:	0800aa73 	.word	0x0800aa73
 800aa44:	0800aa73 	.word	0x0800aa73
 800aa48:	0800aa6b 	.word	0x0800aa6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aa4c:	f7fc fed4 	bl	80077f8 <HAL_RCC_GetPCLK1Freq>
 800aa50:	61b8      	str	r0, [r7, #24]
        break;
 800aa52:	e013      	b.n	800aa7c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aa54:	f7fc fee4 	bl	8007820 <HAL_RCC_GetPCLK2Freq>
 800aa58:	61b8      	str	r0, [r7, #24]
        break;
 800aa5a:	e00f      	b.n	800aa7c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800aa5c:	4b4b      	ldr	r3, [pc, #300]	; (800ab8c <UART_SetConfig+0x4c0>)
 800aa5e:	61bb      	str	r3, [r7, #24]
        break;
 800aa60:	e00c      	b.n	800aa7c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aa62:	f7fc fe07 	bl	8007674 <HAL_RCC_GetSysClockFreq>
 800aa66:	61b8      	str	r0, [r7, #24]
        break;
 800aa68:	e008      	b.n	800aa7c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aa6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aa6e:	61bb      	str	r3, [r7, #24]
        break;
 800aa70:	e004      	b.n	800aa7c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800aa72:	2300      	movs	r3, #0
 800aa74:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800aa76:	2301      	movs	r3, #1
 800aa78:	77bb      	strb	r3, [r7, #30]
        break;
 800aa7a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800aa7c:	69bb      	ldr	r3, [r7, #24]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d074      	beq.n	800ab6c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800aa82:	69bb      	ldr	r3, [r7, #24]
 800aa84:	005a      	lsls	r2, r3, #1
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	685b      	ldr	r3, [r3, #4]
 800aa8a:	085b      	lsrs	r3, r3, #1
 800aa8c:	441a      	add	r2, r3
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	685b      	ldr	r3, [r3, #4]
 800aa92:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa96:	b29b      	uxth	r3, r3
 800aa98:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aa9a:	693b      	ldr	r3, [r7, #16]
 800aa9c:	2b0f      	cmp	r3, #15
 800aa9e:	d916      	bls.n	800aace <UART_SetConfig+0x402>
 800aaa0:	693b      	ldr	r3, [r7, #16]
 800aaa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aaa6:	d212      	bcs.n	800aace <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800aaa8:	693b      	ldr	r3, [r7, #16]
 800aaaa:	b29b      	uxth	r3, r3
 800aaac:	f023 030f 	bic.w	r3, r3, #15
 800aab0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800aab2:	693b      	ldr	r3, [r7, #16]
 800aab4:	085b      	lsrs	r3, r3, #1
 800aab6:	b29b      	uxth	r3, r3
 800aab8:	f003 0307 	and.w	r3, r3, #7
 800aabc:	b29a      	uxth	r2, r3
 800aabe:	89fb      	ldrh	r3, [r7, #14]
 800aac0:	4313      	orrs	r3, r2
 800aac2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	89fa      	ldrh	r2, [r7, #14]
 800aaca:	60da      	str	r2, [r3, #12]
 800aacc:	e04e      	b.n	800ab6c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800aace:	2301      	movs	r3, #1
 800aad0:	77bb      	strb	r3, [r7, #30]
 800aad2:	e04b      	b.n	800ab6c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800aad4:	7ffb      	ldrb	r3, [r7, #31]
 800aad6:	2b08      	cmp	r3, #8
 800aad8:	d827      	bhi.n	800ab2a <UART_SetConfig+0x45e>
 800aada:	a201      	add	r2, pc, #4	; (adr r2, 800aae0 <UART_SetConfig+0x414>)
 800aadc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aae0:	0800ab05 	.word	0x0800ab05
 800aae4:	0800ab0d 	.word	0x0800ab0d
 800aae8:	0800ab15 	.word	0x0800ab15
 800aaec:	0800ab2b 	.word	0x0800ab2b
 800aaf0:	0800ab1b 	.word	0x0800ab1b
 800aaf4:	0800ab2b 	.word	0x0800ab2b
 800aaf8:	0800ab2b 	.word	0x0800ab2b
 800aafc:	0800ab2b 	.word	0x0800ab2b
 800ab00:	0800ab23 	.word	0x0800ab23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ab04:	f7fc fe78 	bl	80077f8 <HAL_RCC_GetPCLK1Freq>
 800ab08:	61b8      	str	r0, [r7, #24]
        break;
 800ab0a:	e013      	b.n	800ab34 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ab0c:	f7fc fe88 	bl	8007820 <HAL_RCC_GetPCLK2Freq>
 800ab10:	61b8      	str	r0, [r7, #24]
        break;
 800ab12:	e00f      	b.n	800ab34 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ab14:	4b1d      	ldr	r3, [pc, #116]	; (800ab8c <UART_SetConfig+0x4c0>)
 800ab16:	61bb      	str	r3, [r7, #24]
        break;
 800ab18:	e00c      	b.n	800ab34 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ab1a:	f7fc fdab 	bl	8007674 <HAL_RCC_GetSysClockFreq>
 800ab1e:	61b8      	str	r0, [r7, #24]
        break;
 800ab20:	e008      	b.n	800ab34 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ab22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ab26:	61bb      	str	r3, [r7, #24]
        break;
 800ab28:	e004      	b.n	800ab34 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800ab2e:	2301      	movs	r3, #1
 800ab30:	77bb      	strb	r3, [r7, #30]
        break;
 800ab32:	bf00      	nop
    }

    if (pclk != 0U)
 800ab34:	69bb      	ldr	r3, [r7, #24]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d018      	beq.n	800ab6c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	685b      	ldr	r3, [r3, #4]
 800ab3e:	085a      	lsrs	r2, r3, #1
 800ab40:	69bb      	ldr	r3, [r7, #24]
 800ab42:	441a      	add	r2, r3
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	685b      	ldr	r3, [r3, #4]
 800ab48:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab4c:	b29b      	uxth	r3, r3
 800ab4e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ab50:	693b      	ldr	r3, [r7, #16]
 800ab52:	2b0f      	cmp	r3, #15
 800ab54:	d908      	bls.n	800ab68 <UART_SetConfig+0x49c>
 800ab56:	693b      	ldr	r3, [r7, #16]
 800ab58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab5c:	d204      	bcs.n	800ab68 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	693a      	ldr	r2, [r7, #16]
 800ab64:	60da      	str	r2, [r3, #12]
 800ab66:	e001      	b.n	800ab6c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800ab68:	2301      	movs	r3, #1
 800ab6a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2200      	movs	r2, #0
 800ab70:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	2200      	movs	r2, #0
 800ab76:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800ab78:	7fbb      	ldrb	r3, [r7, #30]
}
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	3720      	adds	r7, #32
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}
 800ab82:	bf00      	nop
 800ab84:	40007c00 	.word	0x40007c00
 800ab88:	40023800 	.word	0x40023800
 800ab8c:	00f42400 	.word	0x00f42400

0800ab90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ab90:	b480      	push	{r7}
 800ab92:	b083      	sub	sp, #12
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab9c:	f003 0301 	and.w	r3, r3, #1
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d00a      	beq.n	800abba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	685b      	ldr	r3, [r3, #4]
 800abaa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	430a      	orrs	r2, r1
 800abb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abbe:	f003 0302 	and.w	r3, r3, #2
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d00a      	beq.n	800abdc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	685b      	ldr	r3, [r3, #4]
 800abcc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	430a      	orrs	r2, r1
 800abda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abe0:	f003 0304 	and.w	r3, r3, #4
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d00a      	beq.n	800abfe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	685b      	ldr	r3, [r3, #4]
 800abee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	430a      	orrs	r2, r1
 800abfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac02:	f003 0308 	and.w	r3, r3, #8
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d00a      	beq.n	800ac20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	685b      	ldr	r3, [r3, #4]
 800ac10:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	430a      	orrs	r2, r1
 800ac1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac24:	f003 0310 	and.w	r3, r3, #16
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d00a      	beq.n	800ac42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	689b      	ldr	r3, [r3, #8]
 800ac32:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	430a      	orrs	r2, r1
 800ac40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac46:	f003 0320 	and.w	r3, r3, #32
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d00a      	beq.n	800ac64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	689b      	ldr	r3, [r3, #8]
 800ac54:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	430a      	orrs	r2, r1
 800ac62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d01a      	beq.n	800aca6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	685b      	ldr	r3, [r3, #4]
 800ac76:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	430a      	orrs	r2, r1
 800ac84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ac8e:	d10a      	bne.n	800aca6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	685b      	ldr	r3, [r3, #4]
 800ac96:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	430a      	orrs	r2, r1
 800aca4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d00a      	beq.n	800acc8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	685b      	ldr	r3, [r3, #4]
 800acb8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	430a      	orrs	r2, r1
 800acc6:	605a      	str	r2, [r3, #4]
  }
}
 800acc8:	bf00      	nop
 800acca:	370c      	adds	r7, #12
 800accc:	46bd      	mov	sp, r7
 800acce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd2:	4770      	bx	lr

0800acd4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b086      	sub	sp, #24
 800acd8:	af02      	add	r7, sp, #8
 800acda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	2200      	movs	r2, #0
 800ace0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ace4:	f7f9 f94c 	bl	8003f80 <HAL_GetTick>
 800ace8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	f003 0308 	and.w	r3, r3, #8
 800acf4:	2b08      	cmp	r3, #8
 800acf6:	d10e      	bne.n	800ad16 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800acf8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800acfc:	9300      	str	r3, [sp, #0]
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	2200      	movs	r2, #0
 800ad02:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ad06:	6878      	ldr	r0, [r7, #4]
 800ad08:	f000 f817 	bl	800ad3a <UART_WaitOnFlagUntilTimeout>
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d001      	beq.n	800ad16 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ad12:	2303      	movs	r3, #3
 800ad14:	e00d      	b.n	800ad32 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	2220      	movs	r2, #32
 800ad1a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	2220      	movs	r2, #32
 800ad20:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	2200      	movs	r2, #0
 800ad26:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800ad30:	2300      	movs	r3, #0
}
 800ad32:	4618      	mov	r0, r3
 800ad34:	3710      	adds	r7, #16
 800ad36:	46bd      	mov	sp, r7
 800ad38:	bd80      	pop	{r7, pc}

0800ad3a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ad3a:	b580      	push	{r7, lr}
 800ad3c:	b084      	sub	sp, #16
 800ad3e:	af00      	add	r7, sp, #0
 800ad40:	60f8      	str	r0, [r7, #12]
 800ad42:	60b9      	str	r1, [r7, #8]
 800ad44:	603b      	str	r3, [r7, #0]
 800ad46:	4613      	mov	r3, r2
 800ad48:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ad4a:	e05e      	b.n	800ae0a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ad4c:	69bb      	ldr	r3, [r7, #24]
 800ad4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad52:	d05a      	beq.n	800ae0a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ad54:	f7f9 f914 	bl	8003f80 <HAL_GetTick>
 800ad58:	4602      	mov	r2, r0
 800ad5a:	683b      	ldr	r3, [r7, #0]
 800ad5c:	1ad3      	subs	r3, r2, r3
 800ad5e:	69ba      	ldr	r2, [r7, #24]
 800ad60:	429a      	cmp	r2, r3
 800ad62:	d302      	bcc.n	800ad6a <UART_WaitOnFlagUntilTimeout+0x30>
 800ad64:	69bb      	ldr	r3, [r7, #24]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d11b      	bne.n	800ada2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	681a      	ldr	r2, [r3, #0]
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ad78:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	689a      	ldr	r2, [r3, #8]
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	f022 0201 	bic.w	r2, r2, #1
 800ad88:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	2220      	movs	r2, #32
 800ad8e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	2220      	movs	r2, #32
 800ad94:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	2200      	movs	r2, #0
 800ad9a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800ad9e:	2303      	movs	r3, #3
 800ada0:	e043      	b.n	800ae2a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	f003 0304 	and.w	r3, r3, #4
 800adac:	2b00      	cmp	r3, #0
 800adae:	d02c      	beq.n	800ae0a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	69db      	ldr	r3, [r3, #28]
 800adb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800adba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800adbe:	d124      	bne.n	800ae0a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800adc8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	681a      	ldr	r2, [r3, #0]
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800add8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	689a      	ldr	r2, [r3, #8]
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	f022 0201 	bic.w	r2, r2, #1
 800ade8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	2220      	movs	r2, #32
 800adee:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	2220      	movs	r2, #32
 800adf4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	2220      	movs	r2, #32
 800adfa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	2200      	movs	r2, #0
 800ae02:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800ae06:	2303      	movs	r3, #3
 800ae08:	e00f      	b.n	800ae2a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	69da      	ldr	r2, [r3, #28]
 800ae10:	68bb      	ldr	r3, [r7, #8]
 800ae12:	4013      	ands	r3, r2
 800ae14:	68ba      	ldr	r2, [r7, #8]
 800ae16:	429a      	cmp	r2, r3
 800ae18:	bf0c      	ite	eq
 800ae1a:	2301      	moveq	r3, #1
 800ae1c:	2300      	movne	r3, #0
 800ae1e:	b2db      	uxtb	r3, r3
 800ae20:	461a      	mov	r2, r3
 800ae22:	79fb      	ldrb	r3, [r7, #7]
 800ae24:	429a      	cmp	r2, r3
 800ae26:	d091      	beq.n	800ad4c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ae28:	2300      	movs	r3, #0
}
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	3710      	adds	r7, #16
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	bd80      	pop	{r7, pc}
	...

0800ae34 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ae34:	b480      	push	{r7}
 800ae36:	b085      	sub	sp, #20
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	60f8      	str	r0, [r7, #12]
 800ae3c:	60b9      	str	r1, [r7, #8]
 800ae3e:	4613      	mov	r3, r2
 800ae40:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	68ba      	ldr	r2, [r7, #8]
 800ae46:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	88fa      	ldrh	r2, [r7, #6]
 800ae4c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	88fa      	ldrh	r2, [r7, #6]
 800ae54:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	689b      	ldr	r3, [r3, #8]
 800ae62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae66:	d10e      	bne.n	800ae86 <UART_Start_Receive_IT+0x52>
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	691b      	ldr	r3, [r3, #16]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d105      	bne.n	800ae7c <UART_Start_Receive_IT+0x48>
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	f240 12ff 	movw	r2, #511	; 0x1ff
 800ae76:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ae7a:	e02d      	b.n	800aed8 <UART_Start_Receive_IT+0xa4>
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	22ff      	movs	r2, #255	; 0xff
 800ae80:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ae84:	e028      	b.n	800aed8 <UART_Start_Receive_IT+0xa4>
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	689b      	ldr	r3, [r3, #8]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d10d      	bne.n	800aeaa <UART_Start_Receive_IT+0x76>
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	691b      	ldr	r3, [r3, #16]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d104      	bne.n	800aea0 <UART_Start_Receive_IT+0x6c>
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	22ff      	movs	r2, #255	; 0xff
 800ae9a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ae9e:	e01b      	b.n	800aed8 <UART_Start_Receive_IT+0xa4>
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	227f      	movs	r2, #127	; 0x7f
 800aea4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800aea8:	e016      	b.n	800aed8 <UART_Start_Receive_IT+0xa4>
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	689b      	ldr	r3, [r3, #8]
 800aeae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aeb2:	d10d      	bne.n	800aed0 <UART_Start_Receive_IT+0x9c>
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	691b      	ldr	r3, [r3, #16]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d104      	bne.n	800aec6 <UART_Start_Receive_IT+0x92>
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	227f      	movs	r2, #127	; 0x7f
 800aec0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800aec4:	e008      	b.n	800aed8 <UART_Start_Receive_IT+0xa4>
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	223f      	movs	r2, #63	; 0x3f
 800aeca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800aece:	e003      	b.n	800aed8 <UART_Start_Receive_IT+0xa4>
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	2200      	movs	r2, #0
 800aed4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	2200      	movs	r2, #0
 800aedc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	2222      	movs	r2, #34	; 0x22
 800aee4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	689a      	ldr	r2, [r3, #8]
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	f042 0201 	orr.w	r2, r2, #1
 800aef4:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	689b      	ldr	r3, [r3, #8]
 800aefa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aefe:	d107      	bne.n	800af10 <UART_Start_Receive_IT+0xdc>
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	691b      	ldr	r3, [r3, #16]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d103      	bne.n	800af10 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	4a0c      	ldr	r2, [pc, #48]	; (800af3c <UART_Start_Receive_IT+0x108>)
 800af0c:	665a      	str	r2, [r3, #100]	; 0x64
 800af0e:	e002      	b.n	800af16 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	4a0b      	ldr	r2, [pc, #44]	; (800af40 <UART_Start_Receive_IT+0x10c>)
 800af14:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	2200      	movs	r2, #0
 800af1a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	681a      	ldr	r2, [r3, #0]
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800af2c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800af2e:	2300      	movs	r3, #0
}
 800af30:	4618      	mov	r0, r3
 800af32:	3714      	adds	r7, #20
 800af34:	46bd      	mov	sp, r7
 800af36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3a:	4770      	bx	lr
 800af3c:	0800b1c3 	.word	0x0800b1c3
 800af40:	0800b0ef 	.word	0x0800b0ef

0800af44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800af44:	b480      	push	{r7}
 800af46:	b083      	sub	sp, #12
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	681a      	ldr	r2, [r3, #0]
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800af5a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	689a      	ldr	r2, [r3, #8]
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	f022 0201 	bic.w	r2, r2, #1
 800af6a:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af70:	2b01      	cmp	r3, #1
 800af72:	d107      	bne.n	800af84 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	681a      	ldr	r2, [r3, #0]
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	f022 0210 	bic.w	r2, r2, #16
 800af82:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	2220      	movs	r2, #32
 800af88:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	2200      	movs	r2, #0
 800af8e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2200      	movs	r2, #0
 800af94:	665a      	str	r2, [r3, #100]	; 0x64
}
 800af96:	bf00      	nop
 800af98:	370c      	adds	r7, #12
 800af9a:	46bd      	mov	sp, r7
 800af9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa0:	4770      	bx	lr

0800afa2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800afa2:	b580      	push	{r7, lr}
 800afa4:	b084      	sub	sp, #16
 800afa6:	af00      	add	r7, sp, #0
 800afa8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	2200      	movs	r2, #0
 800afb4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	2200      	movs	r2, #0
 800afbc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800afc0:	68f8      	ldr	r0, [r7, #12]
 800afc2:	f7ff fb6d 	bl	800a6a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800afc6:	bf00      	nop
 800afc8:	3710      	adds	r7, #16
 800afca:	46bd      	mov	sp, r7
 800afcc:	bd80      	pop	{r7, pc}

0800afce <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800afce:	b480      	push	{r7}
 800afd0:	b083      	sub	sp, #12
 800afd2:	af00      	add	r7, sp, #0
 800afd4:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800afda:	2b21      	cmp	r3, #33	; 0x21
 800afdc:	d12a      	bne.n	800b034 <UART_TxISR_8BIT+0x66>
  {
    if (huart->TxXferCount == 0U)
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800afe4:	b29b      	uxth	r3, r3
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d110      	bne.n	800b00c <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	681a      	ldr	r2, [r3, #0]
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800aff8:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	681a      	ldr	r2, [r3, #0]
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b008:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800b00a:	e013      	b.n	800b034 <UART_TxISR_8BIT+0x66>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b010:	781a      	ldrb	r2, [r3, #0]
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b01c:	1c5a      	adds	r2, r3, #1
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b028:	b29b      	uxth	r3, r3
 800b02a:	3b01      	subs	r3, #1
 800b02c:	b29a      	uxth	r2, r3
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800b034:	bf00      	nop
 800b036:	370c      	adds	r7, #12
 800b038:	46bd      	mov	sp, r7
 800b03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03e:	4770      	bx	lr

0800b040 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b040:	b480      	push	{r7}
 800b042:	b085      	sub	sp, #20
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b04c:	2b21      	cmp	r3, #33	; 0x21
 800b04e:	d12f      	bne.n	800b0b0 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b056:	b29b      	uxth	r3, r3
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d110      	bne.n	800b07e <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	681a      	ldr	r2, [r3, #0]
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b06a:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	681a      	ldr	r2, [r3, #0]
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b07a:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800b07c:	e018      	b.n	800b0b0 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b082:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	881b      	ldrh	r3, [r3, #0]
 800b088:	461a      	mov	r2, r3
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b092:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b098:	1c9a      	adds	r2, r3, #2
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b0a4:	b29b      	uxth	r3, r3
 800b0a6:	3b01      	subs	r3, #1
 800b0a8:	b29a      	uxth	r2, r3
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800b0b0:	bf00      	nop
 800b0b2:	3714      	adds	r7, #20
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ba:	4770      	bx	lr

0800b0bc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b082      	sub	sp, #8
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	681a      	ldr	r2, [r3, #0]
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b0d2:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	2220      	movs	r2, #32
 800b0d8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	2200      	movs	r2, #0
 800b0de:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b0e0:	6878      	ldr	r0, [r7, #4]
 800b0e2:	f7f5 fc23 	bl	800092c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b0e6:	bf00      	nop
 800b0e8:	3708      	adds	r7, #8
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	bd80      	pop	{r7, pc}

0800b0ee <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b0ee:	b580      	push	{r7, lr}
 800b0f0:	b084      	sub	sp, #16
 800b0f2:	af00      	add	r7, sp, #0
 800b0f4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b0fc:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b102:	2b22      	cmp	r3, #34	; 0x22
 800b104:	d151      	bne.n	800b1aa <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b10c:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b10e:	89bb      	ldrh	r3, [r7, #12]
 800b110:	b2d9      	uxtb	r1, r3
 800b112:	89fb      	ldrh	r3, [r7, #14]
 800b114:	b2da      	uxtb	r2, r3
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b11a:	400a      	ands	r2, r1
 800b11c:	b2d2      	uxtb	r2, r2
 800b11e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b124:	1c5a      	adds	r2, r3, #1
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b130:	b29b      	uxth	r3, r3
 800b132:	3b01      	subs	r3, #1
 800b134:	b29a      	uxth	r2, r3
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b142:	b29b      	uxth	r3, r3
 800b144:	2b00      	cmp	r3, #0
 800b146:	d138      	bne.n	800b1ba <UART_RxISR_8BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	681a      	ldr	r2, [r3, #0]
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b156:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	689a      	ldr	r2, [r3, #8]
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	f022 0201 	bic.w	r2, r2, #1
 800b166:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	2220      	movs	r2, #32
 800b16c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	2200      	movs	r2, #0
 800b172:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b178:	2b01      	cmp	r3, #1
 800b17a:	d10f      	bne.n	800b19c <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	681a      	ldr	r2, [r3, #0]
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	f022 0210 	bic.w	r2, r2, #16
 800b18a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b192:	4619      	mov	r1, r3
 800b194:	6878      	ldr	r0, [r7, #4]
 800b196:	f7ff fa8d 	bl	800a6b4 <HAL_UARTEx_RxEventCallback>
 800b19a:	e002      	b.n	800b1a2 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b19c:	6878      	ldr	r0, [r7, #4]
 800b19e:	f7f5 fb73 	bl	8000888 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b1a8:	e007      	b.n	800b1ba <UART_RxISR_8BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	699a      	ldr	r2, [r3, #24]
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	f042 0208 	orr.w	r2, r2, #8
 800b1b8:	619a      	str	r2, [r3, #24]
}
 800b1ba:	bf00      	nop
 800b1bc:	3710      	adds	r7, #16
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	bd80      	pop	{r7, pc}

0800b1c2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b1c2:	b580      	push	{r7, lr}
 800b1c4:	b084      	sub	sp, #16
 800b1c6:	af00      	add	r7, sp, #0
 800b1c8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b1d0:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b1d6:	2b22      	cmp	r3, #34	; 0x22
 800b1d8:	d151      	bne.n	800b27e <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1e0:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1e6:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800b1e8:	89ba      	ldrh	r2, [r7, #12]
 800b1ea:	89fb      	ldrh	r3, [r7, #14]
 800b1ec:	4013      	ands	r3, r2
 800b1ee:	b29a      	uxth	r2, r3
 800b1f0:	68bb      	ldr	r3, [r7, #8]
 800b1f2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1f8:	1c9a      	adds	r2, r3, #2
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b204:	b29b      	uxth	r3, r3
 800b206:	3b01      	subs	r3, #1
 800b208:	b29a      	uxth	r2, r3
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b216:	b29b      	uxth	r3, r3
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d138      	bne.n	800b28e <UART_RxISR_16BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	681a      	ldr	r2, [r3, #0]
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b22a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	689a      	ldr	r2, [r3, #8]
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	f022 0201 	bic.w	r2, r2, #1
 800b23a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	2220      	movs	r2, #32
 800b240:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	2200      	movs	r2, #0
 800b246:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b24c:	2b01      	cmp	r3, #1
 800b24e:	d10f      	bne.n	800b270 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	681a      	ldr	r2, [r3, #0]
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	f022 0210 	bic.w	r2, r2, #16
 800b25e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b266:	4619      	mov	r1, r3
 800b268:	6878      	ldr	r0, [r7, #4]
 800b26a:	f7ff fa23 	bl	800a6b4 <HAL_UARTEx_RxEventCallback>
 800b26e:	e002      	b.n	800b276 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b270:	6878      	ldr	r0, [r7, #4]
 800b272:	f7f5 fb09 	bl	8000888 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	2200      	movs	r2, #0
 800b27a:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b27c:	e007      	b.n	800b28e <UART_RxISR_16BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	699a      	ldr	r2, [r3, #24]
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	f042 0208 	orr.w	r2, r2, #8
 800b28c:	619a      	str	r2, [r3, #24]
}
 800b28e:	bf00      	nop
 800b290:	3710      	adds	r7, #16
 800b292:	46bd      	mov	sp, r7
 800b294:	bd80      	pop	{r7, pc}
	...

0800b298 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800b298:	b480      	push	{r7}
 800b29a:	b085      	sub	sp, #20
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
 800b2a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800b2aa:	683b      	ldr	r3, [r7, #0]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	2b01      	cmp	r3, #1
 800b2b0:	d027      	beq.n	800b302 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800b2b8:	68fa      	ldr	r2, [r7, #12]
 800b2ba:	4b2f      	ldr	r3, [pc, #188]	; (800b378 <FMC_SDRAM_Init+0xe0>)
 800b2bc:	4013      	ands	r3, r2
 800b2be:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b2c0:	683b      	ldr	r3, [r7, #0]
 800b2c2:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800b2c4:	683b      	ldr	r3, [r7, #0]
 800b2c6:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b2c8:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800b2ca:	683b      	ldr	r3, [r7, #0]
 800b2cc:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800b2ce:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800b2d0:	683b      	ldr	r3, [r7, #0]
 800b2d2:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800b2d4:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800b2d6:	683b      	ldr	r3, [r7, #0]
 800b2d8:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800b2da:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800b2dc:	683b      	ldr	r3, [r7, #0]
 800b2de:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800b2e0:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800b2e2:	683b      	ldr	r3, [r7, #0]
 800b2e4:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800b2e6:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800b2e8:	683b      	ldr	r3, [r7, #0]
 800b2ea:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800b2ec:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800b2f2:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b2f4:	68fa      	ldr	r2, [r7, #12]
 800b2f6:	4313      	orrs	r3, r2
 800b2f8:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	68fa      	ldr	r2, [r7, #12]
 800b2fe:	601a      	str	r2, [r3, #0]
 800b300:	e032      	b.n	800b368 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b30e:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b310:	683b      	ldr	r3, [r7, #0]
 800b312:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800b314:	683b      	ldr	r3, [r7, #0]
 800b316:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b318:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800b31a:	683b      	ldr	r3, [r7, #0]
 800b31c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800b31e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b320:	68fa      	ldr	r2, [r7, #12]
 800b322:	4313      	orrs	r3, r2
 800b324:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	685b      	ldr	r3, [r3, #4]
 800b32a:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800b32c:	68ba      	ldr	r2, [r7, #8]
 800b32e:	4b12      	ldr	r3, [pc, #72]	; (800b378 <FMC_SDRAM_Init+0xe0>)
 800b330:	4013      	ands	r3, r2
 800b332:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800b338:	683b      	ldr	r3, [r7, #0]
 800b33a:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b33c:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800b342:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800b344:	683b      	ldr	r3, [r7, #0]
 800b346:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800b348:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800b34a:	683b      	ldr	r3, [r7, #0]
 800b34c:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800b34e:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800b350:	683b      	ldr	r3, [r7, #0]
 800b352:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800b354:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b356:	68ba      	ldr	r2, [r7, #8]
 800b358:	4313      	orrs	r3, r2
 800b35a:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	68fa      	ldr	r2, [r7, #12]
 800b360:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	68ba      	ldr	r2, [r7, #8]
 800b366:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800b368:	2300      	movs	r3, #0
}
 800b36a:	4618      	mov	r0, r3
 800b36c:	3714      	adds	r7, #20
 800b36e:	46bd      	mov	sp, r7
 800b370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b374:	4770      	bx	lr
 800b376:	bf00      	nop
 800b378:	ffff8000 	.word	0xffff8000

0800b37c <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b37c:	b480      	push	{r7}
 800b37e:	b087      	sub	sp, #28
 800b380:	af00      	add	r7, sp, #0
 800b382:	60f8      	str	r0, [r7, #12]
 800b384:	60b9      	str	r1, [r7, #8]
 800b386:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800b388:	2300      	movs	r3, #0
 800b38a:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800b38c:	2300      	movs	r3, #0
 800b38e:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	2b01      	cmp	r3, #1
 800b394:	d02e      	beq.n	800b3f4 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	689b      	ldr	r3, [r3, #8]
 800b39a:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800b39c:	697b      	ldr	r3, [r7, #20]
 800b39e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b3a2:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b3a4:	68bb      	ldr	r3, [r7, #8]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800b3aa:	68bb      	ldr	r3, [r7, #8]
 800b3ac:	685b      	ldr	r3, [r3, #4]
 800b3ae:	3b01      	subs	r3, #1
 800b3b0:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b3b2:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800b3b4:	68bb      	ldr	r3, [r7, #8]
 800b3b6:	689b      	ldr	r3, [r3, #8]
 800b3b8:	3b01      	subs	r3, #1
 800b3ba:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800b3bc:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800b3be:	68bb      	ldr	r3, [r7, #8]
 800b3c0:	68db      	ldr	r3, [r3, #12]
 800b3c2:	3b01      	subs	r3, #1
 800b3c4:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800b3c6:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800b3c8:	68bb      	ldr	r3, [r7, #8]
 800b3ca:	691b      	ldr	r3, [r3, #16]
 800b3cc:	3b01      	subs	r3, #1
 800b3ce:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800b3d0:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800b3d2:	68bb      	ldr	r3, [r7, #8]
 800b3d4:	695b      	ldr	r3, [r3, #20]
 800b3d6:	3b01      	subs	r3, #1
 800b3d8:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800b3da:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800b3dc:	68bb      	ldr	r3, [r7, #8]
 800b3de:	699b      	ldr	r3, [r3, #24]
 800b3e0:	3b01      	subs	r3, #1
 800b3e2:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b3e4:	4313      	orrs	r3, r2
 800b3e6:	697a      	ldr	r2, [r7, #20]
 800b3e8:	4313      	orrs	r3, r2
 800b3ea:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	697a      	ldr	r2, [r7, #20]
 800b3f0:	609a      	str	r2, [r3, #8]
 800b3f2:	e039      	b.n	800b468 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	689b      	ldr	r3, [r3, #8]
 800b3f8:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800b3fa:	697a      	ldr	r2, [r7, #20]
 800b3fc:	4b1e      	ldr	r3, [pc, #120]	; (800b478 <FMC_SDRAM_Timing_Init+0xfc>)
 800b3fe:	4013      	ands	r3, r2
 800b400:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800b402:	68bb      	ldr	r3, [r7, #8]
 800b404:	68db      	ldr	r3, [r3, #12]
 800b406:	3b01      	subs	r3, #1
 800b408:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800b40a:	68bb      	ldr	r3, [r7, #8]
 800b40c:	695b      	ldr	r3, [r3, #20]
 800b40e:	3b01      	subs	r3, #1
 800b410:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800b412:	4313      	orrs	r3, r2
 800b414:	697a      	ldr	r2, [r7, #20]
 800b416:	4313      	orrs	r3, r2
 800b418:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	68db      	ldr	r3, [r3, #12]
 800b41e:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800b420:	693b      	ldr	r3, [r7, #16]
 800b422:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b426:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b428:	68bb      	ldr	r3, [r7, #8]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800b42e:	68bb      	ldr	r3, [r7, #8]
 800b430:	685b      	ldr	r3, [r3, #4]
 800b432:	3b01      	subs	r3, #1
 800b434:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b436:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800b438:	68bb      	ldr	r3, [r7, #8]
 800b43a:	689b      	ldr	r3, [r3, #8]
 800b43c:	3b01      	subs	r3, #1
 800b43e:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800b440:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800b442:	68bb      	ldr	r3, [r7, #8]
 800b444:	691b      	ldr	r3, [r3, #16]
 800b446:	3b01      	subs	r3, #1
 800b448:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800b44a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800b44c:	68bb      	ldr	r3, [r7, #8]
 800b44e:	699b      	ldr	r3, [r3, #24]
 800b450:	3b01      	subs	r3, #1
 800b452:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b454:	4313      	orrs	r3, r2
 800b456:	693a      	ldr	r2, [r7, #16]
 800b458:	4313      	orrs	r3, r2
 800b45a:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	697a      	ldr	r2, [r7, #20]
 800b460:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	693a      	ldr	r2, [r7, #16]
 800b466:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800b468:	2300      	movs	r3, #0
}
 800b46a:	4618      	mov	r0, r3
 800b46c:	371c      	adds	r7, #28
 800b46e:	46bd      	mov	sp, r7
 800b470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b474:	4770      	bx	lr
 800b476:	bf00      	nop
 800b478:	ff0f0fff 	.word	0xff0f0fff

0800b47c <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{ 
 800b47c:	b480      	push	{r7}
 800b47e:	b085      	sub	sp, #20
 800b480:	af00      	add	r7, sp, #0
 800b482:	60f8      	str	r0, [r7, #12]
 800b484:	60b9      	str	r1, [r7, #8]
 800b486:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	691a      	ldr	r2, [r3, #16]
 800b48c:	4b0c      	ldr	r3, [pc, #48]	; (800b4c0 <FMC_SDRAM_SendCommand+0x44>)
 800b48e:	4013      	ands	r3, r2
 800b490:	68ba      	ldr	r2, [r7, #8]
 800b492:	6811      	ldr	r1, [r2, #0]
 800b494:	68ba      	ldr	r2, [r7, #8]
 800b496:	6852      	ldr	r2, [r2, #4]
 800b498:	4311      	orrs	r1, r2
 800b49a:	68ba      	ldr	r2, [r7, #8]
 800b49c:	6892      	ldr	r2, [r2, #8]
 800b49e:	3a01      	subs	r2, #1
 800b4a0:	0152      	lsls	r2, r2, #5
 800b4a2:	4311      	orrs	r1, r2
 800b4a4:	68ba      	ldr	r2, [r7, #8]
 800b4a6:	68d2      	ldr	r2, [r2, #12]
 800b4a8:	0252      	lsls	r2, r2, #9
 800b4aa:	430a      	orrs	r2, r1
 800b4ac:	431a      	orrs	r2, r3
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	611a      	str	r2, [r3, #16]
             FMC_SDCMR_NRFS | FMC_SDCMR_MRD), ((Command->CommandMode) | 
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  
  return HAL_OK;  
 800b4b2:	2300      	movs	r3, #0
}
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	3714      	adds	r7, #20
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4be:	4770      	bx	lr
 800b4c0:	ffc00000 	.word	0xffc00000

0800b4c4 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800b4c4:	b480      	push	{r7}
 800b4c6:	b083      	sub	sp, #12
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
 800b4cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	695a      	ldr	r2, [r3, #20]
 800b4d2:	683b      	ldr	r3, [r7, #0]
 800b4d4:	005b      	lsls	r3, r3, #1
 800b4d6:	431a      	orrs	r2, r3
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800b4dc:	2300      	movs	r3, #0
}
 800b4de:	4618      	mov	r0, r3
 800b4e0:	370c      	adds	r7, #12
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e8:	4770      	bx	lr
	...

0800b4ec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b4ec:	b084      	sub	sp, #16
 800b4ee:	b580      	push	{r7, lr}
 800b4f0:	b084      	sub	sp, #16
 800b4f2:	af00      	add	r7, sp, #0
 800b4f4:	6078      	str	r0, [r7, #4]
 800b4f6:	f107 001c 	add.w	r0, r7, #28
 800b4fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b4fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b500:	2b01      	cmp	r3, #1
 800b502:	d120      	bne.n	800b546 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b508:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	68da      	ldr	r2, [r3, #12]
 800b514:	4b20      	ldr	r3, [pc, #128]	; (800b598 <USB_CoreInit+0xac>)
 800b516:	4013      	ands	r3, r2
 800b518:	687a      	ldr	r2, [r7, #4]
 800b51a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	68db      	ldr	r3, [r3, #12]
 800b520:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b528:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b52a:	2b01      	cmp	r3, #1
 800b52c:	d105      	bne.n	800b53a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	68db      	ldr	r3, [r3, #12]
 800b532:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800b53a:	6878      	ldr	r0, [r7, #4]
 800b53c:	f000 f8b2 	bl	800b6a4 <USB_CoreReset>
 800b540:	4603      	mov	r3, r0
 800b542:	73fb      	strb	r3, [r7, #15]
 800b544:	e010      	b.n	800b568 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	68db      	ldr	r3, [r3, #12]
 800b54a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b552:	6878      	ldr	r0, [r7, #4]
 800b554:	f000 f8a6 	bl	800b6a4 <USB_CoreReset>
 800b558:	4603      	mov	r3, r0
 800b55a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b560:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800b568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b56a:	2b01      	cmp	r3, #1
 800b56c:	d10b      	bne.n	800b586 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	689b      	ldr	r3, [r3, #8]
 800b572:	f043 0206 	orr.w	r2, r3, #6
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	689b      	ldr	r3, [r3, #8]
 800b57e:	f043 0220 	orr.w	r2, r3, #32
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b586:	7bfb      	ldrb	r3, [r7, #15]
}
 800b588:	4618      	mov	r0, r3
 800b58a:	3710      	adds	r7, #16
 800b58c:	46bd      	mov	sp, r7
 800b58e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b592:	b004      	add	sp, #16
 800b594:	4770      	bx	lr
 800b596:	bf00      	nop
 800b598:	ffbdffbf 	.word	0xffbdffbf

0800b59c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b59c:	b480      	push	{r7}
 800b59e:	b083      	sub	sp, #12
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	689b      	ldr	r3, [r3, #8]
 800b5a8:	f023 0201 	bic.w	r2, r3, #1
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b5b0:	2300      	movs	r3, #0
}
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	370c      	adds	r7, #12
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5bc:	4770      	bx	lr

0800b5be <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b5be:	b580      	push	{r7, lr}
 800b5c0:	b082      	sub	sp, #8
 800b5c2:	af00      	add	r7, sp, #0
 800b5c4:	6078      	str	r0, [r7, #4]
 800b5c6:	460b      	mov	r3, r1
 800b5c8:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	68db      	ldr	r3, [r3, #12]
 800b5ce:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b5d6:	78fb      	ldrb	r3, [r7, #3]
 800b5d8:	2b01      	cmp	r3, #1
 800b5da:	d106      	bne.n	800b5ea <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	68db      	ldr	r3, [r3, #12]
 800b5e0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	60da      	str	r2, [r3, #12]
 800b5e8:	e00b      	b.n	800b602 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800b5ea:	78fb      	ldrb	r3, [r7, #3]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d106      	bne.n	800b5fe <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	68db      	ldr	r3, [r3, #12]
 800b5f4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	60da      	str	r2, [r3, #12]
 800b5fc:	e001      	b.n	800b602 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800b5fe:	2301      	movs	r3, #1
 800b600:	e003      	b.n	800b60a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800b602:	2032      	movs	r0, #50	; 0x32
 800b604:	f7f8 fcc8 	bl	8003f98 <HAL_Delay>

  return HAL_OK;
 800b608:	2300      	movs	r3, #0
}
 800b60a:	4618      	mov	r0, r3
 800b60c:	3708      	adds	r7, #8
 800b60e:	46bd      	mov	sp, r7
 800b610:	bd80      	pop	{r7, pc}
	...

0800b614 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b614:	b480      	push	{r7}
 800b616:	b085      	sub	sp, #20
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
 800b61c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800b61e:	2300      	movs	r3, #0
 800b620:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b622:	683b      	ldr	r3, [r7, #0]
 800b624:	019b      	lsls	r3, r3, #6
 800b626:	f043 0220 	orr.w	r2, r3, #32
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	3301      	adds	r3, #1
 800b632:	60fb      	str	r3, [r7, #12]
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	4a09      	ldr	r2, [pc, #36]	; (800b65c <USB_FlushTxFifo+0x48>)
 800b638:	4293      	cmp	r3, r2
 800b63a:	d901      	bls.n	800b640 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800b63c:	2303      	movs	r3, #3
 800b63e:	e006      	b.n	800b64e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	691b      	ldr	r3, [r3, #16]
 800b644:	f003 0320 	and.w	r3, r3, #32
 800b648:	2b20      	cmp	r3, #32
 800b64a:	d0f0      	beq.n	800b62e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800b64c:	2300      	movs	r3, #0
}
 800b64e:	4618      	mov	r0, r3
 800b650:	3714      	adds	r7, #20
 800b652:	46bd      	mov	sp, r7
 800b654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b658:	4770      	bx	lr
 800b65a:	bf00      	nop
 800b65c:	00030d40 	.word	0x00030d40

0800b660 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b660:	b480      	push	{r7}
 800b662:	b085      	sub	sp, #20
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800b668:	2300      	movs	r3, #0
 800b66a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	2210      	movs	r2, #16
 800b670:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	3301      	adds	r3, #1
 800b676:	60fb      	str	r3, [r7, #12]
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	4a09      	ldr	r2, [pc, #36]	; (800b6a0 <USB_FlushRxFifo+0x40>)
 800b67c:	4293      	cmp	r3, r2
 800b67e:	d901      	bls.n	800b684 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800b680:	2303      	movs	r3, #3
 800b682:	e006      	b.n	800b692 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	691b      	ldr	r3, [r3, #16]
 800b688:	f003 0310 	and.w	r3, r3, #16
 800b68c:	2b10      	cmp	r3, #16
 800b68e:	d0f0      	beq.n	800b672 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800b690:	2300      	movs	r3, #0
}
 800b692:	4618      	mov	r0, r3
 800b694:	3714      	adds	r7, #20
 800b696:	46bd      	mov	sp, r7
 800b698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69c:	4770      	bx	lr
 800b69e:	bf00      	nop
 800b6a0:	00030d40 	.word	0x00030d40

0800b6a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b6a4:	b480      	push	{r7}
 800b6a6:	b085      	sub	sp, #20
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	3301      	adds	r3, #1
 800b6b4:	60fb      	str	r3, [r7, #12]
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	4a13      	ldr	r2, [pc, #76]	; (800b708 <USB_CoreReset+0x64>)
 800b6ba:	4293      	cmp	r3, r2
 800b6bc:	d901      	bls.n	800b6c2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b6be:	2303      	movs	r3, #3
 800b6c0:	e01b      	b.n	800b6fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	691b      	ldr	r3, [r3, #16]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	daf2      	bge.n	800b6b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	691b      	ldr	r3, [r3, #16]
 800b6d2:	f043 0201 	orr.w	r2, r3, #1
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	3301      	adds	r3, #1
 800b6de:	60fb      	str	r3, [r7, #12]
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	4a09      	ldr	r2, [pc, #36]	; (800b708 <USB_CoreReset+0x64>)
 800b6e4:	4293      	cmp	r3, r2
 800b6e6:	d901      	bls.n	800b6ec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b6e8:	2303      	movs	r3, #3
 800b6ea:	e006      	b.n	800b6fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	691b      	ldr	r3, [r3, #16]
 800b6f0:	f003 0301 	and.w	r3, r3, #1
 800b6f4:	2b01      	cmp	r3, #1
 800b6f6:	d0f0      	beq.n	800b6da <USB_CoreReset+0x36>

  return HAL_OK;
 800b6f8:	2300      	movs	r3, #0
}
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	3714      	adds	r7, #20
 800b6fe:	46bd      	mov	sp, r7
 800b700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b704:	4770      	bx	lr
 800b706:	bf00      	nop
 800b708:	00030d40 	.word	0x00030d40

0800b70c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b70c:	b084      	sub	sp, #16
 800b70e:	b580      	push	{r7, lr}
 800b710:	b084      	sub	sp, #16
 800b712:	af00      	add	r7, sp, #0
 800b714:	6078      	str	r0, [r7, #4]
 800b716:	f107 001c 	add.w	r0, r7, #28
 800b71a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b722:	68bb      	ldr	r3, [r7, #8]
 800b724:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b728:	461a      	mov	r2, r3
 800b72a:	2300      	movs	r3, #0
 800b72c:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b732:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b73e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b742:	2b00      	cmp	r3, #0
 800b744:	d018      	beq.n	800b778 <USB_HostInit+0x6c>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800b746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b748:	2b01      	cmp	r3, #1
 800b74a:	d10a      	bne.n	800b762 <USB_HostInit+0x56>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800b74c:	68bb      	ldr	r3, [r7, #8]
 800b74e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	68ba      	ldr	r2, [r7, #8]
 800b756:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b75a:	f043 0304 	orr.w	r3, r3, #4
 800b75e:	6013      	str	r3, [r2, #0]
 800b760:	e014      	b.n	800b78c <USB_HostInit+0x80>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800b762:	68bb      	ldr	r3, [r7, #8]
 800b764:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	68ba      	ldr	r2, [r7, #8]
 800b76c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b770:	f023 0304 	bic.w	r3, r3, #4
 800b774:	6013      	str	r3, [r2, #0]
 800b776:	e009      	b.n	800b78c <USB_HostInit+0x80>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800b778:	68bb      	ldr	r3, [r7, #8]
 800b77a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	68ba      	ldr	r2, [r7, #8]
 800b782:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b786:	f023 0304 	bic.w	r3, r3, #4
 800b78a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800b78c:	2110      	movs	r1, #16
 800b78e:	6878      	ldr	r0, [r7, #4]
 800b790:	f7ff ff40 	bl	800b614 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800b794:	6878      	ldr	r0, [r7, #4]
 800b796:	f7ff ff63 	bl	800b660 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800b79a:	2300      	movs	r3, #0
 800b79c:	60fb      	str	r3, [r7, #12]
 800b79e:	e015      	b.n	800b7cc <USB_HostInit+0xc0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	015a      	lsls	r2, r3, #5
 800b7a4:	68bb      	ldr	r3, [r7, #8]
 800b7a6:	4413      	add	r3, r2
 800b7a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b7ac:	461a      	mov	r2, r3
 800b7ae:	f04f 33ff 	mov.w	r3, #4294967295
 800b7b2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	015a      	lsls	r2, r3, #5
 800b7b8:	68bb      	ldr	r3, [r7, #8]
 800b7ba:	4413      	add	r3, r2
 800b7bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b7c0:	461a      	mov	r2, r3
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	3301      	adds	r3, #1
 800b7ca:	60fb      	str	r3, [r7, #12]
 800b7cc:	6a3b      	ldr	r3, [r7, #32]
 800b7ce:	68fa      	ldr	r2, [r7, #12]
 800b7d0:	429a      	cmp	r2, r3
 800b7d2:	d3e5      	bcc.n	800b7a0 <USB_HostInit+0x94>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800b7d4:	2101      	movs	r1, #1
 800b7d6:	6878      	ldr	r0, [r7, #4]
 800b7d8:	f000 f848 	bl	800b86c <USB_DriveVbus>

  HAL_Delay(200U);
 800b7dc:	20c8      	movs	r0, #200	; 0xc8
 800b7de:	f7f8 fbdb 	bl	8003f98 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	f04f 32ff 	mov.w	r2, #4294967295
 800b7ee:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d00b      	beq.n	800b814 <USB_HostInit+0x108>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b802:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	4a14      	ldr	r2, [pc, #80]	; (800b858 <USB_HostInit+0x14c>)
 800b808:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	4a13      	ldr	r2, [pc, #76]	; (800b85c <USB_HostInit+0x150>)
 800b80e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800b812:	e009      	b.n	800b828 <USB_HostInit+0x11c>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	2280      	movs	r2, #128	; 0x80
 800b818:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	4a10      	ldr	r2, [pc, #64]	; (800b860 <USB_HostInit+0x154>)
 800b81e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	4a10      	ldr	r2, [pc, #64]	; (800b864 <USB_HostInit+0x158>)
 800b824:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d105      	bne.n	800b83a <USB_HostInit+0x12e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	699b      	ldr	r3, [r3, #24]
 800b832:	f043 0210 	orr.w	r2, r3, #16
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	699a      	ldr	r2, [r3, #24]
 800b83e:	4b0a      	ldr	r3, [pc, #40]	; (800b868 <USB_HostInit+0x15c>)
 800b840:	4313      	orrs	r3, r2
 800b842:	687a      	ldr	r2, [r7, #4]
 800b844:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800b846:	2300      	movs	r3, #0
}
 800b848:	4618      	mov	r0, r3
 800b84a:	3710      	adds	r7, #16
 800b84c:	46bd      	mov	sp, r7
 800b84e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b852:	b004      	add	sp, #16
 800b854:	4770      	bx	lr
 800b856:	bf00      	nop
 800b858:	01000200 	.word	0x01000200
 800b85c:	00e00300 	.word	0x00e00300
 800b860:	00600080 	.word	0x00600080
 800b864:	004000e0 	.word	0x004000e0
 800b868:	a3200008 	.word	0xa3200008

0800b86c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800b86c:	b480      	push	{r7}
 800b86e:	b085      	sub	sp, #20
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]
 800b874:	460b      	mov	r3, r1
 800b876:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800b87c:	2300      	movs	r3, #0
 800b87e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800b88a:	68bb      	ldr	r3, [r7, #8]
 800b88c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800b890:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800b892:	68bb      	ldr	r3, [r7, #8]
 800b894:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d109      	bne.n	800b8b0 <USB_DriveVbus+0x44>
 800b89c:	78fb      	ldrb	r3, [r7, #3]
 800b89e:	2b01      	cmp	r3, #1
 800b8a0:	d106      	bne.n	800b8b0 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800b8a2:	68bb      	ldr	r3, [r7, #8]
 800b8a4:	68fa      	ldr	r2, [r7, #12]
 800b8a6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800b8aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b8ae:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800b8b0:	68bb      	ldr	r3, [r7, #8]
 800b8b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b8b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b8ba:	d109      	bne.n	800b8d0 <USB_DriveVbus+0x64>
 800b8bc:	78fb      	ldrb	r3, [r7, #3]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d106      	bne.n	800b8d0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800b8c2:	68bb      	ldr	r3, [r7, #8]
 800b8c4:	68fa      	ldr	r2, [r7, #12]
 800b8c6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800b8ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b8ce:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800b8d0:	2300      	movs	r3, #0
}
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	3714      	adds	r7, #20
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8dc:	4770      	bx	lr
	...

0800b8e0 <get_paramAddrTable>:

s_FBTable fbTable; //table holding function blocks
s_FBTable* get_fbTable(){return &fbTable;}

s_Param paramAddrTable; //parameters pointing function block in/out arguments
s_Param* get_paramAddrTable(){return &paramAddrTable;}
 800b8e0:	b480      	push	{r7}
 800b8e2:	af00      	add	r7, sp, #0
 800b8e4:	4b02      	ldr	r3, [pc, #8]	; (800b8f0 <get_paramAddrTable+0x10>)
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ee:	4770      	bx	lr
 800b8f0:	20000618 	.word	0x20000618

0800b8f4 <writeToFBTable>:
}
*/

//general functions

uint8_t writeToFBTable(void* callback, uint8_t startParamIndex){
 800b8f4:	b480      	push	{r7}
 800b8f6:	b085      	sub	sp, #20
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
 800b8fc:	460b      	mov	r3, r1
 800b8fe:	70fb      	strb	r3, [r7, #3]
	uint8_t fb_index = fbTable.length;
 800b900:	4b0d      	ldr	r3, [pc, #52]	; (800b938 <writeToFBTable+0x44>)
 800b902:	781b      	ldrb	r3, [r3, #0]
 800b904:	73fb      	strb	r3, [r7, #15]
	fbTable.fb[fb_index].callback = callback;
 800b906:	7bfb      	ldrb	r3, [r7, #15]
 800b908:	687a      	ldr	r2, [r7, #4]
 800b90a:	490b      	ldr	r1, [pc, #44]	; (800b938 <writeToFBTable+0x44>)
 800b90c:	00db      	lsls	r3, r3, #3
 800b90e:	440b      	add	r3, r1
 800b910:	609a      	str	r2, [r3, #8]
	fbTable.fb[fb_index].param_start_index = startParamIndex;
 800b912:	7bfb      	ldrb	r3, [r7, #15]
 800b914:	4a08      	ldr	r2, [pc, #32]	; (800b938 <writeToFBTable+0x44>)
 800b916:	00db      	lsls	r3, r3, #3
 800b918:	4413      	add	r3, r2
 800b91a:	78fa      	ldrb	r2, [r7, #3]
 800b91c:	711a      	strb	r2, [r3, #4]
	fbTable.length++;
 800b91e:	4b06      	ldr	r3, [pc, #24]	; (800b938 <writeToFBTable+0x44>)
 800b920:	781b      	ldrb	r3, [r3, #0]
 800b922:	3301      	adds	r3, #1
 800b924:	b2da      	uxtb	r2, r3
 800b926:	4b04      	ldr	r3, [pc, #16]	; (800b938 <writeToFBTable+0x44>)
 800b928:	701a      	strb	r2, [r3, #0]
	return fb_index;
 800b92a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b92c:	4618      	mov	r0, r3
 800b92e:	3714      	adds	r7, #20
 800b930:	46bd      	mov	sp, r7
 800b932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b936:	4770      	bx	lr
 800b938:	200002f4 	.word	0x200002f4

0800b93c <createParameter>:

uint32_t createParameter(int32_t init_val){
 800b93c:	b480      	push	{r7}
 800b93e:	b083      	sub	sp, #12
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]
	paramAddrTable.value[paramAddrTable.currentIndex] = init_val;
 800b944:	4b10      	ldr	r3, [pc, #64]	; (800b988 <createParameter+0x4c>)
 800b946:	781b      	ldrb	r3, [r3, #0]
 800b948:	4a0f      	ldr	r2, [pc, #60]	; (800b988 <createParameter+0x4c>)
 800b94a:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800b94e:	009b      	lsls	r3, r3, #2
 800b950:	4413      	add	r3, r2
 800b952:	687a      	ldr	r2, [r7, #4]
 800b954:	605a      	str	r2, [r3, #4]
	paramAddrTable.addr[paramAddrTable.currentIndex] = paramAddrTable.currentIndex;
 800b956:	4b0c      	ldr	r3, [pc, #48]	; (800b988 <createParameter+0x4c>)
 800b958:	781a      	ldrb	r2, [r3, #0]
 800b95a:	4b0b      	ldr	r3, [pc, #44]	; (800b988 <createParameter+0x4c>)
 800b95c:	781b      	ldrb	r3, [r3, #0]
 800b95e:	4611      	mov	r1, r2
 800b960:	4a09      	ldr	r2, [pc, #36]	; (800b988 <createParameter+0x4c>)
 800b962:	009b      	lsls	r3, r3, #2
 800b964:	4413      	add	r3, r2
 800b966:	6059      	str	r1, [r3, #4]
	paramAddrTable.currentIndex++;
 800b968:	4b07      	ldr	r3, [pc, #28]	; (800b988 <createParameter+0x4c>)
 800b96a:	781b      	ldrb	r3, [r3, #0]
 800b96c:	3301      	adds	r3, #1
 800b96e:	b2da      	uxtb	r2, r3
 800b970:	4b05      	ldr	r3, [pc, #20]	; (800b988 <createParameter+0x4c>)
 800b972:	701a      	strb	r2, [r3, #0]
	return paramAddrTable.currentIndex-1;
 800b974:	4b04      	ldr	r3, [pc, #16]	; (800b988 <createParameter+0x4c>)
 800b976:	781b      	ldrb	r3, [r3, #0]
 800b978:	3b01      	subs	r3, #1
}
 800b97a:	4618      	mov	r0, r3
 800b97c:	370c      	adds	r7, #12
 800b97e:	46bd      	mov	sp, r7
 800b980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b984:	4770      	bx	lr
 800b986:	bf00      	nop
 800b988:	20000618 	.word	0x20000618

0800b98c <make_connection>:

void make_connection(uint32_t dest_port_i, uint32_t src_port_i)
{
 800b98c:	b480      	push	{r7}
 800b98e:	b083      	sub	sp, #12
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
 800b994:	6039      	str	r1, [r7, #0]
	paramAddrTable.addr[dest_port_i] = paramAddrTable.addr[src_port_i] ;
 800b996:	4a08      	ldr	r2, [pc, #32]	; (800b9b8 <make_connection+0x2c>)
 800b998:	683b      	ldr	r3, [r7, #0]
 800b99a:	009b      	lsls	r3, r3, #2
 800b99c:	4413      	add	r3, r2
 800b99e:	685a      	ldr	r2, [r3, #4]
 800b9a0:	4905      	ldr	r1, [pc, #20]	; (800b9b8 <make_connection+0x2c>)
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	009b      	lsls	r3, r3, #2
 800b9a6:	440b      	add	r3, r1
 800b9a8:	605a      	str	r2, [r3, #4]
}
 800b9aa:	bf00      	nop
 800b9ac:	370c      	adds	r7, #12
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b4:	4770      	bx	lr
 800b9b6:	bf00      	nop
 800b9b8:	20000618 	.word	0x20000618

0800b9bc <initiate_mccore>:

void initiate_mccore(){
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	af00      	add	r7, sp, #0
	fbTable.length = 0;
 800b9c0:	4b06      	ldr	r3, [pc, #24]	; (800b9dc <initiate_mccore+0x20>)
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	701a      	strb	r2, [r3, #0]
	paramAddrTable.currentIndex = 0;
 800b9c6:	4b06      	ldr	r3, [pc, #24]	; (800b9e0 <initiate_mccore+0x24>)
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	701a      	strb	r2, [r3, #0]
	init_uniqueid();
 800b9cc:	f000 f9a0 	bl	800bd10 <init_uniqueid>
	init_deployment_ch();
 800b9d0:	f001 fda8 	bl	800d524 <init_deployment_ch>
	init_text_table();
 800b9d4:	f000 f8f8 	bl	800bbc8 <init_text_table>
}
 800b9d8:	bf00      	nop
 800b9da:	bd80      	pop	{r7, pc}
 800b9dc:	200002f4 	.word	0x200002f4
 800b9e0:	20000618 	.word	0x20000618

0800b9e4 <clear_display>:

//clear the display data if there is an gui display element
void clear_display(){
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b082      	sub	sp, #8
 800b9e8:	af00      	add	r7, sp, #0
	uint8_t is_there_any_gui_disp = 0;
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	71fb      	strb	r3, [r7, #7]
	//search the fbtable for fb_gui_display
	for(uint8_t i = 0;i<fbTable.length;i++){
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	71bb      	strb	r3, [r7, #6]
 800b9f2:	e00d      	b.n	800ba10 <clear_display+0x2c>
		if(fbTable.fb[i].callback == fb_gui_display){
 800b9f4:	79bb      	ldrb	r3, [r7, #6]
 800b9f6:	4a0d      	ldr	r2, [pc, #52]	; (800ba2c <clear_display+0x48>)
 800b9f8:	00db      	lsls	r3, r3, #3
 800b9fa:	4413      	add	r3, r2
 800b9fc:	689b      	ldr	r3, [r3, #8]
 800b9fe:	4a0c      	ldr	r2, [pc, #48]	; (800ba30 <clear_display+0x4c>)
 800ba00:	4293      	cmp	r3, r2
 800ba02:	d102      	bne.n	800ba0a <clear_display+0x26>
			is_there_any_gui_disp = 1;
 800ba04:	2301      	movs	r3, #1
 800ba06:	71fb      	strb	r3, [r7, #7]
			break;
 800ba08:	e007      	b.n	800ba1a <clear_display+0x36>
	for(uint8_t i = 0;i<fbTable.length;i++){
 800ba0a:	79bb      	ldrb	r3, [r7, #6]
 800ba0c:	3301      	adds	r3, #1
 800ba0e:	71bb      	strb	r3, [r7, #6]
 800ba10:	4b06      	ldr	r3, [pc, #24]	; (800ba2c <clear_display+0x48>)
 800ba12:	781b      	ldrb	r3, [r3, #0]
 800ba14:	79ba      	ldrb	r2, [r7, #6]
 800ba16:	429a      	cmp	r2, r3
 800ba18:	d3ec      	bcc.n	800b9f4 <clear_display+0x10>
		}
	}

	if(is_there_any_gui_disp){
 800ba1a:	79fb      	ldrb	r3, [r7, #7]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d001      	beq.n	800ba24 <clear_display+0x40>
		Display_Clear();
 800ba20:	f7f5 f84c 	bl	8000abc <Display_Clear>
	}
}
 800ba24:	bf00      	nop
 800ba26:	3708      	adds	r7, #8
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	bd80      	pop	{r7, pc}
 800ba2c:	200002f4 	.word	0x200002f4
 800ba30:	0800c939 	.word	0x0800c939

0800ba34 <initiate_circuit>:

void initiate_circuit(){
 800ba34:	b580      	push	{r7, lr}
 800ba36:	af00      	add	r7, sp, #0
	clear_display();
 800ba38:	f7ff ffd4 	bl	800b9e4 <clear_display>
	hal_init_tick();
 800ba3c:	f7f4 fec9 	bl	80007d2 <hal_init_tick>
	reset_all_output_channels();
 800ba40:	f000 fcd0 	bl	800c3e4 <reset_all_output_channels>
}
 800ba44:	bf00      	nop
 800ba46:	bd80      	pop	{r7, pc}

0800ba48 <run_one_cycle>:

void run_one_cycle(){
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b082      	sub	sp, #8
 800ba4c:	af00      	add	r7, sp, #0
	//get inputs
	//run the input related function blocks

	//process inputs
	//run the processing related input blocks
	for(uint8_t i= 0;i<fbTable.length;i++){
 800ba4e:	2300      	movs	r3, #0
 800ba50:	71fb      	strb	r3, [r7, #7]
 800ba52:	e00e      	b.n	800ba72 <run_one_cycle+0x2a>
		(*fbTable.fb[i].callback)((uint8_t)fbTable.fb[i].param_start_index);
 800ba54:	79fb      	ldrb	r3, [r7, #7]
 800ba56:	4a0c      	ldr	r2, [pc, #48]	; (800ba88 <run_one_cycle+0x40>)
 800ba58:	00db      	lsls	r3, r3, #3
 800ba5a:	4413      	add	r3, r2
 800ba5c:	689a      	ldr	r2, [r3, #8]
 800ba5e:	79fb      	ldrb	r3, [r7, #7]
 800ba60:	4909      	ldr	r1, [pc, #36]	; (800ba88 <run_one_cycle+0x40>)
 800ba62:	00db      	lsls	r3, r3, #3
 800ba64:	440b      	add	r3, r1
 800ba66:	791b      	ldrb	r3, [r3, #4]
 800ba68:	4618      	mov	r0, r3
 800ba6a:	4790      	blx	r2
	for(uint8_t i= 0;i<fbTable.length;i++){
 800ba6c:	79fb      	ldrb	r3, [r7, #7]
 800ba6e:	3301      	adds	r3, #1
 800ba70:	71fb      	strb	r3, [r7, #7]
 800ba72:	4b05      	ldr	r3, [pc, #20]	; (800ba88 <run_one_cycle+0x40>)
 800ba74:	781b      	ldrb	r3, [r3, #0]
 800ba76:	79fa      	ldrb	r2, [r7, #7]
 800ba78:	429a      	cmp	r2, r3
 800ba7a:	d3eb      	bcc.n	800ba54 <run_one_cycle+0xc>
	}

	//refresh outputs
	//run the output related function blocks
}
 800ba7c:	bf00      	nop
 800ba7e:	bf00      	nop
 800ba80:	3708      	adds	r7, #8
 800ba82:	46bd      	mov	sp, r7
 800ba84:	bd80      	pop	{r7, pc}
 800ba86:	bf00      	nop
 800ba88:	200002f4 	.word	0x200002f4

0800ba8c <run_test_functions>:

void run_test_functions()
{
 800ba8c:	b480      	push	{r7}
 800ba8e:	af00      	add	r7, sp, #0
	//test_watch_function();
	//test_deployment();
	//test_memory_service();
	//test_application_load_fromflash();
	//test_watch_function();
}
 800ba90:	bf00      	nop
 800ba92:	46bd      	mov	sp, r7
 800ba94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba98:	4770      	bx	lr
	...

0800ba9c <mcCore_SM>:

void mcCore_SM()
{
 800ba9c:	b580      	push	{r7, lr}
 800ba9e:	b082      	sub	sp, #8
 800baa0:	af00      	add	r7, sp, #0
	test_circuit_t* test_circ = get_test_circuit();
 800baa2:	f000 f85f 	bl	800bb64 <get_test_circuit>
 800baa6:	4603      	mov	r3, r0
 800baa8:	607b      	str	r3, [r7, #4]
	static uint8_t mcCore_state;

	switch (mcCore_state){
 800baaa:	4b2d      	ldr	r3, [pc, #180]	; (800bb60 <mcCore_SM+0xc4>)
 800baac:	781b      	ldrb	r3, [r3, #0]
 800baae:	2b06      	cmp	r3, #6
 800bab0:	d852      	bhi.n	800bb58 <mcCore_SM+0xbc>
 800bab2:	a201      	add	r2, pc, #4	; (adr r2, 800bab8 <mcCore_SM+0x1c>)
 800bab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bab8:	0800bad5 	.word	0x0800bad5
 800babc:	0800bb2d 	.word	0x0800bb2d
 800bac0:	0800bb59 	.word	0x0800bb59
 800bac4:	0800bb17 	.word	0x0800bb17
 800bac8:	0800bb45 	.word	0x0800bb45
 800bacc:	0800bb51 	.word	0x0800bb51
 800bad0:	0800bb0b 	.word	0x0800bb0b
		case ST_MCCORE_INIT:
			run_test_functions();
 800bad4:	f7ff ffda 	bl	800ba8c <run_test_functions>
			if(test_circ->do_test == 1){
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	781b      	ldrb	r3, [r3, #0]
 800badc:	2b01      	cmp	r3, #1
 800bade:	d103      	bne.n	800bae8 <mcCore_SM+0x4c>
				mcCore_state = ST_MCCORE_TEST;
 800bae0:	4b1f      	ldr	r3, [pc, #124]	; (800bb60 <mcCore_SM+0xc4>)
 800bae2:	2204      	movs	r2, #4
 800bae4:	701a      	strb	r2, [r3, #0]
					//Some error occured on application load
					initiate_mccore(); //kill all the program memory
					mcCore_state = ST_WAIT_RUN;
				}
			}
			break;
 800bae6:	e037      	b.n	800bb58 <mcCore_SM+0xbc>
				initiate_mccore(); //kill all the program memory
 800bae8:	f7ff ff68 	bl	800b9bc <initiate_mccore>
				if(application_load() == 0){
 800baec:	f001 fccc 	bl	800d488 <application_load>
 800baf0:	4603      	mov	r3, r0
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d103      	bne.n	800bafe <mcCore_SM+0x62>
					mcCore_state = ST_MCCORE_RUN;
 800baf6:	4b1a      	ldr	r3, [pc, #104]	; (800bb60 <mcCore_SM+0xc4>)
 800baf8:	2201      	movs	r2, #1
 800bafa:	701a      	strb	r2, [r3, #0]
			break;
 800bafc:	e02c      	b.n	800bb58 <mcCore_SM+0xbc>
					initiate_mccore(); //kill all the program memory
 800bafe:	f7ff ff5d 	bl	800b9bc <initiate_mccore>
					mcCore_state = ST_WAIT_RUN;
 800bb02:	4b17      	ldr	r3, [pc, #92]	; (800bb60 <mcCore_SM+0xc4>)
 800bb04:	2203      	movs	r2, #3
 800bb06:	701a      	strb	r2, [r3, #0]
			break;
 800bb08:	e026      	b.n	800bb58 <mcCore_SM+0xbc>

		case ST_MCCORE_INIT2:
				initiate_mccore(); //kill all the program memory
 800bb0a:	f7ff ff57 	bl	800b9bc <initiate_mccore>
				mcCore_state = ST_WAIT_RUN;
 800bb0e:	4b14      	ldr	r3, [pc, #80]	; (800bb60 <mcCore_SM+0xc4>)
 800bb10:	2203      	movs	r2, #3
 800bb12:	701a      	strb	r2, [r3, #0]

			break;
 800bb14:	e020      	b.n	800bb58 <mcCore_SM+0xbc>
		case ST_WAIT_RUN: //wait for the deployment finish and run cmd arrival
			if(
#ifdef DEPLOYMENT_PARSER_V1
				Parser(get_deployment_ch())
#else
		Parser_Modbus_GetState()
 800bb16:	f001 fb5f 	bl	800d1d8 <Parser_Modbus_GetState>
 800bb1a:	4603      	mov	r3, r0
			if(
 800bb1c:	2b67      	cmp	r3, #103	; 0x67
 800bb1e:	d11a      	bne.n	800bb56 <mcCore_SM+0xba>
#endif
		== CMD_RUN){
				initiate_circuit();
 800bb20:	f7ff ff88 	bl	800ba34 <initiate_circuit>
				mcCore_state = ST_MCCORE_RUN;
 800bb24:	4b0e      	ldr	r3, [pc, #56]	; (800bb60 <mcCore_SM+0xc4>)
 800bb26:	2201      	movs	r2, #1
 800bb28:	701a      	strb	r2, [r3, #0]
			}
			break;
 800bb2a:	e014      	b.n	800bb56 <mcCore_SM+0xba>
		case ST_MCCORE_RUN:
			if(
#ifdef DEPLOYMENT_PARSER_V1
				Parser(get_deployment_ch())
#else
		Parser_Modbus_GetState()
 800bb2c:	f001 fb54 	bl	800d1d8 <Parser_Modbus_GetState>
 800bb30:	4603      	mov	r3, r0
			if(
 800bb32:	2b68      	cmp	r3, #104	; 0x68
 800bb34:	d103      	bne.n	800bb3e <mcCore_SM+0xa2>
#endif
		== CMD_KILL) { //when running if KILL cmd received go to the initial state
				mcCore_state = ST_MCCORE_INIT2;
 800bb36:	4b0a      	ldr	r3, [pc, #40]	; (800bb60 <mcCore_SM+0xc4>)
 800bb38:	2206      	movs	r2, #6
 800bb3a:	701a      	strb	r2, [r3, #0]
				run_one_cycle();
				//burdaki zamanı ölç
				//delta
				//bu deltaları kullanıcıya logla
			}
			break;
 800bb3c:	e00c      	b.n	800bb58 <mcCore_SM+0xbc>
				run_one_cycle();
 800bb3e:	f7ff ff83 	bl	800ba48 <run_one_cycle>
			break;
 800bb42:	e009      	b.n	800bb58 <mcCore_SM+0xbc>

		case ST_MCCORE_TEST:
			//test_circ->test_func_ptr(); //function defined in test_circuits.c
			//create_display_test_circuit();
			create_test_circuit_f746();
 800bb44:	f000 f818 	bl	800bb78 <create_test_circuit_f746>
			mcCore_state = ST_MCCORE_TEST_RUN;
 800bb48:	4b05      	ldr	r3, [pc, #20]	; (800bb60 <mcCore_SM+0xc4>)
 800bb4a:	2205      	movs	r2, #5
 800bb4c:	701a      	strb	r2, [r3, #0]
			break;
 800bb4e:	e003      	b.n	800bb58 <mcCore_SM+0xbc>

		case ST_MCCORE_TEST_RUN:
			run_one_cycle();
 800bb50:	f7ff ff7a 	bl	800ba48 <run_one_cycle>
			break;
 800bb54:	e000      	b.n	800bb58 <mcCore_SM+0xbc>
			break;
 800bb56:	bf00      	nop
	}
}
 800bb58:	bf00      	nop
 800bb5a:	3708      	adds	r7, #8
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	bd80      	pop	{r7, pc}
 800bb60:	2000129c 	.word	0x2000129c

0800bb64 <get_test_circuit>:
#include "mcCore.h"
#include "fb_inc.h"
#include "test_circuits.h"

test_circuit_t test_circuit = {.do_test=0, .test_func_ptr=&create_test_circuit_f746};
test_circuit_t* get_test_circuit(){return &test_circuit;}
 800bb64:	b480      	push	{r7}
 800bb66:	af00      	add	r7, sp, #0
 800bb68:	4b02      	ldr	r3, [pc, #8]	; (800bb74 <get_test_circuit+0x10>)
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb72:	4770      	bx	lr
 800bb74:	20000050 	.word	0x20000050

0800bb78 <create_test_circuit_f746>:

void create_test_circuit_f746()
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b092      	sub	sp, #72	; 0x48
 800bb7c:	af02      	add	r7, sp, #8
	type_fb_cycle cyc1 = create_fb_cycle(0, 0, 100, 100, 0);
 800bb7e:	f107 0018 	add.w	r0, r7, #24
 800bb82:	2300      	movs	r3, #0
 800bb84:	9301      	str	r3, [sp, #4]
 800bb86:	2364      	movs	r3, #100	; 0x64
 800bb88:	9300      	str	r3, [sp, #0]
 800bb8a:	2364      	movs	r3, #100	; 0x64
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	2100      	movs	r1, #0
 800bb90:	f000 fd3c 	bl	800c60c <create_fb_cycle>
	type_fb_outputpin ld1 = create_fb_outputpin(0, 0, 0);
 800bb94:	4638      	mov	r0, r7
 800bb96:	2300      	movs	r3, #0
 800bb98:	2200      	movs	r2, #0
 800bb9a:	2100      	movs	r1, #0
 800bb9c:	f001 fa62 	bl	800d064 <create_fb_outputpin>

	make_connection(ld1.fp.val, cyc1.fp.out);
 800bba0:	68bb      	ldr	r3, [r7, #8]
 800bba2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bba4:	4611      	mov	r1, r2
 800bba6:	4618      	mov	r0, r3
 800bba8:	f7ff fef0 	bl	800b98c <make_connection>
}
 800bbac:	bf00      	nop
 800bbae:	3740      	adds	r7, #64	; 0x40
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	bd80      	pop	{r7, pc}

0800bbb4 <get_text_element_table>:

#include "stdint.h"
#include "text_table.h"

glob_text_element_table_t text_element_table = {.i=0};
glob_text_element_table_t* get_text_element_table(){return &text_element_table;}
 800bbb4:	b480      	push	{r7}
 800bbb6:	af00      	add	r7, sp, #0
 800bbb8:	4b02      	ldr	r3, [pc, #8]	; (800bbc4 <get_text_element_table+0x10>)
 800bbba:	4618      	mov	r0, r3
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc2:	4770      	bx	lr
 800bbc4:	200012a0 	.word	0x200012a0

0800bbc8 <init_text_table>:

void init_text_table(){
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b082      	sub	sp, #8
 800bbcc:	af00      	add	r7, sp, #0
	glob_text_element_table_t* t = get_text_element_table();
 800bbce:	f7ff fff1 	bl	800bbb4 <get_text_element_table>
 800bbd2:	6038      	str	r0, [r7, #0]
	//clear previous records
	for(uint16_t i=0;i<t->i;i++){
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	80fb      	strh	r3, [r7, #6]
 800bbd8:	e034      	b.n	800bc44 <init_text_table+0x7c>
		for(uint16_t j= 0; j<t->e[i].length;j++){
 800bbda:	2300      	movs	r3, #0
 800bbdc:	80bb      	strh	r3, [r7, #4]
 800bbde:	e00e      	b.n	800bbfe <init_text_table+0x36>
			t->e[i].value[j] = 0;
 800bbe0:	88fa      	ldrh	r2, [r7, #6]
 800bbe2:	88b9      	ldrh	r1, [r7, #4]
 800bbe4:	6838      	ldr	r0, [r7, #0]
 800bbe6:	4613      	mov	r3, r2
 800bbe8:	009b      	lsls	r3, r3, #2
 800bbea:	4413      	add	r3, r2
 800bbec:	009b      	lsls	r3, r3, #2
 800bbee:	4403      	add	r3, r0
 800bbf0:	440b      	add	r3, r1
 800bbf2:	3306      	adds	r3, #6
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	701a      	strb	r2, [r3, #0]
		for(uint16_t j= 0; j<t->e[i].length;j++){
 800bbf8:	88bb      	ldrh	r3, [r7, #4]
 800bbfa:	3301      	adds	r3, #1
 800bbfc:	80bb      	strh	r3, [r7, #4]
 800bbfe:	88fa      	ldrh	r2, [r7, #6]
 800bc00:	6839      	ldr	r1, [r7, #0]
 800bc02:	4613      	mov	r3, r2
 800bc04:	009b      	lsls	r3, r3, #2
 800bc06:	4413      	add	r3, r2
 800bc08:	009b      	lsls	r3, r3, #2
 800bc0a:	440b      	add	r3, r1
 800bc0c:	3304      	adds	r3, #4
 800bc0e:	881b      	ldrh	r3, [r3, #0]
 800bc10:	88ba      	ldrh	r2, [r7, #4]
 800bc12:	429a      	cmp	r2, r3
 800bc14:	d3e4      	bcc.n	800bbe0 <init_text_table+0x18>
		}
		t->e[i].length = 0;
 800bc16:	88fa      	ldrh	r2, [r7, #6]
 800bc18:	6839      	ldr	r1, [r7, #0]
 800bc1a:	4613      	mov	r3, r2
 800bc1c:	009b      	lsls	r3, r3, #2
 800bc1e:	4413      	add	r3, r2
 800bc20:	009b      	lsls	r3, r3, #2
 800bc22:	440b      	add	r3, r1
 800bc24:	3304      	adds	r3, #4
 800bc26:	2200      	movs	r2, #0
 800bc28:	801a      	strh	r2, [r3, #0]
		t->e[i].index = 0;
 800bc2a:	88fa      	ldrh	r2, [r7, #6]
 800bc2c:	6839      	ldr	r1, [r7, #0]
 800bc2e:	4613      	mov	r3, r2
 800bc30:	009b      	lsls	r3, r3, #2
 800bc32:	4413      	add	r3, r2
 800bc34:	009b      	lsls	r3, r3, #2
 800bc36:	440b      	add	r3, r1
 800bc38:	3302      	adds	r3, #2
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	701a      	strb	r2, [r3, #0]
	for(uint16_t i=0;i<t->i;i++){
 800bc3e:	88fb      	ldrh	r3, [r7, #6]
 800bc40:	3301      	adds	r3, #1
 800bc42:	80fb      	strh	r3, [r7, #6]
 800bc44:	683b      	ldr	r3, [r7, #0]
 800bc46:	881b      	ldrh	r3, [r3, #0]
 800bc48:	88fa      	ldrh	r2, [r7, #6]
 800bc4a:	429a      	cmp	r2, r3
 800bc4c:	d3c5      	bcc.n	800bbda <init_text_table+0x12>
	}

	//set the index to zero
	t->i = 0;
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	2200      	movs	r2, #0
 800bc52:	801a      	strh	r2, [r3, #0]
}
 800bc54:	bf00      	nop
 800bc56:	3708      	adds	r7, #8
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	bd80      	pop	{r7, pc}

0800bc5c <get_next_text_element>:

static text_element_t* get_next_text_element(){
 800bc5c:	b480      	push	{r7}
 800bc5e:	b083      	sub	sp, #12
 800bc60:	af00      	add	r7, sp, #0
	text_element_t* ret_element = &text_element_table.e[text_element_table.i];
 800bc62:	4b10      	ldr	r3, [pc, #64]	; (800bca4 <get_next_text_element+0x48>)
 800bc64:	881b      	ldrh	r3, [r3, #0]
 800bc66:	461a      	mov	r2, r3
 800bc68:	4613      	mov	r3, r2
 800bc6a:	009b      	lsls	r3, r3, #2
 800bc6c:	4413      	add	r3, r2
 800bc6e:	009b      	lsls	r3, r3, #2
 800bc70:	4a0c      	ldr	r2, [pc, #48]	; (800bca4 <get_next_text_element+0x48>)
 800bc72:	4413      	add	r3, r2
 800bc74:	3302      	adds	r3, #2
 800bc76:	607b      	str	r3, [r7, #4]
	ret_element->index = text_element_table.i;
 800bc78:	4b0a      	ldr	r3, [pc, #40]	; (800bca4 <get_next_text_element+0x48>)
 800bc7a:	881b      	ldrh	r3, [r3, #0]
 800bc7c:	b2da      	uxtb	r2, r3
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	701a      	strb	r2, [r3, #0]

	if(text_element_table.i < TEXT_TABLE_MAX_ELEMENT_COUNT-1){
 800bc82:	4b08      	ldr	r3, [pc, #32]	; (800bca4 <get_next_text_element+0x48>)
 800bc84:	881b      	ldrh	r3, [r3, #0]
 800bc86:	2b1e      	cmp	r3, #30
 800bc88:	d805      	bhi.n	800bc96 <get_next_text_element+0x3a>
		text_element_table.i++;
 800bc8a:	4b06      	ldr	r3, [pc, #24]	; (800bca4 <get_next_text_element+0x48>)
 800bc8c:	881b      	ldrh	r3, [r3, #0]
 800bc8e:	3301      	adds	r3, #1
 800bc90:	b29a      	uxth	r2, r3
 800bc92:	4b04      	ldr	r3, [pc, #16]	; (800bca4 <get_next_text_element+0x48>)
 800bc94:	801a      	strh	r2, [r3, #0]
	}
	return ret_element;
 800bc96:	687b      	ldr	r3, [r7, #4]
}
 800bc98:	4618      	mov	r0, r3
 800bc9a:	370c      	adds	r7, #12
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca2:	4770      	bx	lr
 800bca4:	200012a0 	.word	0x200012a0

0800bca8 <create_text_table_entry>:

uint8_t create_text_table_entry(uint8_t len, char* str){
 800bca8:	b580      	push	{r7, lr}
 800bcaa:	b084      	sub	sp, #16
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	4603      	mov	r3, r0
 800bcb0:	6039      	str	r1, [r7, #0]
 800bcb2:	71fb      	strb	r3, [r7, #7]
	text_element_t* text_el = get_next_text_element();
 800bcb4:	f7ff ffd2 	bl	800bc5c <get_next_text_element>
 800bcb8:	60b8      	str	r0, [r7, #8]
	text_el->length = len;
 800bcba:	79fb      	ldrb	r3, [r7, #7]
 800bcbc:	b29a      	uxth	r2, r3
 800bcbe:	68bb      	ldr	r3, [r7, #8]
 800bcc0:	805a      	strh	r2, [r3, #2]
	//first clear entry
	for(uint8_t i = 0;i<TEXT_TABLE_CHAR_LENGTH;i++){
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	73fb      	strb	r3, [r7, #15]
 800bcc6:	e007      	b.n	800bcd8 <create_text_table_entry+0x30>
		text_el->value[i] = 0;
 800bcc8:	7bfb      	ldrb	r3, [r7, #15]
 800bcca:	68ba      	ldr	r2, [r7, #8]
 800bccc:	4413      	add	r3, r2
 800bcce:	2200      	movs	r2, #0
 800bcd0:	711a      	strb	r2, [r3, #4]
	for(uint8_t i = 0;i<TEXT_TABLE_CHAR_LENGTH;i++){
 800bcd2:	7bfb      	ldrb	r3, [r7, #15]
 800bcd4:	3301      	adds	r3, #1
 800bcd6:	73fb      	strb	r3, [r7, #15]
 800bcd8:	7bfb      	ldrb	r3, [r7, #15]
 800bcda:	2b0f      	cmp	r3, #15
 800bcdc:	d9f4      	bls.n	800bcc8 <create_text_table_entry+0x20>
	}

	//fill with new values
	for(uint8_t i = 0;i<len;i++){
 800bcde:	2300      	movs	r3, #0
 800bce0:	73bb      	strb	r3, [r7, #14]
 800bce2:	e00b      	b.n	800bcfc <create_text_table_entry+0x54>
		text_el->value[i] = str[i];
 800bce4:	7bbb      	ldrb	r3, [r7, #14]
 800bce6:	683a      	ldr	r2, [r7, #0]
 800bce8:	441a      	add	r2, r3
 800bcea:	7bbb      	ldrb	r3, [r7, #14]
 800bcec:	7811      	ldrb	r1, [r2, #0]
 800bcee:	68ba      	ldr	r2, [r7, #8]
 800bcf0:	4413      	add	r3, r2
 800bcf2:	460a      	mov	r2, r1
 800bcf4:	711a      	strb	r2, [r3, #4]
	for(uint8_t i = 0;i<len;i++){
 800bcf6:	7bbb      	ldrb	r3, [r7, #14]
 800bcf8:	3301      	adds	r3, #1
 800bcfa:	73bb      	strb	r3, [r7, #14]
 800bcfc:	7bba      	ldrb	r2, [r7, #14]
 800bcfe:	79fb      	ldrb	r3, [r7, #7]
 800bd00:	429a      	cmp	r2, r3
 800bd02:	d3ef      	bcc.n	800bce4 <create_text_table_entry+0x3c>
	}

	return text_el->index;
 800bd04:	68bb      	ldr	r3, [r7, #8]
 800bd06:	781b      	ldrb	r3, [r3, #0]
}
 800bd08:	4618      	mov	r0, r3
 800bd0a:	3710      	adds	r7, #16
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	bd80      	pop	{r7, pc}

0800bd10 <init_uniqueid>:
#include "modbus_slave.h"
#include "adaptor.h"

#define UID_LEN 16

void init_uniqueid(){
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b086      	sub	sp, #24
 800bd14:	af00      	add	r7, sp, #0
	uint8_t uniqueid[UID_LEN];
	//clear uniqueid buffer
	for(uint8_t i = 0;i<UID_LEN;i++){
 800bd16:	2300      	movs	r3, #0
 800bd18:	75fb      	strb	r3, [r7, #23]
 800bd1a:	e008      	b.n	800bd2e <init_uniqueid+0x1e>
		uniqueid[i] = 0;
 800bd1c:	7dfb      	ldrb	r3, [r7, #23]
 800bd1e:	3318      	adds	r3, #24
 800bd20:	443b      	add	r3, r7
 800bd22:	2200      	movs	r2, #0
 800bd24:	f803 2c18 	strb.w	r2, [r3, #-24]
	for(uint8_t i = 0;i<UID_LEN;i++){
 800bd28:	7dfb      	ldrb	r3, [r7, #23]
 800bd2a:	3301      	adds	r3, #1
 800bd2c:	75fb      	strb	r3, [r7, #23]
 800bd2e:	7dfb      	ldrb	r3, [r7, #23]
 800bd30:	2b0f      	cmp	r3, #15
 800bd32:	d9f3      	bls.n	800bd1c <init_uniqueid+0xc>
	}
	//read unique id from the adaptor function
	get_uniqueid(uniqueid, UID_LEN);
 800bd34:	463b      	mov	r3, r7
 800bd36:	2110      	movs	r1, #16
 800bd38:	4618      	mov	r0, r3
 800bd3a:	f7f4 fe01 	bl	8000940 <get_uniqueid>

	//copy this value to the memory place where mapped to a modbus read only input registers
	uint8_t* modbus_p = (uint8_t*) get_Modbus_Buf_Input_Registers_30001();
 800bd3e:	f000 f887 	bl	800be50 <get_Modbus_Buf_Input_Registers_30001>
 800bd42:	6138      	str	r0, [r7, #16]

	for(uint8_t i= 0; i<UID_LEN;i++){
 800bd44:	2300      	movs	r3, #0
 800bd46:	75bb      	strb	r3, [r7, #22]
 800bd48:	e00b      	b.n	800bd62 <init_uniqueid+0x52>
		modbus_p[i] = uniqueid[i];
 800bd4a:	7dba      	ldrb	r2, [r7, #22]
 800bd4c:	7dbb      	ldrb	r3, [r7, #22]
 800bd4e:	6939      	ldr	r1, [r7, #16]
 800bd50:	440b      	add	r3, r1
 800bd52:	3218      	adds	r2, #24
 800bd54:	443a      	add	r2, r7
 800bd56:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 800bd5a:	701a      	strb	r2, [r3, #0]
	for(uint8_t i= 0; i<UID_LEN;i++){
 800bd5c:	7dbb      	ldrb	r3, [r7, #22]
 800bd5e:	3301      	adds	r3, #1
 800bd60:	75bb      	strb	r3, [r7, #22]
 800bd62:	7dbb      	ldrb	r3, [r7, #22]
 800bd64:	2b0f      	cmp	r3, #15
 800bd66:	d9f0      	bls.n	800bd4a <init_uniqueid+0x3a>
	}
}
 800bd68:	bf00      	nop
 800bd6a:	bf00      	nop
 800bd6c:	3718      	adds	r7, #24
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	bd80      	pop	{r7, pc}

0800bd72 <Channel_Mapping>:
 */
#include "stdint.h"
#include "deployment.h"
#include "comm_service.h"

Communication_Ch* Channel_Mapping(uint32_t channel){
 800bd72:	b580      	push	{r7, lr}
 800bd74:	b084      	sub	sp, #16
 800bd76:	af00      	add	r7, sp, #0
 800bd78:	6078      	str	r0, [r7, #4]
	Communication_Ch* comm_ch;

	//channel mappings
	if(channel == 0){
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d103      	bne.n	800bd88 <Channel_Mapping+0x16>
		comm_ch = get_deployment_ch();
 800bd80:	f001 fbae 	bl	800d4e0 <get_deployment_ch>
 800bd84:	4603      	mov	r3, r0
 800bd86:	60fb      	str	r3, [r7, #12]
	}
	return comm_ch;
 800bd88:	68fb      	ldr	r3, [r7, #12]
}
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	3710      	adds	r7, #16
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	bd80      	pop	{r7, pc}

0800bd92 <Runtime_CommDataService_NewData_Received>:

void Runtime_CommDataService_NewData_Received(uint32_t channel, uint8_t* buf, uint32_t len)
{
 800bd92:	b580      	push	{r7, lr}
 800bd94:	b086      	sub	sp, #24
 800bd96:	af00      	add	r7, sp, #0
 800bd98:	60f8      	str	r0, [r7, #12]
 800bd9a:	60b9      	str	r1, [r7, #8]
 800bd9c:	607a      	str	r2, [r7, #4]
	Communication_Ch* comm_ch = Channel_Mapping(channel);
 800bd9e:	68f8      	ldr	r0, [r7, #12]
 800bda0:	f7ff ffe7 	bl	800bd72 <Channel_Mapping>
 800bda4:	6138      	str	r0, [r7, #16]

	//put data to the channel buffer
	for(uint32_t i= 0;i<len;i++)
 800bda6:	2300      	movs	r3, #0
 800bda8:	617b      	str	r3, [r7, #20]
 800bdaa:	e014      	b.n	800bdd6 <Runtime_CommDataService_NewData_Received+0x44>
	if(comm_ch->rx_data_cntr < CH_RX_DATA_BUF_LEN){ //parse edilmeyi bekleyen bir data varsa üzerine yazma.
 800bdac:	693b      	ldr	r3, [r7, #16]
 800bdae:	795b      	ldrb	r3, [r3, #5]
 800bdb0:	2b3f      	cmp	r3, #63	; 0x3f
 800bdb2:	d80d      	bhi.n	800bdd0 <Runtime_CommDataService_NewData_Received+0x3e>
		comm_ch->rx_data_buf[comm_ch->rx_data_cntr++] = buf[i];
 800bdb4:	68ba      	ldr	r2, [r7, #8]
 800bdb6:	697b      	ldr	r3, [r7, #20]
 800bdb8:	441a      	add	r2, r3
 800bdba:	693b      	ldr	r3, [r7, #16]
 800bdbc:	795b      	ldrb	r3, [r3, #5]
 800bdbe:	1c59      	adds	r1, r3, #1
 800bdc0:	b2c8      	uxtb	r0, r1
 800bdc2:	6939      	ldr	r1, [r7, #16]
 800bdc4:	7148      	strb	r0, [r1, #5]
 800bdc6:	4619      	mov	r1, r3
 800bdc8:	7812      	ldrb	r2, [r2, #0]
 800bdca:	693b      	ldr	r3, [r7, #16]
 800bdcc:	440b      	add	r3, r1
 800bdce:	719a      	strb	r2, [r3, #6]
	for(uint32_t i= 0;i<len;i++)
 800bdd0:	697b      	ldr	r3, [r7, #20]
 800bdd2:	3301      	adds	r3, #1
 800bdd4:	617b      	str	r3, [r7, #20]
 800bdd6:	697a      	ldr	r2, [r7, #20]
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	429a      	cmp	r2, r3
 800bddc:	d3e6      	bcc.n	800bdac <Runtime_CommDataService_NewData_Received+0x1a>
	}
}
 800bdde:	bf00      	nop
 800bde0:	bf00      	nop
 800bde2:	3718      	adds	r7, #24
 800bde4:	46bd      	mov	sp, r7
 800bde6:	bd80      	pop	{r7, pc}

0800bde8 <Runtime_CommDataService_Process_DataBuffer>:

uint8_t Runtime_CommDataService_Process_DataBuffer(uint32_t channel)
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b084      	sub	sp, #16
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
	Communication_Ch* comm_ch = Channel_Mapping(channel);
 800bdf0:	6878      	ldr	r0, [r7, #4]
 800bdf2:	f7ff ffbe 	bl	800bd72 <Channel_Mapping>
 800bdf6:	60f8      	str	r0, [r7, #12]

	if(comm_ch->rx_data_cntr < 2) {
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	795b      	ldrb	r3, [r3, #5]
 800bdfc:	2b01      	cmp	r3, #1
 800bdfe:	d803      	bhi.n	800be08 <Runtime_CommDataService_Process_DataBuffer+0x20>
		comm_ch->rx_data_cntr = 0;
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	2200      	movs	r2, #0
 800be04:	715a      	strb	r2, [r3, #5]
 800be06:	e014      	b.n	800be32 <Runtime_CommDataService_Process_DataBuffer+0x4a>
	}
	else if(comm_ch->data_validity_check_callback()  == 0) {
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be0c:	4798      	blx	r3
 800be0e:	4603      	mov	r3, r0
 800be10:	2b00      	cmp	r3, #0
 800be12:	d10c      	bne.n	800be2e <Runtime_CommDataService_Process_DataBuffer+0x46>
		comm_ch->fdata_ready = 1;
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	2201      	movs	r2, #1
 800be18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
		comm_ch->process_callback(comm_ch);
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800be20:	68fa      	ldr	r2, [r7, #12]
 800be22:	4610      	mov	r0, r2
 800be24:	4798      	blx	r3
		comm_ch->rx_data_cntr = 0;
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	2200      	movs	r2, #0
 800be2a:	715a      	strb	r2, [r3, #5]
 800be2c:	e001      	b.n	800be32 <Runtime_CommDataService_Process_DataBuffer+0x4a>
	}
	else{
		return 1;
 800be2e:	2301      	movs	r3, #1
 800be30:	e000      	b.n	800be34 <Runtime_CommDataService_Process_DataBuffer+0x4c>
	}

	return 0;
 800be32:	2300      	movs	r3, #0
}
 800be34:	4618      	mov	r0, r3
 800be36:	3710      	adds	r7, #16
 800be38:	46bd      	mov	sp, r7
 800be3a:	bd80      	pop	{r7, pc}

0800be3c <get_Modbus_Buf_Holding_Registers_40001>:
//uint8_t Modbus_Buf_Discrete_Inputs_10001; //todo: implement
uint16_t Modbus_Buf_Input_Registers_30001[MODBUS_INPUT_REGISTER_COUNT]; //todo: implement
uint16_t Modbus_Buf_Holding_Registers_40001[MODBUS_HOLDING_REGISTER_COUNT];
Modbus_Slave_Responce_Data resp_data;

uint16_t* get_Modbus_Buf_Holding_Registers_40001(){return Modbus_Buf_Holding_Registers_40001;}
 800be3c:	b480      	push	{r7}
 800be3e:	af00      	add	r7, sp, #0
 800be40:	4b02      	ldr	r3, [pc, #8]	; (800be4c <get_Modbus_Buf_Holding_Registers_40001+0x10>)
 800be42:	4618      	mov	r0, r3
 800be44:	46bd      	mov	sp, r7
 800be46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4a:	4770      	bx	lr
 800be4c:	20001544 	.word	0x20001544

0800be50 <get_Modbus_Buf_Input_Registers_30001>:
uint16_t* get_Modbus_Buf_Input_Registers_30001(){return Modbus_Buf_Input_Registers_30001;}
 800be50:	b480      	push	{r7}
 800be52:	af00      	add	r7, sp, #0
 800be54:	4b02      	ldr	r3, [pc, #8]	; (800be60 <get_Modbus_Buf_Input_Registers_30001+0x10>)
 800be56:	4618      	mov	r0, r3
 800be58:	46bd      	mov	sp, r7
 800be5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5e:	4770      	bx	lr
 800be60:	20001524 	.word	0x20001524

0800be64 <get_low_byte>:

uint8_t MODBUS_SLAVE_ADDR  = 0x01;
uint8_t* get_MODBUS_SLAVE_ADDR(){return &MODBUS_SLAVE_ADDR;}

uint8_t get_low_byte(uint16_t word){
 800be64:	b480      	push	{r7}
 800be66:	b083      	sub	sp, #12
 800be68:	af00      	add	r7, sp, #0
 800be6a:	4603      	mov	r3, r0
 800be6c:	80fb      	strh	r3, [r7, #6]
	return (uint8_t)(word & 0xFF);
 800be6e:	88fb      	ldrh	r3, [r7, #6]
 800be70:	b2db      	uxtb	r3, r3
}
 800be72:	4618      	mov	r0, r3
 800be74:	370c      	adds	r7, #12
 800be76:	46bd      	mov	sp, r7
 800be78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7c:	4770      	bx	lr

0800be7e <get_hi_byte>:

uint8_t get_hi_byte(uint16_t word){
 800be7e:	b480      	push	{r7}
 800be80:	b083      	sub	sp, #12
 800be82:	af00      	add	r7, sp, #0
 800be84:	4603      	mov	r3, r0
 800be86:	80fb      	strh	r3, [r7, #6]
	return (uint8_t)((word>>8) & 0xFF);
 800be88:	88fb      	ldrh	r3, [r7, #6]
 800be8a:	0a1b      	lsrs	r3, r3, #8
 800be8c:	b29b      	uxth	r3, r3
 800be8e:	b2db      	uxtb	r3, r3
}
 800be90:	4618      	mov	r0, r3
 800be92:	370c      	adds	r7, #12
 800be94:	46bd      	mov	sp, r7
 800be96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9a:	4770      	bx	lr

0800be9c <modbus_byte2word>:

uint16_t modbus_byte2word(uint8_t* p){
 800be9c:	b480      	push	{r7}
 800be9e:	b083      	sub	sp, #12
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
	return ((p[0] << 8) + p[1]);
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	781b      	ldrb	r3, [r3, #0]
 800bea8:	b29b      	uxth	r3, r3
 800beaa:	021b      	lsls	r3, r3, #8
 800beac:	b29a      	uxth	r2, r3
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	3301      	adds	r3, #1
 800beb2:	781b      	ldrb	r3, [r3, #0]
 800beb4:	b29b      	uxth	r3, r3
 800beb6:	4413      	add	r3, r2
 800beb8:	b29b      	uxth	r3, r3
}
 800beba:	4618      	mov	r0, r3
 800bebc:	370c      	adds	r7, #12
 800bebe:	46bd      	mov	sp, r7
 800bec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec4:	4770      	bx	lr
	...

0800bec8 <modbus_slave_prep_resp_data>:
}

void modbus_slave_prep_resp_data(Modbus_Slave_Responce_Data* resp_data,
									uint8_t function,
									uint16_t register_addr,
									uint16_t register_qty){
 800bec8:	b590      	push	{r4, r7, lr}
 800beca:	b087      	sub	sp, #28
 800becc:	af00      	add	r7, sp, #0
 800bece:	60f8      	str	r0, [r7, #12]
 800bed0:	4608      	mov	r0, r1
 800bed2:	4611      	mov	r1, r2
 800bed4:	461a      	mov	r2, r3
 800bed6:	4603      	mov	r3, r0
 800bed8:	72fb      	strb	r3, [r7, #11]
 800beda:	460b      	mov	r3, r1
 800bedc:	813b      	strh	r3, [r7, #8]
 800bede:	4613      	mov	r3, r2
 800bee0:	80fb      	strh	r3, [r7, #6]
	uint16_t i;

	uint16_t register_addr_0 = register_addr; //40001 means register 0
 800bee2:	893b      	ldrh	r3, [r7, #8]
 800bee4:	82bb      	strh	r3, [r7, #20]

	resp_data->index = 0;
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	2200      	movs	r2, #0
 800beea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	resp_data->buf[resp_data->index++] = MODBUS_SLAVE_ADDR; //Slave address
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800bef4:	1c5a      	adds	r2, r3, #1
 800bef6:	b2d1      	uxtb	r1, r2
 800bef8:	68fa      	ldr	r2, [r7, #12]
 800befa:	f882 1046 	strb.w	r1, [r2, #70]	; 0x46
 800befe:	461a      	mov	r2, r3
 800bf00:	4b8e      	ldr	r3, [pc, #568]	; (800c13c <modbus_slave_prep_resp_data+0x274>)
 800bf02:	7819      	ldrb	r1, [r3, #0]
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	5499      	strb	r1, [r3, r2]
	resp_data->buf[resp_data->index++] = function; //Function
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800bf0e:	1c5a      	adds	r2, r3, #1
 800bf10:	b2d1      	uxtb	r1, r2
 800bf12:	68fa      	ldr	r2, [r7, #12]
 800bf14:	f882 1046 	strb.w	r1, [r2, #70]	; 0x46
 800bf18:	4619      	mov	r1, r3
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	7afa      	ldrb	r2, [r7, #11]
 800bf1e:	545a      	strb	r2, [r3, r1]
	if(function == MODBUS_READ_HOLDING_REGISTER){
 800bf20:	7afb      	ldrb	r3, [r7, #11]
 800bf22:	2b03      	cmp	r3, #3
 800bf24:	d16d      	bne.n	800c002 <modbus_slave_prep_resp_data+0x13a>
		resp_data->buf[resp_data->index++] = register_qty*2;
 800bf26:	88fb      	ldrh	r3, [r7, #6]
 800bf28:	b2da      	uxtb	r2, r3
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800bf30:	1c59      	adds	r1, r3, #1
 800bf32:	b2c8      	uxtb	r0, r1
 800bf34:	68f9      	ldr	r1, [r7, #12]
 800bf36:	f881 0046 	strb.w	r0, [r1, #70]	; 0x46
 800bf3a:	4619      	mov	r1, r3
 800bf3c:	0053      	lsls	r3, r2, #1
 800bf3e:	b2da      	uxtb	r2, r3
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	545a      	strb	r2, [r3, r1]
		for(i = 0;i<register_qty;i++){
 800bf44:	2300      	movs	r3, #0
 800bf46:	82fb      	strh	r3, [r7, #22]
 800bf48:	e056      	b.n	800bff8 <modbus_slave_prep_resp_data+0x130>
			if(register_addr_0+i <= MODBUS_HOLDING_REGISTER_COUNT) {
 800bf4a:	8aba      	ldrh	r2, [r7, #20]
 800bf4c:	8afb      	ldrh	r3, [r7, #22]
 800bf4e:	4413      	add	r3, r2
 800bf50:	2b10      	cmp	r3, #16
 800bf52:	dc2c      	bgt.n	800bfae <modbus_slave_prep_resp_data+0xe6>
				resp_data->buf[resp_data->index++] = get_hi_byte(Modbus_Buf_Holding_Registers_40001[register_addr_0+i]);
 800bf54:	8aba      	ldrh	r2, [r7, #20]
 800bf56:	8afb      	ldrh	r3, [r7, #22]
 800bf58:	4413      	add	r3, r2
 800bf5a:	4a79      	ldr	r2, [pc, #484]	; (800c140 <modbus_slave_prep_resp_data+0x278>)
 800bf5c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800bf66:	1c5a      	adds	r2, r3, #1
 800bf68:	b2d0      	uxtb	r0, r2
 800bf6a:	68fa      	ldr	r2, [r7, #12]
 800bf6c:	f882 0046 	strb.w	r0, [r2, #70]	; 0x46
 800bf70:	461c      	mov	r4, r3
 800bf72:	4608      	mov	r0, r1
 800bf74:	f7ff ff83 	bl	800be7e <get_hi_byte>
 800bf78:	4603      	mov	r3, r0
 800bf7a:	461a      	mov	r2, r3
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	551a      	strb	r2, [r3, r4]
				resp_data->buf[resp_data->index++] = get_low_byte(Modbus_Buf_Holding_Registers_40001[register_addr_0+i]);
 800bf80:	8aba      	ldrh	r2, [r7, #20]
 800bf82:	8afb      	ldrh	r3, [r7, #22]
 800bf84:	4413      	add	r3, r2
 800bf86:	4a6e      	ldr	r2, [pc, #440]	; (800c140 <modbus_slave_prep_resp_data+0x278>)
 800bf88:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800bf92:	1c5a      	adds	r2, r3, #1
 800bf94:	b2d0      	uxtb	r0, r2
 800bf96:	68fa      	ldr	r2, [r7, #12]
 800bf98:	f882 0046 	strb.w	r0, [r2, #70]	; 0x46
 800bf9c:	461c      	mov	r4, r3
 800bf9e:	4608      	mov	r0, r1
 800bfa0:	f7ff ff60 	bl	800be64 <get_low_byte>
 800bfa4:	4603      	mov	r3, r0
 800bfa6:	461a      	mov	r2, r3
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	551a      	strb	r2, [r3, r4]
 800bfac:	e021      	b.n	800bff2 <modbus_slave_prep_resp_data+0x12a>
			}

			//Issuing MONITOR command, Watch function
			else if(register_addr+i >= MODBUS_APP_MONITOR_REGISTER) {
 800bfae:	893a      	ldrh	r2, [r7, #8]
 800bfb0:	8afb      	ldrh	r3, [r7, #22]
 800bfb2:	4413      	add	r3, r2
 800bfb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bfb8:	db1b      	blt.n	800bff2 <modbus_slave_prep_resp_data+0x12a>
				uint16_t value = get_watch_value(register_addr - MODBUS_APP_MONITOR_REGISTER + i);
 800bfba:	893a      	ldrh	r2, [r7, #8]
 800bfbc:	8afb      	ldrh	r3, [r7, #22]
 800bfbe:	4413      	add	r3, r2
 800bfc0:	b29b      	uxth	r3, r3
 800bfc2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800bfc6:	b29b      	uxth	r3, r3
 800bfc8:	4618      	mov	r0, r3
 800bfca:	f001 fabf 	bl	800d54c <get_watch_value>
 800bfce:	4603      	mov	r3, r0
 800bfd0:	823b      	strh	r3, [r7, #16]
				memcpy(&(resp_data->buf[resp_data->index]), &value, sizeof(value));
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800bfd8:	461a      	mov	r2, r3
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	4413      	add	r3, r2
 800bfde:	8a3a      	ldrh	r2, [r7, #16]
 800bfe0:	801a      	strh	r2, [r3, #0]
				resp_data->index += sizeof(value);
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800bfe8:	3302      	adds	r3, #2
 800bfea:	b2da      	uxtb	r2, r3
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
		for(i = 0;i<register_qty;i++){
 800bff2:	8afb      	ldrh	r3, [r7, #22]
 800bff4:	3301      	adds	r3, #1
 800bff6:	82fb      	strh	r3, [r7, #22]
 800bff8:	8afa      	ldrh	r2, [r7, #22]
 800bffa:	88fb      	ldrh	r3, [r7, #6]
 800bffc:	429a      	cmp	r2, r3
 800bffe:	d3a4      	bcc.n	800bf4a <modbus_slave_prep_resp_data+0x82>
 800c000:	e0e9      	b.n	800c1d6 <modbus_slave_prep_resp_data+0x30e>
				//todo: if master want to read register not implemented?
			}
		}
	}

	else if(function == MODBUS_READ_INPUT_REGISTER){
 800c002:	7afb      	ldrb	r3, [r7, #11]
 800c004:	2b04      	cmp	r3, #4
 800c006:	d14a      	bne.n	800c09e <modbus_slave_prep_resp_data+0x1d6>
		resp_data->buf[resp_data->index++] = register_qty*2;
 800c008:	88fb      	ldrh	r3, [r7, #6]
 800c00a:	b2da      	uxtb	r2, r3
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c012:	1c59      	adds	r1, r3, #1
 800c014:	b2c8      	uxtb	r0, r1
 800c016:	68f9      	ldr	r1, [r7, #12]
 800c018:	f881 0046 	strb.w	r0, [r1, #70]	; 0x46
 800c01c:	4619      	mov	r1, r3
 800c01e:	0053      	lsls	r3, r2, #1
 800c020:	b2da      	uxtb	r2, r3
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	545a      	strb	r2, [r3, r1]
		for(i = 0;i<register_qty;i++){
 800c026:	2300      	movs	r3, #0
 800c028:	82fb      	strh	r3, [r7, #22]
 800c02a:	e033      	b.n	800c094 <modbus_slave_prep_resp_data+0x1cc>
			if(register_addr_0+i <= MODBUS_INPUT_REGISTER_COUNT) {
 800c02c:	8aba      	ldrh	r2, [r7, #20]
 800c02e:	8afb      	ldrh	r3, [r7, #22]
 800c030:	4413      	add	r3, r2
 800c032:	2b10      	cmp	r3, #16
 800c034:	dc2b      	bgt.n	800c08e <modbus_slave_prep_resp_data+0x1c6>
				resp_data->buf[resp_data->index++] = get_hi_byte(Modbus_Buf_Input_Registers_30001[register_addr_0+i]);
 800c036:	8aba      	ldrh	r2, [r7, #20]
 800c038:	8afb      	ldrh	r3, [r7, #22]
 800c03a:	4413      	add	r3, r2
 800c03c:	4a41      	ldr	r2, [pc, #260]	; (800c144 <modbus_slave_prep_resp_data+0x27c>)
 800c03e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c048:	1c5a      	adds	r2, r3, #1
 800c04a:	b2d0      	uxtb	r0, r2
 800c04c:	68fa      	ldr	r2, [r7, #12]
 800c04e:	f882 0046 	strb.w	r0, [r2, #70]	; 0x46
 800c052:	461c      	mov	r4, r3
 800c054:	4608      	mov	r0, r1
 800c056:	f7ff ff12 	bl	800be7e <get_hi_byte>
 800c05a:	4603      	mov	r3, r0
 800c05c:	461a      	mov	r2, r3
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	551a      	strb	r2, [r3, r4]
				resp_data->buf[resp_data->index++] = get_low_byte(Modbus_Buf_Input_Registers_30001[register_addr_0+i]);
 800c062:	8aba      	ldrh	r2, [r7, #20]
 800c064:	8afb      	ldrh	r3, [r7, #22]
 800c066:	4413      	add	r3, r2
 800c068:	4a36      	ldr	r2, [pc, #216]	; (800c144 <modbus_slave_prep_resp_data+0x27c>)
 800c06a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c074:	1c5a      	adds	r2, r3, #1
 800c076:	b2d0      	uxtb	r0, r2
 800c078:	68fa      	ldr	r2, [r7, #12]
 800c07a:	f882 0046 	strb.w	r0, [r2, #70]	; 0x46
 800c07e:	461c      	mov	r4, r3
 800c080:	4608      	mov	r0, r1
 800c082:	f7ff feef 	bl	800be64 <get_low_byte>
 800c086:	4603      	mov	r3, r0
 800c088:	461a      	mov	r2, r3
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	551a      	strb	r2, [r3, r4]
		for(i = 0;i<register_qty;i++){
 800c08e:	8afb      	ldrh	r3, [r7, #22]
 800c090:	3301      	adds	r3, #1
 800c092:	82fb      	strh	r3, [r7, #22]
 800c094:	8afa      	ldrh	r2, [r7, #22]
 800c096:	88fb      	ldrh	r3, [r7, #6]
 800c098:	429a      	cmp	r2, r3
 800c09a:	d3c7      	bcc.n	800c02c <modbus_slave_prep_resp_data+0x164>
 800c09c:	e09b      	b.n	800c1d6 <modbus_slave_prep_resp_data+0x30e>
				//todo: if master want to read register not implemented?
			}
		}
	}

	else if(function == MODBUS_WRITE_SINGLE_REGISTER){
 800c09e:	7afb      	ldrb	r3, [r7, #11]
 800c0a0:	2b06      	cmp	r3, #6
 800c0a2:	d151      	bne.n	800c148 <modbus_slave_prep_resp_data+0x280>
		resp_data->buf[resp_data->index++] = get_hi_byte(register_addr);
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c0aa:	1c5a      	adds	r2, r3, #1
 800c0ac:	b2d1      	uxtb	r1, r2
 800c0ae:	68fa      	ldr	r2, [r7, #12]
 800c0b0:	f882 1046 	strb.w	r1, [r2, #70]	; 0x46
 800c0b4:	461c      	mov	r4, r3
 800c0b6:	893b      	ldrh	r3, [r7, #8]
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	f7ff fee0 	bl	800be7e <get_hi_byte>
 800c0be:	4603      	mov	r3, r0
 800c0c0:	461a      	mov	r2, r3
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	551a      	strb	r2, [r3, r4]
		resp_data->buf[resp_data->index++] = get_low_byte(register_addr);
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c0cc:	1c5a      	adds	r2, r3, #1
 800c0ce:	b2d1      	uxtb	r1, r2
 800c0d0:	68fa      	ldr	r2, [r7, #12]
 800c0d2:	f882 1046 	strb.w	r1, [r2, #70]	; 0x46
 800c0d6:	461c      	mov	r4, r3
 800c0d8:	893b      	ldrh	r3, [r7, #8]
 800c0da:	4618      	mov	r0, r3
 800c0dc:	f7ff fec2 	bl	800be64 <get_low_byte>
 800c0e0:	4603      	mov	r3, r0
 800c0e2:	461a      	mov	r2, r3
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	551a      	strb	r2, [r3, r4]
		resp_data->buf[resp_data->index++] = get_hi_byte(Modbus_Buf_Holding_Registers_40001[register_addr_0]);
 800c0e8:	8abb      	ldrh	r3, [r7, #20]
 800c0ea:	4a15      	ldr	r2, [pc, #84]	; (800c140 <modbus_slave_prep_resp_data+0x278>)
 800c0ec:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c0f6:	1c5a      	adds	r2, r3, #1
 800c0f8:	b2d0      	uxtb	r0, r2
 800c0fa:	68fa      	ldr	r2, [r7, #12]
 800c0fc:	f882 0046 	strb.w	r0, [r2, #70]	; 0x46
 800c100:	461c      	mov	r4, r3
 800c102:	4608      	mov	r0, r1
 800c104:	f7ff febb 	bl	800be7e <get_hi_byte>
 800c108:	4603      	mov	r3, r0
 800c10a:	461a      	mov	r2, r3
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	551a      	strb	r2, [r3, r4]
		resp_data->buf[resp_data->index++] = get_low_byte(Modbus_Buf_Holding_Registers_40001[register_addr_0]);
 800c110:	8abb      	ldrh	r3, [r7, #20]
 800c112:	4a0b      	ldr	r2, [pc, #44]	; (800c140 <modbus_slave_prep_resp_data+0x278>)
 800c114:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c11e:	1c5a      	adds	r2, r3, #1
 800c120:	b2d0      	uxtb	r0, r2
 800c122:	68fa      	ldr	r2, [r7, #12]
 800c124:	f882 0046 	strb.w	r0, [r2, #70]	; 0x46
 800c128:	461c      	mov	r4, r3
 800c12a:	4608      	mov	r0, r1
 800c12c:	f7ff fe9a 	bl	800be64 <get_low_byte>
 800c130:	4603      	mov	r3, r0
 800c132:	461a      	mov	r2, r3
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	551a      	strb	r2, [r3, r4]
 800c138:	e04d      	b.n	800c1d6 <modbus_slave_prep_resp_data+0x30e>
 800c13a:	bf00      	nop
 800c13c:	20000058 	.word	0x20000058
 800c140:	20001544 	.word	0x20001544
 800c144:	20001524 	.word	0x20001524
	}

	else if(function == MODBUS_WRITE_MULTIPLE_REGISTER){
 800c148:	7afb      	ldrb	r3, [r7, #11]
 800c14a:	2b10      	cmp	r3, #16
 800c14c:	d143      	bne.n	800c1d6 <modbus_slave_prep_resp_data+0x30e>
		resp_data->buf[resp_data->index++] = get_hi_byte(register_addr);
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c154:	1c5a      	adds	r2, r3, #1
 800c156:	b2d1      	uxtb	r1, r2
 800c158:	68fa      	ldr	r2, [r7, #12]
 800c15a:	f882 1046 	strb.w	r1, [r2, #70]	; 0x46
 800c15e:	461c      	mov	r4, r3
 800c160:	893b      	ldrh	r3, [r7, #8]
 800c162:	4618      	mov	r0, r3
 800c164:	f7ff fe8b 	bl	800be7e <get_hi_byte>
 800c168:	4603      	mov	r3, r0
 800c16a:	461a      	mov	r2, r3
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	551a      	strb	r2, [r3, r4]
		resp_data->buf[resp_data->index++] = get_low_byte(register_addr);
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c176:	1c5a      	adds	r2, r3, #1
 800c178:	b2d1      	uxtb	r1, r2
 800c17a:	68fa      	ldr	r2, [r7, #12]
 800c17c:	f882 1046 	strb.w	r1, [r2, #70]	; 0x46
 800c180:	461c      	mov	r4, r3
 800c182:	893b      	ldrh	r3, [r7, #8]
 800c184:	4618      	mov	r0, r3
 800c186:	f7ff fe6d 	bl	800be64 <get_low_byte>
 800c18a:	4603      	mov	r3, r0
 800c18c:	461a      	mov	r2, r3
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	551a      	strb	r2, [r3, r4]
		resp_data->buf[resp_data->index++] = get_hi_byte(register_qty);
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c198:	1c5a      	adds	r2, r3, #1
 800c19a:	b2d1      	uxtb	r1, r2
 800c19c:	68fa      	ldr	r2, [r7, #12]
 800c19e:	f882 1046 	strb.w	r1, [r2, #70]	; 0x46
 800c1a2:	461c      	mov	r4, r3
 800c1a4:	88fb      	ldrh	r3, [r7, #6]
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	f7ff fe69 	bl	800be7e <get_hi_byte>
 800c1ac:	4603      	mov	r3, r0
 800c1ae:	461a      	mov	r2, r3
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	551a      	strb	r2, [r3, r4]
		resp_data->buf[resp_data->index++] = get_low_byte(register_qty);
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c1ba:	1c5a      	adds	r2, r3, #1
 800c1bc:	b2d1      	uxtb	r1, r2
 800c1be:	68fa      	ldr	r2, [r7, #12]
 800c1c0:	f882 1046 	strb.w	r1, [r2, #70]	; 0x46
 800c1c4:	461c      	mov	r4, r3
 800c1c6:	88fb      	ldrh	r3, [r7, #6]
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	f7ff fe4b 	bl	800be64 <get_low_byte>
 800c1ce:	4603      	mov	r3, r0
 800c1d0:	461a      	mov	r2, r3
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	551a      	strb	r2, [r3, r4]
	}

	//todo: crc
	uint16_t crc = CRC16(resp_data->buf, resp_data->index);
 800c1d6:	68fa      	ldr	r2, [r7, #12]
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c1de:	b29b      	uxth	r3, r3
 800c1e0:	4619      	mov	r1, r3
 800c1e2:	4610      	mov	r0, r2
 800c1e4:	f000 f8d4 	bl	800c390 <CRC16>
 800c1e8:	4603      	mov	r3, r0
 800c1ea:	827b      	strh	r3, [r7, #18]

	resp_data->buf[resp_data->index++] = get_low_byte(crc);
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c1f2:	1c5a      	adds	r2, r3, #1
 800c1f4:	b2d1      	uxtb	r1, r2
 800c1f6:	68fa      	ldr	r2, [r7, #12]
 800c1f8:	f882 1046 	strb.w	r1, [r2, #70]	; 0x46
 800c1fc:	461c      	mov	r4, r3
 800c1fe:	8a7b      	ldrh	r3, [r7, #18]
 800c200:	4618      	mov	r0, r3
 800c202:	f7ff fe2f 	bl	800be64 <get_low_byte>
 800c206:	4603      	mov	r3, r0
 800c208:	461a      	mov	r2, r3
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	551a      	strb	r2, [r3, r4]
	resp_data->buf[resp_data->index++] = get_hi_byte(crc);
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c214:	1c5a      	adds	r2, r3, #1
 800c216:	b2d1      	uxtb	r1, r2
 800c218:	68fa      	ldr	r2, [r7, #12]
 800c21a:	f882 1046 	strb.w	r1, [r2, #70]	; 0x46
 800c21e:	461c      	mov	r4, r3
 800c220:	8a7b      	ldrh	r3, [r7, #18]
 800c222:	4618      	mov	r0, r3
 800c224:	f7ff fe2b 	bl	800be7e <get_hi_byte>
 800c228:	4603      	mov	r3, r0
 800c22a:	461a      	mov	r2, r3
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	551a      	strb	r2, [r3, r4]

	resp_data->len = resp_data->index;
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
}
 800c23c:	bf00      	nop
 800c23e:	371c      	adds	r7, #28
 800c240:	46bd      	mov	sp, r7
 800c242:	bd90      	pop	{r4, r7, pc}

0800c244 <modbus_slave_tx>:

void modbus_slave_tx(Modbus_Slave_Responce_Data* resp_data){
 800c244:	b580      	push	{r7, lr}
 800c246:	b082      	sub	sp, #8
 800c248:	af00      	add	r7, sp, #0
 800c24a:	6078      	str	r0, [r7, #4]
	hal_modbus_uart_tx(resp_data->buf, resp_data->len);
 800c24c:	687a      	ldr	r2, [r7, #4]
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c254:	4619      	mov	r1, r3
 800c256:	4610      	mov	r0, r2
 800c258:	f7f4 fb54 	bl	8000904 <hal_modbus_uart_tx>
}
 800c25c:	bf00      	nop
 800c25e:	3708      	adds	r7, #8
 800c260:	46bd      	mov	sp, r7
 800c262:	bd80      	pop	{r7, pc}

0800c264 <modbus_slave_rx>:

uint8_t modbus_slave_rx(Communication_Ch* ch ){
 800c264:	b590      	push	{r4, r7, lr}
 800c266:	b087      	sub	sp, #28
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
	uint16_t register_addr = 0;
 800c26c:	2300      	movs	r3, #0
 800c26e:	82bb      	strh	r3, [r7, #20]
	uint16_t register_val = 0;
 800c270:	2300      	movs	r3, #0
 800c272:	827b      	strh	r3, [r7, #18]
	uint16_t register_qty = 0;
 800c274:	2300      	movs	r3, #0
 800c276:	823b      	strh	r3, [r7, #16]
	uint8_t byte_count = 0;
 800c278:	2300      	movs	r3, #0
 800c27a:	73fb      	strb	r3, [r7, #15]

	uint16_t starting_addr = 0;
 800c27c:	2300      	movs	r3, #0
 800c27e:	81bb      	strh	r3, [r7, #12]
	uint16_t quantity_of_register = 0;
 800c280:	2300      	movs	r3, #0
 800c282:	817b      	strh	r3, [r7, #10]

	//Communication_Ch* ch = Channel_Mapping(channel);

	//todo: crc check

	if(ch->rx_data_buf[0] == MODBUS_SLAVE_ADDR){
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	799a      	ldrb	r2, [r3, #6]
 800c288:	4b3d      	ldr	r3, [pc, #244]	; (800c380 <modbus_slave_rx+0x11c>)
 800c28a:	781b      	ldrb	r3, [r3, #0]
 800c28c:	429a      	cmp	r2, r3
 800c28e:	d171      	bne.n	800c374 <modbus_slave_rx+0x110>
		register_addr = modbus_byte2word(&ch->rx_data_buf[2]);
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	3308      	adds	r3, #8
 800c294:	4618      	mov	r0, r3
 800c296:	f7ff fe01 	bl	800be9c <modbus_byte2word>
 800c29a:	4603      	mov	r3, r0
 800c29c:	82bb      	strh	r3, [r7, #20]
		register_qty = modbus_byte2word(&ch->rx_data_buf[4]);
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	330a      	adds	r3, #10
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	f7ff fdfa 	bl	800be9c <modbus_byte2word>
 800c2a8:	4603      	mov	r3, r0
 800c2aa:	823b      	strh	r3, [r7, #16]
		byte_count = ch->rx_data_buf[6];
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	7b1b      	ldrb	r3, [r3, #12]
 800c2b0:	73fb      	strb	r3, [r7, #15]
		starting_addr = register_addr;
 800c2b2:	8abb      	ldrh	r3, [r7, #20]
 800c2b4:	81bb      	strh	r3, [r7, #12]

		if(ch->rx_data_buf[1] == MODBUS_WRITE_SINGLE_REGISTER){
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	79db      	ldrb	r3, [r3, #7]
 800c2ba:	2b06      	cmp	r3, #6
 800c2bc:	d10e      	bne.n	800c2dc <modbus_slave_rx+0x78>
			//todo: need to save parameter to flash
			if(starting_addr < MODBUS_HOLDING_REGISTER_COUNT){
 800c2be:	89bb      	ldrh	r3, [r7, #12]
 800c2c0:	2b0f      	cmp	r3, #15
 800c2c2:	d838      	bhi.n	800c336 <modbus_slave_rx+0xd2>
				Modbus_Buf_Holding_Registers_40001[starting_addr] = modbus_byte2word(&ch->rx_data_buf[4]);
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	330a      	adds	r3, #10
 800c2c8:	89bc      	ldrh	r4, [r7, #12]
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	f7ff fde6 	bl	800be9c <modbus_byte2word>
 800c2d0:	4603      	mov	r3, r0
 800c2d2:	461a      	mov	r2, r3
 800c2d4:	4b2b      	ldr	r3, [pc, #172]	; (800c384 <modbus_slave_rx+0x120>)
 800c2d6:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
 800c2da:	e02c      	b.n	800c336 <modbus_slave_rx+0xd2>
			}
		}

		else if(ch->rx_data_buf[1] == MODBUS_WRITE_MULTIPLE_REGISTER){
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	79db      	ldrb	r3, [r3, #7]
 800c2e0:	2b10      	cmp	r3, #16
 800c2e2:	d128      	bne.n	800c336 <modbus_slave_rx+0xd2>
			if(starting_addr < MODBUS_HOLDING_REGISTER_COUNT){
 800c2e4:	89bb      	ldrh	r3, [r7, #12]
 800c2e6:	2b0f      	cmp	r3, #15
 800c2e8:	d81c      	bhi.n	800c324 <modbus_slave_rx+0xc0>
				for(uint8_t i = 0;i<register_qty;i++){
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	75fb      	strb	r3, [r7, #23]
 800c2ee:	e013      	b.n	800c318 <modbus_slave_rx+0xb4>
					Modbus_Buf_Holding_Registers_40001[starting_addr+i] = modbus_byte2word(&ch->rx_data_buf[7+i*2]);
 800c2f0:	7dfb      	ldrb	r3, [r7, #23]
 800c2f2:	005b      	lsls	r3, r3, #1
 800c2f4:	3307      	adds	r3, #7
 800c2f6:	687a      	ldr	r2, [r7, #4]
 800c2f8:	4413      	add	r3, r2
 800c2fa:	1d99      	adds	r1, r3, #6
 800c2fc:	89ba      	ldrh	r2, [r7, #12]
 800c2fe:	7dfb      	ldrb	r3, [r7, #23]
 800c300:	18d4      	adds	r4, r2, r3
 800c302:	4608      	mov	r0, r1
 800c304:	f7ff fdca 	bl	800be9c <modbus_byte2word>
 800c308:	4603      	mov	r3, r0
 800c30a:	461a      	mov	r2, r3
 800c30c:	4b1d      	ldr	r3, [pc, #116]	; (800c384 <modbus_slave_rx+0x120>)
 800c30e:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
				for(uint8_t i = 0;i<register_qty;i++){
 800c312:	7dfb      	ldrb	r3, [r7, #23]
 800c314:	3301      	adds	r3, #1
 800c316:	75fb      	strb	r3, [r7, #23]
 800c318:	7dfb      	ldrb	r3, [r7, #23]
 800c31a:	b29b      	uxth	r3, r3
 800c31c:	8a3a      	ldrh	r2, [r7, #16]
 800c31e:	429a      	cmp	r2, r3
 800c320:	d8e6      	bhi.n	800c2f0 <modbus_slave_rx+0x8c>
 800c322:	e008      	b.n	800c336 <modbus_slave_rx+0xd2>
				}
			}
			else if(starting_addr = MODBUS_DEPLOYMENT_REGISTER){//deployment command
 800c324:	23ff      	movs	r3, #255	; 0xff
 800c326:	81bb      	strh	r3, [r7, #12]
				Parser_Modbus(&ch->rx_data_buf[7], byte_count);
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	330d      	adds	r3, #13
 800c32c:	7bfa      	ldrb	r2, [r7, #15]
 800c32e:	4611      	mov	r1, r2
 800c330:	4618      	mov	r0, r3
 800c332:	f000 ff5d 	bl	800d1f0 <Parser_Modbus>
		}

		else if(ch->rx_data_buf[1] == MODBUS_READ_HOLDING_REGISTER){
		}

		switch(ch->rx_data_buf[1]){
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	79db      	ldrb	r3, [r3, #7]
 800c33a:	2b10      	cmp	r3, #16
 800c33c:	bf8c      	ite	hi
 800c33e:	2201      	movhi	r2, #1
 800c340:	2200      	movls	r2, #0
 800c342:	b2d2      	uxtb	r2, r2
 800c344:	2a00      	cmp	r2, #0
 800c346:	d116      	bne.n	800c376 <modbus_slave_rx+0x112>
 800c348:	2201      	movs	r2, #1
 800c34a:	409a      	lsls	r2, r3
 800c34c:	4b0e      	ldr	r3, [pc, #56]	; (800c388 <modbus_slave_rx+0x124>)
 800c34e:	4013      	ands	r3, r2
 800c350:	2b00      	cmp	r3, #0
 800c352:	bf14      	ite	ne
 800c354:	2301      	movne	r3, #1
 800c356:	2300      	moveq	r3, #0
 800c358:	b2db      	uxtb	r3, r3
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d00b      	beq.n	800c376 <modbus_slave_rx+0x112>
			case MODBUS_WRITE_SINGLE_REGISTER:
			case MODBUS_WRITE_MULTIPLE_REGISTER:
			case MODBUS_READ_HOLDING_REGISTER:
			case MODBUS_READ_INPUT_REGISTER:
				//fill the responce structure
					modbus_slave_prep_resp_data(&resp_data,
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	79d9      	ldrb	r1, [r3, #7]
 800c362:	8a3b      	ldrh	r3, [r7, #16]
 800c364:	8aba      	ldrh	r2, [r7, #20]
 800c366:	4809      	ldr	r0, [pc, #36]	; (800c38c <modbus_slave_rx+0x128>)
 800c368:	f7ff fdae 	bl	800bec8 <modbus_slave_prep_resp_data>
													ch->rx_data_buf[1],
														register_addr,
															register_qty);

				//initiate_tx
				modbus_slave_tx(&resp_data);
 800c36c:	4807      	ldr	r0, [pc, #28]	; (800c38c <modbus_slave_rx+0x128>)
 800c36e:	f7ff ff69 	bl	800c244 <modbus_slave_tx>
				break;
 800c372:	e000      	b.n	800c376 <modbus_slave_rx+0x112>
		}
	}
 800c374:	bf00      	nop
	return 0;
 800c376:	2300      	movs	r3, #0
}
 800c378:	4618      	mov	r0, r3
 800c37a:	371c      	adds	r7, #28
 800c37c:	46bd      	mov	sp, r7
 800c37e:	bd90      	pop	{r4, r7, pc}
 800c380:	20000058 	.word	0x20000058
 800c384:	20001544 	.word	0x20001544
 800c388:	00010058 	.word	0x00010058
 800c38c:	20001564 	.word	0x20001564

0800c390 <CRC16>:

uint16_t CRC16 (const uint8_t *nData, uint16_t wLength)
{
 800c390:	b480      	push	{r7}
 800c392:	b085      	sub	sp, #20
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
 800c398:	460b      	mov	r3, r1
 800c39a:	807b      	strh	r3, [r7, #2]
   0X4E00, 0X8EC1, 0X8F81, 0X4F40, 0X8D01, 0X4DC0, 0X4C80, 0X8C41,
   0X4400, 0X84C1, 0X8581, 0X4540, 0X8701, 0X47C0, 0X4680, 0X8641,
   0X8201, 0X42C0, 0X4380, 0X8341, 0X4100, 0X81C1, 0X8081, 0X4040 };

uint8_t nTemp;
uint16_t wCRCWord = 0xFFFF;
 800c39c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c3a0:	81fb      	strh	r3, [r7, #14]

   while (wLength--)
 800c3a2:	e011      	b.n	800c3c8 <CRC16+0x38>
   {
      nTemp = *nData++ ^ wCRCWord;
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	1c5a      	adds	r2, r3, #1
 800c3a8:	607a      	str	r2, [r7, #4]
 800c3aa:	781a      	ldrb	r2, [r3, #0]
 800c3ac:	89fb      	ldrh	r3, [r7, #14]
 800c3ae:	b2db      	uxtb	r3, r3
 800c3b0:	4053      	eors	r3, r2
 800c3b2:	737b      	strb	r3, [r7, #13]
      wCRCWord >>= 8;
 800c3b4:	89fb      	ldrh	r3, [r7, #14]
 800c3b6:	0a1b      	lsrs	r3, r3, #8
 800c3b8:	81fb      	strh	r3, [r7, #14]
      wCRCWord  ^= wCRCTable[nTemp];
 800c3ba:	7b7b      	ldrb	r3, [r7, #13]
 800c3bc:	4a08      	ldr	r2, [pc, #32]	; (800c3e0 <CRC16+0x50>)
 800c3be:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800c3c2:	89fb      	ldrh	r3, [r7, #14]
 800c3c4:	4053      	eors	r3, r2
 800c3c6:	81fb      	strh	r3, [r7, #14]
   while (wLength--)
 800c3c8:	887b      	ldrh	r3, [r7, #2]
 800c3ca:	1e5a      	subs	r2, r3, #1
 800c3cc:	807a      	strh	r2, [r7, #2]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d1e8      	bne.n	800c3a4 <CRC16+0x14>
   }
   return wCRCWord;
 800c3d2:	89fb      	ldrh	r3, [r7, #14]
} // End: CRC16
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	3714      	adds	r7, #20
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3de:	4770      	bx	lr
 800c3e0:	08012a00 	.word	0x08012a00

0800c3e4 <reset_all_output_channels>:
//Please write down GPIO output function in your hardware
void __attribute__((weak)) hal_gpio_write_pin(uint16_t chNum,  uint8_t value){
}


void __attribute__((weak)) reset_all_output_channels(){
 800c3e4:	b480      	push	{r7}
 800c3e6:	af00      	add	r7, sp, #0

}
 800c3e8:	bf00      	nop
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f0:	4770      	bx	lr

0800c3f2 <fb_cycle_parser>:
#include "fb_cycle.h"
#include "adaptor.h"


//cyclic event fb
uint8_t fb_cycle_parser(uint8_t* p){
 800c3f2:	b580      	push	{r7, lr}
 800c3f4:	b092      	sub	sp, #72	; 0x48
 800c3f6:	af02      	add	r7, sp, #8
 800c3f8:	62f8      	str	r0, [r7, #44]	; 0x2c
	uint8_t rst = p[0];
 800c3fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3fc:	781b      	ldrb	r3, [r3, #0]
 800c3fe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint32_t don = (uint32_t) p[1] << 24 | p[2] << 16 | p[3] <<8 | p[4];
 800c402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c404:	3301      	adds	r3, #1
 800c406:	781b      	ldrb	r3, [r3, #0]
 800c408:	061b      	lsls	r3, r3, #24
 800c40a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c40c:	3202      	adds	r2, #2
 800c40e:	7812      	ldrb	r2, [r2, #0]
 800c410:	0412      	lsls	r2, r2, #16
 800c412:	4313      	orrs	r3, r2
 800c414:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c416:	3203      	adds	r2, #3
 800c418:	7812      	ldrb	r2, [r2, #0]
 800c41a:	0212      	lsls	r2, r2, #8
 800c41c:	4313      	orrs	r3, r2
 800c41e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c420:	3204      	adds	r2, #4
 800c422:	7812      	ldrb	r2, [r2, #0]
 800c424:	4313      	orrs	r3, r2
 800c426:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t doff = (uint32_t) p[5] << 24 | p[6] << 16 | p[7] <<8 | p[8];
 800c428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c42a:	3305      	adds	r3, #5
 800c42c:	781b      	ldrb	r3, [r3, #0]
 800c42e:	061b      	lsls	r3, r3, #24
 800c430:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c432:	3206      	adds	r2, #6
 800c434:	7812      	ldrb	r2, [r2, #0]
 800c436:	0412      	lsls	r2, r2, #16
 800c438:	4313      	orrs	r3, r2
 800c43a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c43c:	3207      	adds	r2, #7
 800c43e:	7812      	ldrb	r2, [r2, #0]
 800c440:	0212      	lsls	r2, r2, #8
 800c442:	4313      	orrs	r3, r2
 800c444:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c446:	3208      	adds	r2, #8
 800c448:	7812      	ldrb	r2, [r2, #0]
 800c44a:	4313      	orrs	r3, r2
 800c44c:	637b      	str	r3, [r7, #52]	; 0x34
	uint8_t mode = p[9];
 800c44e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c450:	7a5b      	ldrb	r3, [r3, #9]
 800c452:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t in = p[10];
 800c456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c458:	7a9b      	ldrb	r3, [r3, #10]
 800c45a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	create_fb_cycle(rst,in, don,doff,mode);
 800c45e:	4638      	mov	r0, r7
 800c460:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 800c464:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 800c468:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c46c:	9301      	str	r3, [sp, #4]
 800c46e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c470:	9300      	str	r3, [sp, #0]
 800c472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c474:	f000 f8ca 	bl	800c60c <create_fb_cycle>
	return 0;
 800c478:	2300      	movs	r3, #0
}
 800c47a:	4618      	mov	r0, r3
 800c47c:	3740      	adds	r7, #64	; 0x40
 800c47e:	46bd      	mov	sp, r7
 800c480:	bd80      	pop	{r7, pc}

0800c482 <fb_cycle>:

void fb_cycle(uint8_t p){
 800c482:	b580      	push	{r7, lr}
 800c484:	b08e      	sub	sp, #56	; 0x38
 800c486:	af00      	add	r7, sp, #0
 800c488:	4603      	mov	r3, r0
 800c48a:	71fb      	strb	r3, [r7, #7]
	int32_t delta_time = 0;
 800c48c:	2300      	movs	r3, #0
 800c48e:	637b      	str	r3, [r7, #52]	; 0x34

	s_Param* pAddrTable = get_paramAddrTable();
 800c490:	f7ff fa26 	bl	800b8e0 <get_paramAddrTable>
 800c494:	6338      	str	r0, [r7, #48]	; 0x30
	int32_t* rst = &pAddrTable->value[pAddrTable->addr[p]];
 800c496:	79fb      	ldrb	r3, [r7, #7]
 800c498:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c49a:	009b      	lsls	r3, r3, #2
 800c49c:	4413      	add	r3, r2
 800c49e:	685b      	ldr	r3, [r3, #4]
 800c4a0:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800c4a4:	009b      	lsls	r3, r3, #2
 800c4a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c4a8:	4413      	add	r3, r2
 800c4aa:	3304      	adds	r3, #4
 800c4ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	int32_t* in = &pAddrTable->value[pAddrTable->addr[p+1]];
 800c4ae:	79fb      	ldrb	r3, [r7, #7]
 800c4b0:	3301      	adds	r3, #1
 800c4b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c4b4:	009b      	lsls	r3, r3, #2
 800c4b6:	4413      	add	r3, r2
 800c4b8:	685b      	ldr	r3, [r3, #4]
 800c4ba:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800c4be:	009b      	lsls	r3, r3, #2
 800c4c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c4c2:	4413      	add	r3, r2
 800c4c4:	3304      	adds	r3, #4
 800c4c6:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t* don = &pAddrTable->value[pAddrTable->addr[p+2]];
 800c4c8:	79fb      	ldrb	r3, [r7, #7]
 800c4ca:	3302      	adds	r3, #2
 800c4cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c4ce:	009b      	lsls	r3, r3, #2
 800c4d0:	4413      	add	r3, r2
 800c4d2:	685b      	ldr	r3, [r3, #4]
 800c4d4:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800c4d8:	009b      	lsls	r3, r3, #2
 800c4da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c4dc:	4413      	add	r3, r2
 800c4de:	3304      	adds	r3, #4
 800c4e0:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t* doff = &pAddrTable->value[pAddrTable->addr[p+3]];
 800c4e2:	79fb      	ldrb	r3, [r7, #7]
 800c4e4:	3303      	adds	r3, #3
 800c4e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c4e8:	009b      	lsls	r3, r3, #2
 800c4ea:	4413      	add	r3, r2
 800c4ec:	685b      	ldr	r3, [r3, #4]
 800c4ee:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800c4f2:	009b      	lsls	r3, r3, #2
 800c4f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c4f6:	4413      	add	r3, r2
 800c4f8:	3304      	adds	r3, #4
 800c4fa:	623b      	str	r3, [r7, #32]
	int32_t* mode = &pAddrTable->value[pAddrTable->addr[p+4]];
 800c4fc:	79fb      	ldrb	r3, [r7, #7]
 800c4fe:	3304      	adds	r3, #4
 800c500:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c502:	009b      	lsls	r3, r3, #2
 800c504:	4413      	add	r3, r2
 800c506:	685b      	ldr	r3, [r3, #4]
 800c508:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800c50c:	009b      	lsls	r3, r3, #2
 800c50e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c510:	4413      	add	r3, r2
 800c512:	3304      	adds	r3, #4
 800c514:	61fb      	str	r3, [r7, #28]
	int32_t* out = &pAddrTable->value[pAddrTable->addr[p+5]];
 800c516:	79fb      	ldrb	r3, [r7, #7]
 800c518:	3305      	adds	r3, #5
 800c51a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c51c:	009b      	lsls	r3, r3, #2
 800c51e:	4413      	add	r3, r2
 800c520:	685b      	ldr	r3, [r3, #4]
 800c522:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800c526:	009b      	lsls	r3, r3, #2
 800c528:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c52a:	4413      	add	r3, r2
 800c52c:	3304      	adds	r3, #4
 800c52e:	61bb      	str	r3, [r7, #24]
	int32_t* stat = &pAddrTable->value[pAddrTable->addr[p+6]];
 800c530:	79fb      	ldrb	r3, [r7, #7]
 800c532:	3306      	adds	r3, #6
 800c534:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c536:	009b      	lsls	r3, r3, #2
 800c538:	4413      	add	r3, r2
 800c53a:	685b      	ldr	r3, [r3, #4]
 800c53c:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800c540:	009b      	lsls	r3, r3, #2
 800c542:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c544:	4413      	add	r3, r2
 800c546:	3304      	adds	r3, #4
 800c548:	617b      	str	r3, [r7, #20]
	int32_t* val = &pAddrTable->value[pAddrTable->addr[p+7]];
 800c54a:	79fb      	ldrb	r3, [r7, #7]
 800c54c:	3307      	adds	r3, #7
 800c54e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c550:	009b      	lsls	r3, r3, #2
 800c552:	4413      	add	r3, r2
 800c554:	685b      	ldr	r3, [r3, #4]
 800c556:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800c55a:	009b      	lsls	r3, r3, #2
 800c55c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c55e:	4413      	add	r3, r2
 800c560:	3304      	adds	r3, #4
 800c562:	613b      	str	r3, [r7, #16]
	int32_t* cycle_counter = &pAddrTable->value[pAddrTable->addr[p+8]];
 800c564:	79fb      	ldrb	r3, [r7, #7]
 800c566:	3308      	adds	r3, #8
 800c568:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c56a:	009b      	lsls	r3, r3, #2
 800c56c:	4413      	add	r3, r2
 800c56e:	685b      	ldr	r3, [r3, #4]
 800c570:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800c574:	009b      	lsls	r3, r3, #2
 800c576:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c578:	4413      	add	r3, r2
 800c57a:	3304      	adds	r3, #4
 800c57c:	60fb      	str	r3, [r7, #12]

	//get cycle_counter
	if(*cycle_counter == 0xFFFFFFFF) //initial value
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c586:	d10b      	bne.n	800c5a0 <fb_cycle+0x11e>
	{
		*cycle_counter = hal_get_tick();
 800c588:	f7f4 f91c 	bl	80007c4 <hal_get_tick>
 800c58c:	4602      	mov	r2, r0
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	601a      	str	r2, [r3, #0]
		*val = 0;
 800c592:	693b      	ldr	r3, [r7, #16]
 800c594:	2200      	movs	r2, #0
 800c596:	601a      	str	r2, [r3, #0]
		*out = 0;
 800c598:	69bb      	ldr	r3, [r7, #24]
 800c59a:	2200      	movs	r2, #0
 800c59c:	601a      	str	r2, [r3, #0]
		else{
			*cycle_counter = hal_get_tick(); //resample again
			*val = *val + 1;
		}
	}
}
 800c59e:	e031      	b.n	800c604 <fb_cycle+0x182>
		delta_time = hal_get_tick() - *cycle_counter;
 800c5a0:	f7f4 f910 	bl	80007c4 <hal_get_tick>
 800c5a4:	4602      	mov	r2, r0
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	1ad3      	subs	r3, r2, r3
 800c5ac:	637b      	str	r3, [r7, #52]	; 0x34
		if(delta_time < 0){
 800c5ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	da08      	bge.n	800c5c6 <fb_cycle+0x144>
			delta_time = 0xFFFFFFFF - *cycle_counter + hal_get_tick();
 800c5b4:	f7f4 f906 	bl	80007c4 <hal_get_tick>
 800c5b8:	4603      	mov	r3, r0
 800c5ba:	461a      	mov	r2, r3
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	1ad3      	subs	r3, r2, r3
 800c5c2:	3b01      	subs	r3, #1
 800c5c4:	637b      	str	r3, [r7, #52]	; 0x34
		if(delta_time < *doff){
 800c5c6:	6a3b      	ldr	r3, [r7, #32]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c5cc:	429a      	cmp	r2, r3
 800c5ce:	da03      	bge.n	800c5d8 <fb_cycle+0x156>
			*out = 0;
 800c5d0:	69bb      	ldr	r3, [r7, #24]
 800c5d2:	2200      	movs	r2, #0
 800c5d4:	601a      	str	r2, [r3, #0]
}
 800c5d6:	e015      	b.n	800c604 <fb_cycle+0x182>
		else if(delta_time < *doff + *don){
 800c5d8:	6a3b      	ldr	r3, [r7, #32]
 800c5da:	681a      	ldr	r2, [r3, #0]
 800c5dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	4413      	add	r3, r2
 800c5e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c5e4:	429a      	cmp	r2, r3
 800c5e6:	da03      	bge.n	800c5f0 <fb_cycle+0x16e>
			*out = 1;
 800c5e8:	69bb      	ldr	r3, [r7, #24]
 800c5ea:	2201      	movs	r2, #1
 800c5ec:	601a      	str	r2, [r3, #0]
}
 800c5ee:	e009      	b.n	800c604 <fb_cycle+0x182>
			*cycle_counter = hal_get_tick(); //resample again
 800c5f0:	f7f4 f8e8 	bl	80007c4 <hal_get_tick>
 800c5f4:	4602      	mov	r2, r0
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	601a      	str	r2, [r3, #0]
			*val = *val + 1;
 800c5fa:	693b      	ldr	r3, [r7, #16]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	1c5a      	adds	r2, r3, #1
 800c600:	693b      	ldr	r3, [r7, #16]
 800c602:	601a      	str	r2, [r3, #0]
}
 800c604:	bf00      	nop
 800c606:	3738      	adds	r7, #56	; 0x38
 800c608:	46bd      	mov	sp, r7
 800c60a:	bd80      	pop	{r7, pc}

0800c60c <create_fb_cycle>:

type_fb_cycle create_fb_cycle(uint8_t rst,
								uint8_t in,
									uint32_t don,
										uint32_t doff,
											uint8_t mode){
 800c60c:	b5b0      	push	{r4, r5, r7, lr}
 800c60e:	b090      	sub	sp, #64	; 0x40
 800c610:	af00      	add	r7, sp, #0
 800c612:	60f8      	str	r0, [r7, #12]
 800c614:	607b      	str	r3, [r7, #4]
 800c616:	460b      	mov	r3, r1
 800c618:	72fb      	strb	r3, [r7, #11]
 800c61a:	4613      	mov	r3, r2
 800c61c:	72bb      	strb	r3, [r7, #10]
	type_fb_cycle fb;

	s_Param* pAddrTable = get_paramAddrTable();
 800c61e:	f7ff f95f 	bl	800b8e0 <get_paramAddrTable>
 800c622:	63f8      	str	r0, [r7, #60]	; 0x3c

	fb.startParamIndex = pAddrTable->currentIndex;
 800c624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c626:	781b      	ldrb	r3, [r3, #0]
 800c628:	757b      	strb	r3, [r7, #21]

	//input ports
	fb.fp.rst = createParameter(rst);
 800c62a:	7afb      	ldrb	r3, [r7, #11]
 800c62c:	4618      	mov	r0, r3
 800c62e:	f7ff f985 	bl	800b93c <createParameter>
 800c632:	4603      	mov	r3, r0
 800c634:	61bb      	str	r3, [r7, #24]
	fb.fp.in = createParameter(in);
 800c636:	7abb      	ldrb	r3, [r7, #10]
 800c638:	4618      	mov	r0, r3
 800c63a:	f7ff f97f 	bl	800b93c <createParameter>
 800c63e:	4603      	mov	r3, r0
 800c640:	61fb      	str	r3, [r7, #28]
	fb.fp.don = createParameter(don);
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	4618      	mov	r0, r3
 800c646:	f7ff f979 	bl	800b93c <createParameter>
 800c64a:	4603      	mov	r3, r0
 800c64c:	623b      	str	r3, [r7, #32]
	fb.fp.doff = createParameter(doff);
 800c64e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c650:	4618      	mov	r0, r3
 800c652:	f7ff f973 	bl	800b93c <createParameter>
 800c656:	4603      	mov	r3, r0
 800c658:	627b      	str	r3, [r7, #36]	; 0x24
	fb.fp.mode = createParameter(mode);
 800c65a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800c65e:	4618      	mov	r0, r3
 800c660:	f7ff f96c 	bl	800b93c <createParameter>
 800c664:	4603      	mov	r3, r0
 800c666:	62bb      	str	r3, [r7, #40]	; 0x28

	//output ports
	fb.fp.out = createParameter(0);
 800c668:	2000      	movs	r0, #0
 800c66a:	f7ff f967 	bl	800b93c <createParameter>
 800c66e:	4603      	mov	r3, r0
 800c670:	62fb      	str	r3, [r7, #44]	; 0x2c
	fb.fp.stat = createParameter(0);
 800c672:	2000      	movs	r0, #0
 800c674:	f7ff f962 	bl	800b93c <createParameter>
 800c678:	4603      	mov	r3, r0
 800c67a:	633b      	str	r3, [r7, #48]	; 0x30
	fb.fp.val = createParameter(0);
 800c67c:	2000      	movs	r0, #0
 800c67e:	f7ff f95d 	bl	800b93c <createParameter>
 800c682:	4603      	mov	r3, r0
 800c684:	637b      	str	r3, [r7, #52]	; 0x34

	//internal parameters
	fb.fp.cycle_counter = createParameter(0xFFFFFFFF);
 800c686:	f04f 30ff 	mov.w	r0, #4294967295
 800c68a:	f7ff f957 	bl	800b93c <createParameter>
 800c68e:	4603      	mov	r3, r0
 800c690:	63bb      	str	r3, [r7, #56]	; 0x38

	fb.fb_index = writeToFBTable(fb_cycle, fb.startParamIndex);
 800c692:	7d7b      	ldrb	r3, [r7, #21]
 800c694:	4619      	mov	r1, r3
 800c696:	480a      	ldr	r0, [pc, #40]	; (800c6c0 <create_fb_cycle+0xb4>)
 800c698:	f7ff f92c 	bl	800b8f4 <writeToFBTable>
 800c69c:	4603      	mov	r3, r0
 800c69e:	753b      	strb	r3, [r7, #20]

	return fb;
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	461d      	mov	r5, r3
 800c6a4:	f107 0414 	add.w	r4, r7, #20
 800c6a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c6aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c6ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c6ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c6b0:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c6b4:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800c6b8:	68f8      	ldr	r0, [r7, #12]
 800c6ba:	3740      	adds	r7, #64	; 0x40
 800c6bc:	46bd      	mov	sp, r7
 800c6be:	bdb0      	pop	{r4, r5, r7, pc}
 800c6c0:	0800c483 	.word	0x0800c483

0800c6c4 <fb_encoder_parser>:
#include "mcCore.h"
#include "fb_encoder.h"
#include "adaptor.h"

//cyclic event fb
uint8_t fb_encoder_parser(uint8_t* p){
 800c6c4:	b580      	push	{r7, lr}
 800c6c6:	b08a      	sub	sp, #40	; 0x28
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	6278      	str	r0, [r7, #36]	; 0x24
	create_fb_encoder(p[0],p[1]);
 800c6cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6ce:	7819      	ldrb	r1, [r3, #0]
 800c6d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6d2:	3301      	adds	r3, #1
 800c6d4:	781a      	ldrb	r2, [r3, #0]
 800c6d6:	463b      	mov	r3, r7
 800c6d8:	4618      	mov	r0, r3
 800c6da:	f000 f87d 	bl	800c7d8 <create_fb_encoder>
	return 0;
 800c6de:	2300      	movs	r3, #0
}
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	3728      	adds	r7, #40	; 0x28
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	bd80      	pop	{r7, pc}

0800c6e8 <fb_encoder>:

void fb_encoder(uint8_t p){
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	b08a      	sub	sp, #40	; 0x28
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	4603      	mov	r3, r0
 800c6f0:	71fb      	strb	r3, [r7, #7]
	int32_t newtimer;
	s_Param* pAddrTable = get_paramAddrTable();
 800c6f2:	f7ff f8f5 	bl	800b8e0 <get_paramAddrTable>
 800c6f6:	6278      	str	r0, [r7, #36]	; 0x24
	int32_t* rst = &pAddrTable->value[pAddrTable->addr[p]];
 800c6f8:	79fb      	ldrb	r3, [r7, #7]
 800c6fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6fc:	009b      	lsls	r3, r3, #2
 800c6fe:	4413      	add	r3, r2
 800c700:	685b      	ldr	r3, [r3, #4]
 800c702:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800c706:	009b      	lsls	r3, r3, #2
 800c708:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c70a:	4413      	add	r3, r2
 800c70c:	3304      	adds	r3, #4
 800c70e:	623b      	str	r3, [r7, #32]
	int32_t* ch = &pAddrTable->value[pAddrTable->addr[p+1]];
 800c710:	79fb      	ldrb	r3, [r7, #7]
 800c712:	3301      	adds	r3, #1
 800c714:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c716:	009b      	lsls	r3, r3, #2
 800c718:	4413      	add	r3, r2
 800c71a:	685b      	ldr	r3, [r3, #4]
 800c71c:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800c720:	009b      	lsls	r3, r3, #2
 800c722:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c724:	4413      	add	r3, r2
 800c726:	3304      	adds	r3, #4
 800c728:	61fb      	str	r3, [r7, #28]
	int32_t* mode = &pAddrTable->value[pAddrTable->addr[p+2]];
 800c72a:	79fb      	ldrb	r3, [r7, #7]
 800c72c:	3302      	adds	r3, #2
 800c72e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c730:	009b      	lsls	r3, r3, #2
 800c732:	4413      	add	r3, r2
 800c734:	685b      	ldr	r3, [r3, #4]
 800c736:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800c73a:	009b      	lsls	r3, r3, #2
 800c73c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c73e:	4413      	add	r3, r2
 800c740:	3304      	adds	r3, #4
 800c742:	61bb      	str	r3, [r7, #24]
	int32_t* val = &pAddrTable->value[pAddrTable->addr[p+3]];
 800c744:	79fb      	ldrb	r3, [r7, #7]
 800c746:	3303      	adds	r3, #3
 800c748:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c74a:	009b      	lsls	r3, r3, #2
 800c74c:	4413      	add	r3, r2
 800c74e:	685b      	ldr	r3, [r3, #4]
 800c750:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800c754:	009b      	lsls	r3, r3, #2
 800c756:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c758:	4413      	add	r3, r2
 800c75a:	3304      	adds	r3, #4
 800c75c:	617b      	str	r3, [r7, #20]
	int32_t* stat = &pAddrTable->value[pAddrTable->addr[p+4]];
 800c75e:	79fb      	ldrb	r3, [r7, #7]
 800c760:	3304      	adds	r3, #4
 800c762:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c764:	009b      	lsls	r3, r3, #2
 800c766:	4413      	add	r3, r2
 800c768:	685b      	ldr	r3, [r3, #4]
 800c76a:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800c76e:	009b      	lsls	r3, r3, #2
 800c770:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c772:	4413      	add	r3, r2
 800c774:	3304      	adds	r3, #4
 800c776:	613b      	str	r3, [r7, #16]
	int32_t* oldtimer = &pAddrTable->value[pAddrTable->addr[p+5]];
 800c778:	79fb      	ldrb	r3, [r7, #7]
 800c77a:	3305      	adds	r3, #5
 800c77c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c77e:	009b      	lsls	r3, r3, #2
 800c780:	4413      	add	r3, r2
 800c782:	685b      	ldr	r3, [r3, #4]
 800c784:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800c788:	009b      	lsls	r3, r3, #2
 800c78a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c78c:	4413      	add	r3, r2
 800c78e:	3304      	adds	r3, #4
 800c790:	60fb      	str	r3, [r7, #12]

	newtimer = hal_get_encoder_value(*ch);
 800c792:	69fb      	ldr	r3, [r7, #28]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	4618      	mov	r0, r3
 800c798:	f7f4 f926 	bl	80009e8 <hal_get_encoder_value>
 800c79c:	60b8      	str	r0, [r7, #8]

	if(newtimer != *oldtimer){
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	68ba      	ldr	r2, [r7, #8]
 800c7a4:	429a      	cmp	r2, r3
 800c7a6:	d00b      	beq.n	800c7c0 <fb_encoder+0xd8>
		*val = *val + (newtimer-*oldtimer);
 800c7a8:	697b      	ldr	r3, [r7, #20]
 800c7aa:	681a      	ldr	r2, [r3, #0]
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	68b9      	ldr	r1, [r7, #8]
 800c7b2:	1acb      	subs	r3, r1, r3
 800c7b4:	441a      	add	r2, r3
 800c7b6:	697b      	ldr	r3, [r7, #20]
 800c7b8:	601a      	str	r2, [r3, #0]
		*oldtimer = newtimer;
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	68ba      	ldr	r2, [r7, #8]
 800c7be:	601a      	str	r2, [r3, #0]
	}

	if(*rst == 1){
 800c7c0:	6a3b      	ldr	r3, [r7, #32]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	2b01      	cmp	r3, #1
 800c7c6:	d102      	bne.n	800c7ce <fb_encoder+0xe6>
		*val = 0;
 800c7c8:	697b      	ldr	r3, [r7, #20]
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	601a      	str	r2, [r3, #0]
	}

}
 800c7ce:	bf00      	nop
 800c7d0:	3728      	adds	r7, #40	; 0x28
 800c7d2:	46bd      	mov	sp, r7
 800c7d4:	bd80      	pop	{r7, pc}
	...

0800c7d8 <create_fb_encoder>:

type_fb_encoder create_fb_encoder(uint8_t ch,
									uint8_t mode){
 800c7d8:	b5b0      	push	{r4, r5, r7, lr}
 800c7da:	b08a      	sub	sp, #40	; 0x28
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	6078      	str	r0, [r7, #4]
 800c7e0:	460b      	mov	r3, r1
 800c7e2:	70fb      	strb	r3, [r7, #3]
 800c7e4:	4613      	mov	r3, r2
 800c7e6:	70bb      	strb	r3, [r7, #2]
	type_fb_encoder fb;

	s_Param* pAddrTable = get_paramAddrTable();
 800c7e8:	f7ff f87a 	bl	800b8e0 <get_paramAddrTable>
 800c7ec:	6278      	str	r0, [r7, #36]	; 0x24

	fb.startParamIndex = pAddrTable->currentIndex;
 800c7ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7f0:	781b      	ldrb	r3, [r3, #0]
 800c7f2:	727b      	strb	r3, [r7, #9]

	//input ports
	fb.fp.rst = createParameter(0);
 800c7f4:	2000      	movs	r0, #0
 800c7f6:	f7ff f8a1 	bl	800b93c <createParameter>
 800c7fa:	4603      	mov	r3, r0
 800c7fc:	60fb      	str	r3, [r7, #12]
	fb.fp.ch = createParameter(ch);
 800c7fe:	78fb      	ldrb	r3, [r7, #3]
 800c800:	4618      	mov	r0, r3
 800c802:	f7ff f89b 	bl	800b93c <createParameter>
 800c806:	4603      	mov	r3, r0
 800c808:	613b      	str	r3, [r7, #16]
	fb.fp.mode = createParameter(mode);
 800c80a:	78bb      	ldrb	r3, [r7, #2]
 800c80c:	4618      	mov	r0, r3
 800c80e:	f7ff f895 	bl	800b93c <createParameter>
 800c812:	4603      	mov	r3, r0
 800c814:	617b      	str	r3, [r7, #20]

	//output ports
	fb.fp.val = createParameter(0);
 800c816:	2000      	movs	r0, #0
 800c818:	f7ff f890 	bl	800b93c <createParameter>
 800c81c:	4603      	mov	r3, r0
 800c81e:	61bb      	str	r3, [r7, #24]
	fb.fp.stat = createParameter(0);
 800c820:	2000      	movs	r0, #0
 800c822:	f7ff f88b 	bl	800b93c <createParameter>
 800c826:	4603      	mov	r3, r0
 800c828:	61fb      	str	r3, [r7, #28]

	//internal parameters
	fb.fp.oldtimer = createParameter(0);
 800c82a:	2000      	movs	r0, #0
 800c82c:	f7ff f886 	bl	800b93c <createParameter>
 800c830:	4603      	mov	r3, r0
 800c832:	623b      	str	r3, [r7, #32]

	fb.fb_index = writeToFBTable(fb_encoder, fb.startParamIndex);
 800c834:	7a7b      	ldrb	r3, [r7, #9]
 800c836:	4619      	mov	r1, r3
 800c838:	4809      	ldr	r0, [pc, #36]	; (800c860 <create_fb_encoder+0x88>)
 800c83a:	f7ff f85b 	bl	800b8f4 <writeToFBTable>
 800c83e:	4603      	mov	r3, r0
 800c840:	723b      	strb	r3, [r7, #8]

	return fb;
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	461d      	mov	r5, r3
 800c846:	f107 0408 	add.w	r4, r7, #8
 800c84a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c84c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c84e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800c852:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 800c856:	6878      	ldr	r0, [r7, #4]
 800c858:	3728      	adds	r7, #40	; 0x28
 800c85a:	46bd      	mov	sp, r7
 800c85c:	bdb0      	pop	{r4, r5, r7, pc}
 800c85e:	bf00      	nop
 800c860:	0800c6e9 	.word	0x0800c6e9

0800c864 <fb_gui_display_parser>:
#include "utility.h"
#include "fb_gui_display.h"


//gui_display fb
uint8_t fb_gui_display_parser(uint8_t* p){
 800c864:	b590      	push	{r4, r7, lr}
 800c866:	b09b      	sub	sp, #108	; 0x6c
 800c868:	af06      	add	r7, sp, #24
 800c86a:	6378      	str	r0, [r7, #52]	; 0x34
	uint16_t index = 0;
 800c86c:	2300      	movs	r3, #0
 800c86e:	87bb      	strh	r3, [r7, #60]	; 0x3c

	uint16_t startX = get_uint16(p, &index);
 800c870:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c874:	4619      	mov	r1, r3
 800c876:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c878:	f000 fec1 	bl	800d5fe <get_uint16>
 800c87c:	4603      	mov	r3, r0
 800c87e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	uint16_t startY = get_uint16(p, &index);
 800c882:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c886:	4619      	mov	r1, r3
 800c888:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c88a:	f000 feb8 	bl	800d5fe <get_uint16>
 800c88e:	4603      	mov	r3, r0
 800c890:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	uint16_t width = get_uint16(p, &index);
 800c894:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c898:	4619      	mov	r1, r3
 800c89a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c89c:	f000 feaf 	bl	800d5fe <get_uint16>
 800c8a0:	4603      	mov	r3, r0
 800c8a2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	uint16_t height = get_uint16(p, &index);
 800c8a6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c8aa:	4619      	mov	r1, r3
 800c8ac:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c8ae:	f000 fea6 	bl	800d5fe <get_uint16>
 800c8b2:	4603      	mov	r3, r0
 800c8b4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	uint8_t attr = get_uint8(p, &index);
 800c8b8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c8bc:	4619      	mov	r1, r3
 800c8be:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c8c0:	f000 fe84 	bl	800d5cc <get_uint8>
 800c8c4:	4603      	mov	r3, r0
 800c8c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t val = get_uint32(p, &index);
 800c8ca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c8ce:	4619      	mov	r1, r3
 800c8d0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c8d2:	f000 feb8 	bl	800d646 <get_uint32>
 800c8d6:	4603      	mov	r3, r0
 800c8d8:	643b      	str	r3, [r7, #64]	; 0x40
	uint8_t mode = get_uint8(p, &index);
 800c8da:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c8de:	4619      	mov	r1, r3
 800c8e0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c8e2:	f000 fe73 	bl	800d5cc <get_uint8>
 800c8e6:	4603      	mov	r3, r0
 800c8e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t mid = get_uint8(p, &index);
 800c8ec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c8f0:	4619      	mov	r1, r3
 800c8f2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c8f4:	f000 fe6a 	bl	800d5cc <get_uint8>
 800c8f8:	4603      	mov	r3, r0
 800c8fa:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	create_fb_gui_display(startX, startY, width, height, attr, val, mode, mid);
 800c8fe:	4638      	mov	r0, r7
 800c900:	f8b7 404a 	ldrh.w	r4, [r7, #74]	; 0x4a
 800c904:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800c908:	f8b7 104e 	ldrh.w	r1, [r7, #78]	; 0x4e
 800c90c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800c910:	9304      	str	r3, [sp, #16]
 800c912:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c916:	9303      	str	r3, [sp, #12]
 800c918:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c91a:	9302      	str	r3, [sp, #8]
 800c91c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800c920:	9301      	str	r3, [sp, #4]
 800c922:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800c926:	9300      	str	r3, [sp, #0]
 800c928:	4623      	mov	r3, r4
 800c92a:	f000 f90f 	bl	800cb4c <create_fb_gui_display>

	return 0;
 800c92e:	2300      	movs	r3, #0
}
 800c930:	4618      	mov	r0, r3
 800c932:	3754      	adds	r7, #84	; 0x54
 800c934:	46bd      	mov	sp, r7
 800c936:	bd90      	pop	{r4, r7, pc}

0800c938 <fb_gui_display>:

void fb_gui_display(uint8_t p){
 800c938:	b5b0      	push	{r4, r5, r7, lr}
 800c93a:	b098      	sub	sp, #96	; 0x60
 800c93c:	af04      	add	r7, sp, #16
 800c93e:	4603      	mov	r3, r0
 800c940:	71fb      	strb	r3, [r7, #7]
	uint32_t time, delta;

	s_Param* pAddrTable = get_paramAddrTable();
 800c942:	f7fe ffcd 	bl	800b8e0 <get_paramAddrTable>
 800c946:	64b8      	str	r0, [r7, #72]	; 0x48
	int32_t* startX = &pAddrTable->value[pAddrTable->addr[p]];
 800c948:	79fb      	ldrb	r3, [r7, #7]
 800c94a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c94c:	009b      	lsls	r3, r3, #2
 800c94e:	4413      	add	r3, r2
 800c950:	685b      	ldr	r3, [r3, #4]
 800c952:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800c956:	009b      	lsls	r3, r3, #2
 800c958:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c95a:	4413      	add	r3, r2
 800c95c:	3304      	adds	r3, #4
 800c95e:	647b      	str	r3, [r7, #68]	; 0x44
	int32_t* startY = &pAddrTable->value[pAddrTable->addr[p+1]];
 800c960:	79fb      	ldrb	r3, [r7, #7]
 800c962:	3301      	adds	r3, #1
 800c964:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c966:	009b      	lsls	r3, r3, #2
 800c968:	4413      	add	r3, r2
 800c96a:	685b      	ldr	r3, [r3, #4]
 800c96c:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800c970:	009b      	lsls	r3, r3, #2
 800c972:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c974:	4413      	add	r3, r2
 800c976:	3304      	adds	r3, #4
 800c978:	643b      	str	r3, [r7, #64]	; 0x40
	int32_t* width = &pAddrTable->value[pAddrTable->addr[p+2]];
 800c97a:	79fb      	ldrb	r3, [r7, #7]
 800c97c:	3302      	adds	r3, #2
 800c97e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c980:	009b      	lsls	r3, r3, #2
 800c982:	4413      	add	r3, r2
 800c984:	685b      	ldr	r3, [r3, #4]
 800c986:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800c98a:	009b      	lsls	r3, r3, #2
 800c98c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c98e:	4413      	add	r3, r2
 800c990:	3304      	adds	r3, #4
 800c992:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t* height = &pAddrTable->value[pAddrTable->addr[p+3]];
 800c994:	79fb      	ldrb	r3, [r7, #7]
 800c996:	3303      	adds	r3, #3
 800c998:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c99a:	009b      	lsls	r3, r3, #2
 800c99c:	4413      	add	r3, r2
 800c99e:	685b      	ldr	r3, [r3, #4]
 800c9a0:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800c9a4:	009b      	lsls	r3, r3, #2
 800c9a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c9a8:	4413      	add	r3, r2
 800c9aa:	3304      	adds	r3, #4
 800c9ac:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t* attr = &pAddrTable->value[pAddrTable->addr[p+4]];
 800c9ae:	79fb      	ldrb	r3, [r7, #7]
 800c9b0:	3304      	adds	r3, #4
 800c9b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c9b4:	009b      	lsls	r3, r3, #2
 800c9b6:	4413      	add	r3, r2
 800c9b8:	685b      	ldr	r3, [r3, #4]
 800c9ba:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800c9be:	009b      	lsls	r3, r3, #2
 800c9c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c9c2:	4413      	add	r3, r2
 800c9c4:	3304      	adds	r3, #4
 800c9c6:	637b      	str	r3, [r7, #52]	; 0x34
	int32_t* val = &pAddrTable->value[pAddrTable->addr[p+5]];
 800c9c8:	79fb      	ldrb	r3, [r7, #7]
 800c9ca:	3305      	adds	r3, #5
 800c9cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c9ce:	009b      	lsls	r3, r3, #2
 800c9d0:	4413      	add	r3, r2
 800c9d2:	685b      	ldr	r3, [r3, #4]
 800c9d4:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800c9d8:	009b      	lsls	r3, r3, #2
 800c9da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c9dc:	4413      	add	r3, r2
 800c9de:	3304      	adds	r3, #4
 800c9e0:	633b      	str	r3, [r7, #48]	; 0x30
	int32_t* mode = &pAddrTable->value[pAddrTable->addr[p+6]];
 800c9e2:	79fb      	ldrb	r3, [r7, #7]
 800c9e4:	3306      	adds	r3, #6
 800c9e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c9e8:	009b      	lsls	r3, r3, #2
 800c9ea:	4413      	add	r3, r2
 800c9ec:	685b      	ldr	r3, [r3, #4]
 800c9ee:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800c9f2:	009b      	lsls	r3, r3, #2
 800c9f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c9f6:	4413      	add	r3, r2
 800c9f8:	3304      	adds	r3, #4
 800c9fa:	62fb      	str	r3, [r7, #44]	; 0x2c
	int32_t* mid = &pAddrTable->value[pAddrTable->addr[p+7]];
 800c9fc:	79fb      	ldrb	r3, [r7, #7]
 800c9fe:	3307      	adds	r3, #7
 800ca00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ca02:	009b      	lsls	r3, r3, #2
 800ca04:	4413      	add	r3, r2
 800ca06:	685b      	ldr	r3, [r3, #4]
 800ca08:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800ca0c:	009b      	lsls	r3, r3, #2
 800ca0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ca10:	4413      	add	r3, r2
 800ca12:	3304      	adds	r3, #4
 800ca14:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t* stat = &pAddrTable->value[pAddrTable->addr[p+8]];
 800ca16:	79fb      	ldrb	r3, [r7, #7]
 800ca18:	3308      	adds	r3, #8
 800ca1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ca1c:	009b      	lsls	r3, r3, #2
 800ca1e:	4413      	add	r3, r2
 800ca20:	685b      	ldr	r3, [r3, #4]
 800ca22:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800ca26:	009b      	lsls	r3, r3, #2
 800ca28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ca2a:	4413      	add	r3, r2
 800ca2c:	3304      	adds	r3, #4
 800ca2e:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t* old_val = &pAddrTable->value[pAddrTable->addr[p+9]];
 800ca30:	79fb      	ldrb	r3, [r7, #7]
 800ca32:	3309      	adds	r3, #9
 800ca34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ca36:	009b      	lsls	r3, r3, #2
 800ca38:	4413      	add	r3, r2
 800ca3a:	685b      	ldr	r3, [r3, #4]
 800ca3c:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800ca40:	009b      	lsls	r3, r3, #2
 800ca42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ca44:	4413      	add	r3, r2
 800ca46:	3304      	adds	r3, #4
 800ca48:	623b      	str	r3, [r7, #32]
	int32_t* old_time = &pAddrTable->value[pAddrTable->addr[p+10]];
 800ca4a:	79fb      	ldrb	r3, [r7, #7]
 800ca4c:	330a      	adds	r3, #10
 800ca4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ca50:	009b      	lsls	r3, r3, #2
 800ca52:	4413      	add	r3, r2
 800ca54:	685b      	ldr	r3, [r3, #4]
 800ca56:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800ca5a:	009b      	lsls	r3, r3, #2
 800ca5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ca5e:	4413      	add	r3, r2
 800ca60:	3304      	adds	r3, #4
 800ca62:	61fb      	str	r3, [r7, #28]

	if(*old_val != *val){
 800ca64:	6a3b      	ldr	r3, [r7, #32]
 800ca66:	681a      	ldr	r2, [r3, #0]
 800ca68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	429a      	cmp	r2, r3
 800ca6e:	d069      	beq.n	800cb44 <fb_gui_display+0x20c>
		time = hal_get_tick();
 800ca70:	f7f3 fea8 	bl	80007c4 <hal_get_tick>
 800ca74:	4603      	mov	r3, r0
 800ca76:	61bb      	str	r3, [r7, #24]

		if(time > *old_time){
 800ca78:	69fb      	ldr	r3, [r7, #28]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	461a      	mov	r2, r3
 800ca7e:	69bb      	ldr	r3, [r7, #24]
 800ca80:	4293      	cmp	r3, r2
 800ca82:	d906      	bls.n	800ca92 <fb_gui_display+0x15a>
			delta = time - (uint32_t) *old_time;
 800ca84:	69fb      	ldr	r3, [r7, #28]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	461a      	mov	r2, r3
 800ca8a:	69bb      	ldr	r3, [r7, #24]
 800ca8c:	1a9b      	subs	r3, r3, r2
 800ca8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ca90:	e006      	b.n	800caa0 <fb_gui_display+0x168>
		}

		else{
			delta = time + (0xFFFFFFFF - *old_time);
 800ca92:	69fb      	ldr	r3, [r7, #28]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	461a      	mov	r2, r3
 800ca98:	69bb      	ldr	r3, [r7, #24]
 800ca9a:	1a9b      	subs	r3, r3, r2
 800ca9c:	3b01      	subs	r3, #1
 800ca9e:	64fb      	str	r3, [r7, #76]	; 0x4c
		}

		if(delta > 1000){ //1000ms'den önce refresh işlemi yapma
 800caa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800caa2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800caa6:	d94d      	bls.n	800cb44 <fb_gui_display+0x20c>
			*old_val = *val;
 800caa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caaa:	681a      	ldr	r2, [r3, #0]
 800caac:	6a3b      	ldr	r3, [r7, #32]
 800caae:	601a      	str	r2, [r3, #0]
			*old_time = time;
 800cab0:	69ba      	ldr	r2, [r7, #24]
 800cab2:	69fb      	ldr	r3, [r7, #28]
 800cab4:	601a      	str	r2, [r3, #0]
			if(*mode == 0){ //text mode
 800cab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d12c      	bne.n	800cb18 <fb_gui_display+0x1e0>
				//val holds the data at the global text table
				glob_text_element_table_t* table = get_text_element_table();
 800cabe:	f7ff f879 	bl	800bbb4 <get_text_element_table>
 800cac2:	4603      	mov	r3, r0
 800cac4:	617b      	str	r3, [r7, #20]
				char* str = table->e[*val].value;
 800cac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cac8:	681a      	ldr	r2, [r3, #0]
 800caca:	4613      	mov	r3, r2
 800cacc:	009b      	lsls	r3, r3, #2
 800cace:	4413      	add	r3, r2
 800cad0:	009b      	lsls	r3, r3, #2
 800cad2:	697a      	ldr	r2, [r7, #20]
 800cad4:	4413      	add	r3, r2
 800cad6:	3306      	adds	r3, #6
 800cad8:	613b      	str	r3, [r7, #16]
				uint16_t len = table->e[*val].length;
 800cada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cadc:	681a      	ldr	r2, [r3, #0]
 800cade:	6979      	ldr	r1, [r7, #20]
 800cae0:	4613      	mov	r3, r2
 800cae2:	009b      	lsls	r3, r3, #2
 800cae4:	4413      	add	r3, r2
 800cae6:	009b      	lsls	r3, r3, #2
 800cae8:	440b      	add	r3, r1
 800caea:	3304      	adds	r3, #4
 800caec:	881b      	ldrh	r3, [r3, #0]
 800caee:	81fb      	strh	r3, [r7, #14]
				Display_String(*startX, *startY, *width, *height, *attr, str, len);
 800caf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800caf2:	6818      	ldr	r0, [r3, #0]
 800caf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800caf6:	6819      	ldr	r1, [r3, #0]
 800caf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cafa:	681c      	ldr	r4, [r3, #0]
 800cafc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cafe:	681d      	ldr	r5, [r3, #0]
 800cb00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	89fa      	ldrh	r2, [r7, #14]
 800cb06:	9202      	str	r2, [sp, #8]
 800cb08:	693a      	ldr	r2, [r7, #16]
 800cb0a:	9201      	str	r2, [sp, #4]
 800cb0c:	9300      	str	r3, [sp, #0]
 800cb0e:	462b      	mov	r3, r5
 800cb10:	4622      	mov	r2, r4
 800cb12:	f7f3 ff81 	bl	8000a18 <Display_String>
			else if(*mode == 1){ //number mode
				Display_Number(*startX, *startY, *width, *height, *attr, *val);
			}
		}
	}
}
 800cb16:	e015      	b.n	800cb44 <fb_gui_display+0x20c>
			else if(*mode == 1){ //number mode
 800cb18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	2b01      	cmp	r3, #1
 800cb1e:	d111      	bne.n	800cb44 <fb_gui_display+0x20c>
				Display_Number(*startX, *startY, *width, *height, *attr, *val);
 800cb20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb22:	6818      	ldr	r0, [r3, #0]
 800cb24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb26:	6819      	ldr	r1, [r3, #0]
 800cb28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb2a:	681c      	ldr	r4, [r3, #0]
 800cb2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb2e:	681d      	ldr	r5, [r3, #0]
 800cb30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb36:	6812      	ldr	r2, [r2, #0]
 800cb38:	9201      	str	r2, [sp, #4]
 800cb3a:	9300      	str	r3, [sp, #0]
 800cb3c:	462b      	mov	r3, r5
 800cb3e:	4622      	mov	r2, r4
 800cb40:	f7f3 ff88 	bl	8000a54 <Display_Number>
}
 800cb44:	bf00      	nop
 800cb46:	3750      	adds	r7, #80	; 0x50
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	bdb0      	pop	{r4, r5, r7, pc}

0800cb4c <create_fb_gui_display>:

type_fb_gui_display create_fb_gui_display(uint16_t startX, uint16_t startY,
											uint16_t width, uint16_t height,
												uint8_t attr, uint32_t val,
													uint8_t mode, uint8_t mid)
{
 800cb4c:	b5b0      	push	{r4, r5, r7, lr}
 800cb4e:	b092      	sub	sp, #72	; 0x48
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	60f8      	str	r0, [r7, #12]
 800cb54:	4608      	mov	r0, r1
 800cb56:	4611      	mov	r1, r2
 800cb58:	461a      	mov	r2, r3
 800cb5a:	4603      	mov	r3, r0
 800cb5c:	817b      	strh	r3, [r7, #10]
 800cb5e:	460b      	mov	r3, r1
 800cb60:	813b      	strh	r3, [r7, #8]
 800cb62:	4613      	mov	r3, r2
 800cb64:	80fb      	strh	r3, [r7, #6]
	
	type_fb_gui_display fb;

	s_Param* pAddrTable = get_paramAddrTable();
 800cb66:	f7fe febb 	bl	800b8e0 <get_paramAddrTable>
 800cb6a:	6478      	str	r0, [r7, #68]	; 0x44

	fb.startParamIndex = pAddrTable->currentIndex;
 800cb6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb6e:	781b      	ldrb	r3, [r3, #0]
 800cb70:	757b      	strb	r3, [r7, #21]

	//input ports
	fb.fp.startX = createParameter(startX);
 800cb72:	897b      	ldrh	r3, [r7, #10]
 800cb74:	4618      	mov	r0, r3
 800cb76:	f7fe fee1 	bl	800b93c <createParameter>
 800cb7a:	4603      	mov	r3, r0
 800cb7c:	61bb      	str	r3, [r7, #24]
	fb.fp.startY = createParameter(startY);
 800cb7e:	893b      	ldrh	r3, [r7, #8]
 800cb80:	4618      	mov	r0, r3
 800cb82:	f7fe fedb 	bl	800b93c <createParameter>
 800cb86:	4603      	mov	r3, r0
 800cb88:	61fb      	str	r3, [r7, #28]
	fb.fp.width = createParameter(width);
 800cb8a:	88fb      	ldrh	r3, [r7, #6]
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	f7fe fed5 	bl	800b93c <createParameter>
 800cb92:	4603      	mov	r3, r0
 800cb94:	623b      	str	r3, [r7, #32]
	fb.fp.height = createParameter(height);
 800cb96:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	f7fe fece 	bl	800b93c <createParameter>
 800cba0:	4603      	mov	r3, r0
 800cba2:	627b      	str	r3, [r7, #36]	; 0x24
	fb.fp.attr = createParameter(attr);
 800cba4:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800cba8:	4618      	mov	r0, r3
 800cbaa:	f7fe fec7 	bl	800b93c <createParameter>
 800cbae:	4603      	mov	r3, r0
 800cbb0:	62bb      	str	r3, [r7, #40]	; 0x28
	fb.fp.val = createParameter(val);
 800cbb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	f7fe fec1 	bl	800b93c <createParameter>
 800cbba:	4603      	mov	r3, r0
 800cbbc:	62fb      	str	r3, [r7, #44]	; 0x2c
	fb.fp.mode = createParameter(mode);
 800cbbe:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	f7fe feba 	bl	800b93c <createParameter>
 800cbc8:	4603      	mov	r3, r0
 800cbca:	633b      	str	r3, [r7, #48]	; 0x30
	fb.fp.mid = createParameter(mid);
 800cbcc:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	f7fe feb3 	bl	800b93c <createParameter>
 800cbd6:	4603      	mov	r3, r0
 800cbd8:	637b      	str	r3, [r7, #52]	; 0x34

	//output ports
	fb.fp.stat = createParameter(0);
 800cbda:	2000      	movs	r0, #0
 800cbdc:	f7fe feae 	bl	800b93c <createParameter>
 800cbe0:	4603      	mov	r3, r0
 800cbe2:	63bb      	str	r3, [r7, #56]	; 0x38

	//internal parameters
	fb.fp.old_val = createParameter(-1);
 800cbe4:	f04f 30ff 	mov.w	r0, #4294967295
 800cbe8:	f7fe fea8 	bl	800b93c <createParameter>
 800cbec:	4603      	mov	r3, r0
 800cbee:	63fb      	str	r3, [r7, #60]	; 0x3c
	fb.fp.old_time = createParameter(0);
 800cbf0:	2000      	movs	r0, #0
 800cbf2:	f7fe fea3 	bl	800b93c <createParameter>
 800cbf6:	4603      	mov	r3, r0
 800cbf8:	643b      	str	r3, [r7, #64]	; 0x40

	fb.fb_index = writeToFBTable(fb_gui_display, fb.startParamIndex);
 800cbfa:	7d7b      	ldrb	r3, [r7, #21]
 800cbfc:	4619      	mov	r1, r3
 800cbfe:	480a      	ldr	r0, [pc, #40]	; (800cc28 <create_fb_gui_display+0xdc>)
 800cc00:	f7fe fe78 	bl	800b8f4 <writeToFBTable>
 800cc04:	4603      	mov	r3, r0
 800cc06:	753b      	strb	r3, [r7, #20]

	return fb;
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	461d      	mov	r5, r3
 800cc0c:	f107 0414 	add.w	r4, r7, #20
 800cc10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cc12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cc14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cc16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cc18:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800cc1c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 800cc20:	68f8      	ldr	r0, [r7, #12]
 800cc22:	3748      	adds	r7, #72	; 0x48
 800cc24:	46bd      	mov	sp, r7
 800cc26:	bdb0      	pop	{r4, r5, r7, pc}
 800cc28:	0800c939 	.word	0x0800c939

0800cc2c <fb_inputpin_parser>:

/*--------------------------------------------------------------------------------------
						Function Block Functions
----------------------------------------------------------------------------------------*/

uint8_t fb_inputpin_parser(uint8_t* p){
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b08a      	sub	sp, #40	; 0x28
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	61f8      	str	r0, [r7, #28]
	uint8_t ch = p[0];
 800cc34:	69fb      	ldr	r3, [r7, #28]
 800cc36:	781b      	ldrb	r3, [r3, #0]
 800cc38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t mode = p[1];
 800cc3c:	69fb      	ldr	r3, [r7, #28]
 800cc3e:	785b      	ldrb	r3, [r3, #1]
 800cc40:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	create_fb_inputpin(ch, mode);
 800cc44:	463b      	mov	r3, r7
 800cc46:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800cc4a:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 800cc4e:	4618      	mov	r0, r3
 800cc50:	f000 f84c 	bl	800ccec <create_fb_inputpin>
	return 0;
 800cc54:	2300      	movs	r3, #0
}
 800cc56:	4618      	mov	r0, r3
 800cc58:	3728      	adds	r7, #40	; 0x28
 800cc5a:	46bd      	mov	sp, r7
 800cc5c:	bd80      	pop	{r7, pc}

0800cc5e <fb_inputpin>:

void fb_inputpin(uint8_t p){
 800cc5e:	b580      	push	{r7, lr}
 800cc60:	b088      	sub	sp, #32
 800cc62:	af00      	add	r7, sp, #0
 800cc64:	4603      	mov	r3, r0
 800cc66:	71fb      	strb	r3, [r7, #7]

	s_Param* pAddrTable = get_paramAddrTable();
 800cc68:	f7fe fe3a 	bl	800b8e0 <get_paramAddrTable>
 800cc6c:	61f8      	str	r0, [r7, #28]
	int32_t* ch = &pAddrTable->value[pAddrTable->addr[p]];
 800cc6e:	79fb      	ldrb	r3, [r7, #7]
 800cc70:	69fa      	ldr	r2, [r7, #28]
 800cc72:	009b      	lsls	r3, r3, #2
 800cc74:	4413      	add	r3, r2
 800cc76:	685b      	ldr	r3, [r3, #4]
 800cc78:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800cc7c:	009b      	lsls	r3, r3, #2
 800cc7e:	69fa      	ldr	r2, [r7, #28]
 800cc80:	4413      	add	r3, r2
 800cc82:	3304      	adds	r3, #4
 800cc84:	61bb      	str	r3, [r7, #24]
	int32_t* mode = &pAddrTable->value[pAddrTable->addr[p+1]];
 800cc86:	79fb      	ldrb	r3, [r7, #7]
 800cc88:	3301      	adds	r3, #1
 800cc8a:	69fa      	ldr	r2, [r7, #28]
 800cc8c:	009b      	lsls	r3, r3, #2
 800cc8e:	4413      	add	r3, r2
 800cc90:	685b      	ldr	r3, [r3, #4]
 800cc92:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800cc96:	009b      	lsls	r3, r3, #2
 800cc98:	69fa      	ldr	r2, [r7, #28]
 800cc9a:	4413      	add	r3, r2
 800cc9c:	3304      	adds	r3, #4
 800cc9e:	617b      	str	r3, [r7, #20]
	int32_t* q = &pAddrTable->value[pAddrTable->addr[p+2]];
 800cca0:	79fb      	ldrb	r3, [r7, #7]
 800cca2:	3302      	adds	r3, #2
 800cca4:	69fa      	ldr	r2, [r7, #28]
 800cca6:	009b      	lsls	r3, r3, #2
 800cca8:	4413      	add	r3, r2
 800ccaa:	685b      	ldr	r3, [r3, #4]
 800ccac:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800ccb0:	009b      	lsls	r3, r3, #2
 800ccb2:	69fa      	ldr	r2, [r7, #28]
 800ccb4:	4413      	add	r3, r2
 800ccb6:	3304      	adds	r3, #4
 800ccb8:	613b      	str	r3, [r7, #16]
	int32_t* stat = &pAddrTable->value[pAddrTable->addr[p+3]];
 800ccba:	79fb      	ldrb	r3, [r7, #7]
 800ccbc:	3303      	adds	r3, #3
 800ccbe:	69fa      	ldr	r2, [r7, #28]
 800ccc0:	009b      	lsls	r3, r3, #2
 800ccc2:	4413      	add	r3, r2
 800ccc4:	685b      	ldr	r3, [r3, #4]
 800ccc6:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800ccca:	009b      	lsls	r3, r3, #2
 800cccc:	69fa      	ldr	r2, [r7, #28]
 800ccce:	4413      	add	r3, r2
 800ccd0:	3304      	adds	r3, #4
 800ccd2:	60fb      	str	r3, [r7, #12]

	*q =  hal_gpio_read_pin((uint32_t)*ch);
 800ccd4:	69bb      	ldr	r3, [r7, #24]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	4618      	mov	r0, r3
 800ccda:	f7f3 fcf7 	bl	80006cc <hal_gpio_read_pin>
 800ccde:	4602      	mov	r2, r0
 800cce0:	693b      	ldr	r3, [r7, #16]
 800cce2:	601a      	str	r2, [r3, #0]
}
 800cce4:	bf00      	nop
 800cce6:	3720      	adds	r7, #32
 800cce8:	46bd      	mov	sp, r7
 800ccea:	bd80      	pop	{r7, pc}

0800ccec <create_fb_inputpin>:


type_fb_inputpin create_fb_inputpin(uint8_t ch, uint8_t mode){
 800ccec:	b5b0      	push	{r4, r5, r7, lr}
 800ccee:	b088      	sub	sp, #32
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	6078      	str	r0, [r7, #4]
 800ccf4:	460b      	mov	r3, r1
 800ccf6:	70fb      	strb	r3, [r7, #3]
 800ccf8:	4613      	mov	r3, r2
 800ccfa:	70bb      	strb	r3, [r7, #2]
	type_fb_inputpin fb;
	s_Param* pAddrTable = get_paramAddrTable();
 800ccfc:	f7fe fdf0 	bl	800b8e0 <get_paramAddrTable>
 800cd00:	61f8      	str	r0, [r7, #28]

	fb.startParamIndex = pAddrTable->currentIndex;
 800cd02:	69fb      	ldr	r3, [r7, #28]
 800cd04:	781b      	ldrb	r3, [r3, #0]
 800cd06:	727b      	strb	r3, [r7, #9]

	fb.fp.ch = createParameter(ch); //input
 800cd08:	78fb      	ldrb	r3, [r7, #3]
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	f7fe fe16 	bl	800b93c <createParameter>
 800cd10:	4603      	mov	r3, r0
 800cd12:	60fb      	str	r3, [r7, #12]
	fb.fp.mode = createParameter(mode); //pin
 800cd14:	78bb      	ldrb	r3, [r7, #2]
 800cd16:	4618      	mov	r0, r3
 800cd18:	f7fe fe10 	bl	800b93c <createParameter>
 800cd1c:	4603      	mov	r3, r0
 800cd1e:	613b      	str	r3, [r7, #16]
	fb.fp.q = createParameter(0);
 800cd20:	2000      	movs	r0, #0
 800cd22:	f7fe fe0b 	bl	800b93c <createParameter>
 800cd26:	4603      	mov	r3, r0
 800cd28:	617b      	str	r3, [r7, #20]
	fb.fp.stat = createParameter(0);
 800cd2a:	2000      	movs	r0, #0
 800cd2c:	f7fe fe06 	bl	800b93c <createParameter>
 800cd30:	4603      	mov	r3, r0
 800cd32:	61bb      	str	r3, [r7, #24]

	fb.fb_index = writeToFBTable(fb_inputpin, fb.startParamIndex);
 800cd34:	7a7b      	ldrb	r3, [r7, #9]
 800cd36:	4619      	mov	r1, r3
 800cd38:	4808      	ldr	r0, [pc, #32]	; (800cd5c <create_fb_inputpin+0x70>)
 800cd3a:	f7fe fddb 	bl	800b8f4 <writeToFBTable>
 800cd3e:	4603      	mov	r3, r0
 800cd40:	723b      	strb	r3, [r7, #8]

	return fb;
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	461d      	mov	r5, r3
 800cd46:	f107 0408 	add.w	r4, r7, #8
 800cd4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cd4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cd4e:	6823      	ldr	r3, [r4, #0]
 800cd50:	602b      	str	r3, [r5, #0]
}
 800cd52:	6878      	ldr	r0, [r7, #4]
 800cd54:	3720      	adds	r7, #32
 800cd56:	46bd      	mov	sp, r7
 800cd58:	bdb0      	pop	{r4, r5, r7, pc}
 800cd5a:	bf00      	nop
 800cd5c:	0800cc5f 	.word	0x0800cc5f

0800cd60 <fb_jy_parser>:
#include "fb_jy.h"
#include "adaptor.h"


//cyclic event fb
uint8_t fb_jy_parser(uint8_t* p){
 800cd60:	b590      	push	{r4, r7, lr}
 800cd62:	b08f      	sub	sp, #60	; 0x3c
 800cd64:	af02      	add	r7, sp, #8
 800cd66:	62f8      	str	r0, [r7, #44]	; 0x2c
	create_fb_jy(p[0],p[1], p[2],p[3]);
 800cd68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd6a:	7819      	ldrb	r1, [r3, #0]
 800cd6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd6e:	3301      	adds	r3, #1
 800cd70:	781a      	ldrb	r2, [r3, #0]
 800cd72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd74:	3302      	adds	r3, #2
 800cd76:	781c      	ldrb	r4, [r3, #0]
 800cd78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd7a:	3303      	adds	r3, #3
 800cd7c:	781b      	ldrb	r3, [r3, #0]
 800cd7e:	4638      	mov	r0, r7
 800cd80:	9300      	str	r3, [sp, #0]
 800cd82:	4623      	mov	r3, r4
 800cd84:	f000 f890 	bl	800cea8 <create_fb_jy>
	return 0;
 800cd88:	2300      	movs	r3, #0
}
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	3734      	adds	r7, #52	; 0x34
 800cd8e:	46bd      	mov	sp, r7
 800cd90:	bd90      	pop	{r4, r7, pc}

0800cd92 <fb_jy>:

void fb_jy(uint8_t p){
 800cd92:	b580      	push	{r7, lr}
 800cd94:	b08c      	sub	sp, #48	; 0x30
 800cd96:	af00      	add	r7, sp, #0
 800cd98:	4603      	mov	r3, r0
 800cd9a:	71fb      	strb	r3, [r7, #7]
	s_Param* pAddrTable = get_paramAddrTable();
 800cd9c:	f7fe fda0 	bl	800b8e0 <get_paramAddrTable>
 800cda0:	62f8      	str	r0, [r7, #44]	; 0x2c
	int32_t* ch_x = &pAddrTable->value[pAddrTable->addr[p]];
 800cda2:	79fb      	ldrb	r3, [r7, #7]
 800cda4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cda6:	009b      	lsls	r3, r3, #2
 800cda8:	4413      	add	r3, r2
 800cdaa:	685b      	ldr	r3, [r3, #4]
 800cdac:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800cdb0:	009b      	lsls	r3, r3, #2
 800cdb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cdb4:	4413      	add	r3, r2
 800cdb6:	3304      	adds	r3, #4
 800cdb8:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t* ch_y = &pAddrTable->value[pAddrTable->addr[p+1]];
 800cdba:	79fb      	ldrb	r3, [r7, #7]
 800cdbc:	3301      	adds	r3, #1
 800cdbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cdc0:	009b      	lsls	r3, r3, #2
 800cdc2:	4413      	add	r3, r2
 800cdc4:	685b      	ldr	r3, [r3, #4]
 800cdc6:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800cdca:	009b      	lsls	r3, r3, #2
 800cdcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cdce:	4413      	add	r3, r2
 800cdd0:	3304      	adds	r3, #4
 800cdd2:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t* ch_btn = &pAddrTable->value[pAddrTable->addr[p+2]];
 800cdd4:	79fb      	ldrb	r3, [r7, #7]
 800cdd6:	3302      	adds	r3, #2
 800cdd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cdda:	009b      	lsls	r3, r3, #2
 800cddc:	4413      	add	r3, r2
 800cdde:	685b      	ldr	r3, [r3, #4]
 800cde0:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800cde4:	009b      	lsls	r3, r3, #2
 800cde6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cde8:	4413      	add	r3, r2
 800cdea:	3304      	adds	r3, #4
 800cdec:	623b      	str	r3, [r7, #32]
	int32_t* mode = &pAddrTable->value[pAddrTable->addr[p+3]];
 800cdee:	79fb      	ldrb	r3, [r7, #7]
 800cdf0:	3303      	adds	r3, #3
 800cdf2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cdf4:	009b      	lsls	r3, r3, #2
 800cdf6:	4413      	add	r3, r2
 800cdf8:	685b      	ldr	r3, [r3, #4]
 800cdfa:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800cdfe:	009b      	lsls	r3, r3, #2
 800ce00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ce02:	4413      	add	r3, r2
 800ce04:	3304      	adds	r3, #4
 800ce06:	61fb      	str	r3, [r7, #28]
	int32_t* x = &pAddrTable->value[pAddrTable->addr[p+4]];
 800ce08:	79fb      	ldrb	r3, [r7, #7]
 800ce0a:	3304      	adds	r3, #4
 800ce0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ce0e:	009b      	lsls	r3, r3, #2
 800ce10:	4413      	add	r3, r2
 800ce12:	685b      	ldr	r3, [r3, #4]
 800ce14:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800ce18:	009b      	lsls	r3, r3, #2
 800ce1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ce1c:	4413      	add	r3, r2
 800ce1e:	3304      	adds	r3, #4
 800ce20:	61bb      	str	r3, [r7, #24]
	int32_t* y = &pAddrTable->value[pAddrTable->addr[p+5]];
 800ce22:	79fb      	ldrb	r3, [r7, #7]
 800ce24:	3305      	adds	r3, #5
 800ce26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ce28:	009b      	lsls	r3, r3, #2
 800ce2a:	4413      	add	r3, r2
 800ce2c:	685b      	ldr	r3, [r3, #4]
 800ce2e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800ce32:	009b      	lsls	r3, r3, #2
 800ce34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ce36:	4413      	add	r3, r2
 800ce38:	3304      	adds	r3, #4
 800ce3a:	617b      	str	r3, [r7, #20]
	int32_t* btn = &pAddrTable->value[pAddrTable->addr[p+6]];
 800ce3c:	79fb      	ldrb	r3, [r7, #7]
 800ce3e:	3306      	adds	r3, #6
 800ce40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ce42:	009b      	lsls	r3, r3, #2
 800ce44:	4413      	add	r3, r2
 800ce46:	685b      	ldr	r3, [r3, #4]
 800ce48:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800ce4c:	009b      	lsls	r3, r3, #2
 800ce4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ce50:	4413      	add	r3, r2
 800ce52:	3304      	adds	r3, #4
 800ce54:	613b      	str	r3, [r7, #16]
	int32_t* stat = &pAddrTable->value[pAddrTable->addr[p+7]];
 800ce56:	79fb      	ldrb	r3, [r7, #7]
 800ce58:	3307      	adds	r3, #7
 800ce5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ce5c:	009b      	lsls	r3, r3, #2
 800ce5e:	4413      	add	r3, r2
 800ce60:	685b      	ldr	r3, [r3, #4]
 800ce62:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800ce66:	009b      	lsls	r3, r3, #2
 800ce68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ce6a:	4413      	add	r3, r2
 800ce6c:	3304      	adds	r3, #4
 800ce6e:	60fb      	str	r3, [r7, #12]

	*x = hal_read_analog_ch(*ch_x);
 800ce70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	4618      	mov	r0, r3
 800ce76:	f7f3 fc43 	bl	8000700 <hal_read_analog_ch>
 800ce7a:	4602      	mov	r2, r0
 800ce7c:	69bb      	ldr	r3, [r7, #24]
 800ce7e:	601a      	str	r2, [r3, #0]
	*y = hal_read_analog_ch(*ch_y);
 800ce80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	4618      	mov	r0, r3
 800ce86:	f7f3 fc3b 	bl	8000700 <hal_read_analog_ch>
 800ce8a:	4602      	mov	r2, r0
 800ce8c:	697b      	ldr	r3, [r7, #20]
 800ce8e:	601a      	str	r2, [r3, #0]
	*btn = hal_gpio_read_pin(*ch_btn);
 800ce90:	6a3b      	ldr	r3, [r7, #32]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	4618      	mov	r0, r3
 800ce96:	f7f3 fc19 	bl	80006cc <hal_gpio_read_pin>
 800ce9a:	4602      	mov	r2, r0
 800ce9c:	693b      	ldr	r3, [r7, #16]
 800ce9e:	601a      	str	r2, [r3, #0]
}
 800cea0:	bf00      	nop
 800cea2:	3730      	adds	r7, #48	; 0x30
 800cea4:	46bd      	mov	sp, r7
 800cea6:	bd80      	pop	{r7, pc}

0800cea8 <create_fb_jy>:

type_fb_jy create_fb_jy(uint8_t ch_x,
								uint8_t ch_y,
									uint8_t ch_btn,
											uint8_t mode){
 800cea8:	b5b0      	push	{r4, r5, r7, lr}
 800ceaa:	b08c      	sub	sp, #48	; 0x30
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	6078      	str	r0, [r7, #4]
 800ceb0:	4608      	mov	r0, r1
 800ceb2:	4611      	mov	r1, r2
 800ceb4:	461a      	mov	r2, r3
 800ceb6:	4603      	mov	r3, r0
 800ceb8:	70fb      	strb	r3, [r7, #3]
 800ceba:	460b      	mov	r3, r1
 800cebc:	70bb      	strb	r3, [r7, #2]
 800cebe:	4613      	mov	r3, r2
 800cec0:	707b      	strb	r3, [r7, #1]
	type_fb_jy fb;

	s_Param* pAddrTable = get_paramAddrTable();
 800cec2:	f7fe fd0d 	bl	800b8e0 <get_paramAddrTable>
 800cec6:	62f8      	str	r0, [r7, #44]	; 0x2c

	fb.startParamIndex = pAddrTable->currentIndex;
 800cec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceca:	781b      	ldrb	r3, [r3, #0]
 800cecc:	727b      	strb	r3, [r7, #9]

	//input ports
	fb.fp.ch_x = createParameter(ch_x);
 800cece:	78fb      	ldrb	r3, [r7, #3]
 800ced0:	4618      	mov	r0, r3
 800ced2:	f7fe fd33 	bl	800b93c <createParameter>
 800ced6:	4603      	mov	r3, r0
 800ced8:	60fb      	str	r3, [r7, #12]
	fb.fp.ch_y = createParameter(ch_y);
 800ceda:	78bb      	ldrb	r3, [r7, #2]
 800cedc:	4618      	mov	r0, r3
 800cede:	f7fe fd2d 	bl	800b93c <createParameter>
 800cee2:	4603      	mov	r3, r0
 800cee4:	613b      	str	r3, [r7, #16]
	fb.fp.ch_btn = createParameter(ch_btn);
 800cee6:	787b      	ldrb	r3, [r7, #1]
 800cee8:	4618      	mov	r0, r3
 800ceea:	f7fe fd27 	bl	800b93c <createParameter>
 800ceee:	4603      	mov	r3, r0
 800cef0:	617b      	str	r3, [r7, #20]
	fb.fp.mode = createParameter(mode);
 800cef2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800cef6:	4618      	mov	r0, r3
 800cef8:	f7fe fd20 	bl	800b93c <createParameter>
 800cefc:	4603      	mov	r3, r0
 800cefe:	61bb      	str	r3, [r7, #24]

	//output ports
	fb.fp.x = createParameter(0);
 800cf00:	2000      	movs	r0, #0
 800cf02:	f7fe fd1b 	bl	800b93c <createParameter>
 800cf06:	4603      	mov	r3, r0
 800cf08:	61fb      	str	r3, [r7, #28]
	fb.fp.y = createParameter(0);
 800cf0a:	2000      	movs	r0, #0
 800cf0c:	f7fe fd16 	bl	800b93c <createParameter>
 800cf10:	4603      	mov	r3, r0
 800cf12:	623b      	str	r3, [r7, #32]
	fb.fp.btn = createParameter(0);
 800cf14:	2000      	movs	r0, #0
 800cf16:	f7fe fd11 	bl	800b93c <createParameter>
 800cf1a:	4603      	mov	r3, r0
 800cf1c:	627b      	str	r3, [r7, #36]	; 0x24
	fb.fp.stat = createParameter(0);
 800cf1e:	2000      	movs	r0, #0
 800cf20:	f7fe fd0c 	bl	800b93c <createParameter>
 800cf24:	4603      	mov	r3, r0
 800cf26:	62bb      	str	r3, [r7, #40]	; 0x28

	//internal parameters

	fb.fb_index = writeToFBTable(fb_jy, fb.startParamIndex);
 800cf28:	7a7b      	ldrb	r3, [r7, #9]
 800cf2a:	4619      	mov	r1, r3
 800cf2c:	4809      	ldr	r0, [pc, #36]	; (800cf54 <create_fb_jy+0xac>)
 800cf2e:	f7fe fce1 	bl	800b8f4 <writeToFBTable>
 800cf32:	4603      	mov	r3, r0
 800cf34:	723b      	strb	r3, [r7, #8]

	return fb;
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	461d      	mov	r5, r3
 800cf3a:	f107 0408 	add.w	r4, r7, #8
 800cf3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cf40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cf42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cf44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cf46:	6823      	ldr	r3, [r4, #0]
 800cf48:	602b      	str	r3, [r5, #0]
}
 800cf4a:	6878      	ldr	r0, [r7, #4]
 800cf4c:	3730      	adds	r7, #48	; 0x30
 800cf4e:	46bd      	mov	sp, r7
 800cf50:	bdb0      	pop	{r4, r5, r7, pc}
 800cf52:	bf00      	nop
 800cf54:	0800cd93 	.word	0x0800cd93

0800cf58 <fb_output_pin_parser>:
#include "fb_outputpin.h"
#include "adaptor.h"


//output fb
uint8_t fb_output_pin_parser(uint8_t* p){
 800cf58:	b580      	push	{r7, lr}
 800cf5a:	b08a      	sub	sp, #40	; 0x28
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	61f8      	str	r0, [r7, #28]
	uint8_t ch = p[0];
 800cf60:	69fb      	ldr	r3, [r7, #28]
 800cf62:	781b      	ldrb	r3, [r3, #0]
 800cf64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t val = p[1];
 800cf68:	69fb      	ldr	r3, [r7, #28]
 800cf6a:	785b      	ldrb	r3, [r3, #1]
 800cf6c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t mode = p[2];
 800cf70:	69fb      	ldr	r3, [r7, #28]
 800cf72:	789b      	ldrb	r3, [r3, #2]
 800cf74:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	create_fb_outputpin(ch, val, mode);
 800cf78:	4638      	mov	r0, r7
 800cf7a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800cf7e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800cf82:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 800cf86:	f000 f86d 	bl	800d064 <create_fb_outputpin>
	return 0;
 800cf8a:	2300      	movs	r3, #0
}
 800cf8c:	4618      	mov	r0, r3
 800cf8e:	3728      	adds	r7, #40	; 0x28
 800cf90:	46bd      	mov	sp, r7
 800cf92:	bd80      	pop	{r7, pc}

0800cf94 <fb_outputpin>:

void fb_outputpin(uint8_t p){
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b088      	sub	sp, #32
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	4603      	mov	r3, r0
 800cf9c:	71fb      	strb	r3, [r7, #7]
	s_Param* pAddrTable = get_paramAddrTable();
 800cf9e:	f7fe fc9f 	bl	800b8e0 <get_paramAddrTable>
 800cfa2:	61f8      	str	r0, [r7, #28]
	int32_t* ch = &pAddrTable->value[pAddrTable->addr[p]];
 800cfa4:	79fb      	ldrb	r3, [r7, #7]
 800cfa6:	69fa      	ldr	r2, [r7, #28]
 800cfa8:	009b      	lsls	r3, r3, #2
 800cfaa:	4413      	add	r3, r2
 800cfac:	685b      	ldr	r3, [r3, #4]
 800cfae:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800cfb2:	009b      	lsls	r3, r3, #2
 800cfb4:	69fa      	ldr	r2, [r7, #28]
 800cfb6:	4413      	add	r3, r2
 800cfb8:	3304      	adds	r3, #4
 800cfba:	61bb      	str	r3, [r7, #24]
	int32_t* val = &pAddrTable->value[pAddrTable->addr[p+1]];
 800cfbc:	79fb      	ldrb	r3, [r7, #7]
 800cfbe:	3301      	adds	r3, #1
 800cfc0:	69fa      	ldr	r2, [r7, #28]
 800cfc2:	009b      	lsls	r3, r3, #2
 800cfc4:	4413      	add	r3, r2
 800cfc6:	685b      	ldr	r3, [r3, #4]
 800cfc8:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800cfcc:	009b      	lsls	r3, r3, #2
 800cfce:	69fa      	ldr	r2, [r7, #28]
 800cfd0:	4413      	add	r3, r2
 800cfd2:	3304      	adds	r3, #4
 800cfd4:	617b      	str	r3, [r7, #20]
	int32_t* mode = &pAddrTable->value[pAddrTable->addr[p+2]];
 800cfd6:	79fb      	ldrb	r3, [r7, #7]
 800cfd8:	3302      	adds	r3, #2
 800cfda:	69fa      	ldr	r2, [r7, #28]
 800cfdc:	009b      	lsls	r3, r3, #2
 800cfde:	4413      	add	r3, r2
 800cfe0:	685b      	ldr	r3, [r3, #4]
 800cfe2:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800cfe6:	009b      	lsls	r3, r3, #2
 800cfe8:	69fa      	ldr	r2, [r7, #28]
 800cfea:	4413      	add	r3, r2
 800cfec:	3304      	adds	r3, #4
 800cfee:	613b      	str	r3, [r7, #16]
	int32_t* stat = &pAddrTable->value[pAddrTable->addr[p+3]];
 800cff0:	79fb      	ldrb	r3, [r7, #7]
 800cff2:	3303      	adds	r3, #3
 800cff4:	69fa      	ldr	r2, [r7, #28]
 800cff6:	009b      	lsls	r3, r3, #2
 800cff8:	4413      	add	r3, r2
 800cffa:	685b      	ldr	r3, [r3, #4]
 800cffc:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800d000:	009b      	lsls	r3, r3, #2
 800d002:	69fa      	ldr	r2, [r7, #28]
 800d004:	4413      	add	r3, r2
 800d006:	3304      	adds	r3, #4
 800d008:	60fb      	str	r3, [r7, #12]
	int32_t* last_val = &pAddrTable->value[pAddrTable->addr[p+4]];
 800d00a:	79fb      	ldrb	r3, [r7, #7]
 800d00c:	3304      	adds	r3, #4
 800d00e:	69fa      	ldr	r2, [r7, #28]
 800d010:	009b      	lsls	r3, r3, #2
 800d012:	4413      	add	r3, r2
 800d014:	685b      	ldr	r3, [r3, #4]
 800d016:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800d01a:	009b      	lsls	r3, r3, #2
 800d01c:	69fa      	ldr	r2, [r7, #28]
 800d01e:	4413      	add	r3, r2
 800d020:	3304      	adds	r3, #4
 800d022:	60bb      	str	r3, [r7, #8]

	if ( *val != *last_val){
 800d024:	697b      	ldr	r3, [r7, #20]
 800d026:	681a      	ldr	r2, [r3, #0]
 800d028:	68bb      	ldr	r3, [r7, #8]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	429a      	cmp	r2, r3
 800d02e:	d015      	beq.n	800d05c <fb_outputpin+0xc8>
		*last_val = *val;
 800d030:	697b      	ldr	r3, [r7, #20]
 800d032:	681a      	ldr	r2, [r3, #0]
 800d034:	68bb      	ldr	r3, [r7, #8]
 800d036:	601a      	str	r2, [r3, #0]
		if(*val >1) *val = 1;
 800d038:	697b      	ldr	r3, [r7, #20]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	2b01      	cmp	r3, #1
 800d03e:	dd02      	ble.n	800d046 <fb_outputpin+0xb2>
 800d040:	697b      	ldr	r3, [r7, #20]
 800d042:	2201      	movs	r2, #1
 800d044:	601a      	str	r2, [r3, #0]

		hal_gpio_write_pin((uint16_t)*ch, (uint8_t)*val);
 800d046:	69bb      	ldr	r3, [r7, #24]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	b29b      	uxth	r3, r3
 800d04c:	461a      	mov	r2, r3
 800d04e:	697b      	ldr	r3, [r7, #20]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	b2db      	uxtb	r3, r3
 800d054:	4619      	mov	r1, r3
 800d056:	4610      	mov	r0, r2
 800d058:	f7f3 fb1a 	bl	8000690 <hal_gpio_write_pin>
	}
}
 800d05c:	bf00      	nop
 800d05e:	3720      	adds	r7, #32
 800d060:	46bd      	mov	sp, r7
 800d062:	bd80      	pop	{r7, pc}

0800d064 <create_fb_outputpin>:

type_fb_outputpin create_fb_outputpin(uint8_t ch, uint8_t val, uint8_t mode){
 800d064:	b5b0      	push	{r4, r5, r7, lr}
 800d066:	b08a      	sub	sp, #40	; 0x28
 800d068:	af00      	add	r7, sp, #0
 800d06a:	6078      	str	r0, [r7, #4]
 800d06c:	4608      	mov	r0, r1
 800d06e:	4611      	mov	r1, r2
 800d070:	461a      	mov	r2, r3
 800d072:	4603      	mov	r3, r0
 800d074:	70fb      	strb	r3, [r7, #3]
 800d076:	460b      	mov	r3, r1
 800d078:	70bb      	strb	r3, [r7, #2]
 800d07a:	4613      	mov	r3, r2
 800d07c:	707b      	strb	r3, [r7, #1]
	type_fb_outputpin fb;
	s_Param* pAddrTable = get_paramAddrTable();
 800d07e:	f7fe fc2f 	bl	800b8e0 <get_paramAddrTable>
 800d082:	6278      	str	r0, [r7, #36]	; 0x24

	fb.startParamIndex = pAddrTable->currentIndex;
 800d084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d086:	781b      	ldrb	r3, [r3, #0]
 800d088:	737b      	strb	r3, [r7, #13]

	//input ports
	fb.fp.ch = createParameter(ch); //output
 800d08a:	78fb      	ldrb	r3, [r7, #3]
 800d08c:	4618      	mov	r0, r3
 800d08e:	f7fe fc55 	bl	800b93c <createParameter>
 800d092:	4603      	mov	r3, r0
 800d094:	613b      	str	r3, [r7, #16]
	fb.fp.val = createParameter(val); //pin
 800d096:	78bb      	ldrb	r3, [r7, #2]
 800d098:	4618      	mov	r0, r3
 800d09a:	f7fe fc4f 	bl	800b93c <createParameter>
 800d09e:	4603      	mov	r3, r0
 800d0a0:	617b      	str	r3, [r7, #20]
	fb.fp.mode = createParameter(mode); //pin
 800d0a2:	787b      	ldrb	r3, [r7, #1]
 800d0a4:	4618      	mov	r0, r3
 800d0a6:	f7fe fc49 	bl	800b93c <createParameter>
 800d0aa:	4603      	mov	r3, r0
 800d0ac:	61bb      	str	r3, [r7, #24]

	//output ports
	fb.fp.stat = createParameter(0);
 800d0ae:	2000      	movs	r0, #0
 800d0b0:	f7fe fc44 	bl	800b93c <createParameter>
 800d0b4:	4603      	mov	r3, r0
 800d0b6:	61fb      	str	r3, [r7, #28]

	//internal values
	fb.fp.last_val = createParameter(-1);
 800d0b8:	f04f 30ff 	mov.w	r0, #4294967295
 800d0bc:	f7fe fc3e 	bl	800b93c <createParameter>
 800d0c0:	4603      	mov	r3, r0
 800d0c2:	623b      	str	r3, [r7, #32]



	fb.fb_index = writeToFBTable(fb_outputpin, fb.startParamIndex);
 800d0c4:	7b7b      	ldrb	r3, [r7, #13]
 800d0c6:	4619      	mov	r1, r3
 800d0c8:	4809      	ldr	r0, [pc, #36]	; (800d0f0 <create_fb_outputpin+0x8c>)
 800d0ca:	f7fe fc13 	bl	800b8f4 <writeToFBTable>
 800d0ce:	4603      	mov	r3, r0
 800d0d0:	733b      	strb	r3, [r7, #12]
	return fb;
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	461d      	mov	r5, r3
 800d0d6:	f107 040c 	add.w	r4, r7, #12
 800d0da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d0dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d0de:	e894 0003 	ldmia.w	r4, {r0, r1}
 800d0e2:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800d0e6:	6878      	ldr	r0, [r7, #4]
 800d0e8:	3728      	adds	r7, #40	; 0x28
 800d0ea:	46bd      	mov	sp, r7
 800d0ec:	bdb0      	pop	{r4, r5, r7, pc}
 800d0ee:	bf00      	nop
 800d0f0:	0800cf95 	.word	0x0800cf95

0800d0f4 <fb_text_parser>:
#include "utility.h"
#include "text_table.h"
#include "fb_text.h"

//output fb
uint8_t fb_text_parser(uint8_t* p){
 800d0f4:	b580      	push	{r7, lr}
 800d0f6:	b088      	sub	sp, #32
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	6178      	str	r0, [r7, #20]
	uint16_t index = 0;
 800d0fc:	2300      	movs	r3, #0
 800d0fe:	83bb      	strh	r3, [r7, #28]
	uint8_t len = get_uint8(p, &index);
 800d100:	f107 031c 	add.w	r3, r7, #28
 800d104:	4619      	mov	r1, r3
 800d106:	6978      	ldr	r0, [r7, #20]
 800d108:	f000 fa60 	bl	800d5cc <get_uint8>
 800d10c:	4603      	mov	r3, r0
 800d10e:	77fb      	strb	r3, [r7, #31]

	create_fb_text(len, &p[index]);
 800d110:	8bbb      	ldrh	r3, [r7, #28]
 800d112:	461a      	mov	r2, r3
 800d114:	697b      	ldr	r3, [r7, #20]
 800d116:	441a      	add	r2, r3
 800d118:	463b      	mov	r3, r7
 800d11a:	7ff9      	ldrb	r1, [r7, #31]
 800d11c:	4618      	mov	r0, r3
 800d11e:	f000 f811 	bl	800d144 <create_fb_text>
	return 0;
 800d122:	2300      	movs	r3, #0
}
 800d124:	4618      	mov	r0, r3
 800d126:	3720      	adds	r7, #32
 800d128:	46bd      	mov	sp, r7
 800d12a:	bd80      	pop	{r7, pc}

0800d12c <fb_text>:

void fb_text(uint8_t p){
 800d12c:	b480      	push	{r7}
 800d12e:	b083      	sub	sp, #12
 800d130:	af00      	add	r7, sp, #0
 800d132:	4603      	mov	r3, r0
 800d134:	71fb      	strb	r3, [r7, #7]
}
 800d136:	bf00      	nop
 800d138:	370c      	adds	r7, #12
 800d13a:	46bd      	mov	sp, r7
 800d13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d140:	4770      	bx	lr
	...

0800d144 <create_fb_text>:

type_fb_text create_fb_text(uint8_t len, char* str){
 800d144:	b590      	push	{r4, r7, lr}
 800d146:	b08b      	sub	sp, #44	; 0x2c
 800d148:	af00      	add	r7, sp, #0
 800d14a:	60f8      	str	r0, [r7, #12]
 800d14c:	460b      	mov	r3, r1
 800d14e:	607a      	str	r2, [r7, #4]
 800d150:	72fb      	strb	r3, [r7, #11]
	type_fb_text fb;
	s_Param* pAddrTable = get_paramAddrTable();
 800d152:	f7fe fbc5 	bl	800b8e0 <get_paramAddrTable>
 800d156:	6278      	str	r0, [r7, #36]	; 0x24
	uint8_t text_table_index;

	fb.startParamIndex = pAddrTable->currentIndex;
 800d158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d15a:	781b      	ldrb	r3, [r3, #0]
 800d15c:	757b      	strb	r3, [r7, #21]

	//not creating a parameter for str, instead of this create an entry to the global text table
	text_table_index = create_text_table_entry(len, str);
 800d15e:	7afb      	ldrb	r3, [r7, #11]
 800d160:	6879      	ldr	r1, [r7, #4]
 800d162:	4618      	mov	r0, r3
 800d164:	f7fe fda0 	bl	800bca8 <create_text_table_entry>
 800d168:	4603      	mov	r3, r0
 800d16a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	fb.fp.stat = createParameter(0);
 800d16e:	2000      	movs	r0, #0
 800d170:	f7fe fbe4 	bl	800b93c <createParameter>
 800d174:	4603      	mov	r3, r0
 800d176:	61bb      	str	r3, [r7, #24]
	fb.fp.val = createParameter(text_table_index);
 800d178:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d17c:	4618      	mov	r0, r3
 800d17e:	f7fe fbdd 	bl	800b93c <createParameter>
 800d182:	4603      	mov	r3, r0
 800d184:	61fb      	str	r3, [r7, #28]

	fb.fb_index = writeToFBTable(fb_text, fb.startParamIndex);
 800d186:	7d7b      	ldrb	r3, [r7, #21]
 800d188:	4619      	mov	r1, r3
 800d18a:	4808      	ldr	r0, [pc, #32]	; (800d1ac <create_fb_text+0x68>)
 800d18c:	f7fe fbb2 	bl	800b8f4 <writeToFBTable>
 800d190:	4603      	mov	r3, r0
 800d192:	753b      	strb	r3, [r7, #20]
	return fb;
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	461c      	mov	r4, r3
 800d198:	f107 0314 	add.w	r3, r7, #20
 800d19c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d1a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800d1a4:	68f8      	ldr	r0, [r7, #12]
 800d1a6:	372c      	adds	r7, #44	; 0x2c
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	bd90      	pop	{r4, r7, pc}
 800d1ac:	0800d12d 	.word	0x0800d12d

0800d1b0 <parser_create_connection>:
		fb_encoder_parser,
		fb_gui_display_parser,
		fb_text_parser
};

uint8_t parser_create_connection(uint8_t* p){
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b082      	sub	sp, #8
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	6078      	str	r0, [r7, #4]
	make_connection(p[0], p[1]); //dest,src
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	781b      	ldrb	r3, [r3, #0]
 800d1bc:	461a      	mov	r2, r3
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	3301      	adds	r3, #1
 800d1c2:	781b      	ldrb	r3, [r3, #0]
 800d1c4:	4619      	mov	r1, r3
 800d1c6:	4610      	mov	r0, r2
 800d1c8:	f7fe fbe0 	bl	800b98c <make_connection>
	return 2;
 800d1cc:	2302      	movs	r3, #2
}
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	3708      	adds	r7, #8
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	bd80      	pop	{r7, pc}
	...

0800d1d8 <Parser_Modbus_GetState>:

uint8_t Parser_Modbus_GetState(){
 800d1d8:	b480      	push	{r7}
 800d1da:	af00      	add	r7, sp, #0
	return parser_modbus_state;
 800d1dc:	4b03      	ldr	r3, [pc, #12]	; (800d1ec <Parser_Modbus_GetState+0x14>)
 800d1de:	781b      	ldrb	r3, [r3, #0]
}
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	46bd      	mov	sp, r7
 800d1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e8:	4770      	bx	lr
 800d1ea:	bf00      	nop
 800d1ec:	200015ac 	.word	0x200015ac

0800d1f0 <Parser_Modbus>:

//This parser will parse the deployment data coming from modbus
uint8_t Parser_Modbus(uint8_t* buf, uint8_t len){
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b084      	sub	sp, #16
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
 800d1f8:	460b      	mov	r3, r1
 800d1fa:	70fb      	strb	r3, [r7, #3]
	uint16_t parser_id;
	uint16_t cmd = modbus_byte2word(&buf[0]) ; //function
 800d1fc:	6878      	ldr	r0, [r7, #4]
 800d1fe:	f7fe fe4d 	bl	800be9c <modbus_byte2word>
 800d202:	4603      	mov	r3, r0
 800d204:	81fb      	strh	r3, [r7, #14]

	switch (cmd)
 800d206:	89fb      	ldrh	r3, [r7, #14]
 800d208:	3b65      	subs	r3, #101	; 0x65
 800d20a:	2b03      	cmp	r3, #3
 800d20c:	d82b      	bhi.n	800d266 <Parser_Modbus+0x76>
 800d20e:	a201      	add	r2, pc, #4	; (adr r2, 800d214 <Parser_Modbus+0x24>)
 800d210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d214:	0800d225 	.word	0x0800d225
 800d218:	0800d24b 	.word	0x0800d24b
 800d21c:	0800d257 	.word	0x0800d257
 800d220:	0800d25f 	.word	0x0800d25f
	{
	case CMD_CREATE_FB: //FBTYPE-PARAMS
		parser_id = modbus_byte2word(&buf[2]) ;
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	3302      	adds	r3, #2
 800d228:	4618      	mov	r0, r3
 800d22a:	f7fe fe37 	bl	800be9c <modbus_byte2word>
 800d22e:	4603      	mov	r3, r0
 800d230:	81bb      	strh	r3, [r7, #12]
		if(parser_id<FB_PARSERS_SIZE){
 800d232:	89bb      	ldrh	r3, [r7, #12]
 800d234:	2b13      	cmp	r3, #19
 800d236:	d818      	bhi.n	800d26a <Parser_Modbus+0x7a>
			fb_parsers[parser_id](&buf[4]);
 800d238:	89bb      	ldrh	r3, [r7, #12]
 800d23a:	4a11      	ldr	r2, [pc, #68]	; (800d280 <Parser_Modbus+0x90>)
 800d23c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d240:	687a      	ldr	r2, [r7, #4]
 800d242:	3204      	adds	r2, #4
 800d244:	4610      	mov	r0, r2
 800d246:	4798      	blx	r3
		}
		break;
 800d248:	e00f      	b.n	800d26a <Parser_Modbus+0x7a>
	case CMD_CREATE_CONN: //DEST-SRC
		parser_create_connection(&buf[2]);
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	3302      	adds	r3, #2
 800d24e:	4618      	mov	r0, r3
 800d250:	f7ff ffae 	bl	800d1b0 <parser_create_connection>
		break;
 800d254:	e00a      	b.n	800d26c <Parser_Modbus+0x7c>
	case CMD_RUN:
		//set state value to inform mccore state machine
		parser_modbus_state = CMD_RUN;
 800d256:	4b0b      	ldr	r3, [pc, #44]	; (800d284 <Parser_Modbus+0x94>)
 800d258:	2267      	movs	r2, #103	; 0x67
 800d25a:	701a      	strb	r2, [r3, #0]
		break;
 800d25c:	e006      	b.n	800d26c <Parser_Modbus+0x7c>
	case CMD_KILL:
		//set state value to inform mccore state machine
		parser_modbus_state = CMD_KILL;
 800d25e:	4b09      	ldr	r3, [pc, #36]	; (800d284 <Parser_Modbus+0x94>)
 800d260:	2268      	movs	r2, #104	; 0x68
 800d262:	701a      	strb	r2, [r3, #0]
		break;
 800d264:	e002      	b.n	800d26c <Parser_Modbus+0x7c>

	default:
		return 0;
 800d266:	2300      	movs	r3, #0
 800d268:	e006      	b.n	800d278 <Parser_Modbus+0x88>
		break;
 800d26a:	bf00      	nop
	}

	application_record(cmd, buf, len);
 800d26c:	78fa      	ldrb	r2, [r7, #3]
 800d26e:	89fb      	ldrh	r3, [r7, #14]
 800d270:	6879      	ldr	r1, [r7, #4]
 800d272:	4618      	mov	r0, r3
 800d274:	f000 f8da 	bl	800d42c <application_record>
}
 800d278:	4618      	mov	r0, r3
 800d27a:	3710      	adds	r7, #16
 800d27c:	46bd      	mov	sp, r7
 800d27e:	bd80      	pop	{r7, pc}
 800d280:	2000005c 	.word	0x2000005c
 800d284:	200015ac 	.word	0x200015ac

0800d288 <init_application>:
extern const uint8_t (*fb_parsers[FB_PARSERS_SIZE])(uint8_t* p);

/*
 * Allocates memory for application record and load processes
 */
static uint8_t init_application(){
 800d288:	b580      	push	{r7, lr}
 800d28a:	af00      	add	r7, sp, #0
	if(runtime_malloc_memory(APPLICATION_FILE_MEMORY_SIZE, MEM_TYPE_CYCLIC_FIFO, &application_file) == 1){
 800d28c:	4a06      	ldr	r2, [pc, #24]	; (800d2a8 <init_application+0x20>)
 800d28e:	2100      	movs	r1, #0
 800d290:	f44f 7000 	mov.w	r0, #512	; 0x200
 800d294:	f000 fb52 	bl	800d93c <runtime_malloc_memory>
 800d298:	4603      	mov	r3, r0
 800d29a:	2b01      	cmp	r3, #1
 800d29c:	d101      	bne.n	800d2a2 <init_application+0x1a>
		return 0; //success
 800d29e:	2300      	movs	r3, #0
 800d2a0:	e000      	b.n	800d2a4 <init_application+0x1c>
	}
	return 1; //error, cannot malloc memory
 800d2a2:	2301      	movs	r3, #1
}
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	bd80      	pop	{r7, pc}
 800d2a8:	200015ae 	.word	0x200015ae

0800d2ac <application_record2flash>:

static void application_record2flash(){
 800d2ac:	b580      	push	{r7, lr}
 800d2ae:	b084      	sub	sp, #16
 800d2b0:	af00      	add	r7, sp, #0
	memory_file_t* file = get_file_pointer(application_file);
 800d2b2:	4b0c      	ldr	r3, [pc, #48]	; (800d2e4 <application_record2flash+0x38>)
 800d2b4:	881b      	ldrh	r3, [r3, #0]
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	f000 fbb4 	bl	800da24 <get_file_pointer>
 800d2bc:	4603      	mov	r3, r0
 800d2be:	60fb      	str	r3, [r7, #12]
	memory_buf_t* buf = (file->mbuf);
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	68db      	ldr	r3, [r3, #12]
 800d2c4:	60bb      	str	r3, [r7, #8]
	uint32_t len = sizeof(MBUF_DATA_T)*buf->head;
 800d2c6:	68bb      	ldr	r3, [r7, #8]
 800d2c8:	889b      	ldrh	r3, [r3, #4]
 800d2ca:	607b      	str	r3, [r7, #4]

	write_flash_data((uint8_t*)buf->buffer, len , APPLICATION_MEMORY_ID);
 800d2cc:	68bb      	ldr	r3, [r7, #8]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	2200      	movs	r2, #0
 800d2d2:	6879      	ldr	r1, [r7, #4]
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	f000 fa71 	bl	800d7bc <write_flash_data>
}
 800d2da:	bf00      	nop
 800d2dc:	3710      	adds	r7, #16
 800d2de:	46bd      	mov	sp, r7
 800d2e0:	bd80      	pop	{r7, pc}
 800d2e2:	bf00      	nop
 800d2e4:	200015ae 	.word	0x200015ae

0800d2e8 <save2ram_application_data>:

static uint8_t save2ram_application_data(uint8_t* buf, uint32_t len){
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	b082      	sub	sp, #8
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	6078      	str	r0, [r7, #4]
 800d2f0:	6039      	str	r1, [r7, #0]
	writesingle_to_file(application_file, len);
 800d2f2:	4b0a      	ldr	r3, [pc, #40]	; (800d31c <save2ram_application_data+0x34>)
 800d2f4:	881b      	ldrh	r3, [r3, #0]
 800d2f6:	683a      	ldr	r2, [r7, #0]
 800d2f8:	b2d2      	uxtb	r2, r2
 800d2fa:	4611      	mov	r1, r2
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	f000 fb73 	bl	800d9e8 <writesingle_to_file>
	writebuf_to_file(application_file, buf, len);
 800d302:	4b06      	ldr	r3, [pc, #24]	; (800d31c <save2ram_application_data+0x34>)
 800d304:	881b      	ldrh	r3, [r3, #0]
 800d306:	683a      	ldr	r2, [r7, #0]
 800d308:	6879      	ldr	r1, [r7, #4]
 800d30a:	4618      	mov	r0, r3
 800d30c:	f000 fb42 	bl	800d994 <writebuf_to_file>
}
 800d310:	bf00      	nop
 800d312:	4618      	mov	r0, r3
 800d314:	3708      	adds	r7, #8
 800d316:	46bd      	mov	sp, r7
 800d318:	bd80      	pop	{r7, pc}
 800d31a:	bf00      	nop
 800d31c:	200015ae 	.word	0x200015ae

0800d320 <application_load_fromflash>:

static uint8_t application_load_fromflash(uint8_t* buf, uint32_t len){
 800d320:	b580      	push	{r7, lr}
 800d322:	b086      	sub	sp, #24
 800d324:	af00      	add	r7, sp, #0
 800d326:	6078      	str	r0, [r7, #4]
 800d328:	6039      	str	r1, [r7, #0]
	uint8_t ret = RET_APP_ERROR_ABNORMAL_DATA, app_load_finish = 0;
 800d32a:	2302      	movs	r3, #2
 800d32c:	75fb      	strb	r3, [r7, #23]
 800d32e:	2300      	movs	r3, #0
 800d330:	75bb      	strb	r3, [r7, #22]
	uint32_t index = 0;
 800d332:	2300      	movs	r3, #0
 800d334:	60fb      	str	r3, [r7, #12]
	uint16_t parser_id;
	uint8_t cmd, cmdbuflen;
	uint16_t next_cmd_index = 0;
 800d336:	2300      	movs	r3, #0
 800d338:	82bb      	strh	r3, [r7, #20]

	while(app_load_finish == 0){
 800d33a:	e057      	b.n	800d3ec <application_load_fromflash+0xcc>
		index = next_cmd_index;
 800d33c:	8abb      	ldrh	r3, [r7, #20]
 800d33e:	60fb      	str	r3, [r7, #12]
		if(index > len) {
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	683a      	ldr	r2, [r7, #0]
 800d344:	429a      	cmp	r2, r3
 800d346:	d203      	bcs.n	800d350 <application_load_fromflash+0x30>
			app_load_finish = 1;
 800d348:	2301      	movs	r3, #1
 800d34a:	75bb      	strb	r3, [r7, #22]
			ret = RET_APP_ERROR_OVERFLOW; //overflow error
 800d34c:	2301      	movs	r3, #1
 800d34e:	75fb      	strb	r3, [r7, #23]
		}
		cmdbuflen = get_uint8(buf, &index);
 800d350:	f107 030c 	add.w	r3, r7, #12
 800d354:	4619      	mov	r1, r3
 800d356:	6878      	ldr	r0, [r7, #4]
 800d358:	f000 f938 	bl	800d5cc <get_uint8>
 800d35c:	4603      	mov	r3, r0
 800d35e:	74fb      	strb	r3, [r7, #19]
		next_cmd_index = index + cmdbuflen;
 800d360:	7cfb      	ldrb	r3, [r7, #19]
 800d362:	b29a      	uxth	r2, r3
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	b29b      	uxth	r3, r3
 800d368:	4413      	add	r3, r2
 800d36a:	82bb      	strh	r3, [r7, #20]

		cmd = get_uint16(buf, &index);
 800d36c:	f107 030c 	add.w	r3, r7, #12
 800d370:	4619      	mov	r1, r3
 800d372:	6878      	ldr	r0, [r7, #4]
 800d374:	f000 f943 	bl	800d5fe <get_uint16>
 800d378:	4603      	mov	r3, r0
 800d37a:	74bb      	strb	r3, [r7, #18]
		switch (cmd)
 800d37c:	7cbb      	ldrb	r3, [r7, #18]
 800d37e:	3b65      	subs	r3, #101	; 0x65
 800d380:	2b03      	cmp	r3, #3
 800d382:	d82f      	bhi.n	800d3e4 <application_load_fromflash+0xc4>
 800d384:	a201      	add	r2, pc, #4	; (adr r2, 800d38c <application_load_fromflash+0x6c>)
 800d386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d38a:	bf00      	nop
 800d38c:	0800d39d 	.word	0x0800d39d
 800d390:	0800d3c7 	.word	0x0800d3c7
 800d394:	0800d3d5 	.word	0x0800d3d5
 800d398:	0800d3df 	.word	0x0800d3df
		{
		case CMD_CREATE_FB: //FBTYPE-PARAMS
			parser_id = get_uint16(buf, &index) ;
 800d39c:	f107 030c 	add.w	r3, r7, #12
 800d3a0:	4619      	mov	r1, r3
 800d3a2:	6878      	ldr	r0, [r7, #4]
 800d3a4:	f000 f92b 	bl	800d5fe <get_uint16>
 800d3a8:	4603      	mov	r3, r0
 800d3aa:	823b      	strh	r3, [r7, #16]
			if(parser_id<FB_PARSERS_SIZE){
 800d3ac:	8a3b      	ldrh	r3, [r7, #16]
 800d3ae:	2b13      	cmp	r3, #19
 800d3b0:	d81c      	bhi.n	800d3ec <application_load_fromflash+0xcc>
				fb_parsers[parser_id](&buf[index]);
 800d3b2:	8a3b      	ldrh	r3, [r7, #16]
 800d3b4:	4a11      	ldr	r2, [pc, #68]	; (800d3fc <application_load_fromflash+0xdc>)
 800d3b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d3ba:	68fa      	ldr	r2, [r7, #12]
 800d3bc:	6879      	ldr	r1, [r7, #4]
 800d3be:	440a      	add	r2, r1
 800d3c0:	4610      	mov	r0, r2
 800d3c2:	4798      	blx	r3
			}
			break;
 800d3c4:	e012      	b.n	800d3ec <application_load_fromflash+0xcc>
		case CMD_CREATE_CONN: //DEST-SRC
			parser_create_connection(&buf[index]);
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	687a      	ldr	r2, [r7, #4]
 800d3ca:	4413      	add	r3, r2
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	f7ff feef 	bl	800d1b0 <parser_create_connection>
			break;
 800d3d2:	e00b      	b.n	800d3ec <application_load_fromflash+0xcc>
		case CMD_RUN:
			//set state value to inform mccore state machine
			app_load_finish = 1;
 800d3d4:	2301      	movs	r3, #1
 800d3d6:	75bb      	strb	r3, [r7, #22]
			ret = 0; //load succeed
 800d3d8:	2300      	movs	r3, #0
 800d3da:	75fb      	strb	r3, [r7, #23]
			break;
 800d3dc:	e006      	b.n	800d3ec <application_load_fromflash+0xcc>
		case CMD_KILL:
			initiate_mccore();
 800d3de:	f7fe faed 	bl	800b9bc <initiate_mccore>
			break;
 800d3e2:	e003      	b.n	800d3ec <application_load_fromflash+0xcc>

		default:
			ret = RET_APP_ERROR_ABNORMAL_DATA;
 800d3e4:	2302      	movs	r3, #2
 800d3e6:	75fb      	strb	r3, [r7, #23]
			app_load_finish = 1;
 800d3e8:	2301      	movs	r3, #1
 800d3ea:	75bb      	strb	r3, [r7, #22]
	while(app_load_finish == 0){
 800d3ec:	7dbb      	ldrb	r3, [r7, #22]
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d0a4      	beq.n	800d33c <application_load_fromflash+0x1c>
		}
	}

	return ret;
 800d3f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	3718      	adds	r7, #24
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	bd80      	pop	{r7, pc}
 800d3fc:	2000005c 	.word	0x2000005c

0800d400 <check_flash_memory>:

static uint8_t check_flash_memory(){
 800d400:	b580      	push	{r7, lr}
 800d402:	b082      	sub	sp, #8
 800d404:	af00      	add	r7, sp, #0
	uint32_t mem_start_address, mem_size;

	//get memory properties
	get_flash_memory_info(&mem_start_address, &mem_size, APPLICATION_MEMORY_ID);
 800d406:	4639      	mov	r1, r7
 800d408:	1d3b      	adds	r3, r7, #4
 800d40a:	2200      	movs	r2, #0
 800d40c:	4618      	mov	r0, r3
 800d40e:	f7f3 fab9 	bl	8000984 <get_flash_memory_info>

	if(mem_start_address == 0)
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d102      	bne.n	800d41e <check_flash_memory+0x1e>
		application_flash_error = RET_APP_ERROR_FLASHHAL;
 800d418:	4b03      	ldr	r3, [pc, #12]	; (800d428 <check_flash_memory+0x28>)
 800d41a:	2204      	movs	r2, #4
 800d41c:	701a      	strb	r2, [r3, #0]
}
 800d41e:	bf00      	nop
 800d420:	4618      	mov	r0, r3
 800d422:	3708      	adds	r7, #8
 800d424:	46bd      	mov	sp, r7
 800d426:	bd80      	pop	{r7, pc}
 800d428:	200015b0 	.word	0x200015b0

0800d42c <application_record>:
	application_load_fromflash(apptestbuf, sizeof(apptestbuf));
}
*/

void application_record(uint16_t cmd, uint8_t* buf, uint8_t len)
{
 800d42c:	b580      	push	{r7, lr}
 800d42e:	b082      	sub	sp, #8
 800d430:	af00      	add	r7, sp, #0
 800d432:	4603      	mov	r3, r0
 800d434:	6039      	str	r1, [r7, #0]
 800d436:	80fb      	strh	r3, [r7, #6]
 800d438:	4613      	mov	r3, r2
 800d43a:	717b      	strb	r3, [r7, #5]
	//If flash error flag setted than do nothing related to flash
	if(application_flash_error != 0) return RET_APP_ERROR_FLASHHAL;
 800d43c:	4b11      	ldr	r3, [pc, #68]	; (800d484 <application_record+0x58>)
 800d43e:	781b      	ldrb	r3, [r3, #0]
 800d440:	2b00      	cmp	r3, #0
 800d442:	d11a      	bne.n	800d47a <application_record+0x4e>

	switch (cmd){
 800d444:	88fb      	ldrh	r3, [r7, #6]
 800d446:	2b68      	cmp	r3, #104	; 0x68
 800d448:	d009      	beq.n	800d45e <application_record+0x32>
 800d44a:	2b68      	cmp	r3, #104	; 0x68
 800d44c:	dc16      	bgt.n	800d47c <application_record+0x50>
 800d44e:	2b66      	cmp	r3, #102	; 0x66
 800d450:	dc02      	bgt.n	800d458 <application_record+0x2c>
 800d452:	2b65      	cmp	r3, #101	; 0x65
 800d454:	da03      	bge.n	800d45e <application_record+0x32>
 800d456:	e011      	b.n	800d47c <application_record+0x50>
 800d458:	2b67      	cmp	r3, #103	; 0x67
 800d45a:	d006      	beq.n	800d46a <application_record+0x3e>
 800d45c:	e00e      	b.n	800d47c <application_record+0x50>
	case CMD_CREATE_FB:
	case CMD_CREATE_CONN:
	case CMD_KILL:
		save2ram_application_data(buf, len);
 800d45e:	797b      	ldrb	r3, [r7, #5]
 800d460:	4619      	mov	r1, r3
 800d462:	6838      	ldr	r0, [r7, #0]
 800d464:	f7ff ff40 	bl	800d2e8 <save2ram_application_data>
		break;
 800d468:	e008      	b.n	800d47c <application_record+0x50>
	case CMD_RUN:
		save2ram_application_data(buf, len);
 800d46a:	797b      	ldrb	r3, [r7, #5]
 800d46c:	4619      	mov	r1, r3
 800d46e:	6838      	ldr	r0, [r7, #0]
 800d470:	f7ff ff3a 	bl	800d2e8 <save2ram_application_data>
		application_record2flash();
 800d474:	f7ff ff1a 	bl	800d2ac <application_record2flash>
		break;
 800d478:	e000      	b.n	800d47c <application_record+0x50>
	if(application_flash_error != 0) return RET_APP_ERROR_FLASHHAL;
 800d47a:	bf00      	nop
	}
}
 800d47c:	3708      	adds	r7, #8
 800d47e:	46bd      	mov	sp, r7
 800d480:	bd80      	pop	{r7, pc}
 800d482:	bf00      	nop
 800d484:	200015b0 	.word	0x200015b0

0800d488 <application_load>:

uint8_t application_load(){
 800d488:	b580      	push	{r7, lr}
 800d48a:	b084      	sub	sp, #16
 800d48c:	af00      	add	r7, sp, #0

	//Application load is fired at power-up.
	//So it is the first called functions from application domain
	//We are checking flash here and if an error detected
	//disable all the activities related to flash
	check_flash_memory();
 800d48e:	f7ff ffb7 	bl	800d400 <check_flash_memory>

	//Check Flash if everything OK then continue
	if(application_flash_error != 0) return RET_APP_ERROR_FLASHHAL;
 800d492:	4b11      	ldr	r3, [pc, #68]	; (800d4d8 <application_load+0x50>)
 800d494:	781b      	ldrb	r3, [r3, #0]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d001      	beq.n	800d49e <application_load+0x16>
 800d49a:	2304      	movs	r3, #4
 800d49c:	e018      	b.n	800d4d0 <application_load+0x48>

	Flash_Block* app_flash = get_flash_data(APPLICATION_MEMORY_ID);
 800d49e:	2000      	movs	r0, #0
 800d4a0:	f000 f9c8 	bl	800d834 <get_flash_data>
 800d4a4:	60f8      	str	r0, [r7, #12]
	init_application();
 800d4a6:	f7ff feef 	bl	800d288 <init_application>

	if(app_flash->block_start_marker1 == BLOCK_START_MAGIC1){
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	4a0b      	ldr	r2, [pc, #44]	; (800d4dc <application_load+0x54>)
 800d4b0:	4293      	cmp	r3, r2
 800d4b2:	d10c      	bne.n	800d4ce <application_load+0x46>
		uint8_t* p_flash = (uint8_t*)app_flash + FLASHBLOCK_HEADER_SIZE;
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	3308      	adds	r3, #8
 800d4b8:	60bb      	str	r3, [r7, #8]

		ret = application_load_fromflash(p_flash, app_flash->length);
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	685b      	ldr	r3, [r3, #4]
 800d4be:	4619      	mov	r1, r3
 800d4c0:	68b8      	ldr	r0, [r7, #8]
 800d4c2:	f7ff ff2d 	bl	800d320 <application_load_fromflash>
 800d4c6:	4603      	mov	r3, r0
 800d4c8:	71fb      	strb	r3, [r7, #7]
		return ret;
 800d4ca:	79fb      	ldrb	r3, [r7, #7]
 800d4cc:	e000      	b.n	800d4d0 <application_load+0x48>
	}

	else
		return RET_APP_ERROR_NORECORDING;
 800d4ce:	2303      	movs	r3, #3
}
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	3710      	adds	r7, #16
 800d4d4:	46bd      	mov	sp, r7
 800d4d6:	bd80      	pop	{r7, pc}
 800d4d8:	200015b0 	.word	0x200015b0
 800d4dc:	01234567 	.word	0x01234567

0800d4e0 <get_deployment_ch>:
#include "modbus_slave.h"
#include "deployment.h"

Communication_Ch deployment_ch = {.fdata_ready=0,.rx_data_cntr=0};

Communication_Ch* get_deployment_ch(){
 800d4e0:	b480      	push	{r7}
 800d4e2:	af00      	add	r7, sp, #0
	return &deployment_ch;
 800d4e4:	4b02      	ldr	r3, [pc, #8]	; (800d4f0 <get_deployment_ch+0x10>)
}
 800d4e6:	4618      	mov	r0, r3
 800d4e8:	46bd      	mov	sp, r7
 800d4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ee:	4770      	bx	lr
 800d4f0:	200015b4 	.word	0x200015b4

0800d4f4 <deployment_data_validity_check>:

uint8_t deployment_data_validity_check()
{
 800d4f4:	b480      	push	{r7}
 800d4f6:	af00      	add	r7, sp, #0
	if(deployment_ch.rx_data_cntr <2) {
 800d4f8:	4b09      	ldr	r3, [pc, #36]	; (800d520 <deployment_data_validity_check+0x2c>)
 800d4fa:	795b      	ldrb	r3, [r3, #5]
 800d4fc:	2b01      	cmp	r3, #1
 800d4fe:	d809      	bhi.n	800d514 <deployment_data_validity_check+0x20>
		deployment_ch.data_error_counter = deployment_ch.data_error_counter + 1;
 800d500:	4b07      	ldr	r3, [pc, #28]	; (800d520 <deployment_data_validity_check+0x2c>)
 800d502:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800d506:	3301      	adds	r3, #1
 800d508:	b2da      	uxtb	r2, r3
 800d50a:	4b05      	ldr	r3, [pc, #20]	; (800d520 <deployment_data_validity_check+0x2c>)
 800d50c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
		return 1;
 800d510:	2301      	movs	r3, #1
 800d512:	e000      	b.n	800d516 <deployment_data_validity_check+0x22>
	}
	else{
		return 0;
 800d514:	2300      	movs	r3, #0
	}
}
 800d516:	4618      	mov	r0, r3
 800d518:	46bd      	mov	sp, r7
 800d51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d51e:	4770      	bx	lr
 800d520:	200015b4 	.word	0x200015b4

0800d524 <init_deployment_ch>:

void init_deployment_ch(){
 800d524:	b480      	push	{r7}
 800d526:	af00      	add	r7, sp, #0
	deployment_ch.process_callback = modbus_slave_rx;
 800d528:	4b05      	ldr	r3, [pc, #20]	; (800d540 <init_deployment_ch+0x1c>)
 800d52a:	4a06      	ldr	r2, [pc, #24]	; (800d544 <init_deployment_ch+0x20>)
 800d52c:	649a      	str	r2, [r3, #72]	; 0x48
	deployment_ch.data_validity_check_callback = deployment_data_validity_check;
 800d52e:	4b04      	ldr	r3, [pc, #16]	; (800d540 <init_deployment_ch+0x1c>)
 800d530:	4a05      	ldr	r2, [pc, #20]	; (800d548 <init_deployment_ch+0x24>)
 800d532:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800d534:	bf00      	nop
 800d536:	46bd      	mov	sp, r7
 800d538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53c:	4770      	bx	lr
 800d53e:	bf00      	nop
 800d540:	200015b4 	.word	0x200015b4
 800d544:	0800c265 	.word	0x0800c265
 800d548:	0800d4f5 	.word	0x0800d4f5

0800d54c <get_watch_value>:
#include "mcCore.h"
#include "mcCore_Watch.h"


uint16_t get_watch_value(uint16_t param_index)
{
 800d54c:	b580      	push	{r7, lr}
 800d54e:	b088      	sub	sp, #32
 800d550:	af00      	add	r7, sp, #0
 800d552:	4603      	mov	r3, r0
 800d554:	80fb      	strh	r3, [r7, #6]
	uint16_t value16 = 0;
 800d556:	2300      	movs	r3, #0
 800d558:	83fb      	strh	r3, [r7, #30]
	s_Param* pAddrTable = get_paramAddrTable();
 800d55a:	f7fe f9c1 	bl	800b8e0 <get_paramAddrTable>
 800d55e:	61b8      	str	r0, [r7, #24]

	uint32_t value_index = pAddrTable->addr[param_index >> 1]; //take half of the incoming param_index
 800d560:	88fb      	ldrh	r3, [r7, #6]
 800d562:	085b      	lsrs	r3, r3, #1
 800d564:	b29b      	uxth	r3, r3
 800d566:	69ba      	ldr	r2, [r7, #24]
 800d568:	009b      	lsls	r3, r3, #2
 800d56a:	4413      	add	r3, r2
 800d56c:	685b      	ldr	r3, [r3, #4]
 800d56e:	617b      	str	r3, [r7, #20]
	uint32_t value = pAddrTable->value[value_index];
 800d570:	69ba      	ldr	r2, [r7, #24]
 800d572:	697b      	ldr	r3, [r7, #20]
 800d574:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800d578:	009b      	lsls	r3, r3, #2
 800d57a:	4413      	add	r3, r2
 800d57c:	685b      	ldr	r3, [r3, #4]
 800d57e:	60fb      	str	r3, [r7, #12]
	uint8_t* p = (uint8_t*) (&value);
 800d580:	f107 030c 	add.w	r3, r7, #12
 800d584:	613b      	str	r3, [r7, #16]

	if(param_index % 2 == 0){
 800d586:	88fb      	ldrh	r3, [r7, #6]
 800d588:	f003 0301 	and.w	r3, r3, #1
 800d58c:	b29b      	uxth	r3, r3
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d10b      	bne.n	800d5aa <get_watch_value+0x5e>
		value16 = ((uint16_t)p[0]<<8) + (uint16_t)p[1];
 800d592:	693b      	ldr	r3, [r7, #16]
 800d594:	781b      	ldrb	r3, [r3, #0]
 800d596:	b29b      	uxth	r3, r3
 800d598:	021b      	lsls	r3, r3, #8
 800d59a:	b29a      	uxth	r2, r3
 800d59c:	693b      	ldr	r3, [r7, #16]
 800d59e:	3301      	adds	r3, #1
 800d5a0:	781b      	ldrb	r3, [r3, #0]
 800d5a2:	b29b      	uxth	r3, r3
 800d5a4:	4413      	add	r3, r2
 800d5a6:	83fb      	strh	r3, [r7, #30]
 800d5a8:	e00b      	b.n	800d5c2 <get_watch_value+0x76>
	}
	else{
		value16 = ((uint16_t)p[2]<<8) + (uint16_t)p[3];
 800d5aa:	693b      	ldr	r3, [r7, #16]
 800d5ac:	3302      	adds	r3, #2
 800d5ae:	781b      	ldrb	r3, [r3, #0]
 800d5b0:	b29b      	uxth	r3, r3
 800d5b2:	021b      	lsls	r3, r3, #8
 800d5b4:	b29a      	uxth	r2, r3
 800d5b6:	693b      	ldr	r3, [r7, #16]
 800d5b8:	3303      	adds	r3, #3
 800d5ba:	781b      	ldrb	r3, [r3, #0]
 800d5bc:	b29b      	uxth	r3, r3
 800d5be:	4413      	add	r3, r2
 800d5c0:	83fb      	strh	r3, [r7, #30]
	}

	return value16;
 800d5c2:	8bfb      	ldrh	r3, [r7, #30]
}
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	3720      	adds	r7, #32
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	bd80      	pop	{r7, pc}

0800d5cc <get_uint8>:

/*
 * Utility Functions
 */
uint8_t get_uint8(uint8_t*p, uint16_t* index)
{
 800d5cc:	b480      	push	{r7}
 800d5ce:	b085      	sub	sp, #20
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	6078      	str	r0, [r7, #4]
 800d5d4:	6039      	str	r1, [r7, #0]
	uint8_t ret;
	ret = (uint16_t) p[*index];
 800d5d6:	683b      	ldr	r3, [r7, #0]
 800d5d8:	881b      	ldrh	r3, [r3, #0]
 800d5da:	461a      	mov	r2, r3
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	4413      	add	r3, r2
 800d5e0:	781b      	ldrb	r3, [r3, #0]
 800d5e2:	73fb      	strb	r3, [r7, #15]
	*index += 1;
 800d5e4:	683b      	ldr	r3, [r7, #0]
 800d5e6:	881b      	ldrh	r3, [r3, #0]
 800d5e8:	3301      	adds	r3, #1
 800d5ea:	b29a      	uxth	r2, r3
 800d5ec:	683b      	ldr	r3, [r7, #0]
 800d5ee:	801a      	strh	r2, [r3, #0]
	return ret;
 800d5f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5f2:	4618      	mov	r0, r3
 800d5f4:	3714      	adds	r7, #20
 800d5f6:	46bd      	mov	sp, r7
 800d5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5fc:	4770      	bx	lr

0800d5fe <get_uint16>:

uint16_t get_uint16(uint8_t*p, uint16_t* index)
{
 800d5fe:	b480      	push	{r7}
 800d600:	b085      	sub	sp, #20
 800d602:	af00      	add	r7, sp, #0
 800d604:	6078      	str	r0, [r7, #4]
 800d606:	6039      	str	r1, [r7, #0]
	uint16_t ret;
	ret = (uint16_t) p[*index] <<8 | p[*index+1];
 800d608:	683b      	ldr	r3, [r7, #0]
 800d60a:	881b      	ldrh	r3, [r3, #0]
 800d60c:	461a      	mov	r2, r3
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	4413      	add	r3, r2
 800d612:	781b      	ldrb	r3, [r3, #0]
 800d614:	021b      	lsls	r3, r3, #8
 800d616:	b21a      	sxth	r2, r3
 800d618:	683b      	ldr	r3, [r7, #0]
 800d61a:	881b      	ldrh	r3, [r3, #0]
 800d61c:	3301      	adds	r3, #1
 800d61e:	6879      	ldr	r1, [r7, #4]
 800d620:	440b      	add	r3, r1
 800d622:	781b      	ldrb	r3, [r3, #0]
 800d624:	b21b      	sxth	r3, r3
 800d626:	4313      	orrs	r3, r2
 800d628:	b21b      	sxth	r3, r3
 800d62a:	81fb      	strh	r3, [r7, #14]
	*index += 2;
 800d62c:	683b      	ldr	r3, [r7, #0]
 800d62e:	881b      	ldrh	r3, [r3, #0]
 800d630:	3302      	adds	r3, #2
 800d632:	b29a      	uxth	r2, r3
 800d634:	683b      	ldr	r3, [r7, #0]
 800d636:	801a      	strh	r2, [r3, #0]
	return ret;
 800d638:	89fb      	ldrh	r3, [r7, #14]
}
 800d63a:	4618      	mov	r0, r3
 800d63c:	3714      	adds	r7, #20
 800d63e:	46bd      	mov	sp, r7
 800d640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d644:	4770      	bx	lr

0800d646 <get_uint32>:

uint16_t get_uint32(uint8_t*p, uint16_t* index)
{
 800d646:	b480      	push	{r7}
 800d648:	b085      	sub	sp, #20
 800d64a:	af00      	add	r7, sp, #0
 800d64c:	6078      	str	r0, [r7, #4]
 800d64e:	6039      	str	r1, [r7, #0]
	uint32_t ret;
	ret = (uint32_t) p[*index] << 24 | p[*index+1]<< 16 | p[*index+2] <<8 | p[*index+3];
 800d650:	683b      	ldr	r3, [r7, #0]
 800d652:	881b      	ldrh	r3, [r3, #0]
 800d654:	461a      	mov	r2, r3
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	4413      	add	r3, r2
 800d65a:	781b      	ldrb	r3, [r3, #0]
 800d65c:	061b      	lsls	r3, r3, #24
 800d65e:	683a      	ldr	r2, [r7, #0]
 800d660:	8812      	ldrh	r2, [r2, #0]
 800d662:	3201      	adds	r2, #1
 800d664:	6879      	ldr	r1, [r7, #4]
 800d666:	440a      	add	r2, r1
 800d668:	7812      	ldrb	r2, [r2, #0]
 800d66a:	0412      	lsls	r2, r2, #16
 800d66c:	4313      	orrs	r3, r2
 800d66e:	683a      	ldr	r2, [r7, #0]
 800d670:	8812      	ldrh	r2, [r2, #0]
 800d672:	3202      	adds	r2, #2
 800d674:	6879      	ldr	r1, [r7, #4]
 800d676:	440a      	add	r2, r1
 800d678:	7812      	ldrb	r2, [r2, #0]
 800d67a:	0212      	lsls	r2, r2, #8
 800d67c:	4313      	orrs	r3, r2
 800d67e:	683a      	ldr	r2, [r7, #0]
 800d680:	8812      	ldrh	r2, [r2, #0]
 800d682:	3203      	adds	r2, #3
 800d684:	6879      	ldr	r1, [r7, #4]
 800d686:	440a      	add	r2, r1
 800d688:	7812      	ldrb	r2, [r2, #0]
 800d68a:	4313      	orrs	r3, r2
 800d68c:	60fb      	str	r3, [r7, #12]
	*index += 4;
 800d68e:	683b      	ldr	r3, [r7, #0]
 800d690:	881b      	ldrh	r3, [r3, #0]
 800d692:	3304      	adds	r3, #4
 800d694:	b29a      	uxth	r2, r3
 800d696:	683b      	ldr	r3, [r7, #0]
 800d698:	801a      	strh	r2, [r3, #0]
	return ret;
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	b29b      	uxth	r3, r3
}
 800d69e:	4618      	mov	r0, r3
 800d6a0:	3714      	adds	r7, #20
 800d6a2:	46bd      	mov	sp, r7
 800d6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a8:	4770      	bx	lr

0800d6aa <check_for_available_memory>:
 */

#include "stdint.h"
#include "fcb.h"

static uint8_t check_for_available_memory(uint32_t start_addr, uint32_t datalen, uint8_t mem_id){
 800d6aa:	b580      	push	{r7, lr}
 800d6ac:	b088      	sub	sp, #32
 800d6ae:	af00      	add	r7, sp, #0
 800d6b0:	60f8      	str	r0, [r7, #12]
 800d6b2:	60b9      	str	r1, [r7, #8]
 800d6b4:	4613      	mov	r3, r2
 800d6b6:	71fb      	strb	r3, [r7, #7]
	uint32_t mem_start, mem_end, mem_size;
	get_flash_memory_info(&mem_start, &mem_size, mem_id);
 800d6b8:	79fa      	ldrb	r2, [r7, #7]
 800d6ba:	f107 0114 	add.w	r1, r7, #20
 800d6be:	f107 0318 	add.w	r3, r7, #24
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	f7f3 f95e 	bl	8000984 <get_flash_memory_info>
	mem_end = mem_start+ mem_size;
 800d6c8:	69ba      	ldr	r2, [r7, #24]
 800d6ca:	697b      	ldr	r3, [r7, #20]
 800d6cc:	4413      	add	r3, r2
 800d6ce:	61fb      	str	r3, [r7, #28]

	if(mem_end < start_addr+FLASHBLOCK_HEADER_SIZE+datalen){
 800d6d0:	68fa      	ldr	r2, [r7, #12]
 800d6d2:	68bb      	ldr	r3, [r7, #8]
 800d6d4:	4413      	add	r3, r2
 800d6d6:	3308      	adds	r3, #8
 800d6d8:	69fa      	ldr	r2, [r7, #28]
 800d6da:	429a      	cmp	r2, r3
 800d6dc:	d201      	bcs.n	800d6e2 <check_for_available_memory+0x38>
		return 0; //no available memory
 800d6de:	2300      	movs	r3, #0
 800d6e0:	e000      	b.n	800d6e4 <check_for_available_memory+0x3a>
	}

	return 1;
 800d6e2:	2301      	movs	r3, #1
}
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	3720      	adds	r7, #32
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	bd80      	pop	{r7, pc}

0800d6ec <write_flash_block>:

static uint32_t write_flash_block(uint32_t start_addr, uint8_t* data, uint32_t datalen, uint8_t mem_id)
{
 800d6ec:	b580      	push	{r7, lr}
 800d6ee:	b086      	sub	sp, #24
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	60f8      	str	r0, [r7, #12]
 800d6f4:	60b9      	str	r1, [r7, #8]
 800d6f6:	607a      	str	r2, [r7, #4]
 800d6f8:	70fb      	strb	r3, [r7, #3]
	//first control for the available space if there is no space then return error
	if(check_for_available_memory(start_addr, datalen, mem_id) == 1){
 800d6fa:	78fb      	ldrb	r3, [r7, #3]
 800d6fc:	461a      	mov	r2, r3
 800d6fe:	6879      	ldr	r1, [r7, #4]
 800d700:	68f8      	ldr	r0, [r7, #12]
 800d702:	f7ff ffd2 	bl	800d6aa <check_for_available_memory>
 800d706:	4603      	mov	r3, r0
 800d708:	2b01      	cmp	r3, #1
 800d70a:	d116      	bne.n	800d73a <write_flash_block+0x4e>
		Flash_Block fb = {.block_start_marker1= BLOCK_START_MAGIC1, .length = datalen};
 800d70c:	4b0d      	ldr	r3, [pc, #52]	; (800d744 <write_flash_block+0x58>)
 800d70e:	613b      	str	r3, [r7, #16]
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	617b      	str	r3, [r7, #20]

		//write header
		write_to_flash((uint8_t*) (&fb), start_addr, FLASHBLOCK_HEADER_SIZE);
 800d714:	f107 0310 	add.w	r3, r7, #16
 800d718:	2208      	movs	r2, #8
 800d71a:	68f9      	ldr	r1, [r7, #12]
 800d71c:	4618      	mov	r0, r3
 800d71e:	f7f3 f944 	bl	80009aa <write_to_flash>

		//write data
		write_to_flash(data, start_addr+FLASHBLOCK_HEADER_SIZE, datalen);
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	3308      	adds	r3, #8
 800d726:	687a      	ldr	r2, [r7, #4]
 800d728:	4619      	mov	r1, r3
 800d72a:	68b8      	ldr	r0, [r7, #8]
 800d72c:	f7f3 f93d 	bl	80009aa <write_to_flash>

		return start_addr+FLASHBLOCK_HEADER_SIZE+datalen; //return the finish address of the block
 800d730:	68fa      	ldr	r2, [r7, #12]
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	4413      	add	r3, r2
 800d736:	3308      	adds	r3, #8
 800d738:	e000      	b.n	800d73c <write_flash_block+0x50>
	}

	return 0; //no available memory
 800d73a:	2300      	movs	r3, #0
}
 800d73c:	4618      	mov	r0, r3
 800d73e:	3718      	adds	r7, #24
 800d740:	46bd      	mov	sp, r7
 800d742:	bd80      	pop	{r7, pc}
 800d744:	01234567 	.word	0x01234567

0800d748 <get_current_address>:

//search all flash to find the end of record
//last record: when doing search if you need the address of the last record function returns this value from the last_record
static Get_Current_Addr_Data get_current_address(uint32_t start_address, uint32_t memory_size){
 800d748:	b480      	push	{r7}
 800d74a:	b08b      	sub	sp, #44	; 0x2c
 800d74c:	af00      	add	r7, sp, #0
 800d74e:	60f8      	str	r0, [r7, #12]
 800d750:	60b9      	str	r1, [r7, #8]
 800d752:	607a      	str	r2, [r7, #4]
	uint32_t* pflash_data;
	uint32_t flashptr, inc = 1;
 800d754:	2301      	movs	r3, #1
 800d756:	623b      	str	r3, [r7, #32]
	Flash_Block* temp_fb = (Flash_Block*) start_address;
 800d758:	68bb      	ldr	r3, [r7, #8]
 800d75a:	61fb      	str	r3, [r7, #28]
	Get_Current_Addr_Data ret;

	ret.last_record_fb = temp_fb; //If there is no record at flash to initiate last record
 800d75c:	69fb      	ldr	r3, [r7, #28]
 800d75e:	617b      	str	r3, [r7, #20]

	for(flashptr = start_address;flashptr<start_address+memory_size;flashptr+=inc)
 800d760:	68bb      	ldr	r3, [r7, #8]
 800d762:	627b      	str	r3, [r7, #36]	; 0x24
 800d764:	e010      	b.n	800d788 <get_current_address+0x40>
	{
		temp_fb = (Flash_Block*) flashptr;
 800d766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d768:	61fb      	str	r3, [r7, #28]

		if(temp_fb->block_start_marker1 ==BLOCK_START_MAGIC1){
 800d76a:	69fb      	ldr	r3, [r7, #28]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	4a12      	ldr	r2, [pc, #72]	; (800d7b8 <get_current_address+0x70>)
 800d770:	4293      	cmp	r3, r2
 800d772:	d110      	bne.n	800d796 <get_current_address+0x4e>
			inc = temp_fb->length + FLASHBLOCK_HEADER_SIZE;
 800d774:	69fb      	ldr	r3, [r7, #28]
 800d776:	685b      	ldr	r3, [r3, #4]
 800d778:	3308      	adds	r3, #8
 800d77a:	623b      	str	r3, [r7, #32]
			ret.last_record_fb = temp_fb;
 800d77c:	69fb      	ldr	r3, [r7, #28]
 800d77e:	617b      	str	r3, [r7, #20]
	for(flashptr = start_address;flashptr<start_address+memory_size;flashptr+=inc)
 800d780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d782:	6a3b      	ldr	r3, [r7, #32]
 800d784:	4413      	add	r3, r2
 800d786:	627b      	str	r3, [r7, #36]	; 0x24
 800d788:	68ba      	ldr	r2, [r7, #8]
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	4413      	add	r3, r2
 800d78e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d790:	429a      	cmp	r2, r3
 800d792:	d3e8      	bcc.n	800d766 <get_current_address+0x1e>
 800d794:	e000      	b.n	800d798 <get_current_address+0x50>
		}
		else{
			break;
 800d796:	bf00      	nop
		}
	}
	ret.flash_pointer = flashptr;
 800d798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d79a:	61bb      	str	r3, [r7, #24]

	return ret;
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	461a      	mov	r2, r3
 800d7a0:	f107 0314 	add.w	r3, r7, #20
 800d7a4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d7a8:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800d7ac:	68f8      	ldr	r0, [r7, #12]
 800d7ae:	372c      	adds	r7, #44	; 0x2c
 800d7b0:	46bd      	mov	sp, r7
 800d7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b6:	4770      	bx	lr
 800d7b8:	01234567 	.word	0x01234567

0800d7bc <write_flash_data>:
//mem_id: 0 -> Function Blocks
//mem_id: 1 -> Static Parameters
//mem_id: 2 -> Dynamic Parameters
//mem_id: 3 -> Circular FIFO (Data Storage)

uint32_t write_flash_data(uint8_t* data, uint32_t length, uint8_t mem_id){
 800d7bc:	b580      	push	{r7, lr}
 800d7be:	b088      	sub	sp, #32
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	60f8      	str	r0, [r7, #12]
 800d7c4:	60b9      	str	r1, [r7, #8]
 800d7c6:	4613      	mov	r3, r2
 800d7c8:	71fb      	strb	r3, [r7, #7]
	uint32_t mem_start_address, mem_size;

	//Its very important length to be multiply of 4
	if(length%4 != 0){
 800d7ca:	68bb      	ldr	r3, [r7, #8]
 800d7cc:	f003 0303 	and.w	r3, r3, #3
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d004      	beq.n	800d7de <write_flash_data+0x22>
		length = length + 4 - (length %4);
 800d7d4:	68bb      	ldr	r3, [r7, #8]
 800d7d6:	f023 0303 	bic.w	r3, r3, #3
 800d7da:	3304      	adds	r3, #4
 800d7dc:	60bb      	str	r3, [r7, #8]
	}

	//get memory properties
	get_flash_memory_info(&mem_start_address, &mem_size, mem_id);
 800d7de:	79fa      	ldrb	r2, [r7, #7]
 800d7e0:	f107 0118 	add.w	r1, r7, #24
 800d7e4:	f107 031c 	add.w	r3, r7, #28
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	f7f3 f8cb 	bl	8000984 <get_flash_memory_info>

	//get current flash pointer
	Get_Current_Addr_Data lastrecord_info = get_current_address(mem_start_address, mem_size);
 800d7ee:	69f9      	ldr	r1, [r7, #28]
 800d7f0:	69ba      	ldr	r2, [r7, #24]
 800d7f2:	f107 0310 	add.w	r3, r7, #16
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	f7ff ffa6 	bl	800d748 <get_current_address>

	if(check_for_available_memory(lastrecord_info.flash_pointer, length, mem_id) == 0){
 800d7fc:	697b      	ldr	r3, [r7, #20]
 800d7fe:	79fa      	ldrb	r2, [r7, #7]
 800d800:	68b9      	ldr	r1, [r7, #8]
 800d802:	4618      	mov	r0, r3
 800d804:	f7ff ff51 	bl	800d6aa <check_for_available_memory>
 800d808:	4603      	mov	r3, r0
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d107      	bne.n	800d81e <write_flash_data+0x62>
		erase_flash(mem_start_address, mem_id);
 800d80e:	69fb      	ldr	r3, [r7, #28]
 800d810:	79fa      	ldrb	r2, [r7, #7]
 800d812:	4611      	mov	r1, r2
 800d814:	4618      	mov	r0, r3
 800d816:	f7f3 f8d8 	bl	80009ca <erase_flash>
		lastrecord_info.flash_pointer = mem_start_address;
 800d81a:	69fb      	ldr	r3, [r7, #28]
 800d81c:	617b      	str	r3, [r7, #20]
	}

	//write data to flash and return current flash pointer address
	return write_flash_block(lastrecord_info.flash_pointer, data, length, mem_id);
 800d81e:	6978      	ldr	r0, [r7, #20]
 800d820:	79fb      	ldrb	r3, [r7, #7]
 800d822:	68ba      	ldr	r2, [r7, #8]
 800d824:	68f9      	ldr	r1, [r7, #12]
 800d826:	f7ff ff61 	bl	800d6ec <write_flash_block>
 800d82a:	4603      	mov	r3, r0
}
 800d82c:	4618      	mov	r0, r3
 800d82e:	3720      	adds	r7, #32
 800d830:	46bd      	mov	sp, r7
 800d832:	bd80      	pop	{r7, pc}

0800d834 <get_flash_data>:

Flash_Block* get_flash_data(uint8_t mem_id){
 800d834:	b580      	push	{r7, lr}
 800d836:	b086      	sub	sp, #24
 800d838:	af00      	add	r7, sp, #0
 800d83a:	4603      	mov	r3, r0
 800d83c:	71fb      	strb	r3, [r7, #7]
	uint32_t mem_start_address, mem_size;

	//get memory properties
	get_flash_memory_info(&mem_start_address, &mem_size, mem_id);
 800d83e:	79fa      	ldrb	r2, [r7, #7]
 800d840:	f107 0110 	add.w	r1, r7, #16
 800d844:	f107 0314 	add.w	r3, r7, #20
 800d848:	4618      	mov	r0, r3
 800d84a:	f7f3 f89b 	bl	8000984 <get_flash_memory_info>

	//get current flash pointer
	Get_Current_Addr_Data lastrecord_info = get_current_address(mem_start_address, mem_size);
 800d84e:	6979      	ldr	r1, [r7, #20]
 800d850:	693a      	ldr	r2, [r7, #16]
 800d852:	f107 0308 	add.w	r3, r7, #8
 800d856:	4618      	mov	r0, r3
 800d858:	f7ff ff76 	bl	800d748 <get_current_address>

	return lastrecord_info.last_record_fb;
 800d85c:	68bb      	ldr	r3, [r7, #8]
}
 800d85e:	4618      	mov	r0, r3
 800d860:	3718      	adds	r7, #24
 800d862:	46bd      	mov	sp, r7
 800d864:	bd80      	pop	{r7, pc}
	...

0800d868 <checkfor_available_memory>:
#include "stdint.h"
#include "memory_service.h"

memory_controller_t memory_controller;

static uint8_t checkfor_available_memory(uint32_t len){
 800d868:	b480      	push	{r7}
 800d86a:	b083      	sub	sp, #12
 800d86c:	af00      	add	r7, sp, #0
 800d86e:	6078      	str	r0, [r7, #4]
    if(len+memory_controller.raw_index >= MEMORY_SERVICE_TOTAL_MEMORY |
 800d870:	4b0f      	ldr	r3, [pc, #60]	; (800d8b0 <checkfor_available_memory+0x48>)
 800d872:	685a      	ldr	r2, [r3, #4]
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	4413      	add	r3, r2
 800d878:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800d87c:	4293      	cmp	r3, r2
 800d87e:	bf8c      	ite	hi
 800d880:	2301      	movhi	r3, #1
 800d882:	2300      	movls	r3, #0
 800d884:	b2da      	uxtb	r2, r3
        memory_controller.file_index >= MEMORY_SERVICE_MAX_FILE_COUNT) //check for available free space
 800d886:	4b0a      	ldr	r3, [pc, #40]	; (800d8b0 <checkfor_available_memory+0x48>)
 800d888:	881b      	ldrh	r3, [r3, #0]
    if(len+memory_controller.raw_index >= MEMORY_SERVICE_TOTAL_MEMORY |
 800d88a:	2b0f      	cmp	r3, #15
 800d88c:	bf8c      	ite	hi
 800d88e:	2301      	movhi	r3, #1
 800d890:	2300      	movls	r3, #0
 800d892:	b2db      	uxtb	r3, r3
 800d894:	4313      	orrs	r3, r2
 800d896:	b2db      	uxtb	r3, r3
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d001      	beq.n	800d8a0 <checkfor_available_memory+0x38>
    {
        return 0;
 800d89c:	2300      	movs	r3, #0
 800d89e:	e000      	b.n	800d8a2 <checkfor_available_memory+0x3a>
    }

    //else
    return 1;
 800d8a0:	2301      	movs	r3, #1
}
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	370c      	adds	r7, #12
 800d8a6:	46bd      	mov	sp, r7
 800d8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ac:	4770      	bx	lr
 800d8ae:	bf00      	nop
 800d8b0:	20001604 	.word	0x20001604

0800d8b4 <allocate_memory>:

static uint16_t allocate_memory(uint32_t len, memory_type_t memory_type){
 800d8b4:	b580      	push	{r7, lr}
 800d8b6:	b084      	sub	sp, #16
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	6078      	str	r0, [r7, #4]
 800d8bc:	460b      	mov	r3, r1
 800d8be:	70fb      	strb	r3, [r7, #3]
    memory_file_t* new_fp = &memory_controller.files[memory_controller.file_index];
 800d8c0:	4b1d      	ldr	r3, [pc, #116]	; (800d938 <allocate_memory+0x84>)
 800d8c2:	881b      	ldrh	r3, [r3, #0]
 800d8c4:	461a      	mov	r2, r3
 800d8c6:	4613      	mov	r3, r2
 800d8c8:	005b      	lsls	r3, r3, #1
 800d8ca:	4413      	add	r3, r2
 800d8cc:	00db      	lsls	r3, r3, #3
 800d8ce:	f603 0308 	addw	r3, r3, #2056	; 0x808
 800d8d2:	4a19      	ldr	r2, [pc, #100]	; (800d938 <allocate_memory+0x84>)
 800d8d4:	4413      	add	r3, r2
 800d8d6:	60fb      	str	r3, [r7, #12]

    new_fp->id = memory_controller.file_index;
 800d8d8:	4b17      	ldr	r3, [pc, #92]	; (800d938 <allocate_memory+0x84>)
 800d8da:	881a      	ldrh	r2, [r3, #0]
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	801a      	strh	r2, [r3, #0]
    new_fp->len = len;
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	687a      	ldr	r2, [r7, #4]
 800d8e4:	605a      	str	r2, [r3, #4]
    new_fp->crc = 0;
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	2200      	movs	r2, #0
 800d8ea:	609a      	str	r2, [r3, #8]
    new_fp->raw_index = memory_controller.raw_index;
 800d8ec:	4b12      	ldr	r3, [pc, #72]	; (800d938 <allocate_memory+0x84>)
 800d8ee:	685a      	ldr	r2, [r3, #4]
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	611a      	str	r2, [r3, #16]

    //initiate memory buffer
    new_fp->mbuf = memory_buf_init(&memory_controller.raw[memory_controller.raw_index], new_fp->len, memory_type);
 800d8f4:	4b10      	ldr	r3, [pc, #64]	; (800d938 <allocate_memory+0x84>)
 800d8f6:	685b      	ldr	r3, [r3, #4]
 800d8f8:	3308      	adds	r3, #8
 800d8fa:	4a0f      	ldr	r2, [pc, #60]	; (800d938 <allocate_memory+0x84>)
 800d8fc:	1898      	adds	r0, r3, r2
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	685b      	ldr	r3, [r3, #4]
 800d902:	b29b      	uxth	r3, r3
 800d904:	78fa      	ldrb	r2, [r7, #3]
 800d906:	4619      	mov	r1, r3
 800d908:	f001 fb7e 	bl	800f008 <memory_buf_init>
 800d90c:	4602      	mov	r2, r0
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	60da      	str	r2, [r3, #12]

    memory_controller.file_index++;
 800d912:	4b09      	ldr	r3, [pc, #36]	; (800d938 <allocate_memory+0x84>)
 800d914:	881b      	ldrh	r3, [r3, #0]
 800d916:	3301      	adds	r3, #1
 800d918:	b29a      	uxth	r2, r3
 800d91a:	4b07      	ldr	r3, [pc, #28]	; (800d938 <allocate_memory+0x84>)
 800d91c:	801a      	strh	r2, [r3, #0]
    memory_controller.raw_index += len;
 800d91e:	4b06      	ldr	r3, [pc, #24]	; (800d938 <allocate_memory+0x84>)
 800d920:	685a      	ldr	r2, [r3, #4]
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	4413      	add	r3, r2
 800d926:	4a04      	ldr	r2, [pc, #16]	; (800d938 <allocate_memory+0x84>)
 800d928:	6053      	str	r3, [r2, #4]

    return new_fp->id;
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	881b      	ldrh	r3, [r3, #0]
}
 800d92e:	4618      	mov	r0, r3
 800d930:	3710      	adds	r7, #16
 800d932:	46bd      	mov	sp, r7
 800d934:	bd80      	pop	{r7, pc}
 800d936:	bf00      	nop
 800d938:	20001604 	.word	0x20001604

0800d93c <runtime_malloc_memory>:
//returns id of the new file for ret_id
//if success return 1, fail return 0
uint8_t runtime_malloc_memory(uint32_t len, 
                                memory_type_t memory_type, 
                                    uint16_t* ret_id)
{ 
 800d93c:	b580      	push	{r7, lr}
 800d93e:	b084      	sub	sp, #16
 800d940:	af00      	add	r7, sp, #0
 800d942:	60f8      	str	r0, [r7, #12]
 800d944:	460b      	mov	r3, r1
 800d946:	607a      	str	r2, [r7, #4]
 800d948:	72fb      	strb	r3, [r7, #11]
    if(checkfor_available_memory(len) != 0){
 800d94a:	68f8      	ldr	r0, [r7, #12]
 800d94c:	f7ff ff8c 	bl	800d868 <checkfor_available_memory>
 800d950:	4603      	mov	r3, r0
 800d952:	2b00      	cmp	r3, #0
 800d954:	d008      	beq.n	800d968 <runtime_malloc_memory+0x2c>
        *ret_id = allocate_memory(len, memory_type);
 800d956:	7afb      	ldrb	r3, [r7, #11]
 800d958:	4619      	mov	r1, r3
 800d95a:	68f8      	ldr	r0, [r7, #12]
 800d95c:	f7ff ffaa 	bl	800d8b4 <allocate_memory>
 800d960:	4603      	mov	r3, r0
 800d962:	461a      	mov	r2, r3
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	801a      	strh	r2, [r3, #0]
    }   
}
 800d968:	bf00      	nop
 800d96a:	4618      	mov	r0, r3
 800d96c:	3710      	adds	r7, #16
 800d96e:	46bd      	mov	sp, r7
 800d970:	bd80      	pop	{r7, pc}

0800d972 <put_file_val>:


static void put_file_val(memory_file_t* file, MBUF_DATA_T data){
 800d972:	b580      	push	{r7, lr}
 800d974:	b082      	sub	sp, #8
 800d976:	af00      	add	r7, sp, #0
 800d978:	6078      	str	r0, [r7, #4]
 800d97a:	460b      	mov	r3, r1
 800d97c:	70fb      	strb	r3, [r7, #3]
	memory_buf_put(file->mbuf, data);
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	68db      	ldr	r3, [r3, #12]
 800d982:	78fa      	ldrb	r2, [r7, #3]
 800d984:	4611      	mov	r1, r2
 800d986:	4618      	mov	r0, r3
 800d988:	f001 fc18 	bl	800f1bc <memory_buf_put>
}
 800d98c:	bf00      	nop
 800d98e:	3708      	adds	r7, #8
 800d990:	46bd      	mov	sp, r7
 800d992:	bd80      	pop	{r7, pc}

0800d994 <writebuf_to_file>:
static uint8_t get_file_val(memory_file_t* file, MBUF_DATA_T* data){
	return memory_buf_get(file->mbuf, data);
}

//Buffer write/read functions
void writebuf_to_file(uint16_t file_id, MBUF_DATA_T* buf, uint32_t len){
 800d994:	b580      	push	{r7, lr}
 800d996:	b086      	sub	sp, #24
 800d998:	af00      	add	r7, sp, #0
 800d99a:	4603      	mov	r3, r0
 800d99c:	60b9      	str	r1, [r7, #8]
 800d99e:	607a      	str	r2, [r7, #4]
 800d9a0:	81fb      	strh	r3, [r7, #14]
    memory_file_t* file = &(memory_controller.files[file_id]);
 800d9a2:	89fa      	ldrh	r2, [r7, #14]
 800d9a4:	4613      	mov	r3, r2
 800d9a6:	005b      	lsls	r3, r3, #1
 800d9a8:	4413      	add	r3, r2
 800d9aa:	00db      	lsls	r3, r3, #3
 800d9ac:	f603 0308 	addw	r3, r3, #2056	; 0x808
 800d9b0:	4a0c      	ldr	r2, [pc, #48]	; (800d9e4 <writebuf_to_file+0x50>)
 800d9b2:	4413      	add	r3, r2
 800d9b4:	613b      	str	r3, [r7, #16]

    for(uint32_t i=0;i<len;i++){
 800d9b6:	2300      	movs	r3, #0
 800d9b8:	617b      	str	r3, [r7, #20]
 800d9ba:	e00a      	b.n	800d9d2 <writebuf_to_file+0x3e>
    	put_file_val(file, buf[i]);
 800d9bc:	68ba      	ldr	r2, [r7, #8]
 800d9be:	697b      	ldr	r3, [r7, #20]
 800d9c0:	4413      	add	r3, r2
 800d9c2:	781b      	ldrb	r3, [r3, #0]
 800d9c4:	4619      	mov	r1, r3
 800d9c6:	6938      	ldr	r0, [r7, #16]
 800d9c8:	f7ff ffd3 	bl	800d972 <put_file_val>
    for(uint32_t i=0;i<len;i++){
 800d9cc:	697b      	ldr	r3, [r7, #20]
 800d9ce:	3301      	adds	r3, #1
 800d9d0:	617b      	str	r3, [r7, #20]
 800d9d2:	697a      	ldr	r2, [r7, #20]
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	429a      	cmp	r2, r3
 800d9d8:	d3f0      	bcc.n	800d9bc <writebuf_to_file+0x28>
    }
}
 800d9da:	bf00      	nop
 800d9dc:	bf00      	nop
 800d9de:	3718      	adds	r7, #24
 800d9e0:	46bd      	mov	sp, r7
 800d9e2:	bd80      	pop	{r7, pc}
 800d9e4:	20001604 	.word	0x20001604

0800d9e8 <writesingle_to_file>:
    	get_file_val(file, &buf[i]);
    }
}

//Single value write/read functions
void writesingle_to_file(uint16_t file_id, MBUF_DATA_T val){
 800d9e8:	b580      	push	{r7, lr}
 800d9ea:	b084      	sub	sp, #16
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	4603      	mov	r3, r0
 800d9f0:	460a      	mov	r2, r1
 800d9f2:	80fb      	strh	r3, [r7, #6]
 800d9f4:	4613      	mov	r3, r2
 800d9f6:	717b      	strb	r3, [r7, #5]
    memory_file_t* file = &(memory_controller.files[file_id]);
 800d9f8:	88fa      	ldrh	r2, [r7, #6]
 800d9fa:	4613      	mov	r3, r2
 800d9fc:	005b      	lsls	r3, r3, #1
 800d9fe:	4413      	add	r3, r2
 800da00:	00db      	lsls	r3, r3, #3
 800da02:	f603 0308 	addw	r3, r3, #2056	; 0x808
 800da06:	4a06      	ldr	r2, [pc, #24]	; (800da20 <writesingle_to_file+0x38>)
 800da08:	4413      	add	r3, r2
 800da0a:	60fb      	str	r3, [r7, #12]
    put_file_val(file, val);
 800da0c:	797b      	ldrb	r3, [r7, #5]
 800da0e:	4619      	mov	r1, r3
 800da10:	68f8      	ldr	r0, [r7, #12]
 800da12:	f7ff ffae 	bl	800d972 <put_file_val>
}
 800da16:	bf00      	nop
 800da18:	3710      	adds	r7, #16
 800da1a:	46bd      	mov	sp, r7
 800da1c:	bd80      	pop	{r7, pc}
 800da1e:	bf00      	nop
 800da20:	20001604 	.word	0x20001604

0800da24 <get_file_pointer>:
void readsingle_from_file(uint16_t file_id, MBUF_DATA_T* val){
    memory_file_t* file = &(memory_controller.files[file_id]);
    get_file_val(file, val);
}

memory_file_t* get_file_pointer(uint16_t file_id){
 800da24:	b480      	push	{r7}
 800da26:	b083      	sub	sp, #12
 800da28:	af00      	add	r7, sp, #0
 800da2a:	4603      	mov	r3, r0
 800da2c:	80fb      	strh	r3, [r7, #6]
	if(file_id < memory_controller.file_index)
 800da2e:	4b0a      	ldr	r3, [pc, #40]	; (800da58 <get_file_pointer+0x34>)
 800da30:	881b      	ldrh	r3, [r3, #0]
 800da32:	88fa      	ldrh	r2, [r7, #6]
 800da34:	429a      	cmp	r2, r3
 800da36:	d209      	bcs.n	800da4c <get_file_pointer+0x28>
		return &memory_controller.files[file_id];
 800da38:	88fa      	ldrh	r2, [r7, #6]
 800da3a:	4613      	mov	r3, r2
 800da3c:	005b      	lsls	r3, r3, #1
 800da3e:	4413      	add	r3, r2
 800da40:	00db      	lsls	r3, r3, #3
 800da42:	f603 0308 	addw	r3, r3, #2056	; 0x808
 800da46:	4a04      	ldr	r2, [pc, #16]	; (800da58 <get_file_pointer+0x34>)
 800da48:	4413      	add	r3, r2
 800da4a:	e7ff      	b.n	800da4c <get_file_pointer+0x28>
}
 800da4c:	4618      	mov	r0, r3
 800da4e:	370c      	adds	r7, #12
 800da50:	46bd      	mov	sp, r7
 800da52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da56:	4770      	bx	lr
 800da58:	20001604 	.word	0x20001604

0800da5c <fb_and_parser>:

#include "stdint.h"
#include "mcCore.h"
#include "logic/fb_and.h"

uint8_t fb_and_parser(uint8_t* p){
 800da5c:	b580      	push	{r7, lr}
 800da5e:	b08c      	sub	sp, #48	; 0x30
 800da60:	af00      	add	r7, sp, #0
 800da62:	6278      	str	r0, [r7, #36]	; 0x24
	uint8_t type = p[0];
 800da64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da66:	781b      	ldrb	r3, [r3, #0]
 800da68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	create_fb_and(type);
 800da6c:	463b      	mov	r3, r7
 800da6e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800da72:	4611      	mov	r1, r2
 800da74:	4618      	mov	r0, r3
 800da76:	f000 f893 	bl	800dba0 <create_fb_and>
	return 0;
 800da7a:	2300      	movs	r3, #0
}
 800da7c:	4618      	mov	r0, r3
 800da7e:	3730      	adds	r7, #48	; 0x30
 800da80:	46bd      	mov	sp, r7
 800da82:	bd80      	pop	{r7, pc}

0800da84 <fb_and>:

void fb_and(uint8_t p){
 800da84:	b580      	push	{r7, lr}
 800da86:	b08a      	sub	sp, #40	; 0x28
 800da88:	af00      	add	r7, sp, #0
 800da8a:	4603      	mov	r3, r0
 800da8c:	71fb      	strb	r3, [r7, #7]
	s_Param* pAddrTable = get_paramAddrTable();
 800da8e:	f7fd ff27 	bl	800b8e0 <get_paramAddrTable>
 800da92:	6278      	str	r0, [r7, #36]	; 0x24
	int32_t* type = &pAddrTable->value[pAddrTable->addr[p]];
 800da94:	79fb      	ldrb	r3, [r7, #7]
 800da96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da98:	009b      	lsls	r3, r3, #2
 800da9a:	4413      	add	r3, r2
 800da9c:	685b      	ldr	r3, [r3, #4]
 800da9e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800daa2:	009b      	lsls	r3, r3, #2
 800daa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800daa6:	4413      	add	r3, r2
 800daa8:	3304      	adds	r3, #4
 800daaa:	623b      	str	r3, [r7, #32]
	int32_t* input1 = &pAddrTable->value[pAddrTable->addr[p+1]];
 800daac:	79fb      	ldrb	r3, [r7, #7]
 800daae:	3301      	adds	r3, #1
 800dab0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dab2:	009b      	lsls	r3, r3, #2
 800dab4:	4413      	add	r3, r2
 800dab6:	685b      	ldr	r3, [r3, #4]
 800dab8:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800dabc:	009b      	lsls	r3, r3, #2
 800dabe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dac0:	4413      	add	r3, r2
 800dac2:	3304      	adds	r3, #4
 800dac4:	61fb      	str	r3, [r7, #28]
	int32_t* input2 = &pAddrTable->value[pAddrTable->addr[p+2]];
 800dac6:	79fb      	ldrb	r3, [r7, #7]
 800dac8:	3302      	adds	r3, #2
 800daca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dacc:	009b      	lsls	r3, r3, #2
 800dace:	4413      	add	r3, r2
 800dad0:	685b      	ldr	r3, [r3, #4]
 800dad2:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800dad6:	009b      	lsls	r3, r3, #2
 800dad8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dada:	4413      	add	r3, r2
 800dadc:	3304      	adds	r3, #4
 800dade:	61bb      	str	r3, [r7, #24]
	int32_t* input3 = &pAddrTable->value[pAddrTable->addr[p+3]];
 800dae0:	79fb      	ldrb	r3, [r7, #7]
 800dae2:	3303      	adds	r3, #3
 800dae4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dae6:	009b      	lsls	r3, r3, #2
 800dae8:	4413      	add	r3, r2
 800daea:	685b      	ldr	r3, [r3, #4]
 800daec:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800daf0:	009b      	lsls	r3, r3, #2
 800daf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800daf4:	4413      	add	r3, r2
 800daf6:	3304      	adds	r3, #4
 800daf8:	617b      	str	r3, [r7, #20]
	int32_t* input4 = &pAddrTable->value[pAddrTable->addr[p+4]];
 800dafa:	79fb      	ldrb	r3, [r7, #7]
 800dafc:	3304      	adds	r3, #4
 800dafe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db00:	009b      	lsls	r3, r3, #2
 800db02:	4413      	add	r3, r2
 800db04:	685b      	ldr	r3, [r3, #4]
 800db06:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800db0a:	009b      	lsls	r3, r3, #2
 800db0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db0e:	4413      	add	r3, r2
 800db10:	3304      	adds	r3, #4
 800db12:	613b      	str	r3, [r7, #16]
	int32_t* output = &pAddrTable->value[pAddrTable->addr[p+5]];
 800db14:	79fb      	ldrb	r3, [r7, #7]
 800db16:	3305      	adds	r3, #5
 800db18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db1a:	009b      	lsls	r3, r3, #2
 800db1c:	4413      	add	r3, r2
 800db1e:	685b      	ldr	r3, [r3, #4]
 800db20:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800db24:	009b      	lsls	r3, r3, #2
 800db26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db28:	4413      	add	r3, r2
 800db2a:	3304      	adds	r3, #4
 800db2c:	60fb      	str	r3, [r7, #12]
	int32_t* stat = &pAddrTable->value[pAddrTable->addr[p+6]];
 800db2e:	79fb      	ldrb	r3, [r7, #7]
 800db30:	3306      	adds	r3, #6
 800db32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db34:	009b      	lsls	r3, r3, #2
 800db36:	4413      	add	r3, r2
 800db38:	685b      	ldr	r3, [r3, #4]
 800db3a:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800db3e:	009b      	lsls	r3, r3, #2
 800db40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db42:	4413      	add	r3, r2
 800db44:	3304      	adds	r3, #4
 800db46:	60bb      	str	r3, [r7, #8]

	if(*type == 1){
 800db48:	6a3b      	ldr	r3, [r7, #32]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	2b01      	cmp	r3, #1
 800db4e:	d10d      	bne.n	800db6c <fb_and+0xe8>
		*output =  (*input1)&(*input2)&(*input3)&(*input4);
 800db50:	69fb      	ldr	r3, [r7, #28]
 800db52:	681a      	ldr	r2, [r3, #0]
 800db54:	69bb      	ldr	r3, [r7, #24]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	401a      	ands	r2, r3
 800db5a:	697b      	ldr	r3, [r7, #20]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	401a      	ands	r2, r3
 800db60:	693b      	ldr	r3, [r7, #16]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	401a      	ands	r2, r3
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	601a      	str	r2, [r3, #0]
	}
	else{
		*output =  (*input1)&&(*input2)&&(*input3)&&(*input4);
	}

}
 800db6a:	e014      	b.n	800db96 <fb_and+0x112>
		*output =  (*input1)&&(*input2)&&(*input3)&&(*input4);
 800db6c:	69fb      	ldr	r3, [r7, #28]
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	2b00      	cmp	r3, #0
 800db72:	d00d      	beq.n	800db90 <fb_and+0x10c>
 800db74:	69bb      	ldr	r3, [r7, #24]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d009      	beq.n	800db90 <fb_and+0x10c>
 800db7c:	697b      	ldr	r3, [r7, #20]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	2b00      	cmp	r3, #0
 800db82:	d005      	beq.n	800db90 <fb_and+0x10c>
 800db84:	693b      	ldr	r3, [r7, #16]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d001      	beq.n	800db90 <fb_and+0x10c>
 800db8c:	2201      	movs	r2, #1
 800db8e:	e000      	b.n	800db92 <fb_and+0x10e>
 800db90:	2200      	movs	r2, #0
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	601a      	str	r2, [r3, #0]
}
 800db96:	bf00      	nop
 800db98:	3728      	adds	r7, #40	; 0x28
 800db9a:	46bd      	mov	sp, r7
 800db9c:	bd80      	pop	{r7, pc}
	...

0800dba0 <create_fb_and>:

type_fb_and create_fb_and(uint8_t type){
 800dba0:	b5b0      	push	{r4, r5, r7, lr}
 800dba2:	b08c      	sub	sp, #48	; 0x30
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	6078      	str	r0, [r7, #4]
 800dba8:	460b      	mov	r3, r1
 800dbaa:	70fb      	strb	r3, [r7, #3]
	s_Param* pAddrTable = get_paramAddrTable();
 800dbac:	f7fd fe98 	bl	800b8e0 <get_paramAddrTable>
 800dbb0:	62f8      	str	r0, [r7, #44]	; 0x2c
	type_fb_and fb;

	fb.startParamIndex = pAddrTable->currentIndex;
 800dbb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbb4:	781b      	ldrb	r3, [r3, #0]
 800dbb6:	737b      	strb	r3, [r7, #13]

	fb.fp.type = createParameter(type); //in4
 800dbb8:	78fb      	ldrb	r3, [r7, #3]
 800dbba:	4618      	mov	r0, r3
 800dbbc:	f7fd febe 	bl	800b93c <createParameter>
 800dbc0:	4603      	mov	r3, r0
 800dbc2:	627b      	str	r3, [r7, #36]	; 0x24
	fb.fp.input1 = createParameter(1); //in1
 800dbc4:	2001      	movs	r0, #1
 800dbc6:	f7fd feb9 	bl	800b93c <createParameter>
 800dbca:	4603      	mov	r3, r0
 800dbcc:	617b      	str	r3, [r7, #20]
	fb.fp.input2 = createParameter(1); //in2
 800dbce:	2001      	movs	r0, #1
 800dbd0:	f7fd feb4 	bl	800b93c <createParameter>
 800dbd4:	4603      	mov	r3, r0
 800dbd6:	61bb      	str	r3, [r7, #24]
	fb.fp.input3 = createParameter(1); //in3
 800dbd8:	2001      	movs	r0, #1
 800dbda:	f7fd feaf 	bl	800b93c <createParameter>
 800dbde:	4603      	mov	r3, r0
 800dbe0:	61fb      	str	r3, [r7, #28]
	fb.fp.input4 = createParameter(1); //in4
 800dbe2:	2001      	movs	r0, #1
 800dbe4:	f7fd feaa 	bl	800b93c <createParameter>
 800dbe8:	4603      	mov	r3, r0
 800dbea:	623b      	str	r3, [r7, #32]
	fb.fp.output = createParameter(1); //output
 800dbec:	2001      	movs	r0, #1
 800dbee:	f7fd fea5 	bl	800b93c <createParameter>
 800dbf2:	4603      	mov	r3, r0
 800dbf4:	613b      	str	r3, [r7, #16]
	fb.fp.stat = createParameter(0); //output
 800dbf6:	2000      	movs	r0, #0
 800dbf8:	f7fd fea0 	bl	800b93c <createParameter>
 800dbfc:	4603      	mov	r3, r0
 800dbfe:	62bb      	str	r3, [r7, #40]	; 0x28



	fb.fb_index = writeToFBTable(fb_and, fb.startParamIndex);
 800dc00:	7b7b      	ldrb	r3, [r7, #13]
 800dc02:	4619      	mov	r1, r3
 800dc04:	4809      	ldr	r0, [pc, #36]	; (800dc2c <create_fb_and+0x8c>)
 800dc06:	f7fd fe75 	bl	800b8f4 <writeToFBTable>
 800dc0a:	4603      	mov	r3, r0
 800dc0c:	733b      	strb	r3, [r7, #12]

	return fb;
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	461d      	mov	r5, r3
 800dc12:	f107 040c 	add.w	r4, r7, #12
 800dc16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dc18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800dc1a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800dc1e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 800dc22:	6878      	ldr	r0, [r7, #4]
 800dc24:	3730      	adds	r7, #48	; 0x30
 800dc26:	46bd      	mov	sp, r7
 800dc28:	bdb0      	pop	{r4, r5, r7, pc}
 800dc2a:	bf00      	nop
 800dc2c:	0800da85 	.word	0x0800da85

0800dc30 <fb_nand_parser>:

#include "stdint.h"
#include "mcCore.h"
#include "logic/fb_nand.h"

uint8_t fb_nand_parser(uint8_t* p){
 800dc30:	b580      	push	{r7, lr}
 800dc32:	b08c      	sub	sp, #48	; 0x30
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	6278      	str	r0, [r7, #36]	; 0x24
	uint8_t type = p[0];
 800dc38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc3a:	781b      	ldrb	r3, [r3, #0]
 800dc3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	create_fb_nand(type);
 800dc40:	463b      	mov	r3, r7
 800dc42:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800dc46:	4611      	mov	r1, r2
 800dc48:	4618      	mov	r0, r3
 800dc4a:	f000 f893 	bl	800dd74 <create_fb_nand>
	return 0;
 800dc4e:	2300      	movs	r3, #0
}
 800dc50:	4618      	mov	r0, r3
 800dc52:	3730      	adds	r7, #48	; 0x30
 800dc54:	46bd      	mov	sp, r7
 800dc56:	bd80      	pop	{r7, pc}

0800dc58 <fb_nand>:

void fb_nand(uint8_t p){
 800dc58:	b580      	push	{r7, lr}
 800dc5a:	b08a      	sub	sp, #40	; 0x28
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	4603      	mov	r3, r0
 800dc60:	71fb      	strb	r3, [r7, #7]
	s_Param* pAddrTable = get_paramAddrTable();
 800dc62:	f7fd fe3d 	bl	800b8e0 <get_paramAddrTable>
 800dc66:	6278      	str	r0, [r7, #36]	; 0x24
	int32_t* type = &pAddrTable->value[pAddrTable->addr[p]];
 800dc68:	79fb      	ldrb	r3, [r7, #7]
 800dc6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc6c:	009b      	lsls	r3, r3, #2
 800dc6e:	4413      	add	r3, r2
 800dc70:	685b      	ldr	r3, [r3, #4]
 800dc72:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800dc76:	009b      	lsls	r3, r3, #2
 800dc78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc7a:	4413      	add	r3, r2
 800dc7c:	3304      	adds	r3, #4
 800dc7e:	623b      	str	r3, [r7, #32]
	int32_t* input1 = &pAddrTable->value[pAddrTable->addr[p+1]];
 800dc80:	79fb      	ldrb	r3, [r7, #7]
 800dc82:	3301      	adds	r3, #1
 800dc84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc86:	009b      	lsls	r3, r3, #2
 800dc88:	4413      	add	r3, r2
 800dc8a:	685b      	ldr	r3, [r3, #4]
 800dc8c:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800dc90:	009b      	lsls	r3, r3, #2
 800dc92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc94:	4413      	add	r3, r2
 800dc96:	3304      	adds	r3, #4
 800dc98:	61fb      	str	r3, [r7, #28]
	int32_t* input2 = &pAddrTable->value[pAddrTable->addr[p+2]];
 800dc9a:	79fb      	ldrb	r3, [r7, #7]
 800dc9c:	3302      	adds	r3, #2
 800dc9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dca0:	009b      	lsls	r3, r3, #2
 800dca2:	4413      	add	r3, r2
 800dca4:	685b      	ldr	r3, [r3, #4]
 800dca6:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800dcaa:	009b      	lsls	r3, r3, #2
 800dcac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dcae:	4413      	add	r3, r2
 800dcb0:	3304      	adds	r3, #4
 800dcb2:	61bb      	str	r3, [r7, #24]
	int32_t* input3 = &pAddrTable->value[pAddrTable->addr[p+3]];
 800dcb4:	79fb      	ldrb	r3, [r7, #7]
 800dcb6:	3303      	adds	r3, #3
 800dcb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dcba:	009b      	lsls	r3, r3, #2
 800dcbc:	4413      	add	r3, r2
 800dcbe:	685b      	ldr	r3, [r3, #4]
 800dcc0:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800dcc4:	009b      	lsls	r3, r3, #2
 800dcc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dcc8:	4413      	add	r3, r2
 800dcca:	3304      	adds	r3, #4
 800dccc:	617b      	str	r3, [r7, #20]
	int32_t* input4 = &pAddrTable->value[pAddrTable->addr[p+4]];
 800dcce:	79fb      	ldrb	r3, [r7, #7]
 800dcd0:	3304      	adds	r3, #4
 800dcd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dcd4:	009b      	lsls	r3, r3, #2
 800dcd6:	4413      	add	r3, r2
 800dcd8:	685b      	ldr	r3, [r3, #4]
 800dcda:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800dcde:	009b      	lsls	r3, r3, #2
 800dce0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dce2:	4413      	add	r3, r2
 800dce4:	3304      	adds	r3, #4
 800dce6:	613b      	str	r3, [r7, #16]
	int32_t* output = &pAddrTable->value[pAddrTable->addr[p+5]];
 800dce8:	79fb      	ldrb	r3, [r7, #7]
 800dcea:	3305      	adds	r3, #5
 800dcec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dcee:	009b      	lsls	r3, r3, #2
 800dcf0:	4413      	add	r3, r2
 800dcf2:	685b      	ldr	r3, [r3, #4]
 800dcf4:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800dcf8:	009b      	lsls	r3, r3, #2
 800dcfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dcfc:	4413      	add	r3, r2
 800dcfe:	3304      	adds	r3, #4
 800dd00:	60fb      	str	r3, [r7, #12]
	int32_t* stat = &pAddrTable->value[pAddrTable->addr[p+6]];
 800dd02:	79fb      	ldrb	r3, [r7, #7]
 800dd04:	3306      	adds	r3, #6
 800dd06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd08:	009b      	lsls	r3, r3, #2
 800dd0a:	4413      	add	r3, r2
 800dd0c:	685b      	ldr	r3, [r3, #4]
 800dd0e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800dd12:	009b      	lsls	r3, r3, #2
 800dd14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd16:	4413      	add	r3, r2
 800dd18:	3304      	adds	r3, #4
 800dd1a:	60bb      	str	r3, [r7, #8]

	if(*type == 1){
 800dd1c:	6a3b      	ldr	r3, [r7, #32]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	2b01      	cmp	r3, #1
 800dd22:	d10e      	bne.n	800dd42 <fb_nand+0xea>
		*output =  ~((*input1)&(*input2)&(*input3)&(*input4));
 800dd24:	69fb      	ldr	r3, [r7, #28]
 800dd26:	681a      	ldr	r2, [r3, #0]
 800dd28:	69bb      	ldr	r3, [r7, #24]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	401a      	ands	r2, r3
 800dd2e:	697b      	ldr	r3, [r7, #20]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	401a      	ands	r2, r3
 800dd34:	693b      	ldr	r3, [r7, #16]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	4013      	ands	r3, r2
 800dd3a:	43da      	mvns	r2, r3
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	601a      	str	r2, [r3, #0]
	}
	else{
		*output =  !((*input1)&&(*input2)&&(*input3)&&(*input4));
	}
}
 800dd40:	e014      	b.n	800dd6c <fb_nand+0x114>
		*output =  !((*input1)&&(*input2)&&(*input3)&&(*input4));
 800dd42:	69fb      	ldr	r3, [r7, #28]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d00b      	beq.n	800dd62 <fb_nand+0x10a>
 800dd4a:	69bb      	ldr	r3, [r7, #24]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d007      	beq.n	800dd62 <fb_nand+0x10a>
 800dd52:	697b      	ldr	r3, [r7, #20]
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d003      	beq.n	800dd62 <fb_nand+0x10a>
 800dd5a:	693b      	ldr	r3, [r7, #16]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d101      	bne.n	800dd66 <fb_nand+0x10e>
 800dd62:	2201      	movs	r2, #1
 800dd64:	e000      	b.n	800dd68 <fb_nand+0x110>
 800dd66:	2200      	movs	r2, #0
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	601a      	str	r2, [r3, #0]
}
 800dd6c:	bf00      	nop
 800dd6e:	3728      	adds	r7, #40	; 0x28
 800dd70:	46bd      	mov	sp, r7
 800dd72:	bd80      	pop	{r7, pc}

0800dd74 <create_fb_nand>:

type_fb_nand create_fb_nand(uint8_t type){
 800dd74:	b5b0      	push	{r4, r5, r7, lr}
 800dd76:	b08c      	sub	sp, #48	; 0x30
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	6078      	str	r0, [r7, #4]
 800dd7c:	460b      	mov	r3, r1
 800dd7e:	70fb      	strb	r3, [r7, #3]
	s_Param* pAddrTable = get_paramAddrTable();
 800dd80:	f7fd fdae 	bl	800b8e0 <get_paramAddrTable>
 800dd84:	62f8      	str	r0, [r7, #44]	; 0x2c
	type_fb_nand fb;

	fb.startParamIndex = pAddrTable->currentIndex;
 800dd86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd88:	781b      	ldrb	r3, [r3, #0]
 800dd8a:	737b      	strb	r3, [r7, #13]

	fb.fp.type = createParameter(type); //in4
 800dd8c:	78fb      	ldrb	r3, [r7, #3]
 800dd8e:	4618      	mov	r0, r3
 800dd90:	f7fd fdd4 	bl	800b93c <createParameter>
 800dd94:	4603      	mov	r3, r0
 800dd96:	627b      	str	r3, [r7, #36]	; 0x24
	fb.fp.input1 = createParameter(1); //in1
 800dd98:	2001      	movs	r0, #1
 800dd9a:	f7fd fdcf 	bl	800b93c <createParameter>
 800dd9e:	4603      	mov	r3, r0
 800dda0:	617b      	str	r3, [r7, #20]
	fb.fp.input2 = createParameter(1); //in2
 800dda2:	2001      	movs	r0, #1
 800dda4:	f7fd fdca 	bl	800b93c <createParameter>
 800dda8:	4603      	mov	r3, r0
 800ddaa:	61bb      	str	r3, [r7, #24]
	fb.fp.input3 = createParameter(1); //in3
 800ddac:	2001      	movs	r0, #1
 800ddae:	f7fd fdc5 	bl	800b93c <createParameter>
 800ddb2:	4603      	mov	r3, r0
 800ddb4:	61fb      	str	r3, [r7, #28]
	fb.fp.input4 = createParameter(1); //in4
 800ddb6:	2001      	movs	r0, #1
 800ddb8:	f7fd fdc0 	bl	800b93c <createParameter>
 800ddbc:	4603      	mov	r3, r0
 800ddbe:	623b      	str	r3, [r7, #32]
	fb.fp.output = createParameter(0); //output
 800ddc0:	2000      	movs	r0, #0
 800ddc2:	f7fd fdbb 	bl	800b93c <createParameter>
 800ddc6:	4603      	mov	r3, r0
 800ddc8:	613b      	str	r3, [r7, #16]
	fb.fp.stat = createParameter(0);
 800ddca:	2000      	movs	r0, #0
 800ddcc:	f7fd fdb6 	bl	800b93c <createParameter>
 800ddd0:	4603      	mov	r3, r0
 800ddd2:	62bb      	str	r3, [r7, #40]	; 0x28


	fb.fb_index = writeToFBTable(fb_nand, fb.startParamIndex);
 800ddd4:	7b7b      	ldrb	r3, [r7, #13]
 800ddd6:	4619      	mov	r1, r3
 800ddd8:	4809      	ldr	r0, [pc, #36]	; (800de00 <create_fb_nand+0x8c>)
 800ddda:	f7fd fd8b 	bl	800b8f4 <writeToFBTable>
 800ddde:	4603      	mov	r3, r0
 800dde0:	733b      	strb	r3, [r7, #12]

	return fb;
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	461d      	mov	r5, r3
 800dde6:	f107 040c 	add.w	r4, r7, #12
 800ddea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ddec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ddee:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800ddf2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 800ddf6:	6878      	ldr	r0, [r7, #4]
 800ddf8:	3730      	adds	r7, #48	; 0x30
 800ddfa:	46bd      	mov	sp, r7
 800ddfc:	bdb0      	pop	{r4, r5, r7, pc}
 800ddfe:	bf00      	nop
 800de00:	0800dc59 	.word	0x0800dc59

0800de04 <fb_nor_parser>:
#include "logic/fb_nor.h"



//logic fb
uint8_t fb_nor_parser(uint8_t* p){
 800de04:	b580      	push	{r7, lr}
 800de06:	b08a      	sub	sp, #40	; 0x28
 800de08:	af00      	add	r7, sp, #0
 800de0a:	6278      	str	r0, [r7, #36]	; 0x24
	create_fb_nor();
 800de0c:	463b      	mov	r3, r7
 800de0e:	4618      	mov	r0, r3
 800de10:	f000 f872 	bl	800def8 <create_fb_nor>
	return 0;
 800de14:	2300      	movs	r3, #0
}
 800de16:	4618      	mov	r0, r3
 800de18:	3728      	adds	r7, #40	; 0x28
 800de1a:	46bd      	mov	sp, r7
 800de1c:	bd80      	pop	{r7, pc}

0800de1e <fb_nor>:
void fb_nor(uint8_t p){
 800de1e:	b580      	push	{r7, lr}
 800de20:	b08a      	sub	sp, #40	; 0x28
 800de22:	af00      	add	r7, sp, #0
 800de24:	4603      	mov	r3, r0
 800de26:	71fb      	strb	r3, [r7, #7]
	s_Param* pAddrTable = get_paramAddrTable();
 800de28:	f7fd fd5a 	bl	800b8e0 <get_paramAddrTable>
 800de2c:	6278      	str	r0, [r7, #36]	; 0x24
	int32_t* input1 = &pAddrTable->value[pAddrTable->addr[p]];
 800de2e:	79fb      	ldrb	r3, [r7, #7]
 800de30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de32:	009b      	lsls	r3, r3, #2
 800de34:	4413      	add	r3, r2
 800de36:	685b      	ldr	r3, [r3, #4]
 800de38:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800de3c:	009b      	lsls	r3, r3, #2
 800de3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de40:	4413      	add	r3, r2
 800de42:	3304      	adds	r3, #4
 800de44:	623b      	str	r3, [r7, #32]
	int32_t* input2 = &pAddrTable->value[pAddrTable->addr[p+1]];
 800de46:	79fb      	ldrb	r3, [r7, #7]
 800de48:	3301      	adds	r3, #1
 800de4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de4c:	009b      	lsls	r3, r3, #2
 800de4e:	4413      	add	r3, r2
 800de50:	685b      	ldr	r3, [r3, #4]
 800de52:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800de56:	009b      	lsls	r3, r3, #2
 800de58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de5a:	4413      	add	r3, r2
 800de5c:	3304      	adds	r3, #4
 800de5e:	61fb      	str	r3, [r7, #28]
	int32_t* input3 = &pAddrTable->value[pAddrTable->addr[p+2]];
 800de60:	79fb      	ldrb	r3, [r7, #7]
 800de62:	3302      	adds	r3, #2
 800de64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de66:	009b      	lsls	r3, r3, #2
 800de68:	4413      	add	r3, r2
 800de6a:	685b      	ldr	r3, [r3, #4]
 800de6c:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800de70:	009b      	lsls	r3, r3, #2
 800de72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de74:	4413      	add	r3, r2
 800de76:	3304      	adds	r3, #4
 800de78:	61bb      	str	r3, [r7, #24]
	int32_t* input4 = &pAddrTable->value[pAddrTable->addr[p+3]];
 800de7a:	79fb      	ldrb	r3, [r7, #7]
 800de7c:	3303      	adds	r3, #3
 800de7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de80:	009b      	lsls	r3, r3, #2
 800de82:	4413      	add	r3, r2
 800de84:	685b      	ldr	r3, [r3, #4]
 800de86:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800de8a:	009b      	lsls	r3, r3, #2
 800de8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de8e:	4413      	add	r3, r2
 800de90:	3304      	adds	r3, #4
 800de92:	617b      	str	r3, [r7, #20]
	int32_t* output = &pAddrTable->value[pAddrTable->addr[p+4]];
 800de94:	79fb      	ldrb	r3, [r7, #7]
 800de96:	3304      	adds	r3, #4
 800de98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de9a:	009b      	lsls	r3, r3, #2
 800de9c:	4413      	add	r3, r2
 800de9e:	685b      	ldr	r3, [r3, #4]
 800dea0:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800dea4:	009b      	lsls	r3, r3, #2
 800dea6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dea8:	4413      	add	r3, r2
 800deaa:	3304      	adds	r3, #4
 800deac:	613b      	str	r3, [r7, #16]
	int32_t* stat = &pAddrTable->value[pAddrTable->addr[p+5]];
 800deae:	79fb      	ldrb	r3, [r7, #7]
 800deb0:	3305      	adds	r3, #5
 800deb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800deb4:	009b      	lsls	r3, r3, #2
 800deb6:	4413      	add	r3, r2
 800deb8:	685b      	ldr	r3, [r3, #4]
 800deba:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800debe:	009b      	lsls	r3, r3, #2
 800dec0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dec2:	4413      	add	r3, r2
 800dec4:	3304      	adds	r3, #4
 800dec6:	60fb      	str	r3, [r7, #12]


	*output =  !((*input1)|(*input2)|(*input3)|(*input4));
 800dec8:	6a3b      	ldr	r3, [r7, #32]
 800deca:	681a      	ldr	r2, [r3, #0]
 800decc:	69fb      	ldr	r3, [r7, #28]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	431a      	orrs	r2, r3
 800ded2:	69bb      	ldr	r3, [r7, #24]
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	431a      	orrs	r2, r3
 800ded8:	697b      	ldr	r3, [r7, #20]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	4313      	orrs	r3, r2
 800dede:	2b00      	cmp	r3, #0
 800dee0:	bf0c      	ite	eq
 800dee2:	2301      	moveq	r3, #1
 800dee4:	2300      	movne	r3, #0
 800dee6:	b2db      	uxtb	r3, r3
 800dee8:	461a      	mov	r2, r3
 800deea:	693b      	ldr	r3, [r7, #16]
 800deec:	601a      	str	r2, [r3, #0]

}
 800deee:	bf00      	nop
 800def0:	3728      	adds	r7, #40	; 0x28
 800def2:	46bd      	mov	sp, r7
 800def4:	bd80      	pop	{r7, pc}
	...

0800def8 <create_fb_nor>:


type_fb_nor create_fb_nor(void){
 800def8:	b5b0      	push	{r4, r5, r7, lr}
 800defa:	b08a      	sub	sp, #40	; 0x28
 800defc:	af00      	add	r7, sp, #0
 800defe:	6078      	str	r0, [r7, #4]
	s_Param* pAddrTable = get_paramAddrTable();
 800df00:	f7fd fcee 	bl	800b8e0 <get_paramAddrTable>
 800df04:	6278      	str	r0, [r7, #36]	; 0x24
	type_fb_nor fb;

	fb.startParamIndex = pAddrTable->currentIndex;
 800df06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df08:	781b      	ldrb	r3, [r3, #0]
 800df0a:	727b      	strb	r3, [r7, #9]


	fb.fp.input1 = createParameter(0); //in1
 800df0c:	2000      	movs	r0, #0
 800df0e:	f7fd fd15 	bl	800b93c <createParameter>
 800df12:	4603      	mov	r3, r0
 800df14:	613b      	str	r3, [r7, #16]
	fb.fp.input2 = createParameter(0); //in2
 800df16:	2000      	movs	r0, #0
 800df18:	f7fd fd10 	bl	800b93c <createParameter>
 800df1c:	4603      	mov	r3, r0
 800df1e:	617b      	str	r3, [r7, #20]
	fb.fp.input3 = createParameter(0); //in3
 800df20:	2000      	movs	r0, #0
 800df22:	f7fd fd0b 	bl	800b93c <createParameter>
 800df26:	4603      	mov	r3, r0
 800df28:	61bb      	str	r3, [r7, #24]
	fb.fp.input4 = createParameter(0); //in4
 800df2a:	2000      	movs	r0, #0
 800df2c:	f7fd fd06 	bl	800b93c <createParameter>
 800df30:	4603      	mov	r3, r0
 800df32:	61fb      	str	r3, [r7, #28]
	fb.fp.output = createParameter(0); //output
 800df34:	2000      	movs	r0, #0
 800df36:	f7fd fd01 	bl	800b93c <createParameter>
 800df3a:	4603      	mov	r3, r0
 800df3c:	60fb      	str	r3, [r7, #12]
	fb.fp.stat = createParameter(0); //output
 800df3e:	2000      	movs	r0, #0
 800df40:	f7fd fcfc 	bl	800b93c <createParameter>
 800df44:	4603      	mov	r3, r0
 800df46:	623b      	str	r3, [r7, #32]


	fb.fb_index = writeToFBTable(fb_nor, fb.startParamIndex);
 800df48:	7a7b      	ldrb	r3, [r7, #9]
 800df4a:	4619      	mov	r1, r3
 800df4c:	4809      	ldr	r0, [pc, #36]	; (800df74 <create_fb_nor+0x7c>)
 800df4e:	f7fd fcd1 	bl	800b8f4 <writeToFBTable>
 800df52:	4603      	mov	r3, r0
 800df54:	723b      	strb	r3, [r7, #8]

	return fb;
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	461d      	mov	r5, r3
 800df5a:	f107 0408 	add.w	r4, r7, #8
 800df5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800df60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800df62:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800df66:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 800df6a:	6878      	ldr	r0, [r7, #4]
 800df6c:	3728      	adds	r7, #40	; 0x28
 800df6e:	46bd      	mov	sp, r7
 800df70:	bdb0      	pop	{r4, r5, r7, pc}
 800df72:	bf00      	nop
 800df74:	0800de1f 	.word	0x0800de1f

0800df78 <fb_not_parser>:
#include "stdint.h"
#include "mcCore.h"
#include "logic/fb_not.h"

//logic fb
uint8_t fb_not_parser(uint8_t* p){
 800df78:	b580      	push	{r7, lr}
 800df7a:	b08a      	sub	sp, #40	; 0x28
 800df7c:	af00      	add	r7, sp, #0
 800df7e:	61f8      	str	r0, [r7, #28]
	uint8_t type = p[0];
 800df80:	69fb      	ldr	r3, [r7, #28]
 800df82:	781b      	ldrb	r3, [r3, #0]
 800df84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t input = p[1];
 800df88:	69fb      	ldr	r3, [r7, #28]
 800df8a:	785b      	ldrb	r3, [r3, #1]
 800df8c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	create_fb_not(type, input);
 800df90:	463b      	mov	r3, r7
 800df92:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800df96:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 800df9a:	4618      	mov	r0, r3
 800df9c:	f000 f858 	bl	800e050 <create_fb_not>
	return 0;
 800dfa0:	2300      	movs	r3, #0
}
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	3728      	adds	r7, #40	; 0x28
 800dfa6:	46bd      	mov	sp, r7
 800dfa8:	bd80      	pop	{r7, pc}

0800dfaa <fb_not>:

void fb_not(uint8_t p){
 800dfaa:	b580      	push	{r7, lr}
 800dfac:	b088      	sub	sp, #32
 800dfae:	af00      	add	r7, sp, #0
 800dfb0:	4603      	mov	r3, r0
 800dfb2:	71fb      	strb	r3, [r7, #7]
	s_Param* pAddrTable = get_paramAddrTable();
 800dfb4:	f7fd fc94 	bl	800b8e0 <get_paramAddrTable>
 800dfb8:	61f8      	str	r0, [r7, #28]
	int32_t* type = &pAddrTable->value[pAddrTable->addr[p]];
 800dfba:	79fb      	ldrb	r3, [r7, #7]
 800dfbc:	69fa      	ldr	r2, [r7, #28]
 800dfbe:	009b      	lsls	r3, r3, #2
 800dfc0:	4413      	add	r3, r2
 800dfc2:	685b      	ldr	r3, [r3, #4]
 800dfc4:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800dfc8:	009b      	lsls	r3, r3, #2
 800dfca:	69fa      	ldr	r2, [r7, #28]
 800dfcc:	4413      	add	r3, r2
 800dfce:	3304      	adds	r3, #4
 800dfd0:	61bb      	str	r3, [r7, #24]
	int32_t* input = &pAddrTable->value[pAddrTable->addr[p+1]];
 800dfd2:	79fb      	ldrb	r3, [r7, #7]
 800dfd4:	3301      	adds	r3, #1
 800dfd6:	69fa      	ldr	r2, [r7, #28]
 800dfd8:	009b      	lsls	r3, r3, #2
 800dfda:	4413      	add	r3, r2
 800dfdc:	685b      	ldr	r3, [r3, #4]
 800dfde:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800dfe2:	009b      	lsls	r3, r3, #2
 800dfe4:	69fa      	ldr	r2, [r7, #28]
 800dfe6:	4413      	add	r3, r2
 800dfe8:	3304      	adds	r3, #4
 800dfea:	617b      	str	r3, [r7, #20]
	int32_t* output = &pAddrTable->value[pAddrTable->addr[p+2]];
 800dfec:	79fb      	ldrb	r3, [r7, #7]
 800dfee:	3302      	adds	r3, #2
 800dff0:	69fa      	ldr	r2, [r7, #28]
 800dff2:	009b      	lsls	r3, r3, #2
 800dff4:	4413      	add	r3, r2
 800dff6:	685b      	ldr	r3, [r3, #4]
 800dff8:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800dffc:	009b      	lsls	r3, r3, #2
 800dffe:	69fa      	ldr	r2, [r7, #28]
 800e000:	4413      	add	r3, r2
 800e002:	3304      	adds	r3, #4
 800e004:	613b      	str	r3, [r7, #16]
	int32_t* stat = &pAddrTable->value[pAddrTable->addr[p+3]];
 800e006:	79fb      	ldrb	r3, [r7, #7]
 800e008:	3303      	adds	r3, #3
 800e00a:	69fa      	ldr	r2, [r7, #28]
 800e00c:	009b      	lsls	r3, r3, #2
 800e00e:	4413      	add	r3, r2
 800e010:	685b      	ldr	r3, [r3, #4]
 800e012:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800e016:	009b      	lsls	r3, r3, #2
 800e018:	69fa      	ldr	r2, [r7, #28]
 800e01a:	4413      	add	r3, r2
 800e01c:	3304      	adds	r3, #4
 800e01e:	60fb      	str	r3, [r7, #12]

	// returns true if the conditions is false
	// else returns false

	if(*type == 1){
 800e020:	69bb      	ldr	r3, [r7, #24]
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	2b01      	cmp	r3, #1
 800e026:	d105      	bne.n	800e034 <fb_not+0x8a>
		*output =  ~(*input);
 800e028:	697b      	ldr	r3, [r7, #20]
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	43da      	mvns	r2, r3
 800e02e:	693b      	ldr	r3, [r7, #16]
 800e030:	601a      	str	r2, [r3, #0]
	}
	else{
		*output =  !(*input);
	}

}
 800e032:	e009      	b.n	800e048 <fb_not+0x9e>
		*output =  !(*input);
 800e034:	697b      	ldr	r3, [r7, #20]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	2b00      	cmp	r3, #0
 800e03a:	bf0c      	ite	eq
 800e03c:	2301      	moveq	r3, #1
 800e03e:	2300      	movne	r3, #0
 800e040:	b2db      	uxtb	r3, r3
 800e042:	461a      	mov	r2, r3
 800e044:	693b      	ldr	r3, [r7, #16]
 800e046:	601a      	str	r2, [r3, #0]
}
 800e048:	bf00      	nop
 800e04a:	3720      	adds	r7, #32
 800e04c:	46bd      	mov	sp, r7
 800e04e:	bd80      	pop	{r7, pc}

0800e050 <create_fb_not>:


type_fb_not create_fb_not(uint8_t type, uint8_t input){
 800e050:	b5b0      	push	{r4, r5, r7, lr}
 800e052:	b088      	sub	sp, #32
 800e054:	af00      	add	r7, sp, #0
 800e056:	6078      	str	r0, [r7, #4]
 800e058:	460b      	mov	r3, r1
 800e05a:	70fb      	strb	r3, [r7, #3]
 800e05c:	4613      	mov	r3, r2
 800e05e:	70bb      	strb	r3, [r7, #2]
	s_Param* pAddrTable = get_paramAddrTable();
 800e060:	f7fd fc3e 	bl	800b8e0 <get_paramAddrTable>
 800e064:	61f8      	str	r0, [r7, #28]
	type_fb_not fb;

	fb.startParamIndex = pAddrTable->currentIndex;
 800e066:	69fb      	ldr	r3, [r7, #28]
 800e068:	781b      	ldrb	r3, [r3, #0]
 800e06a:	727b      	strb	r3, [r7, #9]

	//input not connected -> output = 1
	fb.fp.type = createParameter(type); //in
 800e06c:	78fb      	ldrb	r3, [r7, #3]
 800e06e:	4618      	mov	r0, r3
 800e070:	f7fd fc64 	bl	800b93c <createParameter>
 800e074:	4603      	mov	r3, r0
 800e076:	617b      	str	r3, [r7, #20]
	fb.fp.input = createParameter(input); //in
 800e078:	78bb      	ldrb	r3, [r7, #2]
 800e07a:	4618      	mov	r0, r3
 800e07c:	f7fd fc5e 	bl	800b93c <createParameter>
 800e080:	4603      	mov	r3, r0
 800e082:	613b      	str	r3, [r7, #16]
	fb.fp.output = createParameter(0); //output
 800e084:	2000      	movs	r0, #0
 800e086:	f7fd fc59 	bl	800b93c <createParameter>
 800e08a:	4603      	mov	r3, r0
 800e08c:	60fb      	str	r3, [r7, #12]
	fb.fp.stat = createParameter(0);
 800e08e:	2000      	movs	r0, #0
 800e090:	f7fd fc54 	bl	800b93c <createParameter>
 800e094:	4603      	mov	r3, r0
 800e096:	61bb      	str	r3, [r7, #24]



	fb.fb_index = writeToFBTable(fb_not, fb.startParamIndex);
 800e098:	7a7b      	ldrb	r3, [r7, #9]
 800e09a:	4619      	mov	r1, r3
 800e09c:	4808      	ldr	r0, [pc, #32]	; (800e0c0 <create_fb_not+0x70>)
 800e09e:	f7fd fc29 	bl	800b8f4 <writeToFBTable>
 800e0a2:	4603      	mov	r3, r0
 800e0a4:	723b      	strb	r3, [r7, #8]

	return fb;
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	461d      	mov	r5, r3
 800e0aa:	f107 0408 	add.w	r4, r7, #8
 800e0ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e0b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e0b2:	6823      	ldr	r3, [r4, #0]
 800e0b4:	602b      	str	r3, [r5, #0]
}
 800e0b6:	6878      	ldr	r0, [r7, #4]
 800e0b8:	3720      	adds	r7, #32
 800e0ba:	46bd      	mov	sp, r7
 800e0bc:	bdb0      	pop	{r4, r5, r7, pc}
 800e0be:	bf00      	nop
 800e0c0:	0800dfab 	.word	0x0800dfab

0800e0c4 <fb_or_parser>:

#include "stdint.h"
#include "mcCore.h"
#include "logic/fb_or.h"

uint8_t fb_or_parser(uint8_t* p){
 800e0c4:	b580      	push	{r7, lr}
 800e0c6:	b08c      	sub	sp, #48	; 0x30
 800e0c8:	af00      	add	r7, sp, #0
 800e0ca:	6278      	str	r0, [r7, #36]	; 0x24
	uint8_t type = p[0];
 800e0cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0ce:	781b      	ldrb	r3, [r3, #0]
 800e0d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	create_fb_or(type);
 800e0d4:	463b      	mov	r3, r7
 800e0d6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800e0da:	4611      	mov	r1, r2
 800e0dc:	4618      	mov	r0, r3
 800e0de:	f000 f893 	bl	800e208 <create_fb_or>
	return 0;
 800e0e2:	2300      	movs	r3, #0
}
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	3730      	adds	r7, #48	; 0x30
 800e0e8:	46bd      	mov	sp, r7
 800e0ea:	bd80      	pop	{r7, pc}

0800e0ec <fb_or>:

void fb_or(uint8_t p){
 800e0ec:	b580      	push	{r7, lr}
 800e0ee:	b08a      	sub	sp, #40	; 0x28
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	4603      	mov	r3, r0
 800e0f4:	71fb      	strb	r3, [r7, #7]
	s_Param* pAddrTable = get_paramAddrTable();
 800e0f6:	f7fd fbf3 	bl	800b8e0 <get_paramAddrTable>
 800e0fa:	6278      	str	r0, [r7, #36]	; 0x24
	int32_t* type = &pAddrTable->value[pAddrTable->addr[p]];
 800e0fc:	79fb      	ldrb	r3, [r7, #7]
 800e0fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e100:	009b      	lsls	r3, r3, #2
 800e102:	4413      	add	r3, r2
 800e104:	685b      	ldr	r3, [r3, #4]
 800e106:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800e10a:	009b      	lsls	r3, r3, #2
 800e10c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e10e:	4413      	add	r3, r2
 800e110:	3304      	adds	r3, #4
 800e112:	623b      	str	r3, [r7, #32]
	int32_t* input1 = &pAddrTable->value[pAddrTable->addr[p+1]];
 800e114:	79fb      	ldrb	r3, [r7, #7]
 800e116:	3301      	adds	r3, #1
 800e118:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e11a:	009b      	lsls	r3, r3, #2
 800e11c:	4413      	add	r3, r2
 800e11e:	685b      	ldr	r3, [r3, #4]
 800e120:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800e124:	009b      	lsls	r3, r3, #2
 800e126:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e128:	4413      	add	r3, r2
 800e12a:	3304      	adds	r3, #4
 800e12c:	61fb      	str	r3, [r7, #28]
	int32_t* input2 = &pAddrTable->value[pAddrTable->addr[p+2]];
 800e12e:	79fb      	ldrb	r3, [r7, #7]
 800e130:	3302      	adds	r3, #2
 800e132:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e134:	009b      	lsls	r3, r3, #2
 800e136:	4413      	add	r3, r2
 800e138:	685b      	ldr	r3, [r3, #4]
 800e13a:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800e13e:	009b      	lsls	r3, r3, #2
 800e140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e142:	4413      	add	r3, r2
 800e144:	3304      	adds	r3, #4
 800e146:	61bb      	str	r3, [r7, #24]
	int32_t* input3 = &pAddrTable->value[pAddrTable->addr[p+3]];
 800e148:	79fb      	ldrb	r3, [r7, #7]
 800e14a:	3303      	adds	r3, #3
 800e14c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e14e:	009b      	lsls	r3, r3, #2
 800e150:	4413      	add	r3, r2
 800e152:	685b      	ldr	r3, [r3, #4]
 800e154:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800e158:	009b      	lsls	r3, r3, #2
 800e15a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e15c:	4413      	add	r3, r2
 800e15e:	3304      	adds	r3, #4
 800e160:	617b      	str	r3, [r7, #20]
	int32_t* input4 = &pAddrTable->value[pAddrTable->addr[p+4]];
 800e162:	79fb      	ldrb	r3, [r7, #7]
 800e164:	3304      	adds	r3, #4
 800e166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e168:	009b      	lsls	r3, r3, #2
 800e16a:	4413      	add	r3, r2
 800e16c:	685b      	ldr	r3, [r3, #4]
 800e16e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800e172:	009b      	lsls	r3, r3, #2
 800e174:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e176:	4413      	add	r3, r2
 800e178:	3304      	adds	r3, #4
 800e17a:	613b      	str	r3, [r7, #16]
	int32_t* output = &pAddrTable->value[pAddrTable->addr[p+5]];
 800e17c:	79fb      	ldrb	r3, [r7, #7]
 800e17e:	3305      	adds	r3, #5
 800e180:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e182:	009b      	lsls	r3, r3, #2
 800e184:	4413      	add	r3, r2
 800e186:	685b      	ldr	r3, [r3, #4]
 800e188:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800e18c:	009b      	lsls	r3, r3, #2
 800e18e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e190:	4413      	add	r3, r2
 800e192:	3304      	adds	r3, #4
 800e194:	60fb      	str	r3, [r7, #12]
	int32_t* stat = &pAddrTable->value[pAddrTable->addr[p+6]];
 800e196:	79fb      	ldrb	r3, [r7, #7]
 800e198:	3306      	adds	r3, #6
 800e19a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e19c:	009b      	lsls	r3, r3, #2
 800e19e:	4413      	add	r3, r2
 800e1a0:	685b      	ldr	r3, [r3, #4]
 800e1a2:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800e1a6:	009b      	lsls	r3, r3, #2
 800e1a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e1aa:	4413      	add	r3, r2
 800e1ac:	3304      	adds	r3, #4
 800e1ae:	60bb      	str	r3, [r7, #8]

	if(*type == 1){
 800e1b0:	6a3b      	ldr	r3, [r7, #32]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	2b01      	cmp	r3, #1
 800e1b6:	d10d      	bne.n	800e1d4 <fb_or+0xe8>
		*output =  (*input1)|(*input2)|(*input3)|(*input4);
 800e1b8:	69fb      	ldr	r3, [r7, #28]
 800e1ba:	681a      	ldr	r2, [r3, #0]
 800e1bc:	69bb      	ldr	r3, [r7, #24]
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	431a      	orrs	r2, r3
 800e1c2:	697b      	ldr	r3, [r7, #20]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	431a      	orrs	r2, r3
 800e1c8:	693b      	ldr	r3, [r7, #16]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	431a      	orrs	r2, r3
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	601a      	str	r2, [r3, #0]
	else{
		*output =  (*input1)||(*input2)||(*input3)||(*input4);
	}


}
 800e1d2:	e014      	b.n	800e1fe <fb_or+0x112>
		*output =  (*input1)||(*input2)||(*input3)||(*input4);
 800e1d4:	69fb      	ldr	r3, [r7, #28]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d10b      	bne.n	800e1f4 <fb_or+0x108>
 800e1dc:	69bb      	ldr	r3, [r7, #24]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d107      	bne.n	800e1f4 <fb_or+0x108>
 800e1e4:	697b      	ldr	r3, [r7, #20]
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d103      	bne.n	800e1f4 <fb_or+0x108>
 800e1ec:	693b      	ldr	r3, [r7, #16]
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d001      	beq.n	800e1f8 <fb_or+0x10c>
 800e1f4:	2201      	movs	r2, #1
 800e1f6:	e000      	b.n	800e1fa <fb_or+0x10e>
 800e1f8:	2200      	movs	r2, #0
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	601a      	str	r2, [r3, #0]
}
 800e1fe:	bf00      	nop
 800e200:	3728      	adds	r7, #40	; 0x28
 800e202:	46bd      	mov	sp, r7
 800e204:	bd80      	pop	{r7, pc}
	...

0800e208 <create_fb_or>:


type_fb_or create_fb_or(uint8_t type){
 800e208:	b5b0      	push	{r4, r5, r7, lr}
 800e20a:	b08c      	sub	sp, #48	; 0x30
 800e20c:	af00      	add	r7, sp, #0
 800e20e:	6078      	str	r0, [r7, #4]
 800e210:	460b      	mov	r3, r1
 800e212:	70fb      	strb	r3, [r7, #3]
	s_Param* pAddrTable = get_paramAddrTable();
 800e214:	f7fd fb64 	bl	800b8e0 <get_paramAddrTable>
 800e218:	62f8      	str	r0, [r7, #44]	; 0x2c
	type_fb_or fb;

	fb.startParamIndex = pAddrTable->currentIndex;
 800e21a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e21c:	781b      	ldrb	r3, [r3, #0]
 800e21e:	737b      	strb	r3, [r7, #13]

	fb.fp.type = createParameter(type); //type
 800e220:	78fb      	ldrb	r3, [r7, #3]
 800e222:	4618      	mov	r0, r3
 800e224:	f7fd fb8a 	bl	800b93c <createParameter>
 800e228:	4603      	mov	r3, r0
 800e22a:	627b      	str	r3, [r7, #36]	; 0x24
	fb.fp.input1 = createParameter(0); //input1
 800e22c:	2000      	movs	r0, #0
 800e22e:	f7fd fb85 	bl	800b93c <createParameter>
 800e232:	4603      	mov	r3, r0
 800e234:	617b      	str	r3, [r7, #20]
	fb.fp.input2 = createParameter(0); //input2
 800e236:	2000      	movs	r0, #0
 800e238:	f7fd fb80 	bl	800b93c <createParameter>
 800e23c:	4603      	mov	r3, r0
 800e23e:	61bb      	str	r3, [r7, #24]
	fb.fp.input3 = createParameter(0); //input3
 800e240:	2000      	movs	r0, #0
 800e242:	f7fd fb7b 	bl	800b93c <createParameter>
 800e246:	4603      	mov	r3, r0
 800e248:	61fb      	str	r3, [r7, #28]
	fb.fp.input4 = createParameter(0); //input4
 800e24a:	2000      	movs	r0, #0
 800e24c:	f7fd fb76 	bl	800b93c <createParameter>
 800e250:	4603      	mov	r3, r0
 800e252:	623b      	str	r3, [r7, #32]
	fb.fp.output = createParameter(0); //output
 800e254:	2000      	movs	r0, #0
 800e256:	f7fd fb71 	bl	800b93c <createParameter>
 800e25a:	4603      	mov	r3, r0
 800e25c:	613b      	str	r3, [r7, #16]
	fb.fp.stat = createParameter(0); //output
 800e25e:	2000      	movs	r0, #0
 800e260:	f7fd fb6c 	bl	800b93c <createParameter>
 800e264:	4603      	mov	r3, r0
 800e266:	62bb      	str	r3, [r7, #40]	; 0x28

	fb.fb_index = writeToFBTable(fb_or, fb.startParamIndex);
 800e268:	7b7b      	ldrb	r3, [r7, #13]
 800e26a:	4619      	mov	r1, r3
 800e26c:	4809      	ldr	r0, [pc, #36]	; (800e294 <create_fb_or+0x8c>)
 800e26e:	f7fd fb41 	bl	800b8f4 <writeToFBTable>
 800e272:	4603      	mov	r3, r0
 800e274:	733b      	strb	r3, [r7, #12]

	return fb;
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	461d      	mov	r5, r3
 800e27a:	f107 040c 	add.w	r4, r7, #12
 800e27e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e280:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e282:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800e286:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 800e28a:	6878      	ldr	r0, [r7, #4]
 800e28c:	3730      	adds	r7, #48	; 0x30
 800e28e:	46bd      	mov	sp, r7
 800e290:	bdb0      	pop	{r4, r5, r7, pc}
 800e292:	bf00      	nop
 800e294:	0800e0ed 	.word	0x0800e0ed

0800e298 <fb_xor_parser>:
#include "stdint.h"
#include "mcCore.h"
#include "logic/fb_xor.h"

//logic fb
uint8_t fb_xor_parser(uint8_t* p){
 800e298:	b580      	push	{r7, lr}
 800e29a:	b088      	sub	sp, #32
 800e29c:	af00      	add	r7, sp, #0
 800e29e:	61f8      	str	r0, [r7, #28]
	create_fb_xor();
 800e2a0:	463b      	mov	r3, r7
 800e2a2:	4618      	mov	r0, r3
 800e2a4:	f000 f858 	bl	800e358 <create_fb_xor>
	return 0;
 800e2a8:	2300      	movs	r3, #0
}
 800e2aa:	4618      	mov	r0, r3
 800e2ac:	3720      	adds	r7, #32
 800e2ae:	46bd      	mov	sp, r7
 800e2b0:	bd80      	pop	{r7, pc}

0800e2b2 <fb_xor>:
void fb_xor(uint8_t p){
 800e2b2:	b580      	push	{r7, lr}
 800e2b4:	b088      	sub	sp, #32
 800e2b6:	af00      	add	r7, sp, #0
 800e2b8:	4603      	mov	r3, r0
 800e2ba:	71fb      	strb	r3, [r7, #7]
	s_Param* pAddrTable = get_paramAddrTable();
 800e2bc:	f7fd fb10 	bl	800b8e0 <get_paramAddrTable>
 800e2c0:	61f8      	str	r0, [r7, #28]
	int32_t* input1 = &pAddrTable->value[pAddrTable->addr[p]];
 800e2c2:	79fb      	ldrb	r3, [r7, #7]
 800e2c4:	69fa      	ldr	r2, [r7, #28]
 800e2c6:	009b      	lsls	r3, r3, #2
 800e2c8:	4413      	add	r3, r2
 800e2ca:	685b      	ldr	r3, [r3, #4]
 800e2cc:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800e2d0:	009b      	lsls	r3, r3, #2
 800e2d2:	69fa      	ldr	r2, [r7, #28]
 800e2d4:	4413      	add	r3, r2
 800e2d6:	3304      	adds	r3, #4
 800e2d8:	61bb      	str	r3, [r7, #24]
	int32_t* input2 = &pAddrTable->value[pAddrTable->addr[p+1]];
 800e2da:	79fb      	ldrb	r3, [r7, #7]
 800e2dc:	3301      	adds	r3, #1
 800e2de:	69fa      	ldr	r2, [r7, #28]
 800e2e0:	009b      	lsls	r3, r3, #2
 800e2e2:	4413      	add	r3, r2
 800e2e4:	685b      	ldr	r3, [r3, #4]
 800e2e6:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800e2ea:	009b      	lsls	r3, r3, #2
 800e2ec:	69fa      	ldr	r2, [r7, #28]
 800e2ee:	4413      	add	r3, r2
 800e2f0:	3304      	adds	r3, #4
 800e2f2:	617b      	str	r3, [r7, #20]
	int32_t* mode = &pAddrTable->value[pAddrTable->addr[p+2]];
 800e2f4:	79fb      	ldrb	r3, [r7, #7]
 800e2f6:	3302      	adds	r3, #2
 800e2f8:	69fa      	ldr	r2, [r7, #28]
 800e2fa:	009b      	lsls	r3, r3, #2
 800e2fc:	4413      	add	r3, r2
 800e2fe:	685b      	ldr	r3, [r3, #4]
 800e300:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800e304:	009b      	lsls	r3, r3, #2
 800e306:	69fa      	ldr	r2, [r7, #28]
 800e308:	4413      	add	r3, r2
 800e30a:	3304      	adds	r3, #4
 800e30c:	613b      	str	r3, [r7, #16]
	int32_t* output = &pAddrTable->value[pAddrTable->addr[p+3]];
 800e30e:	79fb      	ldrb	r3, [r7, #7]
 800e310:	3303      	adds	r3, #3
 800e312:	69fa      	ldr	r2, [r7, #28]
 800e314:	009b      	lsls	r3, r3, #2
 800e316:	4413      	add	r3, r2
 800e318:	685b      	ldr	r3, [r3, #4]
 800e31a:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800e31e:	009b      	lsls	r3, r3, #2
 800e320:	69fa      	ldr	r2, [r7, #28]
 800e322:	4413      	add	r3, r2
 800e324:	3304      	adds	r3, #4
 800e326:	60fb      	str	r3, [r7, #12]
	int32_t* stat = &pAddrTable->value[pAddrTable->addr[p+4]];
 800e328:	79fb      	ldrb	r3, [r7, #7]
 800e32a:	3304      	adds	r3, #4
 800e32c:	69fa      	ldr	r2, [r7, #28]
 800e32e:	009b      	lsls	r3, r3, #2
 800e330:	4413      	add	r3, r2
 800e332:	685b      	ldr	r3, [r3, #4]
 800e334:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800e338:	009b      	lsls	r3, r3, #2
 800e33a:	69fa      	ldr	r2, [r7, #28]
 800e33c:	4413      	add	r3, r2
 800e33e:	3304      	adds	r3, #4
 800e340:	60bb      	str	r3, [r7, #8]

	*output =  (*input1)^(*input2);
 800e342:	69bb      	ldr	r3, [r7, #24]
 800e344:	681a      	ldr	r2, [r3, #0]
 800e346:	697b      	ldr	r3, [r7, #20]
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	405a      	eors	r2, r3
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	601a      	str	r2, [r3, #0]
}
 800e350:	bf00      	nop
 800e352:	3720      	adds	r7, #32
 800e354:	46bd      	mov	sp, r7
 800e356:	bd80      	pop	{r7, pc}

0800e358 <create_fb_xor>:


type_fb_xor create_fb_xor(void){
 800e358:	b5b0      	push	{r4, r5, r7, lr}
 800e35a:	b08a      	sub	sp, #40	; 0x28
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	6078      	str	r0, [r7, #4]
	s_Param* pAddrTable = get_paramAddrTable();
 800e360:	f7fd fabe 	bl	800b8e0 <get_paramAddrTable>
 800e364:	6278      	str	r0, [r7, #36]	; 0x24
	type_fb_xor fb;

	fb.startParamIndex = pAddrTable->currentIndex;
 800e366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e368:	781b      	ldrb	r3, [r3, #0]
 800e36a:	737b      	strb	r3, [r7, #13]


	fb.fp.input1 = createParameter(0); //in
 800e36c:	2000      	movs	r0, #0
 800e36e:	f7fd fae5 	bl	800b93c <createParameter>
 800e372:	4603      	mov	r3, r0
 800e374:	617b      	str	r3, [r7, #20]
	fb.fp.input2 = createParameter(0); //in
 800e376:	2000      	movs	r0, #0
 800e378:	f7fd fae0 	bl	800b93c <createParameter>
 800e37c:	4603      	mov	r3, r0
 800e37e:	61bb      	str	r3, [r7, #24]
	fb.fp.mode = createParameter(0); //in
 800e380:	2000      	movs	r0, #0
 800e382:	f7fd fadb 	bl	800b93c <createParameter>
 800e386:	4603      	mov	r3, r0
 800e388:	61fb      	str	r3, [r7, #28]
	fb.fp.output = createParameter(0); //output
 800e38a:	2000      	movs	r0, #0
 800e38c:	f7fd fad6 	bl	800b93c <createParameter>
 800e390:	4603      	mov	r3, r0
 800e392:	613b      	str	r3, [r7, #16]
	fb.fp.stat = createParameter(0); //in
 800e394:	2000      	movs	r0, #0
 800e396:	f7fd fad1 	bl	800b93c <createParameter>
 800e39a:	4603      	mov	r3, r0
 800e39c:	623b      	str	r3, [r7, #32]



	fb.fb_index = writeToFBTable(fb_xor, fb.startParamIndex);
 800e39e:	7b7b      	ldrb	r3, [r7, #13]
 800e3a0:	4619      	mov	r1, r3
 800e3a2:	4809      	ldr	r0, [pc, #36]	; (800e3c8 <create_fb_xor+0x70>)
 800e3a4:	f7fd faa6 	bl	800b8f4 <writeToFBTable>
 800e3a8:	4603      	mov	r3, r0
 800e3aa:	733b      	strb	r3, [r7, #12]

	return fb;
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	461d      	mov	r5, r3
 800e3b0:	f107 040c 	add.w	r4, r7, #12
 800e3b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e3b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e3b8:	e894 0003 	ldmia.w	r4, {r0, r1}
 800e3bc:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800e3c0:	6878      	ldr	r0, [r7, #4]
 800e3c2:	3728      	adds	r7, #40	; 0x28
 800e3c4:	46bd      	mov	sp, r7
 800e3c6:	bdb0      	pop	{r4, r5, r7, pc}
 800e3c8:	0800e2b3 	.word	0x0800e2b3

0800e3cc <fb_condition_parser>:
#include "stdint.h"
#include "mcCore.h"
#include "fb_condition.h"

//fb_condition
uint8_t fb_condition_parser(uint8_t* p){
 800e3cc:	b580      	push	{r7, lr}
 800e3ce:	b08a      	sub	sp, #40	; 0x28
 800e3d0:	af00      	add	r7, sp, #0
 800e3d2:	61f8      	str	r0, [r7, #28]
	uint8_t mode = p[0];
 800e3d4:	69fb      	ldr	r3, [r7, #28]
 800e3d6:	781b      	ldrb	r3, [r3, #0]
 800e3d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	create_fb_condition(mode);
 800e3dc:	463b      	mov	r3, r7
 800e3de:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e3e2:	4611      	mov	r1, r2
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	f000 f8bd 	bl	800e564 <create_fb_condition>
	return 0;
 800e3ea:	2300      	movs	r3, #0
}
 800e3ec:	4618      	mov	r0, r3
 800e3ee:	3728      	adds	r7, #40	; 0x28
 800e3f0:	46bd      	mov	sp, r7
 800e3f2:	bd80      	pop	{r7, pc}

0800e3f4 <fb_condition>:

void fb_condition(uint8_t p){
 800e3f4:	b580      	push	{r7, lr}
 800e3f6:	b088      	sub	sp, #32
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	4603      	mov	r3, r0
 800e3fc:	71fb      	strb	r3, [r7, #7]
	s_Param* pAddrTable = get_paramAddrTable();
 800e3fe:	f7fd fa6f 	bl	800b8e0 <get_paramAddrTable>
 800e402:	61f8      	str	r0, [r7, #28]
	int32_t* in1 = &pAddrTable->value[pAddrTable->addr[p]];
 800e404:	79fb      	ldrb	r3, [r7, #7]
 800e406:	69fa      	ldr	r2, [r7, #28]
 800e408:	009b      	lsls	r3, r3, #2
 800e40a:	4413      	add	r3, r2
 800e40c:	685b      	ldr	r3, [r3, #4]
 800e40e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800e412:	009b      	lsls	r3, r3, #2
 800e414:	69fa      	ldr	r2, [r7, #28]
 800e416:	4413      	add	r3, r2
 800e418:	3304      	adds	r3, #4
 800e41a:	61bb      	str	r3, [r7, #24]
	int32_t* in2 = &pAddrTable->value[pAddrTable->addr[p+1]];
 800e41c:	79fb      	ldrb	r3, [r7, #7]
 800e41e:	3301      	adds	r3, #1
 800e420:	69fa      	ldr	r2, [r7, #28]
 800e422:	009b      	lsls	r3, r3, #2
 800e424:	4413      	add	r3, r2
 800e426:	685b      	ldr	r3, [r3, #4]
 800e428:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800e42c:	009b      	lsls	r3, r3, #2
 800e42e:	69fa      	ldr	r2, [r7, #28]
 800e430:	4413      	add	r3, r2
 800e432:	3304      	adds	r3, #4
 800e434:	617b      	str	r3, [r7, #20]
	uint32_t* mode = &pAddrTable->value[pAddrTable->addr[p+2]];
 800e436:	79fb      	ldrb	r3, [r7, #7]
 800e438:	3302      	adds	r3, #2
 800e43a:	69fa      	ldr	r2, [r7, #28]
 800e43c:	009b      	lsls	r3, r3, #2
 800e43e:	4413      	add	r3, r2
 800e440:	685b      	ldr	r3, [r3, #4]
 800e442:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800e446:	009b      	lsls	r3, r3, #2
 800e448:	69fa      	ldr	r2, [r7, #28]
 800e44a:	4413      	add	r3, r2
 800e44c:	3304      	adds	r3, #4
 800e44e:	613b      	str	r3, [r7, #16]
	uint32_t* output = &pAddrTable->value[pAddrTable->addr[p+3]];
 800e450:	79fb      	ldrb	r3, [r7, #7]
 800e452:	3303      	adds	r3, #3
 800e454:	69fa      	ldr	r2, [r7, #28]
 800e456:	009b      	lsls	r3, r3, #2
 800e458:	4413      	add	r3, r2
 800e45a:	685b      	ldr	r3, [r3, #4]
 800e45c:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800e460:	009b      	lsls	r3, r3, #2
 800e462:	69fa      	ldr	r2, [r7, #28]
 800e464:	4413      	add	r3, r2
 800e466:	3304      	adds	r3, #4
 800e468:	60fb      	str	r3, [r7, #12]
	uint32_t* stat = &pAddrTable->value[pAddrTable->addr[p+4]];
 800e46a:	79fb      	ldrb	r3, [r7, #7]
 800e46c:	3304      	adds	r3, #4
 800e46e:	69fa      	ldr	r2, [r7, #28]
 800e470:	009b      	lsls	r3, r3, #2
 800e472:	4413      	add	r3, r2
 800e474:	685b      	ldr	r3, [r3, #4]
 800e476:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800e47a:	009b      	lsls	r3, r3, #2
 800e47c:	69fa      	ldr	r2, [r7, #28]
 800e47e:	4413      	add	r3, r2
 800e480:	3304      	adds	r3, #4
 800e482:	60bb      	str	r3, [r7, #8]

	switch ( *mode ){
 800e484:	693b      	ldr	r3, [r7, #16]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	2b05      	cmp	r3, #5
 800e48a:	d863      	bhi.n	800e554 <fb_condition+0x160>
 800e48c:	a201      	add	r2, pc, #4	; (adr r2, 800e494 <fb_condition+0xa0>)
 800e48e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e492:	bf00      	nop
 800e494:	0800e4ad 	.word	0x0800e4ad
 800e498:	0800e4c9 	.word	0x0800e4c9
 800e49c:	0800e4e5 	.word	0x0800e4e5
 800e4a0:	0800e501 	.word	0x0800e501
 800e4a4:	0800e51d 	.word	0x0800e51d
 800e4a8:	0800e539 	.word	0x0800e539
		case 0:
			if( *in1 > *in2)
 800e4ac:	69bb      	ldr	r3, [r7, #24]
 800e4ae:	681a      	ldr	r2, [r3, #0]
 800e4b0:	697b      	ldr	r3, [r7, #20]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	429a      	cmp	r2, r3
 800e4b6:	dd03      	ble.n	800e4c0 <fb_condition+0xcc>
				*output = 1;
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	2201      	movs	r2, #1
 800e4bc:	601a      	str	r2, [r3, #0]
			else
				*output = 0;
			break;
 800e4be:	e04d      	b.n	800e55c <fb_condition+0x168>
				*output = 0;
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	2200      	movs	r2, #0
 800e4c4:	601a      	str	r2, [r3, #0]
			break;
 800e4c6:	e049      	b.n	800e55c <fb_condition+0x168>

		case 1:
			if( *in1 >= *in2)
 800e4c8:	69bb      	ldr	r3, [r7, #24]
 800e4ca:	681a      	ldr	r2, [r3, #0]
 800e4cc:	697b      	ldr	r3, [r7, #20]
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	429a      	cmp	r2, r3
 800e4d2:	db03      	blt.n	800e4dc <fb_condition+0xe8>
				*output = 1;
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	2201      	movs	r2, #1
 800e4d8:	601a      	str	r2, [r3, #0]
			else
				*output = 0;
			break;
 800e4da:	e03f      	b.n	800e55c <fb_condition+0x168>
				*output = 0;
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	2200      	movs	r2, #0
 800e4e0:	601a      	str	r2, [r3, #0]
			break;
 800e4e2:	e03b      	b.n	800e55c <fb_condition+0x168>

		case 2:
			if( *in1 == *in2)
 800e4e4:	69bb      	ldr	r3, [r7, #24]
 800e4e6:	681a      	ldr	r2, [r3, #0]
 800e4e8:	697b      	ldr	r3, [r7, #20]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	429a      	cmp	r2, r3
 800e4ee:	d103      	bne.n	800e4f8 <fb_condition+0x104>
				*output = 1;
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	2201      	movs	r2, #1
 800e4f4:	601a      	str	r2, [r3, #0]
			else
				*output = 0;
			break;
 800e4f6:	e031      	b.n	800e55c <fb_condition+0x168>
				*output = 0;
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	2200      	movs	r2, #0
 800e4fc:	601a      	str	r2, [r3, #0]
			break;
 800e4fe:	e02d      	b.n	800e55c <fb_condition+0x168>

		case 3:
			if( *in1 != *in2)
 800e500:	69bb      	ldr	r3, [r7, #24]
 800e502:	681a      	ldr	r2, [r3, #0]
 800e504:	697b      	ldr	r3, [r7, #20]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	429a      	cmp	r2, r3
 800e50a:	d003      	beq.n	800e514 <fb_condition+0x120>
				*output = 1;
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	2201      	movs	r2, #1
 800e510:	601a      	str	r2, [r3, #0]
			else
				*output = 0;
			break;
 800e512:	e023      	b.n	800e55c <fb_condition+0x168>
				*output = 0;
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	2200      	movs	r2, #0
 800e518:	601a      	str	r2, [r3, #0]
			break;
 800e51a:	e01f      	b.n	800e55c <fb_condition+0x168>

		case 4:
			if( *in1 <= *in2)
 800e51c:	69bb      	ldr	r3, [r7, #24]
 800e51e:	681a      	ldr	r2, [r3, #0]
 800e520:	697b      	ldr	r3, [r7, #20]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	429a      	cmp	r2, r3
 800e526:	dc03      	bgt.n	800e530 <fb_condition+0x13c>
				*output = 1;
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	2201      	movs	r2, #1
 800e52c:	601a      	str	r2, [r3, #0]
			else
				*output = 0;
			break;
 800e52e:	e015      	b.n	800e55c <fb_condition+0x168>
				*output = 0;
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	2200      	movs	r2, #0
 800e534:	601a      	str	r2, [r3, #0]
			break;
 800e536:	e011      	b.n	800e55c <fb_condition+0x168>

		case 5:
			if( *in1 < *in2)
 800e538:	69bb      	ldr	r3, [r7, #24]
 800e53a:	681a      	ldr	r2, [r3, #0]
 800e53c:	697b      	ldr	r3, [r7, #20]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	429a      	cmp	r2, r3
 800e542:	da03      	bge.n	800e54c <fb_condition+0x158>
				*output = 1;
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	2201      	movs	r2, #1
 800e548:	601a      	str	r2, [r3, #0]
			else
				*output = 0;
			break;
 800e54a:	e007      	b.n	800e55c <fb_condition+0x168>
				*output = 0;
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	2200      	movs	r2, #0
 800e550:	601a      	str	r2, [r3, #0]
			break;
 800e552:	e003      	b.n	800e55c <fb_condition+0x168>

		default:
			*output = 0;
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	2200      	movs	r2, #0
 800e558:	601a      	str	r2, [r3, #0]
	}

}
 800e55a:	bf00      	nop
 800e55c:	bf00      	nop
 800e55e:	3720      	adds	r7, #32
 800e560:	46bd      	mov	sp, r7
 800e562:	bd80      	pop	{r7, pc}

0800e564 <create_fb_condition>:


type_fb_condition create_fb_condition(uint8_t mode){
 800e564:	b5b0      	push	{r4, r5, r7, lr}
 800e566:	b08a      	sub	sp, #40	; 0x28
 800e568:	af00      	add	r7, sp, #0
 800e56a:	6078      	str	r0, [r7, #4]
 800e56c:	460b      	mov	r3, r1
 800e56e:	70fb      	strb	r3, [r7, #3]
	s_Param* pAddrTable = get_paramAddrTable();
 800e570:	f7fd f9b6 	bl	800b8e0 <get_paramAddrTable>
 800e574:	6278      	str	r0, [r7, #36]	; 0x24
	type_fb_condition fb;

	fb.startParamIndex = pAddrTable->currentIndex;
 800e576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e578:	781b      	ldrb	r3, [r3, #0]
 800e57a:	737b      	strb	r3, [r7, #13]


	fb.fp.in1 = createParameter(0); //in1
 800e57c:	2000      	movs	r0, #0
 800e57e:	f7fd f9dd 	bl	800b93c <createParameter>
 800e582:	4603      	mov	r3, r0
 800e584:	613b      	str	r3, [r7, #16]
	fb.fp.in2 = createParameter(0); //in2
 800e586:	2000      	movs	r0, #0
 800e588:	f7fd f9d8 	bl	800b93c <createParameter>
 800e58c:	4603      	mov	r3, r0
 800e58e:	617b      	str	r3, [r7, #20]
	fb.fp.mode = createParameter(mode); //op
 800e590:	78fb      	ldrb	r3, [r7, #3]
 800e592:	4618      	mov	r0, r3
 800e594:	f7fd f9d2 	bl	800b93c <createParameter>
 800e598:	4603      	mov	r3, r0
 800e59a:	61bb      	str	r3, [r7, #24]
	fb.fp.out = createParameter(0); //output
 800e59c:	2000      	movs	r0, #0
 800e59e:	f7fd f9cd 	bl	800b93c <createParameter>
 800e5a2:	4603      	mov	r3, r0
 800e5a4:	61fb      	str	r3, [r7, #28]
	fb.fp.stat = createParameter(0); //output
 800e5a6:	2000      	movs	r0, #0
 800e5a8:	f7fd f9c8 	bl	800b93c <createParameter>
 800e5ac:	4603      	mov	r3, r0
 800e5ae:	623b      	str	r3, [r7, #32]

	fb.fb_index = writeToFBTable(fb_condition, fb.startParamIndex);
 800e5b0:	7b7b      	ldrb	r3, [r7, #13]
 800e5b2:	4619      	mov	r1, r3
 800e5b4:	4809      	ldr	r0, [pc, #36]	; (800e5dc <create_fb_condition+0x78>)
 800e5b6:	f7fd f99d 	bl	800b8f4 <writeToFBTable>
 800e5ba:	4603      	mov	r3, r0
 800e5bc:	733b      	strb	r3, [r7, #12]

	return fb;
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	461d      	mov	r5, r3
 800e5c2:	f107 040c 	add.w	r4, r7, #12
 800e5c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e5c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e5ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 800e5ce:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800e5d2:	6878      	ldr	r0, [r7, #4]
 800e5d4:	3728      	adds	r7, #40	; 0x28
 800e5d6:	46bd      	mov	sp, r7
 800e5d8:	bdb0      	pop	{r4, r5, r7, pc}
 800e5da:	bf00      	nop
 800e5dc:	0800e3f5 	.word	0x0800e3f5

0800e5e0 <fb_hsc_parser>:
#include "fb_hsc.h"
#include "adaptor.h"


//cyclic event fb
uint8_t fb_hsc_parser(uint8_t* p){
 800e5e0:	b590      	push	{r4, r7, lr}
 800e5e2:	b091      	sub	sp, #68	; 0x44
 800e5e4:	af02      	add	r7, sp, #8
 800e5e6:	62f8      	str	r0, [r7, #44]	; 0x2c
	uint32_t preset = (uint32_t) p[3] << 24 | p[4] << 16 | p[5] <<8 | p[6];
 800e5e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5ea:	3303      	adds	r3, #3
 800e5ec:	781b      	ldrb	r3, [r3, #0]
 800e5ee:	061b      	lsls	r3, r3, #24
 800e5f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e5f2:	3204      	adds	r2, #4
 800e5f4:	7812      	ldrb	r2, [r2, #0]
 800e5f6:	0412      	lsls	r2, r2, #16
 800e5f8:	4313      	orrs	r3, r2
 800e5fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e5fc:	3205      	adds	r2, #5
 800e5fe:	7812      	ldrb	r2, [r2, #0]
 800e600:	0212      	lsls	r2, r2, #8
 800e602:	4313      	orrs	r3, r2
 800e604:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e606:	3206      	adds	r2, #6
 800e608:	7812      	ldrb	r2, [r2, #0]
 800e60a:	4313      	orrs	r3, r2
 800e60c:	637b      	str	r3, [r7, #52]	; 0x34
	create_fb_hsc(p[0],p[1], p[2],preset);
 800e60e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e610:	7819      	ldrb	r1, [r3, #0]
 800e612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e614:	3301      	adds	r3, #1
 800e616:	781a      	ldrb	r2, [r3, #0]
 800e618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e61a:	3302      	adds	r3, #2
 800e61c:	781c      	ldrb	r4, [r3, #0]
 800e61e:	4638      	mov	r0, r7
 800e620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e622:	9300      	str	r3, [sp, #0]
 800e624:	4623      	mov	r3, r4
 800e626:	f000 f885 	bl	800e734 <create_fb_hsc>
	return 0;
 800e62a:	2300      	movs	r3, #0
}
 800e62c:	4618      	mov	r0, r3
 800e62e:	373c      	adds	r7, #60	; 0x3c
 800e630:	46bd      	mov	sp, r7
 800e632:	bd90      	pop	{r4, r7, pc}

0800e634 <fb_hsc>:

void fb_hsc(uint8_t p){
 800e634:	b580      	push	{r7, lr}
 800e636:	b08c      	sub	sp, #48	; 0x30
 800e638:	af00      	add	r7, sp, #0
 800e63a:	4603      	mov	r3, r0
 800e63c:	71fb      	strb	r3, [r7, #7]
	s_Param* pAddrTable = get_paramAddrTable();
 800e63e:	f7fd f94f 	bl	800b8e0 <get_paramAddrTable>
 800e642:	62f8      	str	r0, [r7, #44]	; 0x2c
	int32_t* rst = &pAddrTable->value[pAddrTable->addr[p]];
 800e644:	79fb      	ldrb	r3, [r7, #7]
 800e646:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e648:	009b      	lsls	r3, r3, #2
 800e64a:	4413      	add	r3, r2
 800e64c:	685b      	ldr	r3, [r3, #4]
 800e64e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800e652:	009b      	lsls	r3, r3, #2
 800e654:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e656:	4413      	add	r3, r2
 800e658:	3304      	adds	r3, #4
 800e65a:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t* ch1 = &pAddrTable->value[pAddrTable->addr[p+1]];
 800e65c:	79fb      	ldrb	r3, [r7, #7]
 800e65e:	3301      	adds	r3, #1
 800e660:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e662:	009b      	lsls	r3, r3, #2
 800e664:	4413      	add	r3, r2
 800e666:	685b      	ldr	r3, [r3, #4]
 800e668:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800e66c:	009b      	lsls	r3, r3, #2
 800e66e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e670:	4413      	add	r3, r2
 800e672:	3304      	adds	r3, #4
 800e674:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t* ch2 = &pAddrTable->value[pAddrTable->addr[p+2]];
 800e676:	79fb      	ldrb	r3, [r7, #7]
 800e678:	3302      	adds	r3, #2
 800e67a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e67c:	009b      	lsls	r3, r3, #2
 800e67e:	4413      	add	r3, r2
 800e680:	685b      	ldr	r3, [r3, #4]
 800e682:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800e686:	009b      	lsls	r3, r3, #2
 800e688:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e68a:	4413      	add	r3, r2
 800e68c:	3304      	adds	r3, #4
 800e68e:	623b      	str	r3, [r7, #32]
	int32_t* pf = &pAddrTable->value[pAddrTable->addr[p+3]];
 800e690:	79fb      	ldrb	r3, [r7, #7]
 800e692:	3303      	adds	r3, #3
 800e694:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e696:	009b      	lsls	r3, r3, #2
 800e698:	4413      	add	r3, r2
 800e69a:	685b      	ldr	r3, [r3, #4]
 800e69c:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800e6a0:	009b      	lsls	r3, r3, #2
 800e6a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e6a4:	4413      	add	r3, r2
 800e6a6:	3304      	adds	r3, #4
 800e6a8:	61fb      	str	r3, [r7, #28]
	int32_t* preset = &pAddrTable->value[pAddrTable->addr[p+4]];
 800e6aa:	79fb      	ldrb	r3, [r7, #7]
 800e6ac:	3304      	adds	r3, #4
 800e6ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e6b0:	009b      	lsls	r3, r3, #2
 800e6b2:	4413      	add	r3, r2
 800e6b4:	685b      	ldr	r3, [r3, #4]
 800e6b6:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800e6ba:	009b      	lsls	r3, r3, #2
 800e6bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e6be:	4413      	add	r3, r2
 800e6c0:	3304      	adds	r3, #4
 800e6c2:	61bb      	str	r3, [r7, #24]
	int32_t* mode = &pAddrTable->value[pAddrTable->addr[p+5]];
 800e6c4:	79fb      	ldrb	r3, [r7, #7]
 800e6c6:	3305      	adds	r3, #5
 800e6c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e6ca:	009b      	lsls	r3, r3, #2
 800e6cc:	4413      	add	r3, r2
 800e6ce:	685b      	ldr	r3, [r3, #4]
 800e6d0:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800e6d4:	009b      	lsls	r3, r3, #2
 800e6d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e6d8:	4413      	add	r3, r2
 800e6da:	3304      	adds	r3, #4
 800e6dc:	617b      	str	r3, [r7, #20]
	int32_t* out = &pAddrTable->value[pAddrTable->addr[p+6]];
 800e6de:	79fb      	ldrb	r3, [r7, #7]
 800e6e0:	3306      	adds	r3, #6
 800e6e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e6e4:	009b      	lsls	r3, r3, #2
 800e6e6:	4413      	add	r3, r2
 800e6e8:	685b      	ldr	r3, [r3, #4]
 800e6ea:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800e6ee:	009b      	lsls	r3, r3, #2
 800e6f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e6f2:	4413      	add	r3, r2
 800e6f4:	3304      	adds	r3, #4
 800e6f6:	613b      	str	r3, [r7, #16]
	int32_t* val = &pAddrTable->value[pAddrTable->addr[p+7]];
 800e6f8:	79fb      	ldrb	r3, [r7, #7]
 800e6fa:	3307      	adds	r3, #7
 800e6fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e6fe:	009b      	lsls	r3, r3, #2
 800e700:	4413      	add	r3, r2
 800e702:	685b      	ldr	r3, [r3, #4]
 800e704:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800e708:	009b      	lsls	r3, r3, #2
 800e70a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e70c:	4413      	add	r3, r2
 800e70e:	3304      	adds	r3, #4
 800e710:	60fb      	str	r3, [r7, #12]
	int32_t* stat = &pAddrTable->value[pAddrTable->addr[p+8]];
 800e712:	79fb      	ldrb	r3, [r7, #7]
 800e714:	3308      	adds	r3, #8
 800e716:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e718:	009b      	lsls	r3, r3, #2
 800e71a:	4413      	add	r3, r2
 800e71c:	685b      	ldr	r3, [r3, #4]
 800e71e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800e722:	009b      	lsls	r3, r3, #2
 800e724:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e726:	4413      	add	r3, r2
 800e728:	3304      	adds	r3, #4
 800e72a:	60bb      	str	r3, [r7, #8]

	//todo:implement
}
 800e72c:	bf00      	nop
 800e72e:	3730      	adds	r7, #48	; 0x30
 800e730:	46bd      	mov	sp, r7
 800e732:	bd80      	pop	{r7, pc}

0800e734 <create_fb_hsc>:

type_fb_hsc create_fb_hsc(uint8_t ch1,
								uint8_t ch2,
									uint8_t mode,
											uint32_t preset){
 800e734:	b5b0      	push	{r4, r5, r7, lr}
 800e736:	b08e      	sub	sp, #56	; 0x38
 800e738:	af00      	add	r7, sp, #0
 800e73a:	6078      	str	r0, [r7, #4]
 800e73c:	4608      	mov	r0, r1
 800e73e:	4611      	mov	r1, r2
 800e740:	461a      	mov	r2, r3
 800e742:	4603      	mov	r3, r0
 800e744:	70fb      	strb	r3, [r7, #3]
 800e746:	460b      	mov	r3, r1
 800e748:	70bb      	strb	r3, [r7, #2]
 800e74a:	4613      	mov	r3, r2
 800e74c:	707b      	strb	r3, [r7, #1]
	type_fb_hsc fb;

	s_Param* pAddrTable = get_paramAddrTable();
 800e74e:	f7fd f8c7 	bl	800b8e0 <get_paramAddrTable>
 800e752:	6378      	str	r0, [r7, #52]	; 0x34

	fb.startParamIndex = pAddrTable->currentIndex;
 800e754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e756:	781b      	ldrb	r3, [r3, #0]
 800e758:	737b      	strb	r3, [r7, #13]

	//input ports
	fb.fp.rst = createParameter(0);
 800e75a:	2000      	movs	r0, #0
 800e75c:	f7fd f8ee 	bl	800b93c <createParameter>
 800e760:	4603      	mov	r3, r0
 800e762:	613b      	str	r3, [r7, #16]
	fb.fp.ch1 = createParameter(ch1);
 800e764:	78fb      	ldrb	r3, [r7, #3]
 800e766:	4618      	mov	r0, r3
 800e768:	f7fd f8e8 	bl	800b93c <createParameter>
 800e76c:	4603      	mov	r3, r0
 800e76e:	617b      	str	r3, [r7, #20]
	fb.fp.ch2 = createParameter(ch2);
 800e770:	78bb      	ldrb	r3, [r7, #2]
 800e772:	4618      	mov	r0, r3
 800e774:	f7fd f8e2 	bl	800b93c <createParameter>
 800e778:	4603      	mov	r3, r0
 800e77a:	61bb      	str	r3, [r7, #24]
	fb.fp.pf = createParameter(0);
 800e77c:	2000      	movs	r0, #0
 800e77e:	f7fd f8dd 	bl	800b93c <createParameter>
 800e782:	4603      	mov	r3, r0
 800e784:	61fb      	str	r3, [r7, #28]
	fb.fp.preset = createParameter(preset);
 800e786:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e788:	4618      	mov	r0, r3
 800e78a:	f7fd f8d7 	bl	800b93c <createParameter>
 800e78e:	4603      	mov	r3, r0
 800e790:	623b      	str	r3, [r7, #32]
	fb.fp.mode = createParameter(mode);
 800e792:	787b      	ldrb	r3, [r7, #1]
 800e794:	4618      	mov	r0, r3
 800e796:	f7fd f8d1 	bl	800b93c <createParameter>
 800e79a:	4603      	mov	r3, r0
 800e79c:	627b      	str	r3, [r7, #36]	; 0x24

	//output ports
	fb.fp.out = createParameter(0);
 800e79e:	2000      	movs	r0, #0
 800e7a0:	f7fd f8cc 	bl	800b93c <createParameter>
 800e7a4:	4603      	mov	r3, r0
 800e7a6:	62bb      	str	r3, [r7, #40]	; 0x28
	fb.fp.val = createParameter(0);
 800e7a8:	2000      	movs	r0, #0
 800e7aa:	f7fd f8c7 	bl	800b93c <createParameter>
 800e7ae:	4603      	mov	r3, r0
 800e7b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	fb.fp.stat = createParameter(0);
 800e7b2:	2000      	movs	r0, #0
 800e7b4:	f7fd f8c2 	bl	800b93c <createParameter>
 800e7b8:	4603      	mov	r3, r0
 800e7ba:	633b      	str	r3, [r7, #48]	; 0x30

	//internal parameters

	fb.fb_index = writeToFBTable(fb_hsc, fb.startParamIndex);
 800e7bc:	7b7b      	ldrb	r3, [r7, #13]
 800e7be:	4619      	mov	r1, r3
 800e7c0:	480a      	ldr	r0, [pc, #40]	; (800e7ec <create_fb_hsc+0xb8>)
 800e7c2:	f7fd f897 	bl	800b8f4 <writeToFBTable>
 800e7c6:	4603      	mov	r3, r0
 800e7c8:	733b      	strb	r3, [r7, #12]

	return fb;
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	461d      	mov	r5, r3
 800e7ce:	f107 040c 	add.w	r4, r7, #12
 800e7d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e7d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e7d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e7d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e7da:	e894 0003 	ldmia.w	r4, {r0, r1}
 800e7de:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800e7e2:	6878      	ldr	r0, [r7, #4]
 800e7e4:	3738      	adds	r7, #56	; 0x38
 800e7e6:	46bd      	mov	sp, r7
 800e7e8:	bdb0      	pop	{r4, r5, r7, pc}
 800e7ea:	bf00      	nop
 800e7ec:	0800e635 	.word	0x0800e635

0800e7f0 <fb_number_parser>:
#include "stdint.h"
#include "mcCore.h"
#include "fb_number.h"

//output fb
uint8_t fb_number_parser(uint8_t* p){
 800e7f0:	b580      	push	{r7, lr}
 800e7f2:	b084      	sub	sp, #16
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	6078      	str	r0, [r7, #4]
	uint16_t value = (uint16_t) p[0] <<8 | p[1];
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	781b      	ldrb	r3, [r3, #0]
 800e7fc:	021b      	lsls	r3, r3, #8
 800e7fe:	b21a      	sxth	r2, r3
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	3301      	adds	r3, #1
 800e804:	781b      	ldrb	r3, [r3, #0]
 800e806:	b21b      	sxth	r3, r3
 800e808:	4313      	orrs	r3, r2
 800e80a:	b21b      	sxth	r3, r3
 800e80c:	81fb      	strh	r3, [r7, #14]
	create_fb_number(value);
 800e80e:	89fb      	ldrh	r3, [r7, #14]
 800e810:	4618      	mov	r0, r3
 800e812:	f000 f811 	bl	800e838 <create_fb_number>
	return 0;
 800e816:	2300      	movs	r3, #0
}
 800e818:	4618      	mov	r0, r3
 800e81a:	3710      	adds	r7, #16
 800e81c:	46bd      	mov	sp, r7
 800e81e:	bd80      	pop	{r7, pc}

0800e820 <fb_number>:

void fb_number(uint8_t p){
 800e820:	b480      	push	{r7}
 800e822:	b083      	sub	sp, #12
 800e824:	af00      	add	r7, sp, #0
 800e826:	4603      	mov	r3, r0
 800e828:	71fb      	strb	r3, [r7, #7]
}
 800e82a:	bf00      	nop
 800e82c:	370c      	adds	r7, #12
 800e82e:	46bd      	mov	sp, r7
 800e830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e834:	4770      	bx	lr
	...

0800e838 <create_fb_number>:

type_fb_number create_fb_number(uint16_t value){
 800e838:	b580      	push	{r7, lr}
 800e83a:	b086      	sub	sp, #24
 800e83c:	af00      	add	r7, sp, #0
 800e83e:	4603      	mov	r3, r0
 800e840:	80fb      	strh	r3, [r7, #6]
	type_fb_number fb;
	s_Param* pAddrTable = get_paramAddrTable();
 800e842:	f7fd f84d 	bl	800b8e0 <get_paramAddrTable>
 800e846:	6178      	str	r0, [r7, #20]

	fb.startParamIndex = pAddrTable->currentIndex;
 800e848:	697b      	ldr	r3, [r7, #20]
 800e84a:	781b      	ldrb	r3, [r3, #0]
 800e84c:	737b      	strb	r3, [r7, #13]

	fb.value = createParameter(value);
 800e84e:	88fb      	ldrh	r3, [r7, #6]
 800e850:	4618      	mov	r0, r3
 800e852:	f7fd f873 	bl	800b93c <createParameter>
 800e856:	4603      	mov	r3, r0
 800e858:	b29b      	uxth	r3, r3
 800e85a:	81fb      	strh	r3, [r7, #14]

	fb.fb_index = writeToFBTable(fb_number, fb.startParamIndex);
 800e85c:	7b7b      	ldrb	r3, [r7, #13]
 800e85e:	4619      	mov	r1, r3
 800e860:	4808      	ldr	r0, [pc, #32]	; (800e884 <create_fb_number+0x4c>)
 800e862:	f7fd f847 	bl	800b8f4 <writeToFBTable>
 800e866:	4603      	mov	r3, r0
 800e868:	733b      	strb	r3, [r7, #12]
	return fb;
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	613b      	str	r3, [r7, #16]
 800e86e:	2300      	movs	r3, #0
 800e870:	8a3a      	ldrh	r2, [r7, #16]
 800e872:	f362 030f 	bfi	r3, r2, #0, #16
 800e876:	8a7a      	ldrh	r2, [r7, #18]
 800e878:	f362 431f 	bfi	r3, r2, #16, #16
}
 800e87c:	4618      	mov	r0, r3
 800e87e:	3718      	adds	r7, #24
 800e880:	46bd      	mov	sp, r7
 800e882:	bd80      	pop	{r7, pc}
 800e884:	0800e821 	.word	0x0800e821

0800e888 <fb_rmhr_parser>:
#include "mcCore.h"
#include "modbus_slave.h"
#include <fb_rmhr.h>

//cyclic event fb
uint8_t fb_rmhr_parser(uint8_t* p){
 800e888:	b580      	push	{r7, lr}
 800e88a:	b08a      	sub	sp, #40	; 0x28
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	61f8      	str	r0, [r7, #28]
	uint8_t reg = p[0];
 800e890:	69fb      	ldr	r3, [r7, #28]
 800e892:	781b      	ldrb	r3, [r3, #0]
 800e894:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t mode = p[1];
 800e898:	69fb      	ldr	r3, [r7, #28]
 800e89a:	785b      	ldrb	r3, [r3, #1]
 800e89c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	create_fb_rmhr(reg, mode);
 800e8a0:	463b      	mov	r3, r7
 800e8a2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800e8a6:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 800e8aa:	4618      	mov	r0, r3
 800e8ac:	f000 f852 	bl	800e954 <create_fb_rmhr>
	return 0;
 800e8b0:	2300      	movs	r3, #0
}
 800e8b2:	4618      	mov	r0, r3
 800e8b4:	3728      	adds	r7, #40	; 0x28
 800e8b6:	46bd      	mov	sp, r7
 800e8b8:	bd80      	pop	{r7, pc}

0800e8ba <fb_rmhr>:

void fb_rmhr(uint8_t p){
 800e8ba:	b580      	push	{r7, lr}
 800e8bc:	b088      	sub	sp, #32
 800e8be:	af00      	add	r7, sp, #0
 800e8c0:	4603      	mov	r3, r0
 800e8c2:	71fb      	strb	r3, [r7, #7]
	s_Param* pAddrTable = get_paramAddrTable();
 800e8c4:	f7fd f80c 	bl	800b8e0 <get_paramAddrTable>
 800e8c8:	61f8      	str	r0, [r7, #28]
	uint32_t* reg = &pAddrTable->value[pAddrTable->addr[p]];
 800e8ca:	79fb      	ldrb	r3, [r7, #7]
 800e8cc:	69fa      	ldr	r2, [r7, #28]
 800e8ce:	009b      	lsls	r3, r3, #2
 800e8d0:	4413      	add	r3, r2
 800e8d2:	685b      	ldr	r3, [r3, #4]
 800e8d4:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800e8d8:	009b      	lsls	r3, r3, #2
 800e8da:	69fa      	ldr	r2, [r7, #28]
 800e8dc:	4413      	add	r3, r2
 800e8de:	3304      	adds	r3, #4
 800e8e0:	61bb      	str	r3, [r7, #24]
	uint32_t* mode = &pAddrTable->value[pAddrTable->addr[p+1]];
 800e8e2:	79fb      	ldrb	r3, [r7, #7]
 800e8e4:	3301      	adds	r3, #1
 800e8e6:	69fa      	ldr	r2, [r7, #28]
 800e8e8:	009b      	lsls	r3, r3, #2
 800e8ea:	4413      	add	r3, r2
 800e8ec:	685b      	ldr	r3, [r3, #4]
 800e8ee:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800e8f2:	009b      	lsls	r3, r3, #2
 800e8f4:	69fa      	ldr	r2, [r7, #28]
 800e8f6:	4413      	add	r3, r2
 800e8f8:	3304      	adds	r3, #4
 800e8fa:	617b      	str	r3, [r7, #20]
	uint32_t* dout = &pAddrTable->value[pAddrTable->addr[p+2]];
 800e8fc:	79fb      	ldrb	r3, [r7, #7]
 800e8fe:	3302      	adds	r3, #2
 800e900:	69fa      	ldr	r2, [r7, #28]
 800e902:	009b      	lsls	r3, r3, #2
 800e904:	4413      	add	r3, r2
 800e906:	685b      	ldr	r3, [r3, #4]
 800e908:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800e90c:	009b      	lsls	r3, r3, #2
 800e90e:	69fa      	ldr	r2, [r7, #28]
 800e910:	4413      	add	r3, r2
 800e912:	3304      	adds	r3, #4
 800e914:	613b      	str	r3, [r7, #16]
	uint32_t* stat = &pAddrTable->value[pAddrTable->addr[p+3]];
 800e916:	79fb      	ldrb	r3, [r7, #7]
 800e918:	3303      	adds	r3, #3
 800e91a:	69fa      	ldr	r2, [r7, #28]
 800e91c:	009b      	lsls	r3, r3, #2
 800e91e:	4413      	add	r3, r2
 800e920:	685b      	ldr	r3, [r3, #4]
 800e922:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800e926:	009b      	lsls	r3, r3, #2
 800e928:	69fa      	ldr	r2, [r7, #28]
 800e92a:	4413      	add	r3, r2
 800e92c:	3304      	adds	r3, #4
 800e92e:	60fb      	str	r3, [r7, #12]

	uint16_t* modbus_holding_reg = get_Modbus_Buf_Holding_Registers_40001();
 800e930:	f7fd fa84 	bl	800be3c <get_Modbus_Buf_Holding_Registers_40001>
 800e934:	4603      	mov	r3, r0
 800e936:	60bb      	str	r3, [r7, #8]

	*dout = modbus_holding_reg[*reg];
 800e938:	69bb      	ldr	r3, [r7, #24]
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	005b      	lsls	r3, r3, #1
 800e93e:	68ba      	ldr	r2, [r7, #8]
 800e940:	4413      	add	r3, r2
 800e942:	881b      	ldrh	r3, [r3, #0]
 800e944:	461a      	mov	r2, r3
 800e946:	693b      	ldr	r3, [r7, #16]
 800e948:	601a      	str	r2, [r3, #0]
}
 800e94a:	bf00      	nop
 800e94c:	3720      	adds	r7, #32
 800e94e:	46bd      	mov	sp, r7
 800e950:	bd80      	pop	{r7, pc}
	...

0800e954 <create_fb_rmhr>:

type_fb_rmhr create_fb_rmhr(uint8_t reg, uint8_t mode){
 800e954:	b5b0      	push	{r4, r5, r7, lr}
 800e956:	b088      	sub	sp, #32
 800e958:	af00      	add	r7, sp, #0
 800e95a:	6078      	str	r0, [r7, #4]
 800e95c:	460b      	mov	r3, r1
 800e95e:	70fb      	strb	r3, [r7, #3]
 800e960:	4613      	mov	r3, r2
 800e962:	70bb      	strb	r3, [r7, #2]
	type_fb_rmhr fb;

	s_Param* pAddrTable = get_paramAddrTable();
 800e964:	f7fc ffbc 	bl	800b8e0 <get_paramAddrTable>
 800e968:	61f8      	str	r0, [r7, #28]
	//uint8_t* p_modbus_slave_addr = get_MODBUS_SLAVE_ADDR();
	//if(addr > 1) *p_modbus_slave_addr = addr; //addr is set to 1 default, if something comes greater than 1, than new addr set to this new value

	fb.startParamIndex = pAddrTable->currentIndex;
 800e96a:	69fb      	ldr	r3, [r7, #28]
 800e96c:	781b      	ldrb	r3, [r3, #0]
 800e96e:	727b      	strb	r3, [r7, #9]

	fb.fp.reg = createParameter(reg);
 800e970:	78fb      	ldrb	r3, [r7, #3]
 800e972:	4618      	mov	r0, r3
 800e974:	f7fc ffe2 	bl	800b93c <createParameter>
 800e978:	4603      	mov	r3, r0
 800e97a:	60fb      	str	r3, [r7, #12]
	fb.fp.mode = createParameter(mode);
 800e97c:	78bb      	ldrb	r3, [r7, #2]
 800e97e:	4618      	mov	r0, r3
 800e980:	f7fc ffdc 	bl	800b93c <createParameter>
 800e984:	4603      	mov	r3, r0
 800e986:	613b      	str	r3, [r7, #16]
	fb.fp.dout = createParameter(0);
 800e988:	2000      	movs	r0, #0
 800e98a:	f7fc ffd7 	bl	800b93c <createParameter>
 800e98e:	4603      	mov	r3, r0
 800e990:	617b      	str	r3, [r7, #20]
	fb.fp.stat = createParameter(0);
 800e992:	2000      	movs	r0, #0
 800e994:	f7fc ffd2 	bl	800b93c <createParameter>
 800e998:	4603      	mov	r3, r0
 800e99a:	61bb      	str	r3, [r7, #24]

	fb.fb_index = writeToFBTable(fb_rmhr, fb.startParamIndex);
 800e99c:	7a7b      	ldrb	r3, [r7, #9]
 800e99e:	4619      	mov	r1, r3
 800e9a0:	4808      	ldr	r0, [pc, #32]	; (800e9c4 <create_fb_rmhr+0x70>)
 800e9a2:	f7fc ffa7 	bl	800b8f4 <writeToFBTable>
 800e9a6:	4603      	mov	r3, r0
 800e9a8:	723b      	strb	r3, [r7, #8]

	return fb;
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	461d      	mov	r5, r3
 800e9ae:	f107 0408 	add.w	r4, r7, #8
 800e9b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e9b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e9b6:	6823      	ldr	r3, [r4, #0]
 800e9b8:	602b      	str	r3, [r5, #0]
}
 800e9ba:	6878      	ldr	r0, [r7, #4]
 800e9bc:	3720      	adds	r7, #32
 800e9be:	46bd      	mov	sp, r7
 800e9c0:	bdb0      	pop	{r4, r5, r7, pc}
 800e9c2:	bf00      	nop
 800e9c4:	0800e8bb 	.word	0x0800e8bb

0800e9c8 <fb_step_parser>:
#define FB_STEP_ST_WAIT 0
#define FB_STEP_ST_ACTIVE 1
#define FB_STEP_ST_CHECK 2

//cyclic event fb
uint8_t fb_step_parser(uint8_t* p){
 800e9c8:	b580      	push	{r7, lr}
 800e9ca:	b08c      	sub	sp, #48	; 0x30
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	62f8      	str	r0, [r7, #44]	; 0x2c
	create_fb_step(p[0], p[1]);
 800e9d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9d2:	7819      	ldrb	r1, [r3, #0]
 800e9d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9d6:	3301      	adds	r3, #1
 800e9d8:	781a      	ldrb	r2, [r3, #0]
 800e9da:	463b      	mov	r3, r7
 800e9dc:	4618      	mov	r0, r3
 800e9de:	f000 f8ad 	bl	800eb3c <create_fb_step>
	return 0;
 800e9e2:	2300      	movs	r3, #0
}
 800e9e4:	4618      	mov	r0, r3
 800e9e6:	3730      	adds	r7, #48	; 0x30
 800e9e8:	46bd      	mov	sp, r7
 800e9ea:	bd80      	pop	{r7, pc}

0800e9ec <fb_step>:

void fb_step(uint8_t p){
 800e9ec:	b580      	push	{r7, lr}
 800e9ee:	b08c      	sub	sp, #48	; 0x30
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	4603      	mov	r3, r0
 800e9f4:	71fb      	strb	r3, [r7, #7]
	s_Param* pAddrTable = get_paramAddrTable();
 800e9f6:	f7fc ff73 	bl	800b8e0 <get_paramAddrTable>
 800e9fa:	62f8      	str	r0, [r7, #44]	; 0x2c
	uint32_t* tk_in1 = &pAddrTable->value[pAddrTable->addr[p]];
 800e9fc:	79fb      	ldrb	r3, [r7, #7]
 800e9fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ea00:	009b      	lsls	r3, r3, #2
 800ea02:	4413      	add	r3, r2
 800ea04:	685b      	ldr	r3, [r3, #4]
 800ea06:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800ea0a:	009b      	lsls	r3, r3, #2
 800ea0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ea0e:	4413      	add	r3, r2
 800ea10:	3304      	adds	r3, #4
 800ea12:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t* tk_in2 = &pAddrTable->value[pAddrTable->addr[p+1]];
 800ea14:	79fb      	ldrb	r3, [r7, #7]
 800ea16:	3301      	adds	r3, #1
 800ea18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ea1a:	009b      	lsls	r3, r3, #2
 800ea1c:	4413      	add	r3, r2
 800ea1e:	685b      	ldr	r3, [r3, #4]
 800ea20:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800ea24:	009b      	lsls	r3, r3, #2
 800ea26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ea28:	4413      	add	r3, r2
 800ea2a:	3304      	adds	r3, #4
 800ea2c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t* tr_in = &pAddrTable->value[pAddrTable->addr[p+2]];
 800ea2e:	79fb      	ldrb	r3, [r7, #7]
 800ea30:	3302      	adds	r3, #2
 800ea32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ea34:	009b      	lsls	r3, r3, #2
 800ea36:	4413      	add	r3, r2
 800ea38:	685b      	ldr	r3, [r3, #4]
 800ea3a:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800ea3e:	009b      	lsls	r3, r3, #2
 800ea40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ea42:	4413      	add	r3, r2
 800ea44:	3304      	adds	r3, #4
 800ea46:	623b      	str	r3, [r7, #32]
	uint32_t* param = &pAddrTable->value[pAddrTable->addr[p+3]];
 800ea48:	79fb      	ldrb	r3, [r7, #7]
 800ea4a:	3303      	adds	r3, #3
 800ea4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ea4e:	009b      	lsls	r3, r3, #2
 800ea50:	4413      	add	r3, r2
 800ea52:	685b      	ldr	r3, [r3, #4]
 800ea54:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800ea58:	009b      	lsls	r3, r3, #2
 800ea5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ea5c:	4413      	add	r3, r2
 800ea5e:	3304      	adds	r3, #4
 800ea60:	61fb      	str	r3, [r7, #28]
	uint32_t* mode = &pAddrTable->value[pAddrTable->addr[p+4]];
 800ea62:	79fb      	ldrb	r3, [r7, #7]
 800ea64:	3304      	adds	r3, #4
 800ea66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ea68:	009b      	lsls	r3, r3, #2
 800ea6a:	4413      	add	r3, r2
 800ea6c:	685b      	ldr	r3, [r3, #4]
 800ea6e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800ea72:	009b      	lsls	r3, r3, #2
 800ea74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ea76:	4413      	add	r3, r2
 800ea78:	3304      	adds	r3, #4
 800ea7a:	61bb      	str	r3, [r7, #24]
	uint32_t* tk_out = &pAddrTable->value[pAddrTable->addr[p+5]];
 800ea7c:	79fb      	ldrb	r3, [r7, #7]
 800ea7e:	3305      	adds	r3, #5
 800ea80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ea82:	009b      	lsls	r3, r3, #2
 800ea84:	4413      	add	r3, r2
 800ea86:	685b      	ldr	r3, [r3, #4]
 800ea88:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800ea8c:	009b      	lsls	r3, r3, #2
 800ea8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ea90:	4413      	add	r3, r2
 800ea92:	3304      	adds	r3, #4
 800ea94:	617b      	str	r3, [r7, #20]
	uint32_t* obv_out = &pAddrTable->value[pAddrTable->addr[p+6]];
 800ea96:	79fb      	ldrb	r3, [r7, #7]
 800ea98:	3306      	adds	r3, #6
 800ea9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ea9c:	009b      	lsls	r3, r3, #2
 800ea9e:	4413      	add	r3, r2
 800eaa0:	685b      	ldr	r3, [r3, #4]
 800eaa2:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800eaa6:	009b      	lsls	r3, r3, #2
 800eaa8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eaaa:	4413      	add	r3, r2
 800eaac:	3304      	adds	r3, #4
 800eaae:	613b      	str	r3, [r7, #16]
	uint32_t* state = &pAddrTable->value[pAddrTable->addr[p+7]];
 800eab0:	79fb      	ldrb	r3, [r7, #7]
 800eab2:	3307      	adds	r3, #7
 800eab4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eab6:	009b      	lsls	r3, r3, #2
 800eab8:	4413      	add	r3, r2
 800eaba:	685b      	ldr	r3, [r3, #4]
 800eabc:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800eac0:	009b      	lsls	r3, r3, #2
 800eac2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eac4:	4413      	add	r3, r2
 800eac6:	3304      	adds	r3, #4
 800eac8:	60fb      	str	r3, [r7, #12]

	//function block algorithm
	//function block algorithm
	switch(*state){
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	2b02      	cmp	r3, #2
 800ead0:	d021      	beq.n	800eb16 <fb_step+0x12a>
 800ead2:	2b02      	cmp	r3, #2
 800ead4:	d82d      	bhi.n	800eb32 <fb_step+0x146>
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d002      	beq.n	800eae0 <fb_step+0xf4>
 800eada:	2b01      	cmp	r3, #1
 800eadc:	d014      	beq.n	800eb08 <fb_step+0x11c>
			* state = FB_STEP_ST_WAIT; //switch to active state
		}
		break;

	}
}
 800eade:	e028      	b.n	800eb32 <fb_step+0x146>
		* tk_out = 0;
 800eae0:	697b      	ldr	r3, [r7, #20]
 800eae2:	2200      	movs	r2, #0
 800eae4:	601a      	str	r2, [r3, #0]
		* obv_out = 0;
 800eae6:	693b      	ldr	r3, [r7, #16]
 800eae8:	2200      	movs	r2, #0
 800eaea:	601a      	str	r2, [r3, #0]
		if(* tk_in1 > 0 | * tk_in2 > 0){
 800eaec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaee:	681a      	ldr	r2, [r3, #0]
 800eaf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	4313      	orrs	r3, r2
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d018      	beq.n	800eb2c <fb_step+0x140>
			* obv_out = 1;
 800eafa:	693b      	ldr	r3, [r7, #16]
 800eafc:	2201      	movs	r2, #1
 800eafe:	601a      	str	r2, [r3, #0]
			* state = FB_STEP_ST_ACTIVE; //switch to active state
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	2201      	movs	r2, #1
 800eb04:	601a      	str	r2, [r3, #0]
		break;
 800eb06:	e011      	b.n	800eb2c <fb_step+0x140>
		* obv_out = 1;
 800eb08:	693b      	ldr	r3, [r7, #16]
 800eb0a:	2201      	movs	r2, #1
 800eb0c:	601a      	str	r2, [r3, #0]
		* state = FB_STEP_ST_CHECK; //switch to active state
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	2202      	movs	r2, #2
 800eb12:	601a      	str	r2, [r3, #0]
		break;
 800eb14:	e00d      	b.n	800eb32 <fb_step+0x146>
		if(* tr_in > 0){
 800eb16:	6a3b      	ldr	r3, [r7, #32]
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d008      	beq.n	800eb30 <fb_step+0x144>
			* tk_out = 1;
 800eb1e:	697b      	ldr	r3, [r7, #20]
 800eb20:	2201      	movs	r2, #1
 800eb22:	601a      	str	r2, [r3, #0]
			* state = FB_STEP_ST_WAIT; //switch to active state
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	2200      	movs	r2, #0
 800eb28:	601a      	str	r2, [r3, #0]
		break;
 800eb2a:	e001      	b.n	800eb30 <fb_step+0x144>
		break;
 800eb2c:	bf00      	nop
 800eb2e:	e000      	b.n	800eb32 <fb_step+0x146>
		break;
 800eb30:	bf00      	nop
}
 800eb32:	bf00      	nop
 800eb34:	3730      	adds	r7, #48	; 0x30
 800eb36:	46bd      	mov	sp, r7
 800eb38:	bd80      	pop	{r7, pc}
	...

0800eb3c <create_fb_step>:

type_fb_step create_fb_step(uint8_t param, uint8_t mode){
 800eb3c:	b5b0      	push	{r4, r5, r7, lr}
 800eb3e:	b08c      	sub	sp, #48	; 0x30
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	6078      	str	r0, [r7, #4]
 800eb44:	460b      	mov	r3, r1
 800eb46:	70fb      	strb	r3, [r7, #3]
 800eb48:	4613      	mov	r3, r2
 800eb4a:	70bb      	strb	r3, [r7, #2]
	type_fb_step fb;

	s_Param* pAddrTable = get_paramAddrTable();
 800eb4c:	f7fc fec8 	bl	800b8e0 <get_paramAddrTable>
 800eb50:	62f8      	str	r0, [r7, #44]	; 0x2c

	fb.startParamIndex = pAddrTable->currentIndex;
 800eb52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb54:	781b      	ldrb	r3, [r3, #0]
 800eb56:	727b      	strb	r3, [r7, #9]

	fb.fp.tk_in1 = createParameter(0);
 800eb58:	2000      	movs	r0, #0
 800eb5a:	f7fc feef 	bl	800b93c <createParameter>
 800eb5e:	4603      	mov	r3, r0
 800eb60:	60fb      	str	r3, [r7, #12]
	fb.fp.tk_in2 = createParameter(0);
 800eb62:	2000      	movs	r0, #0
 800eb64:	f7fc feea 	bl	800b93c <createParameter>
 800eb68:	4603      	mov	r3, r0
 800eb6a:	613b      	str	r3, [r7, #16]
	fb.fp.tr_in = createParameter(0);
 800eb6c:	2000      	movs	r0, #0
 800eb6e:	f7fc fee5 	bl	800b93c <createParameter>
 800eb72:	4603      	mov	r3, r0
 800eb74:	617b      	str	r3, [r7, #20]
	fb.fp.param = createParameter(param);
 800eb76:	78fb      	ldrb	r3, [r7, #3]
 800eb78:	4618      	mov	r0, r3
 800eb7a:	f7fc fedf 	bl	800b93c <createParameter>
 800eb7e:	4603      	mov	r3, r0
 800eb80:	61bb      	str	r3, [r7, #24]
	fb.fp.mode = createParameter(mode);
 800eb82:	78bb      	ldrb	r3, [r7, #2]
 800eb84:	4618      	mov	r0, r3
 800eb86:	f7fc fed9 	bl	800b93c <createParameter>
 800eb8a:	4603      	mov	r3, r0
 800eb8c:	61fb      	str	r3, [r7, #28]
	fb.fp.tk_out = createParameter(0);
 800eb8e:	2000      	movs	r0, #0
 800eb90:	f7fc fed4 	bl	800b93c <createParameter>
 800eb94:	4603      	mov	r3, r0
 800eb96:	623b      	str	r3, [r7, #32]
	fb.fp.obv_out = createParameter(0);
 800eb98:	2000      	movs	r0, #0
 800eb9a:	f7fc fecf 	bl	800b93c <createParameter>
 800eb9e:	4603      	mov	r3, r0
 800eba0:	627b      	str	r3, [r7, #36]	; 0x24
	fb.fp.state = createParameter(param); //first state will have token initially
 800eba2:	78fb      	ldrb	r3, [r7, #3]
 800eba4:	4618      	mov	r0, r3
 800eba6:	f7fc fec9 	bl	800b93c <createParameter>
 800ebaa:	4603      	mov	r3, r0
 800ebac:	62bb      	str	r3, [r7, #40]	; 0x28

	fb.fb_index = writeToFBTable(fb_step, fb.startParamIndex);
 800ebae:	7a7b      	ldrb	r3, [r7, #9]
 800ebb0:	4619      	mov	r1, r3
 800ebb2:	4809      	ldr	r0, [pc, #36]	; (800ebd8 <create_fb_step+0x9c>)
 800ebb4:	f7fc fe9e 	bl	800b8f4 <writeToFBTable>
 800ebb8:	4603      	mov	r3, r0
 800ebba:	723b      	strb	r3, [r7, #8]

	return fb;
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	461d      	mov	r5, r3
 800ebc0:	f107 0408 	add.w	r4, r7, #8
 800ebc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ebc6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ebc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ebca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ebcc:	6823      	ldr	r3, [r4, #0]
 800ebce:	602b      	str	r3, [r5, #0]
}
 800ebd0:	6878      	ldr	r0, [r7, #4]
 800ebd2:	3730      	adds	r7, #48	; 0x30
 800ebd4:	46bd      	mov	sp, r7
 800ebd6:	bdb0      	pop	{r4, r5, r7, pc}
 800ebd8:	0800e9ed 	.word	0x0800e9ed

0800ebdc <fb_timer_tp_parser>:
#include "stdint.h"
#include "mcCore.h"
#include "fb_timer_tp.h"

//cyclic event fb
uint8_t fb_timer_tp_parser(uint8_t* p){
 800ebdc:	b580      	push	{r7, lr}
 800ebde:	b08c      	sub	sp, #48	; 0x30
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	6278      	str	r0, [r7, #36]	; 0x24
	uint32_t period = (uint32_t) p[0] << 24 | p[1] << 16 | p[2] <<8 | p[3];
 800ebe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebe6:	781b      	ldrb	r3, [r3, #0]
 800ebe8:	061b      	lsls	r3, r3, #24
 800ebea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ebec:	3201      	adds	r2, #1
 800ebee:	7812      	ldrb	r2, [r2, #0]
 800ebf0:	0412      	lsls	r2, r2, #16
 800ebf2:	4313      	orrs	r3, r2
 800ebf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ebf6:	3202      	adds	r2, #2
 800ebf8:	7812      	ldrb	r2, [r2, #0]
 800ebfa:	0212      	lsls	r2, r2, #8
 800ebfc:	4313      	orrs	r3, r2
 800ebfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec00:	3203      	adds	r2, #3
 800ec02:	7812      	ldrb	r2, [r2, #0]
 800ec04:	4313      	orrs	r3, r2
 800ec06:	62fb      	str	r3, [r7, #44]	; 0x2c
	create_fb_timer_tp(period);
 800ec08:	463b      	mov	r3, r7
 800ec0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ec0c:	4618      	mov	r0, r3
 800ec0e:	f000 f8c9 	bl	800eda4 <create_fb_timer_tp>
	return 0;
 800ec12:	2300      	movs	r3, #0
}
 800ec14:	4618      	mov	r0, r3
 800ec16:	3730      	adds	r7, #48	; 0x30
 800ec18:	46bd      	mov	sp, r7
 800ec1a:	bd80      	pop	{r7, pc}

0800ec1c <fb_timer_tp>:

void fb_timer_tp(uint8_t p){
 800ec1c:	b580      	push	{r7, lr}
 800ec1e:	b08c      	sub	sp, #48	; 0x30
 800ec20:	af00      	add	r7, sp, #0
 800ec22:	4603      	mov	r3, r0
 800ec24:	71fb      	strb	r3, [r7, #7]
	s_Param* pAddrTable = get_paramAddrTable();
 800ec26:	f7fc fe5b 	bl	800b8e0 <get_paramAddrTable>
 800ec2a:	62b8      	str	r0, [r7, #40]	; 0x28
	uint32_t delta = 0, tick = 0;
 800ec2c:	2300      	movs	r3, #0
 800ec2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ec30:	2300      	movs	r3, #0
 800ec32:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t* et = &pAddrTable->value[pAddrTable->addr[p]];
 800ec34:	79fb      	ldrb	r3, [r7, #7]
 800ec36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ec38:	009b      	lsls	r3, r3, #2
 800ec3a:	4413      	add	r3, r2
 800ec3c:	685b      	ldr	r3, [r3, #4]
 800ec3e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800ec42:	009b      	lsls	r3, r3, #2
 800ec44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ec46:	4413      	add	r3, r2
 800ec48:	3304      	adds	r3, #4
 800ec4a:	623b      	str	r3, [r7, #32]
	uint32_t* in = &pAddrTable->value[pAddrTable->addr[p+1]];
 800ec4c:	79fb      	ldrb	r3, [r7, #7]
 800ec4e:	3301      	adds	r3, #1
 800ec50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ec52:	009b      	lsls	r3, r3, #2
 800ec54:	4413      	add	r3, r2
 800ec56:	685b      	ldr	r3, [r3, #4]
 800ec58:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800ec5c:	009b      	lsls	r3, r3, #2
 800ec5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ec60:	4413      	add	r3, r2
 800ec62:	3304      	adds	r3, #4
 800ec64:	61fb      	str	r3, [r7, #28]
	uint32_t* pt = &pAddrTable->value[pAddrTable->addr[p+2]];
 800ec66:	79fb      	ldrb	r3, [r7, #7]
 800ec68:	3302      	adds	r3, #2
 800ec6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ec6c:	009b      	lsls	r3, r3, #2
 800ec6e:	4413      	add	r3, r2
 800ec70:	685b      	ldr	r3, [r3, #4]
 800ec72:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800ec76:	009b      	lsls	r3, r3, #2
 800ec78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ec7a:	4413      	add	r3, r2
 800ec7c:	3304      	adds	r3, #4
 800ec7e:	61bb      	str	r3, [r7, #24]
	uint32_t* q = &pAddrTable->value[pAddrTable->addr[p+3]];
 800ec80:	79fb      	ldrb	r3, [r7, #7]
 800ec82:	3303      	adds	r3, #3
 800ec84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ec86:	009b      	lsls	r3, r3, #2
 800ec88:	4413      	add	r3, r2
 800ec8a:	685b      	ldr	r3, [r3, #4]
 800ec8c:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800ec90:	009b      	lsls	r3, r3, #2
 800ec92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ec94:	4413      	add	r3, r2
 800ec96:	3304      	adds	r3, #4
 800ec98:	617b      	str	r3, [r7, #20]
	uint32_t* inold = &pAddrTable->value[pAddrTable->addr[p+4]];
 800ec9a:	79fb      	ldrb	r3, [r7, #7]
 800ec9c:	3304      	adds	r3, #4
 800ec9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eca0:	009b      	lsls	r3, r3, #2
 800eca2:	4413      	add	r3, r2
 800eca4:	685b      	ldr	r3, [r3, #4]
 800eca6:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800ecaa:	009b      	lsls	r3, r3, #2
 800ecac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ecae:	4413      	add	r3, r2
 800ecb0:	3304      	adds	r3, #4
 800ecb2:	613b      	str	r3, [r7, #16]
	uint32_t* counter = &pAddrTable->value[pAddrTable->addr[p+5]];
 800ecb4:	79fb      	ldrb	r3, [r7, #7]
 800ecb6:	3305      	adds	r3, #5
 800ecb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ecba:	009b      	lsls	r3, r3, #2
 800ecbc:	4413      	add	r3, r2
 800ecbe:	685b      	ldr	r3, [r3, #4]
 800ecc0:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800ecc4:	009b      	lsls	r3, r3, #2
 800ecc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ecc8:	4413      	add	r3, r2
 800ecca:	3304      	adds	r3, #4
 800eccc:	60fb      	str	r3, [r7, #12]
	uint32_t* state = &pAddrTable->value[pAddrTable->addr[p+6]];
 800ecce:	79fb      	ldrb	r3, [r7, #7]
 800ecd0:	3306      	adds	r3, #6
 800ecd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ecd4:	009b      	lsls	r3, r3, #2
 800ecd6:	4413      	add	r3, r2
 800ecd8:	685b      	ldr	r3, [r3, #4]
 800ecda:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800ecde:	009b      	lsls	r3, r3, #2
 800ece0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ece2:	4413      	add	r3, r2
 800ece4:	3304      	adds	r3, #4
 800ece6:	60bb      	str	r3, [r7, #8]

	tick = hal_get_tick();
 800ece8:	f7f1 fd6c 	bl	80007c4 <hal_get_tick>
 800ecec:	4603      	mov	r3, r0
 800ecee:	627b      	str	r3, [r7, #36]	; 0x24

	switch(*state){
 800ecf0:	68bb      	ldr	r3, [r7, #8]
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d002      	beq.n	800ecfe <fb_timer_tp+0xe2>
 800ecf8:	2b01      	cmp	r3, #1
 800ecfa:	d02e      	beq.n	800ed5a <fb_timer_tp+0x13e>
		if(delta > *pt){
			*state = 0;
		}
		break;
	}
}
 800ecfc:	e04d      	b.n	800ed9a <fb_timer_tp+0x17e>
		*q = 0;
 800ecfe:	697b      	ldr	r3, [r7, #20]
 800ed00:	2200      	movs	r2, #0
 800ed02:	601a      	str	r2, [r3, #0]
		if(*in == 0) {
 800ed04:	69fb      	ldr	r3, [r7, #28]
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d106      	bne.n	800ed1a <fb_timer_tp+0xfe>
			*et = 0;
 800ed0c:	6a3b      	ldr	r3, [r7, #32]
 800ed0e:	2200      	movs	r2, #0
 800ed10:	601a      	str	r2, [r3, #0]
			*inold = 0;
 800ed12:	693b      	ldr	r3, [r7, #16]
 800ed14:	2200      	movs	r2, #0
 800ed16:	601a      	str	r2, [r3, #0]
		break;
 800ed18:	e03c      	b.n	800ed94 <fb_timer_tp+0x178>
		else if(*inold == 0 & *in==1) //0->1 transition
 800ed1a:	693b      	ldr	r3, [r7, #16]
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	bf0c      	ite	eq
 800ed22:	2301      	moveq	r3, #1
 800ed24:	2300      	movne	r3, #0
 800ed26:	b2da      	uxtb	r2, r3
 800ed28:	69fb      	ldr	r3, [r7, #28]
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	2b01      	cmp	r3, #1
 800ed2e:	bf0c      	ite	eq
 800ed30:	2301      	moveq	r3, #1
 800ed32:	2300      	movne	r3, #0
 800ed34:	b2db      	uxtb	r3, r3
 800ed36:	4013      	ands	r3, r2
 800ed38:	b2db      	uxtb	r3, r3
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d02a      	beq.n	800ed94 <fb_timer_tp+0x178>
			*inold = *in;
 800ed3e:	69fb      	ldr	r3, [r7, #28]
 800ed40:	681a      	ldr	r2, [r3, #0]
 800ed42:	693b      	ldr	r3, [r7, #16]
 800ed44:	601a      	str	r2, [r3, #0]
			*counter = tick;
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed4a:	601a      	str	r2, [r3, #0]
			*q = 1;
 800ed4c:	697b      	ldr	r3, [r7, #20]
 800ed4e:	2201      	movs	r2, #1
 800ed50:	601a      	str	r2, [r3, #0]
			*state = 1; //active state
 800ed52:	68bb      	ldr	r3, [r7, #8]
 800ed54:	2201      	movs	r2, #1
 800ed56:	601a      	str	r2, [r3, #0]
		break;
 800ed58:	e01c      	b.n	800ed94 <fb_timer_tp+0x178>
		if(tick >= *counter){
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed60:	429a      	cmp	r2, r3
 800ed62:	d305      	bcc.n	800ed70 <fb_timer_tp+0x154>
			delta = tick - *counter;
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed6a:	1ad3      	subs	r3, r2, r3
 800ed6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ed6e:	e005      	b.n	800ed7c <fb_timer_tp+0x160>
			delta = tick + ((0xFFFFFFFF) - *counter);
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed76:	1ad3      	subs	r3, r2, r3
 800ed78:	3b01      	subs	r3, #1
 800ed7a:	62fb      	str	r3, [r7, #44]	; 0x2c
		*et = delta;
 800ed7c:	6a3b      	ldr	r3, [r7, #32]
 800ed7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ed80:	601a      	str	r2, [r3, #0]
		if(delta > *pt){
 800ed82:	69bb      	ldr	r3, [r7, #24]
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ed88:	429a      	cmp	r2, r3
 800ed8a:	d905      	bls.n	800ed98 <fb_timer_tp+0x17c>
			*state = 0;
 800ed8c:	68bb      	ldr	r3, [r7, #8]
 800ed8e:	2200      	movs	r2, #0
 800ed90:	601a      	str	r2, [r3, #0]
		break;
 800ed92:	e001      	b.n	800ed98 <fb_timer_tp+0x17c>
		break;
 800ed94:	bf00      	nop
 800ed96:	e000      	b.n	800ed9a <fb_timer_tp+0x17e>
		break;
 800ed98:	bf00      	nop
}
 800ed9a:	bf00      	nop
 800ed9c:	3730      	adds	r7, #48	; 0x30
 800ed9e:	46bd      	mov	sp, r7
 800eda0:	bd80      	pop	{r7, pc}
	...

0800eda4 <create_fb_timer_tp>:

type_fb_timer_tp create_fb_timer_tp(uint32_t pt){
 800eda4:	b5b0      	push	{r4, r5, r7, lr}
 800eda6:	b08c      	sub	sp, #48	; 0x30
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	6078      	str	r0, [r7, #4]
 800edac:	6039      	str	r1, [r7, #0]
	type_fb_timer_tp fb;

	s_Param* pAddrTable = get_paramAddrTable();
 800edae:	f7fc fd97 	bl	800b8e0 <get_paramAddrTable>
 800edb2:	62f8      	str	r0, [r7, #44]	; 0x2c

	fb.startParamIndex = pAddrTable->currentIndex;
 800edb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edb6:	781b      	ldrb	r3, [r3, #0]
 800edb8:	737b      	strb	r3, [r7, #13]

	fb.fp.et = createParameter(0);
 800edba:	2000      	movs	r0, #0
 800edbc:	f7fc fdbe 	bl	800b93c <createParameter>
 800edc0:	4603      	mov	r3, r0
 800edc2:	61fb      	str	r3, [r7, #28]
	fb.fp.in = createParameter(0);
 800edc4:	2000      	movs	r0, #0
 800edc6:	f7fc fdb9 	bl	800b93c <createParameter>
 800edca:	4603      	mov	r3, r0
 800edcc:	613b      	str	r3, [r7, #16]
	fb.fp.pt = createParameter(pt);
 800edce:	683b      	ldr	r3, [r7, #0]
 800edd0:	4618      	mov	r0, r3
 800edd2:	f7fc fdb3 	bl	800b93c <createParameter>
 800edd6:	4603      	mov	r3, r0
 800edd8:	617b      	str	r3, [r7, #20]
	fb.fp.q = createParameter(0);
 800edda:	2000      	movs	r0, #0
 800eddc:	f7fc fdae 	bl	800b93c <createParameter>
 800ede0:	4603      	mov	r3, r0
 800ede2:	61bb      	str	r3, [r7, #24]
	fb.fp.inold = createParameter(0);
 800ede4:	2000      	movs	r0, #0
 800ede6:	f7fc fda9 	bl	800b93c <createParameter>
 800edea:	4603      	mov	r3, r0
 800edec:	627b      	str	r3, [r7, #36]	; 0x24
	fb.fp.counter = createParameter(0);
 800edee:	2000      	movs	r0, #0
 800edf0:	f7fc fda4 	bl	800b93c <createParameter>
 800edf4:	4603      	mov	r3, r0
 800edf6:	62bb      	str	r3, [r7, #40]	; 0x28
	fb.fp.state = createParameter(0);
 800edf8:	2000      	movs	r0, #0
 800edfa:	f7fc fd9f 	bl	800b93c <createParameter>
 800edfe:	4603      	mov	r3, r0
 800ee00:	623b      	str	r3, [r7, #32]

	fb.fb_index = writeToFBTable(fb_timer_tp, fb.startParamIndex);
 800ee02:	7b7b      	ldrb	r3, [r7, #13]
 800ee04:	4619      	mov	r1, r3
 800ee06:	4809      	ldr	r0, [pc, #36]	; (800ee2c <create_fb_timer_tp+0x88>)
 800ee08:	f7fc fd74 	bl	800b8f4 <writeToFBTable>
 800ee0c:	4603      	mov	r3, r0
 800ee0e:	733b      	strb	r3, [r7, #12]

	return fb;
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	461d      	mov	r5, r3
 800ee14:	f107 040c 	add.w	r4, r7, #12
 800ee18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ee1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ee1c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800ee20:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 800ee24:	6878      	ldr	r0, [r7, #4]
 800ee26:	3730      	adds	r7, #48	; 0x30
 800ee28:	46bd      	mov	sp, r7
 800ee2a:	bdb0      	pop	{r4, r5, r7, pc}
 800ee2c:	0800ec1d 	.word	0x0800ec1d

0800ee30 <fb_wmhr_parser>:
#include "mcCore.h"
#include "modbus_slave.h"
#include <fb_wmhr.h>

//cyclic event fb
uint8_t fb_wmhr_parser(uint8_t* p){
 800ee30:	b580      	push	{r7, lr}
 800ee32:	b08c      	sub	sp, #48	; 0x30
 800ee34:	af00      	add	r7, sp, #0
 800ee36:	6278      	str	r0, [r7, #36]	; 0x24
	uint8_t reg = p[0];
 800ee38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee3a:	781b      	ldrb	r3, [r3, #0]
 800ee3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t mode = p[1];
 800ee40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee42:	785b      	ldrb	r3, [r3, #1]
 800ee44:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	create_fb_wmhr(reg, mode);
 800ee48:	463b      	mov	r3, r7
 800ee4a:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800ee4e:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800ee52:	4618      	mov	r0, r3
 800ee54:	f000 f892 	bl	800ef7c <create_fb_wmhr>
	return 0;
 800ee58:	2300      	movs	r3, #0
}
 800ee5a:	4618      	mov	r0, r3
 800ee5c:	3730      	adds	r7, #48	; 0x30
 800ee5e:	46bd      	mov	sp, r7
 800ee60:	bd80      	pop	{r7, pc}

0800ee62 <fb_wmhr>:

void fb_wmhr(uint8_t p){
 800ee62:	b580      	push	{r7, lr}
 800ee64:	b08a      	sub	sp, #40	; 0x28
 800ee66:	af00      	add	r7, sp, #0
 800ee68:	4603      	mov	r3, r0
 800ee6a:	71fb      	strb	r3, [r7, #7]
	s_Param* pAddrTable = get_paramAddrTable();
 800ee6c:	f7fc fd38 	bl	800b8e0 <get_paramAddrTable>
 800ee70:	6278      	str	r0, [r7, #36]	; 0x24
	uint32_t* reg = &pAddrTable->value[pAddrTable->addr[p]];
 800ee72:	79fb      	ldrb	r3, [r7, #7]
 800ee74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee76:	009b      	lsls	r3, r3, #2
 800ee78:	4413      	add	r3, r2
 800ee7a:	685b      	ldr	r3, [r3, #4]
 800ee7c:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800ee80:	009b      	lsls	r3, r3, #2
 800ee82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee84:	4413      	add	r3, r2
 800ee86:	3304      	adds	r3, #4
 800ee88:	623b      	str	r3, [r7, #32]
	uint32_t* din = &pAddrTable->value[pAddrTable->addr[p+1]];
 800ee8a:	79fb      	ldrb	r3, [r7, #7]
 800ee8c:	3301      	adds	r3, #1
 800ee8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee90:	009b      	lsls	r3, r3, #2
 800ee92:	4413      	add	r3, r2
 800ee94:	685b      	ldr	r3, [r3, #4]
 800ee96:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800ee9a:	009b      	lsls	r3, r3, #2
 800ee9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee9e:	4413      	add	r3, r2
 800eea0:	3304      	adds	r3, #4
 800eea2:	61fb      	str	r3, [r7, #28]
	uint32_t* wren = &pAddrTable->value[pAddrTable->addr[p+2]];
 800eea4:	79fb      	ldrb	r3, [r7, #7]
 800eea6:	3302      	adds	r3, #2
 800eea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eeaa:	009b      	lsls	r3, r3, #2
 800eeac:	4413      	add	r3, r2
 800eeae:	685b      	ldr	r3, [r3, #4]
 800eeb0:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800eeb4:	009b      	lsls	r3, r3, #2
 800eeb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eeb8:	4413      	add	r3, r2
 800eeba:	3304      	adds	r3, #4
 800eebc:	61bb      	str	r3, [r7, #24]
	uint32_t* mode = &pAddrTable->value[pAddrTable->addr[p+3]];
 800eebe:	79fb      	ldrb	r3, [r7, #7]
 800eec0:	3303      	adds	r3, #3
 800eec2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eec4:	009b      	lsls	r3, r3, #2
 800eec6:	4413      	add	r3, r2
 800eec8:	685b      	ldr	r3, [r3, #4]
 800eeca:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800eece:	009b      	lsls	r3, r3, #2
 800eed0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eed2:	4413      	add	r3, r2
 800eed4:	3304      	adds	r3, #4
 800eed6:	617b      	str	r3, [r7, #20]
	uint32_t* stat = &pAddrTable->value[pAddrTable->addr[p+4]];
 800eed8:	79fb      	ldrb	r3, [r7, #7]
 800eeda:	3304      	adds	r3, #4
 800eedc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eede:	009b      	lsls	r3, r3, #2
 800eee0:	4413      	add	r3, r2
 800eee2:	685b      	ldr	r3, [r3, #4]
 800eee4:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800eee8:	009b      	lsls	r3, r3, #2
 800eeea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eeec:	4413      	add	r3, r2
 800eeee:	3304      	adds	r3, #4
 800eef0:	613b      	str	r3, [r7, #16]
	uint32_t* state = &pAddrTable->value[pAddrTable->addr[p+5]];
 800eef2:	79fb      	ldrb	r3, [r7, #7]
 800eef4:	3305      	adds	r3, #5
 800eef6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eef8:	009b      	lsls	r3, r3, #2
 800eefa:	4413      	add	r3, r2
 800eefc:	685b      	ldr	r3, [r3, #4]
 800eefe:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800ef02:	009b      	lsls	r3, r3, #2
 800ef04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef06:	4413      	add	r3, r2
 800ef08:	3304      	adds	r3, #4
 800ef0a:	60fb      	str	r3, [r7, #12]

	uint16_t* modbus_holding_reg = get_Modbus_Buf_Holding_Registers_40001();
 800ef0c:	f7fc ff96 	bl	800be3c <get_Modbus_Buf_Holding_Registers_40001>
 800ef10:	4603      	mov	r3, r0
 800ef12:	60bb      	str	r3, [r7, #8]

	//detech rising edge of wren and then write to register
	switch(*state){
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	2b02      	cmp	r3, #2
 800ef1a:	d016      	beq.n	800ef4a <fb_wmhr+0xe8>
 800ef1c:	2b02      	cmp	r3, #2
 800ef1e:	d821      	bhi.n	800ef64 <fb_wmhr+0x102>
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d002      	beq.n	800ef2a <fb_wmhr+0xc8>
 800ef24:	2b01      	cmp	r3, #1
 800ef26:	d008      	beq.n	800ef3a <fb_wmhr+0xd8>
 800ef28:	e01c      	b.n	800ef64 <fb_wmhr+0x102>
		case 0:
			if(*wren == 0) *state = 1;
 800ef2a:	69bb      	ldr	r3, [r7, #24]
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d11c      	bne.n	800ef6c <fb_wmhr+0x10a>
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	2201      	movs	r2, #1
 800ef36:	601a      	str	r2, [r3, #0]
			break;
 800ef38:	e018      	b.n	800ef6c <fb_wmhr+0x10a>
		case 1:
			if(*wren == 1) *state = 2;
 800ef3a:	69bb      	ldr	r3, [r7, #24]
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	2b01      	cmp	r3, #1
 800ef40:	d116      	bne.n	800ef70 <fb_wmhr+0x10e>
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	2202      	movs	r2, #2
 800ef46:	601a      	str	r2, [r3, #0]
			break;
 800ef48:	e012      	b.n	800ef70 <fb_wmhr+0x10e>

		case 2:
			//write to register
			modbus_holding_reg[*reg] = *din;
 800ef4a:	69fb      	ldr	r3, [r7, #28]
 800ef4c:	6819      	ldr	r1, [r3, #0]
 800ef4e:	6a3b      	ldr	r3, [r7, #32]
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	005b      	lsls	r3, r3, #1
 800ef54:	68ba      	ldr	r2, [r7, #8]
 800ef56:	4413      	add	r3, r2
 800ef58:	b28a      	uxth	r2, r1
 800ef5a:	801a      	strh	r2, [r3, #0]
			*state = 0;
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	2200      	movs	r2, #0
 800ef60:	601a      	str	r2, [r3, #0]
			break;
 800ef62:	e006      	b.n	800ef72 <fb_wmhr+0x110>
		default:
			*state = 0;
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	2200      	movs	r2, #0
 800ef68:	601a      	str	r2, [r3, #0]
	}
}
 800ef6a:	e002      	b.n	800ef72 <fb_wmhr+0x110>
			break;
 800ef6c:	bf00      	nop
 800ef6e:	e000      	b.n	800ef72 <fb_wmhr+0x110>
			break;
 800ef70:	bf00      	nop
}
 800ef72:	bf00      	nop
 800ef74:	3728      	adds	r7, #40	; 0x28
 800ef76:	46bd      	mov	sp, r7
 800ef78:	bd80      	pop	{r7, pc}
	...

0800ef7c <create_fb_wmhr>:

type_fb_wmhr create_fb_wmhr(uint8_t reg, uint8_t mode){
 800ef7c:	b5b0      	push	{r4, r5, r7, lr}
 800ef7e:	b08a      	sub	sp, #40	; 0x28
 800ef80:	af00      	add	r7, sp, #0
 800ef82:	6078      	str	r0, [r7, #4]
 800ef84:	460b      	mov	r3, r1
 800ef86:	70fb      	strb	r3, [r7, #3]
 800ef88:	4613      	mov	r3, r2
 800ef8a:	70bb      	strb	r3, [r7, #2]
	type_fb_wmhr fb;

	s_Param* pAddrTable = get_paramAddrTable();
 800ef8c:	f7fc fca8 	bl	800b8e0 <get_paramAddrTable>
 800ef90:	6278      	str	r0, [r7, #36]	; 0x24
	//uint8_t* p_modbus_slave_addr = get_MODBUS_SLAVE_ADDR();
	//if(addr > 1) *p_modbus_slave_addr = addr; //addr is set to 1 default, if something comes greater than 1, than new addr set to this new value

	fb.startParamIndex = pAddrTable->currentIndex;
 800ef92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef94:	781b      	ldrb	r3, [r3, #0]
 800ef96:	727b      	strb	r3, [r7, #9]

	fb.fp.reg = createParameter(reg);
 800ef98:	78fb      	ldrb	r3, [r7, #3]
 800ef9a:	4618      	mov	r0, r3
 800ef9c:	f7fc fcce 	bl	800b93c <createParameter>
 800efa0:	4603      	mov	r3, r0
 800efa2:	60fb      	str	r3, [r7, #12]
	fb.fp.din = createParameter(0);
 800efa4:	2000      	movs	r0, #0
 800efa6:	f7fc fcc9 	bl	800b93c <createParameter>
 800efaa:	4603      	mov	r3, r0
 800efac:	613b      	str	r3, [r7, #16]
	fb.fp.wren = createParameter(0);
 800efae:	2000      	movs	r0, #0
 800efb0:	f7fc fcc4 	bl	800b93c <createParameter>
 800efb4:	4603      	mov	r3, r0
 800efb6:	617b      	str	r3, [r7, #20]
	fb.fp.mode = createParameter(mode);
 800efb8:	78bb      	ldrb	r3, [r7, #2]
 800efba:	4618      	mov	r0, r3
 800efbc:	f7fc fcbe 	bl	800b93c <createParameter>
 800efc0:	4603      	mov	r3, r0
 800efc2:	61bb      	str	r3, [r7, #24]
	fb.fp.stat = createParameter(0);
 800efc4:	2000      	movs	r0, #0
 800efc6:	f7fc fcb9 	bl	800b93c <createParameter>
 800efca:	4603      	mov	r3, r0
 800efcc:	61fb      	str	r3, [r7, #28]

	//internal
	fb.fp.state = createParameter(0);
 800efce:	2000      	movs	r0, #0
 800efd0:	f7fc fcb4 	bl	800b93c <createParameter>
 800efd4:	4603      	mov	r3, r0
 800efd6:	623b      	str	r3, [r7, #32]

	fb.fb_index = writeToFBTable(fb_wmhr, fb.startParamIndex);
 800efd8:	7a7b      	ldrb	r3, [r7, #9]
 800efda:	4619      	mov	r1, r3
 800efdc:	4809      	ldr	r0, [pc, #36]	; (800f004 <create_fb_wmhr+0x88>)
 800efde:	f7fc fc89 	bl	800b8f4 <writeToFBTable>
 800efe2:	4603      	mov	r3, r0
 800efe4:	723b      	strb	r3, [r7, #8]

	return fb;
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	461d      	mov	r5, r3
 800efea:	f107 0408 	add.w	r4, r7, #8
 800efee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800eff0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800eff2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800eff6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 800effa:	6878      	ldr	r0, [r7, #4]
 800effc:	3728      	adds	r7, #40	; 0x28
 800effe:	46bd      	mov	sp, r7
 800f000:	bdb0      	pop	{r4, r5, r7, pc}
 800f002:	bf00      	nop
 800f004:	0800ee63 	.word	0x0800ee63

0800f008 <memory_buf_init>:

// The hidden definition of our memory buffer structure


mbuf_handle_t memory_buf_init(MBUF_DATA_T* buffer, mbuf_size_t size, memory_type_t type)
{
 800f008:	b580      	push	{r7, lr}
 800f00a:	b084      	sub	sp, #16
 800f00c:	af00      	add	r7, sp, #0
 800f00e:	6078      	str	r0, [r7, #4]
 800f010:	460b      	mov	r3, r1
 800f012:	807b      	strh	r3, [r7, #2]
 800f014:	4613      	mov	r3, r2
 800f016:	707b      	strb	r3, [r7, #1]
	assert(buffer && size);
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d002      	beq.n	800f024 <memory_buf_init+0x1c>
 800f01e:	887b      	ldrh	r3, [r7, #2]
 800f020:	2b00      	cmp	r3, #0
 800f022:	d105      	bne.n	800f030 <memory_buf_init+0x28>
 800f024:	4b18      	ldr	r3, [pc, #96]	; (800f088 <memory_buf_init+0x80>)
 800f026:	4a19      	ldr	r2, [pc, #100]	; (800f08c <memory_buf_init+0x84>)
 800f028:	2110      	movs	r1, #16
 800f02a:	4819      	ldr	r0, [pc, #100]	; (800f090 <memory_buf_init+0x88>)
 800f02c:	f000 f8ee 	bl	800f20c <__assert_func>

	mbuf_handle_t mbuf = malloc(sizeof(memory_buf_t));
 800f030:	200c      	movs	r0, #12
 800f032:	f000 f95f 	bl	800f2f4 <malloc>
 800f036:	4603      	mov	r3, r0
 800f038:	60fb      	str	r3, [r7, #12]
	assert(mbuf);
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d105      	bne.n	800f04c <memory_buf_init+0x44>
 800f040:	4b14      	ldr	r3, [pc, #80]	; (800f094 <memory_buf_init+0x8c>)
 800f042:	4a12      	ldr	r2, [pc, #72]	; (800f08c <memory_buf_init+0x84>)
 800f044:	2113      	movs	r1, #19
 800f046:	4812      	ldr	r0, [pc, #72]	; (800f090 <memory_buf_init+0x88>)
 800f048:	f000 f8e0 	bl	800f20c <__assert_func>

	mbuf->memory_type = type;
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	787a      	ldrb	r2, [r7, #1]
 800f050:	72da      	strb	r2, [r3, #11]
	mbuf->buffer = buffer;
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	687a      	ldr	r2, [r7, #4]
 800f056:	601a      	str	r2, [r3, #0]
	mbuf->max = size;
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	887a      	ldrh	r2, [r7, #2]
 800f05c:	811a      	strh	r2, [r3, #8]
	memory_buf_reset(mbuf);
 800f05e:	68f8      	ldr	r0, [r7, #12]
 800f060:	f000 f81c 	bl	800f09c <memory_buf_reset>

	assert(memory_buf_empty(mbuf));
 800f064:	68f8      	ldr	r0, [r7, #12]
 800f066:	f000 f839 	bl	800f0dc <memory_buf_empty>
 800f06a:	4603      	mov	r3, r0
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d105      	bne.n	800f07c <memory_buf_init+0x74>
 800f070:	4b09      	ldr	r3, [pc, #36]	; (800f098 <memory_buf_init+0x90>)
 800f072:	4a06      	ldr	r2, [pc, #24]	; (800f08c <memory_buf_init+0x84>)
 800f074:	211a      	movs	r1, #26
 800f076:	4806      	ldr	r0, [pc, #24]	; (800f090 <memory_buf_init+0x88>)
 800f078:	f000 f8c8 	bl	800f20c <__assert_func>

	return mbuf;
 800f07c:	68fb      	ldr	r3, [r7, #12]
}
 800f07e:	4618      	mov	r0, r3
 800f080:	3710      	adds	r7, #16
 800f082:	46bd      	mov	sp, r7
 800f084:	bd80      	pop	{r7, pc}
 800f086:	bf00      	nop
 800f088:	080102c4 	.word	0x080102c4
 800f08c:	08012c00 	.word	0x08012c00
 800f090:	080102d4 	.word	0x080102d4
 800f094:	080102f0 	.word	0x080102f0
 800f098:	080102f8 	.word	0x080102f8

0800f09c <memory_buf_reset>:

void memory_buf_reset(mbuf_handle_t mbuf)
{
 800f09c:	b580      	push	{r7, lr}
 800f09e:	b082      	sub	sp, #8
 800f0a0:	af00      	add	r7, sp, #0
 800f0a2:	6078      	str	r0, [r7, #4]
    assert(mbuf);
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d105      	bne.n	800f0b6 <memory_buf_reset+0x1a>
 800f0aa:	4b09      	ldr	r3, [pc, #36]	; (800f0d0 <memory_buf_reset+0x34>)
 800f0ac:	4a09      	ldr	r2, [pc, #36]	; (800f0d4 <memory_buf_reset+0x38>)
 800f0ae:	2121      	movs	r1, #33	; 0x21
 800f0b0:	4809      	ldr	r0, [pc, #36]	; (800f0d8 <memory_buf_reset+0x3c>)
 800f0b2:	f000 f8ab 	bl	800f20c <__assert_func>

    mbuf->head = 0;
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	2200      	movs	r2, #0
 800f0ba:	809a      	strh	r2, [r3, #4]
    mbuf->tail = 0;
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	2200      	movs	r2, #0
 800f0c0:	80da      	strh	r2, [r3, #6]
    mbuf->full = 0;
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	2200      	movs	r2, #0
 800f0c6:	729a      	strb	r2, [r3, #10]
}
 800f0c8:	bf00      	nop
 800f0ca:	3708      	adds	r7, #8
 800f0cc:	46bd      	mov	sp, r7
 800f0ce:	bd80      	pop	{r7, pc}
 800f0d0:	080102f0 	.word	0x080102f0
 800f0d4:	08012c10 	.word	0x08012c10
 800f0d8:	080102d4 	.word	0x080102d4

0800f0dc <memory_buf_empty>:
	assert(mbuf);
	free(mbuf);
}

uint8_t memory_buf_empty(mbuf_handle_t mbuf)
{
 800f0dc:	b580      	push	{r7, lr}
 800f0de:	b082      	sub	sp, #8
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	6078      	str	r0, [r7, #4]
	assert(mbuf);
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d105      	bne.n	800f0f6 <memory_buf_empty+0x1a>
 800f0ea:	4b0c      	ldr	r3, [pc, #48]	; (800f11c <memory_buf_empty+0x40>)
 800f0ec:	4a0c      	ldr	r2, [pc, #48]	; (800f120 <memory_buf_empty+0x44>)
 800f0ee:	2137      	movs	r1, #55	; 0x37
 800f0f0:	480c      	ldr	r0, [pc, #48]	; (800f124 <memory_buf_empty+0x48>)
 800f0f2:	f000 f88b 	bl	800f20c <__assert_func>

	return (!mbuf->full && (mbuf->head == mbuf->tail));
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	7a9b      	ldrb	r3, [r3, #10]
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d107      	bne.n	800f10e <memory_buf_empty+0x32>
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	889a      	ldrh	r2, [r3, #4]
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	88db      	ldrh	r3, [r3, #6]
 800f106:	429a      	cmp	r2, r3
 800f108:	d101      	bne.n	800f10e <memory_buf_empty+0x32>
 800f10a:	2301      	movs	r3, #1
 800f10c:	e000      	b.n	800f110 <memory_buf_empty+0x34>
 800f10e:	2300      	movs	r3, #0
 800f110:	b2db      	uxtb	r3, r3
}
 800f112:	4618      	mov	r0, r3
 800f114:	3708      	adds	r7, #8
 800f116:	46bd      	mov	sp, r7
 800f118:	bd80      	pop	{r7, pc}
 800f11a:	bf00      	nop
 800f11c:	080102f0 	.word	0x080102f0
 800f120:	08012c24 	.word	0x08012c24
 800f124:	080102d4 	.word	0x080102d4

0800f128 <advance_pointer>:

	return size;
}

static void advance_pointer(mbuf_handle_t mbuf)
{
 800f128:	b580      	push	{r7, lr}
 800f12a:	b082      	sub	sp, #8
 800f12c:	af00      	add	r7, sp, #0
 800f12e:	6078      	str	r0, [r7, #4]
	assert(mbuf);
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	2b00      	cmp	r3, #0
 800f134:	d105      	bne.n	800f142 <advance_pointer+0x1a>
 800f136:	4b1e      	ldr	r3, [pc, #120]	; (800f1b0 <advance_pointer+0x88>)
 800f138:	4a1e      	ldr	r2, [pc, #120]	; (800f1b4 <advance_pointer+0x8c>)
 800f13a:	215a      	movs	r1, #90	; 0x5a
 800f13c:	481e      	ldr	r0, [pc, #120]	; (800f1b8 <advance_pointer+0x90>)
 800f13e:	f000 f865 	bl	800f20c <__assert_func>

	if(mbuf->memory_type == MEM_TYPE_FLAT_FIFO){
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	7adb      	ldrb	r3, [r3, #11]
 800f146:	2b01      	cmp	r3, #1
 800f148:	d02d      	beq.n	800f1a6 <advance_pointer+0x7e>

	}

	else{ //MEM_TYPE_CYCLIC_FIFO
		if(mbuf->full)
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	7a9b      	ldrb	r3, [r3, #10]
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d00e      	beq.n	800f170 <advance_pointer+0x48>
		{
			if (++(mbuf->tail) == mbuf->max)
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	88db      	ldrh	r3, [r3, #6]
 800f156:	3301      	adds	r3, #1
 800f158:	b29a      	uxth	r2, r3
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	80da      	strh	r2, [r3, #6]
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	88da      	ldrh	r2, [r3, #6]
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	891b      	ldrh	r3, [r3, #8]
 800f166:	429a      	cmp	r2, r3
 800f168:	d102      	bne.n	800f170 <advance_pointer+0x48>
			{
				mbuf->tail = 0;
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	2200      	movs	r2, #0
 800f16e:	80da      	strh	r2, [r3, #6]
			}
		}

		if (++(mbuf->head) == mbuf->max) //head is inceremented here
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	889b      	ldrh	r3, [r3, #4]
 800f174:	3301      	adds	r3, #1
 800f176:	b29a      	uxth	r2, r3
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	809a      	strh	r2, [r3, #4]
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	889a      	ldrh	r2, [r3, #4]
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	891b      	ldrh	r3, [r3, #8]
 800f184:	429a      	cmp	r2, r3
 800f186:	d102      	bne.n	800f18e <advance_pointer+0x66>
		{
			mbuf->head = 0;
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	2200      	movs	r2, #0
 800f18c:	809a      	strh	r2, [r3, #4]
		}
		mbuf->full = (mbuf->head == mbuf->tail);
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	889a      	ldrh	r2, [r3, #4]
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	88db      	ldrh	r3, [r3, #6]
 800f196:	429a      	cmp	r2, r3
 800f198:	bf0c      	ite	eq
 800f19a:	2301      	moveq	r3, #1
 800f19c:	2300      	movne	r3, #0
 800f19e:	b2db      	uxtb	r3, r3
 800f1a0:	461a      	mov	r2, r3
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	729a      	strb	r2, [r3, #10]
	}
}
 800f1a6:	bf00      	nop
 800f1a8:	3708      	adds	r7, #8
 800f1aa:	46bd      	mov	sp, r7
 800f1ac:	bd80      	pop	{r7, pc}
 800f1ae:	bf00      	nop
 800f1b0:	080102f0 	.word	0x080102f0
 800f1b4:	08012c38 	.word	0x08012c38
 800f1b8:	080102d4 	.word	0x080102d4

0800f1bc <memory_buf_put>:
		}
	}
}

void memory_buf_put(mbuf_handle_t mbuf, MBUF_DATA_T data)
{
 800f1bc:	b580      	push	{r7, lr}
 800f1be:	b082      	sub	sp, #8
 800f1c0:	af00      	add	r7, sp, #0
 800f1c2:	6078      	str	r0, [r7, #4]
 800f1c4:	460b      	mov	r3, r1
 800f1c6:	70fb      	strb	r3, [r7, #3]
	assert(mbuf && mbuf->buffer);
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d003      	beq.n	800f1d6 <memory_buf_put+0x1a>
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d105      	bne.n	800f1e2 <memory_buf_put+0x26>
 800f1d6:	4b0a      	ldr	r3, [pc, #40]	; (800f200 <memory_buf_put+0x44>)
 800f1d8:	4a0a      	ldr	r2, [pc, #40]	; (800f204 <memory_buf_put+0x48>)
 800f1da:	2184      	movs	r1, #132	; 0x84
 800f1dc:	480a      	ldr	r0, [pc, #40]	; (800f208 <memory_buf_put+0x4c>)
 800f1de:	f000 f815 	bl	800f20c <__assert_func>

    mbuf->buffer[mbuf->head] = data;
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	687a      	ldr	r2, [r7, #4]
 800f1e8:	8892      	ldrh	r2, [r2, #4]
 800f1ea:	4413      	add	r3, r2
 800f1ec:	78fa      	ldrb	r2, [r7, #3]
 800f1ee:	701a      	strb	r2, [r3, #0]

    advance_pointer(mbuf);
 800f1f0:	6878      	ldr	r0, [r7, #4]
 800f1f2:	f7ff ff99 	bl	800f128 <advance_pointer>
}
 800f1f6:	bf00      	nop
 800f1f8:	3708      	adds	r7, #8
 800f1fa:	46bd      	mov	sp, r7
 800f1fc:	bd80      	pop	{r7, pc}
 800f1fe:	bf00      	nop
 800f200:	08010310 	.word	0x08010310
 800f204:	08012c48 	.word	0x08012c48
 800f208:	080102d4 	.word	0x080102d4

0800f20c <__assert_func>:
 800f20c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f20e:	4614      	mov	r4, r2
 800f210:	461a      	mov	r2, r3
 800f212:	4b09      	ldr	r3, [pc, #36]	; (800f238 <__assert_func+0x2c>)
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	4605      	mov	r5, r0
 800f218:	68d8      	ldr	r0, [r3, #12]
 800f21a:	b14c      	cbz	r4, 800f230 <__assert_func+0x24>
 800f21c:	4b07      	ldr	r3, [pc, #28]	; (800f23c <__assert_func+0x30>)
 800f21e:	9100      	str	r1, [sp, #0]
 800f220:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f224:	4906      	ldr	r1, [pc, #24]	; (800f240 <__assert_func+0x34>)
 800f226:	462b      	mov	r3, r5
 800f228:	f000 f814 	bl	800f254 <fiprintf>
 800f22c:	f000 fd1c 	bl	800fc68 <abort>
 800f230:	4b04      	ldr	r3, [pc, #16]	; (800f244 <__assert_func+0x38>)
 800f232:	461c      	mov	r4, r3
 800f234:	e7f3      	b.n	800f21e <__assert_func+0x12>
 800f236:	bf00      	nop
 800f238:	200000ac 	.word	0x200000ac
 800f23c:	08012c57 	.word	0x08012c57
 800f240:	08012c64 	.word	0x08012c64
 800f244:	08012c92 	.word	0x08012c92

0800f248 <__errno>:
 800f248:	4b01      	ldr	r3, [pc, #4]	; (800f250 <__errno+0x8>)
 800f24a:	6818      	ldr	r0, [r3, #0]
 800f24c:	4770      	bx	lr
 800f24e:	bf00      	nop
 800f250:	200000ac 	.word	0x200000ac

0800f254 <fiprintf>:
 800f254:	b40e      	push	{r1, r2, r3}
 800f256:	b503      	push	{r0, r1, lr}
 800f258:	4601      	mov	r1, r0
 800f25a:	ab03      	add	r3, sp, #12
 800f25c:	4805      	ldr	r0, [pc, #20]	; (800f274 <fiprintf+0x20>)
 800f25e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f262:	6800      	ldr	r0, [r0, #0]
 800f264:	9301      	str	r3, [sp, #4]
 800f266:	f000 f929 	bl	800f4bc <_vfiprintf_r>
 800f26a:	b002      	add	sp, #8
 800f26c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f270:	b003      	add	sp, #12
 800f272:	4770      	bx	lr
 800f274:	200000ac 	.word	0x200000ac

0800f278 <__libc_init_array>:
 800f278:	b570      	push	{r4, r5, r6, lr}
 800f27a:	4d0d      	ldr	r5, [pc, #52]	; (800f2b0 <__libc_init_array+0x38>)
 800f27c:	4c0d      	ldr	r4, [pc, #52]	; (800f2b4 <__libc_init_array+0x3c>)
 800f27e:	1b64      	subs	r4, r4, r5
 800f280:	10a4      	asrs	r4, r4, #2
 800f282:	2600      	movs	r6, #0
 800f284:	42a6      	cmp	r6, r4
 800f286:	d109      	bne.n	800f29c <__libc_init_array+0x24>
 800f288:	4d0b      	ldr	r5, [pc, #44]	; (800f2b8 <__libc_init_array+0x40>)
 800f28a:	4c0c      	ldr	r4, [pc, #48]	; (800f2bc <__libc_init_array+0x44>)
 800f28c:	f001 f80e 	bl	80102ac <_init>
 800f290:	1b64      	subs	r4, r4, r5
 800f292:	10a4      	asrs	r4, r4, #2
 800f294:	2600      	movs	r6, #0
 800f296:	42a6      	cmp	r6, r4
 800f298:	d105      	bne.n	800f2a6 <__libc_init_array+0x2e>
 800f29a:	bd70      	pop	{r4, r5, r6, pc}
 800f29c:	f855 3b04 	ldr.w	r3, [r5], #4
 800f2a0:	4798      	blx	r3
 800f2a2:	3601      	adds	r6, #1
 800f2a4:	e7ee      	b.n	800f284 <__libc_init_array+0xc>
 800f2a6:	f855 3b04 	ldr.w	r3, [r5], #4
 800f2aa:	4798      	blx	r3
 800f2ac:	3601      	adds	r6, #1
 800f2ae:	e7f2      	b.n	800f296 <__libc_init_array+0x1e>
 800f2b0:	08012d58 	.word	0x08012d58
 800f2b4:	08012d58 	.word	0x08012d58
 800f2b8:	08012d58 	.word	0x08012d58
 800f2bc:	08012d5c 	.word	0x08012d5c

0800f2c0 <__itoa>:
 800f2c0:	1e93      	subs	r3, r2, #2
 800f2c2:	2b22      	cmp	r3, #34	; 0x22
 800f2c4:	b510      	push	{r4, lr}
 800f2c6:	460c      	mov	r4, r1
 800f2c8:	d904      	bls.n	800f2d4 <__itoa+0x14>
 800f2ca:	2300      	movs	r3, #0
 800f2cc:	700b      	strb	r3, [r1, #0]
 800f2ce:	461c      	mov	r4, r3
 800f2d0:	4620      	mov	r0, r4
 800f2d2:	bd10      	pop	{r4, pc}
 800f2d4:	2a0a      	cmp	r2, #10
 800f2d6:	d109      	bne.n	800f2ec <__itoa+0x2c>
 800f2d8:	2800      	cmp	r0, #0
 800f2da:	da07      	bge.n	800f2ec <__itoa+0x2c>
 800f2dc:	232d      	movs	r3, #45	; 0x2d
 800f2de:	700b      	strb	r3, [r1, #0]
 800f2e0:	4240      	negs	r0, r0
 800f2e2:	2101      	movs	r1, #1
 800f2e4:	4421      	add	r1, r4
 800f2e6:	f000 fbbd 	bl	800fa64 <__utoa>
 800f2ea:	e7f1      	b.n	800f2d0 <__itoa+0x10>
 800f2ec:	2100      	movs	r1, #0
 800f2ee:	e7f9      	b.n	800f2e4 <__itoa+0x24>

0800f2f0 <itoa>:
 800f2f0:	f7ff bfe6 	b.w	800f2c0 <__itoa>

0800f2f4 <malloc>:
 800f2f4:	4b02      	ldr	r3, [pc, #8]	; (800f300 <malloc+0xc>)
 800f2f6:	4601      	mov	r1, r0
 800f2f8:	6818      	ldr	r0, [r3, #0]
 800f2fa:	f000 b85b 	b.w	800f3b4 <_malloc_r>
 800f2fe:	bf00      	nop
 800f300:	200000ac 	.word	0x200000ac

0800f304 <memset>:
 800f304:	4402      	add	r2, r0
 800f306:	4603      	mov	r3, r0
 800f308:	4293      	cmp	r3, r2
 800f30a:	d100      	bne.n	800f30e <memset+0xa>
 800f30c:	4770      	bx	lr
 800f30e:	f803 1b01 	strb.w	r1, [r3], #1
 800f312:	e7f9      	b.n	800f308 <memset+0x4>

0800f314 <_free_r>:
 800f314:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f316:	2900      	cmp	r1, #0
 800f318:	d048      	beq.n	800f3ac <_free_r+0x98>
 800f31a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f31e:	9001      	str	r0, [sp, #4]
 800f320:	2b00      	cmp	r3, #0
 800f322:	f1a1 0404 	sub.w	r4, r1, #4
 800f326:	bfb8      	it	lt
 800f328:	18e4      	addlt	r4, r4, r3
 800f32a:	f000 fec3 	bl	80100b4 <__malloc_lock>
 800f32e:	4a20      	ldr	r2, [pc, #128]	; (800f3b0 <_free_r+0x9c>)
 800f330:	9801      	ldr	r0, [sp, #4]
 800f332:	6813      	ldr	r3, [r2, #0]
 800f334:	4615      	mov	r5, r2
 800f336:	b933      	cbnz	r3, 800f346 <_free_r+0x32>
 800f338:	6063      	str	r3, [r4, #4]
 800f33a:	6014      	str	r4, [r2, #0]
 800f33c:	b003      	add	sp, #12
 800f33e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f342:	f000 bebd 	b.w	80100c0 <__malloc_unlock>
 800f346:	42a3      	cmp	r3, r4
 800f348:	d90b      	bls.n	800f362 <_free_r+0x4e>
 800f34a:	6821      	ldr	r1, [r4, #0]
 800f34c:	1862      	adds	r2, r4, r1
 800f34e:	4293      	cmp	r3, r2
 800f350:	bf04      	itt	eq
 800f352:	681a      	ldreq	r2, [r3, #0]
 800f354:	685b      	ldreq	r3, [r3, #4]
 800f356:	6063      	str	r3, [r4, #4]
 800f358:	bf04      	itt	eq
 800f35a:	1852      	addeq	r2, r2, r1
 800f35c:	6022      	streq	r2, [r4, #0]
 800f35e:	602c      	str	r4, [r5, #0]
 800f360:	e7ec      	b.n	800f33c <_free_r+0x28>
 800f362:	461a      	mov	r2, r3
 800f364:	685b      	ldr	r3, [r3, #4]
 800f366:	b10b      	cbz	r3, 800f36c <_free_r+0x58>
 800f368:	42a3      	cmp	r3, r4
 800f36a:	d9fa      	bls.n	800f362 <_free_r+0x4e>
 800f36c:	6811      	ldr	r1, [r2, #0]
 800f36e:	1855      	adds	r5, r2, r1
 800f370:	42a5      	cmp	r5, r4
 800f372:	d10b      	bne.n	800f38c <_free_r+0x78>
 800f374:	6824      	ldr	r4, [r4, #0]
 800f376:	4421      	add	r1, r4
 800f378:	1854      	adds	r4, r2, r1
 800f37a:	42a3      	cmp	r3, r4
 800f37c:	6011      	str	r1, [r2, #0]
 800f37e:	d1dd      	bne.n	800f33c <_free_r+0x28>
 800f380:	681c      	ldr	r4, [r3, #0]
 800f382:	685b      	ldr	r3, [r3, #4]
 800f384:	6053      	str	r3, [r2, #4]
 800f386:	4421      	add	r1, r4
 800f388:	6011      	str	r1, [r2, #0]
 800f38a:	e7d7      	b.n	800f33c <_free_r+0x28>
 800f38c:	d902      	bls.n	800f394 <_free_r+0x80>
 800f38e:	230c      	movs	r3, #12
 800f390:	6003      	str	r3, [r0, #0]
 800f392:	e7d3      	b.n	800f33c <_free_r+0x28>
 800f394:	6825      	ldr	r5, [r4, #0]
 800f396:	1961      	adds	r1, r4, r5
 800f398:	428b      	cmp	r3, r1
 800f39a:	bf04      	itt	eq
 800f39c:	6819      	ldreq	r1, [r3, #0]
 800f39e:	685b      	ldreq	r3, [r3, #4]
 800f3a0:	6063      	str	r3, [r4, #4]
 800f3a2:	bf04      	itt	eq
 800f3a4:	1949      	addeq	r1, r1, r5
 800f3a6:	6021      	streq	r1, [r4, #0]
 800f3a8:	6054      	str	r4, [r2, #4]
 800f3aa:	e7c7      	b.n	800f33c <_free_r+0x28>
 800f3ac:	b003      	add	sp, #12
 800f3ae:	bd30      	pop	{r4, r5, pc}
 800f3b0:	20001f8c 	.word	0x20001f8c

0800f3b4 <_malloc_r>:
 800f3b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3b6:	1ccd      	adds	r5, r1, #3
 800f3b8:	f025 0503 	bic.w	r5, r5, #3
 800f3bc:	3508      	adds	r5, #8
 800f3be:	2d0c      	cmp	r5, #12
 800f3c0:	bf38      	it	cc
 800f3c2:	250c      	movcc	r5, #12
 800f3c4:	2d00      	cmp	r5, #0
 800f3c6:	4606      	mov	r6, r0
 800f3c8:	db01      	blt.n	800f3ce <_malloc_r+0x1a>
 800f3ca:	42a9      	cmp	r1, r5
 800f3cc:	d903      	bls.n	800f3d6 <_malloc_r+0x22>
 800f3ce:	230c      	movs	r3, #12
 800f3d0:	6033      	str	r3, [r6, #0]
 800f3d2:	2000      	movs	r0, #0
 800f3d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f3d6:	f000 fe6d 	bl	80100b4 <__malloc_lock>
 800f3da:	4921      	ldr	r1, [pc, #132]	; (800f460 <_malloc_r+0xac>)
 800f3dc:	680a      	ldr	r2, [r1, #0]
 800f3de:	4614      	mov	r4, r2
 800f3e0:	b99c      	cbnz	r4, 800f40a <_malloc_r+0x56>
 800f3e2:	4f20      	ldr	r7, [pc, #128]	; (800f464 <_malloc_r+0xb0>)
 800f3e4:	683b      	ldr	r3, [r7, #0]
 800f3e6:	b923      	cbnz	r3, 800f3f2 <_malloc_r+0x3e>
 800f3e8:	4621      	mov	r1, r4
 800f3ea:	4630      	mov	r0, r6
 800f3ec:	f000 fb2a 	bl	800fa44 <_sbrk_r>
 800f3f0:	6038      	str	r0, [r7, #0]
 800f3f2:	4629      	mov	r1, r5
 800f3f4:	4630      	mov	r0, r6
 800f3f6:	f000 fb25 	bl	800fa44 <_sbrk_r>
 800f3fa:	1c43      	adds	r3, r0, #1
 800f3fc:	d123      	bne.n	800f446 <_malloc_r+0x92>
 800f3fe:	230c      	movs	r3, #12
 800f400:	6033      	str	r3, [r6, #0]
 800f402:	4630      	mov	r0, r6
 800f404:	f000 fe5c 	bl	80100c0 <__malloc_unlock>
 800f408:	e7e3      	b.n	800f3d2 <_malloc_r+0x1e>
 800f40a:	6823      	ldr	r3, [r4, #0]
 800f40c:	1b5b      	subs	r3, r3, r5
 800f40e:	d417      	bmi.n	800f440 <_malloc_r+0x8c>
 800f410:	2b0b      	cmp	r3, #11
 800f412:	d903      	bls.n	800f41c <_malloc_r+0x68>
 800f414:	6023      	str	r3, [r4, #0]
 800f416:	441c      	add	r4, r3
 800f418:	6025      	str	r5, [r4, #0]
 800f41a:	e004      	b.n	800f426 <_malloc_r+0x72>
 800f41c:	6863      	ldr	r3, [r4, #4]
 800f41e:	42a2      	cmp	r2, r4
 800f420:	bf0c      	ite	eq
 800f422:	600b      	streq	r3, [r1, #0]
 800f424:	6053      	strne	r3, [r2, #4]
 800f426:	4630      	mov	r0, r6
 800f428:	f000 fe4a 	bl	80100c0 <__malloc_unlock>
 800f42c:	f104 000b 	add.w	r0, r4, #11
 800f430:	1d23      	adds	r3, r4, #4
 800f432:	f020 0007 	bic.w	r0, r0, #7
 800f436:	1ac2      	subs	r2, r0, r3
 800f438:	d0cc      	beq.n	800f3d4 <_malloc_r+0x20>
 800f43a:	1a1b      	subs	r3, r3, r0
 800f43c:	50a3      	str	r3, [r4, r2]
 800f43e:	e7c9      	b.n	800f3d4 <_malloc_r+0x20>
 800f440:	4622      	mov	r2, r4
 800f442:	6864      	ldr	r4, [r4, #4]
 800f444:	e7cc      	b.n	800f3e0 <_malloc_r+0x2c>
 800f446:	1cc4      	adds	r4, r0, #3
 800f448:	f024 0403 	bic.w	r4, r4, #3
 800f44c:	42a0      	cmp	r0, r4
 800f44e:	d0e3      	beq.n	800f418 <_malloc_r+0x64>
 800f450:	1a21      	subs	r1, r4, r0
 800f452:	4630      	mov	r0, r6
 800f454:	f000 faf6 	bl	800fa44 <_sbrk_r>
 800f458:	3001      	adds	r0, #1
 800f45a:	d1dd      	bne.n	800f418 <_malloc_r+0x64>
 800f45c:	e7cf      	b.n	800f3fe <_malloc_r+0x4a>
 800f45e:	bf00      	nop
 800f460:	20001f8c 	.word	0x20001f8c
 800f464:	20001f90 	.word	0x20001f90

0800f468 <__sfputc_r>:
 800f468:	6893      	ldr	r3, [r2, #8]
 800f46a:	3b01      	subs	r3, #1
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	b410      	push	{r4}
 800f470:	6093      	str	r3, [r2, #8]
 800f472:	da08      	bge.n	800f486 <__sfputc_r+0x1e>
 800f474:	6994      	ldr	r4, [r2, #24]
 800f476:	42a3      	cmp	r3, r4
 800f478:	db01      	blt.n	800f47e <__sfputc_r+0x16>
 800f47a:	290a      	cmp	r1, #10
 800f47c:	d103      	bne.n	800f486 <__sfputc_r+0x1e>
 800f47e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f482:	f000 bb31 	b.w	800fae8 <__swbuf_r>
 800f486:	6813      	ldr	r3, [r2, #0]
 800f488:	1c58      	adds	r0, r3, #1
 800f48a:	6010      	str	r0, [r2, #0]
 800f48c:	7019      	strb	r1, [r3, #0]
 800f48e:	4608      	mov	r0, r1
 800f490:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f494:	4770      	bx	lr

0800f496 <__sfputs_r>:
 800f496:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f498:	4606      	mov	r6, r0
 800f49a:	460f      	mov	r7, r1
 800f49c:	4614      	mov	r4, r2
 800f49e:	18d5      	adds	r5, r2, r3
 800f4a0:	42ac      	cmp	r4, r5
 800f4a2:	d101      	bne.n	800f4a8 <__sfputs_r+0x12>
 800f4a4:	2000      	movs	r0, #0
 800f4a6:	e007      	b.n	800f4b8 <__sfputs_r+0x22>
 800f4a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f4ac:	463a      	mov	r2, r7
 800f4ae:	4630      	mov	r0, r6
 800f4b0:	f7ff ffda 	bl	800f468 <__sfputc_r>
 800f4b4:	1c43      	adds	r3, r0, #1
 800f4b6:	d1f3      	bne.n	800f4a0 <__sfputs_r+0xa>
 800f4b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f4bc <_vfiprintf_r>:
 800f4bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4c0:	460d      	mov	r5, r1
 800f4c2:	b09d      	sub	sp, #116	; 0x74
 800f4c4:	4614      	mov	r4, r2
 800f4c6:	4698      	mov	r8, r3
 800f4c8:	4606      	mov	r6, r0
 800f4ca:	b118      	cbz	r0, 800f4d4 <_vfiprintf_r+0x18>
 800f4cc:	6983      	ldr	r3, [r0, #24]
 800f4ce:	b90b      	cbnz	r3, 800f4d4 <_vfiprintf_r+0x18>
 800f4d0:	f000 fcec 	bl	800feac <__sinit>
 800f4d4:	4b89      	ldr	r3, [pc, #548]	; (800f6fc <_vfiprintf_r+0x240>)
 800f4d6:	429d      	cmp	r5, r3
 800f4d8:	d11b      	bne.n	800f512 <_vfiprintf_r+0x56>
 800f4da:	6875      	ldr	r5, [r6, #4]
 800f4dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f4de:	07d9      	lsls	r1, r3, #31
 800f4e0:	d405      	bmi.n	800f4ee <_vfiprintf_r+0x32>
 800f4e2:	89ab      	ldrh	r3, [r5, #12]
 800f4e4:	059a      	lsls	r2, r3, #22
 800f4e6:	d402      	bmi.n	800f4ee <_vfiprintf_r+0x32>
 800f4e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f4ea:	f000 fd7d 	bl	800ffe8 <__retarget_lock_acquire_recursive>
 800f4ee:	89ab      	ldrh	r3, [r5, #12]
 800f4f0:	071b      	lsls	r3, r3, #28
 800f4f2:	d501      	bpl.n	800f4f8 <_vfiprintf_r+0x3c>
 800f4f4:	692b      	ldr	r3, [r5, #16]
 800f4f6:	b9eb      	cbnz	r3, 800f534 <_vfiprintf_r+0x78>
 800f4f8:	4629      	mov	r1, r5
 800f4fa:	4630      	mov	r0, r6
 800f4fc:	f000 fb46 	bl	800fb8c <__swsetup_r>
 800f500:	b1c0      	cbz	r0, 800f534 <_vfiprintf_r+0x78>
 800f502:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f504:	07dc      	lsls	r4, r3, #31
 800f506:	d50e      	bpl.n	800f526 <_vfiprintf_r+0x6a>
 800f508:	f04f 30ff 	mov.w	r0, #4294967295
 800f50c:	b01d      	add	sp, #116	; 0x74
 800f50e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f512:	4b7b      	ldr	r3, [pc, #492]	; (800f700 <_vfiprintf_r+0x244>)
 800f514:	429d      	cmp	r5, r3
 800f516:	d101      	bne.n	800f51c <_vfiprintf_r+0x60>
 800f518:	68b5      	ldr	r5, [r6, #8]
 800f51a:	e7df      	b.n	800f4dc <_vfiprintf_r+0x20>
 800f51c:	4b79      	ldr	r3, [pc, #484]	; (800f704 <_vfiprintf_r+0x248>)
 800f51e:	429d      	cmp	r5, r3
 800f520:	bf08      	it	eq
 800f522:	68f5      	ldreq	r5, [r6, #12]
 800f524:	e7da      	b.n	800f4dc <_vfiprintf_r+0x20>
 800f526:	89ab      	ldrh	r3, [r5, #12]
 800f528:	0598      	lsls	r0, r3, #22
 800f52a:	d4ed      	bmi.n	800f508 <_vfiprintf_r+0x4c>
 800f52c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f52e:	f000 fd5c 	bl	800ffea <__retarget_lock_release_recursive>
 800f532:	e7e9      	b.n	800f508 <_vfiprintf_r+0x4c>
 800f534:	2300      	movs	r3, #0
 800f536:	9309      	str	r3, [sp, #36]	; 0x24
 800f538:	2320      	movs	r3, #32
 800f53a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f53e:	f8cd 800c 	str.w	r8, [sp, #12]
 800f542:	2330      	movs	r3, #48	; 0x30
 800f544:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f708 <_vfiprintf_r+0x24c>
 800f548:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f54c:	f04f 0901 	mov.w	r9, #1
 800f550:	4623      	mov	r3, r4
 800f552:	469a      	mov	sl, r3
 800f554:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f558:	b10a      	cbz	r2, 800f55e <_vfiprintf_r+0xa2>
 800f55a:	2a25      	cmp	r2, #37	; 0x25
 800f55c:	d1f9      	bne.n	800f552 <_vfiprintf_r+0x96>
 800f55e:	ebba 0b04 	subs.w	fp, sl, r4
 800f562:	d00b      	beq.n	800f57c <_vfiprintf_r+0xc0>
 800f564:	465b      	mov	r3, fp
 800f566:	4622      	mov	r2, r4
 800f568:	4629      	mov	r1, r5
 800f56a:	4630      	mov	r0, r6
 800f56c:	f7ff ff93 	bl	800f496 <__sfputs_r>
 800f570:	3001      	adds	r0, #1
 800f572:	f000 80aa 	beq.w	800f6ca <_vfiprintf_r+0x20e>
 800f576:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f578:	445a      	add	r2, fp
 800f57a:	9209      	str	r2, [sp, #36]	; 0x24
 800f57c:	f89a 3000 	ldrb.w	r3, [sl]
 800f580:	2b00      	cmp	r3, #0
 800f582:	f000 80a2 	beq.w	800f6ca <_vfiprintf_r+0x20e>
 800f586:	2300      	movs	r3, #0
 800f588:	f04f 32ff 	mov.w	r2, #4294967295
 800f58c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f590:	f10a 0a01 	add.w	sl, sl, #1
 800f594:	9304      	str	r3, [sp, #16]
 800f596:	9307      	str	r3, [sp, #28]
 800f598:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f59c:	931a      	str	r3, [sp, #104]	; 0x68
 800f59e:	4654      	mov	r4, sl
 800f5a0:	2205      	movs	r2, #5
 800f5a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f5a6:	4858      	ldr	r0, [pc, #352]	; (800f708 <_vfiprintf_r+0x24c>)
 800f5a8:	f7f0 fe32 	bl	8000210 <memchr>
 800f5ac:	9a04      	ldr	r2, [sp, #16]
 800f5ae:	b9d8      	cbnz	r0, 800f5e8 <_vfiprintf_r+0x12c>
 800f5b0:	06d1      	lsls	r1, r2, #27
 800f5b2:	bf44      	itt	mi
 800f5b4:	2320      	movmi	r3, #32
 800f5b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f5ba:	0713      	lsls	r3, r2, #28
 800f5bc:	bf44      	itt	mi
 800f5be:	232b      	movmi	r3, #43	; 0x2b
 800f5c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f5c4:	f89a 3000 	ldrb.w	r3, [sl]
 800f5c8:	2b2a      	cmp	r3, #42	; 0x2a
 800f5ca:	d015      	beq.n	800f5f8 <_vfiprintf_r+0x13c>
 800f5cc:	9a07      	ldr	r2, [sp, #28]
 800f5ce:	4654      	mov	r4, sl
 800f5d0:	2000      	movs	r0, #0
 800f5d2:	f04f 0c0a 	mov.w	ip, #10
 800f5d6:	4621      	mov	r1, r4
 800f5d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f5dc:	3b30      	subs	r3, #48	; 0x30
 800f5de:	2b09      	cmp	r3, #9
 800f5e0:	d94e      	bls.n	800f680 <_vfiprintf_r+0x1c4>
 800f5e2:	b1b0      	cbz	r0, 800f612 <_vfiprintf_r+0x156>
 800f5e4:	9207      	str	r2, [sp, #28]
 800f5e6:	e014      	b.n	800f612 <_vfiprintf_r+0x156>
 800f5e8:	eba0 0308 	sub.w	r3, r0, r8
 800f5ec:	fa09 f303 	lsl.w	r3, r9, r3
 800f5f0:	4313      	orrs	r3, r2
 800f5f2:	9304      	str	r3, [sp, #16]
 800f5f4:	46a2      	mov	sl, r4
 800f5f6:	e7d2      	b.n	800f59e <_vfiprintf_r+0xe2>
 800f5f8:	9b03      	ldr	r3, [sp, #12]
 800f5fa:	1d19      	adds	r1, r3, #4
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	9103      	str	r1, [sp, #12]
 800f600:	2b00      	cmp	r3, #0
 800f602:	bfbb      	ittet	lt
 800f604:	425b      	neglt	r3, r3
 800f606:	f042 0202 	orrlt.w	r2, r2, #2
 800f60a:	9307      	strge	r3, [sp, #28]
 800f60c:	9307      	strlt	r3, [sp, #28]
 800f60e:	bfb8      	it	lt
 800f610:	9204      	strlt	r2, [sp, #16]
 800f612:	7823      	ldrb	r3, [r4, #0]
 800f614:	2b2e      	cmp	r3, #46	; 0x2e
 800f616:	d10c      	bne.n	800f632 <_vfiprintf_r+0x176>
 800f618:	7863      	ldrb	r3, [r4, #1]
 800f61a:	2b2a      	cmp	r3, #42	; 0x2a
 800f61c:	d135      	bne.n	800f68a <_vfiprintf_r+0x1ce>
 800f61e:	9b03      	ldr	r3, [sp, #12]
 800f620:	1d1a      	adds	r2, r3, #4
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	9203      	str	r2, [sp, #12]
 800f626:	2b00      	cmp	r3, #0
 800f628:	bfb8      	it	lt
 800f62a:	f04f 33ff 	movlt.w	r3, #4294967295
 800f62e:	3402      	adds	r4, #2
 800f630:	9305      	str	r3, [sp, #20]
 800f632:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f718 <_vfiprintf_r+0x25c>
 800f636:	7821      	ldrb	r1, [r4, #0]
 800f638:	2203      	movs	r2, #3
 800f63a:	4650      	mov	r0, sl
 800f63c:	f7f0 fde8 	bl	8000210 <memchr>
 800f640:	b140      	cbz	r0, 800f654 <_vfiprintf_r+0x198>
 800f642:	2340      	movs	r3, #64	; 0x40
 800f644:	eba0 000a 	sub.w	r0, r0, sl
 800f648:	fa03 f000 	lsl.w	r0, r3, r0
 800f64c:	9b04      	ldr	r3, [sp, #16]
 800f64e:	4303      	orrs	r3, r0
 800f650:	3401      	adds	r4, #1
 800f652:	9304      	str	r3, [sp, #16]
 800f654:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f658:	482c      	ldr	r0, [pc, #176]	; (800f70c <_vfiprintf_r+0x250>)
 800f65a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f65e:	2206      	movs	r2, #6
 800f660:	f7f0 fdd6 	bl	8000210 <memchr>
 800f664:	2800      	cmp	r0, #0
 800f666:	d03f      	beq.n	800f6e8 <_vfiprintf_r+0x22c>
 800f668:	4b29      	ldr	r3, [pc, #164]	; (800f710 <_vfiprintf_r+0x254>)
 800f66a:	bb1b      	cbnz	r3, 800f6b4 <_vfiprintf_r+0x1f8>
 800f66c:	9b03      	ldr	r3, [sp, #12]
 800f66e:	3307      	adds	r3, #7
 800f670:	f023 0307 	bic.w	r3, r3, #7
 800f674:	3308      	adds	r3, #8
 800f676:	9303      	str	r3, [sp, #12]
 800f678:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f67a:	443b      	add	r3, r7
 800f67c:	9309      	str	r3, [sp, #36]	; 0x24
 800f67e:	e767      	b.n	800f550 <_vfiprintf_r+0x94>
 800f680:	fb0c 3202 	mla	r2, ip, r2, r3
 800f684:	460c      	mov	r4, r1
 800f686:	2001      	movs	r0, #1
 800f688:	e7a5      	b.n	800f5d6 <_vfiprintf_r+0x11a>
 800f68a:	2300      	movs	r3, #0
 800f68c:	3401      	adds	r4, #1
 800f68e:	9305      	str	r3, [sp, #20]
 800f690:	4619      	mov	r1, r3
 800f692:	f04f 0c0a 	mov.w	ip, #10
 800f696:	4620      	mov	r0, r4
 800f698:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f69c:	3a30      	subs	r2, #48	; 0x30
 800f69e:	2a09      	cmp	r2, #9
 800f6a0:	d903      	bls.n	800f6aa <_vfiprintf_r+0x1ee>
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d0c5      	beq.n	800f632 <_vfiprintf_r+0x176>
 800f6a6:	9105      	str	r1, [sp, #20]
 800f6a8:	e7c3      	b.n	800f632 <_vfiprintf_r+0x176>
 800f6aa:	fb0c 2101 	mla	r1, ip, r1, r2
 800f6ae:	4604      	mov	r4, r0
 800f6b0:	2301      	movs	r3, #1
 800f6b2:	e7f0      	b.n	800f696 <_vfiprintf_r+0x1da>
 800f6b4:	ab03      	add	r3, sp, #12
 800f6b6:	9300      	str	r3, [sp, #0]
 800f6b8:	462a      	mov	r2, r5
 800f6ba:	4b16      	ldr	r3, [pc, #88]	; (800f714 <_vfiprintf_r+0x258>)
 800f6bc:	a904      	add	r1, sp, #16
 800f6be:	4630      	mov	r0, r6
 800f6c0:	f3af 8000 	nop.w
 800f6c4:	4607      	mov	r7, r0
 800f6c6:	1c78      	adds	r0, r7, #1
 800f6c8:	d1d6      	bne.n	800f678 <_vfiprintf_r+0x1bc>
 800f6ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f6cc:	07d9      	lsls	r1, r3, #31
 800f6ce:	d405      	bmi.n	800f6dc <_vfiprintf_r+0x220>
 800f6d0:	89ab      	ldrh	r3, [r5, #12]
 800f6d2:	059a      	lsls	r2, r3, #22
 800f6d4:	d402      	bmi.n	800f6dc <_vfiprintf_r+0x220>
 800f6d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f6d8:	f000 fc87 	bl	800ffea <__retarget_lock_release_recursive>
 800f6dc:	89ab      	ldrh	r3, [r5, #12]
 800f6de:	065b      	lsls	r3, r3, #25
 800f6e0:	f53f af12 	bmi.w	800f508 <_vfiprintf_r+0x4c>
 800f6e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f6e6:	e711      	b.n	800f50c <_vfiprintf_r+0x50>
 800f6e8:	ab03      	add	r3, sp, #12
 800f6ea:	9300      	str	r3, [sp, #0]
 800f6ec:	462a      	mov	r2, r5
 800f6ee:	4b09      	ldr	r3, [pc, #36]	; (800f714 <_vfiprintf_r+0x258>)
 800f6f0:	a904      	add	r1, sp, #16
 800f6f2:	4630      	mov	r0, r6
 800f6f4:	f000 f880 	bl	800f7f8 <_printf_i>
 800f6f8:	e7e4      	b.n	800f6c4 <_vfiprintf_r+0x208>
 800f6fa:	bf00      	nop
 800f6fc:	08012d10 	.word	0x08012d10
 800f700:	08012d30 	.word	0x08012d30
 800f704:	08012cf0 	.word	0x08012cf0
 800f708:	08012c98 	.word	0x08012c98
 800f70c:	08012ca2 	.word	0x08012ca2
 800f710:	00000000 	.word	0x00000000
 800f714:	0800f497 	.word	0x0800f497
 800f718:	08012c9e 	.word	0x08012c9e

0800f71c <_printf_common>:
 800f71c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f720:	4616      	mov	r6, r2
 800f722:	4699      	mov	r9, r3
 800f724:	688a      	ldr	r2, [r1, #8]
 800f726:	690b      	ldr	r3, [r1, #16]
 800f728:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f72c:	4293      	cmp	r3, r2
 800f72e:	bfb8      	it	lt
 800f730:	4613      	movlt	r3, r2
 800f732:	6033      	str	r3, [r6, #0]
 800f734:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f738:	4607      	mov	r7, r0
 800f73a:	460c      	mov	r4, r1
 800f73c:	b10a      	cbz	r2, 800f742 <_printf_common+0x26>
 800f73e:	3301      	adds	r3, #1
 800f740:	6033      	str	r3, [r6, #0]
 800f742:	6823      	ldr	r3, [r4, #0]
 800f744:	0699      	lsls	r1, r3, #26
 800f746:	bf42      	ittt	mi
 800f748:	6833      	ldrmi	r3, [r6, #0]
 800f74a:	3302      	addmi	r3, #2
 800f74c:	6033      	strmi	r3, [r6, #0]
 800f74e:	6825      	ldr	r5, [r4, #0]
 800f750:	f015 0506 	ands.w	r5, r5, #6
 800f754:	d106      	bne.n	800f764 <_printf_common+0x48>
 800f756:	f104 0a19 	add.w	sl, r4, #25
 800f75a:	68e3      	ldr	r3, [r4, #12]
 800f75c:	6832      	ldr	r2, [r6, #0]
 800f75e:	1a9b      	subs	r3, r3, r2
 800f760:	42ab      	cmp	r3, r5
 800f762:	dc26      	bgt.n	800f7b2 <_printf_common+0x96>
 800f764:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f768:	1e13      	subs	r3, r2, #0
 800f76a:	6822      	ldr	r2, [r4, #0]
 800f76c:	bf18      	it	ne
 800f76e:	2301      	movne	r3, #1
 800f770:	0692      	lsls	r2, r2, #26
 800f772:	d42b      	bmi.n	800f7cc <_printf_common+0xb0>
 800f774:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f778:	4649      	mov	r1, r9
 800f77a:	4638      	mov	r0, r7
 800f77c:	47c0      	blx	r8
 800f77e:	3001      	adds	r0, #1
 800f780:	d01e      	beq.n	800f7c0 <_printf_common+0xa4>
 800f782:	6823      	ldr	r3, [r4, #0]
 800f784:	68e5      	ldr	r5, [r4, #12]
 800f786:	6832      	ldr	r2, [r6, #0]
 800f788:	f003 0306 	and.w	r3, r3, #6
 800f78c:	2b04      	cmp	r3, #4
 800f78e:	bf08      	it	eq
 800f790:	1aad      	subeq	r5, r5, r2
 800f792:	68a3      	ldr	r3, [r4, #8]
 800f794:	6922      	ldr	r2, [r4, #16]
 800f796:	bf0c      	ite	eq
 800f798:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f79c:	2500      	movne	r5, #0
 800f79e:	4293      	cmp	r3, r2
 800f7a0:	bfc4      	itt	gt
 800f7a2:	1a9b      	subgt	r3, r3, r2
 800f7a4:	18ed      	addgt	r5, r5, r3
 800f7a6:	2600      	movs	r6, #0
 800f7a8:	341a      	adds	r4, #26
 800f7aa:	42b5      	cmp	r5, r6
 800f7ac:	d11a      	bne.n	800f7e4 <_printf_common+0xc8>
 800f7ae:	2000      	movs	r0, #0
 800f7b0:	e008      	b.n	800f7c4 <_printf_common+0xa8>
 800f7b2:	2301      	movs	r3, #1
 800f7b4:	4652      	mov	r2, sl
 800f7b6:	4649      	mov	r1, r9
 800f7b8:	4638      	mov	r0, r7
 800f7ba:	47c0      	blx	r8
 800f7bc:	3001      	adds	r0, #1
 800f7be:	d103      	bne.n	800f7c8 <_printf_common+0xac>
 800f7c0:	f04f 30ff 	mov.w	r0, #4294967295
 800f7c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f7c8:	3501      	adds	r5, #1
 800f7ca:	e7c6      	b.n	800f75a <_printf_common+0x3e>
 800f7cc:	18e1      	adds	r1, r4, r3
 800f7ce:	1c5a      	adds	r2, r3, #1
 800f7d0:	2030      	movs	r0, #48	; 0x30
 800f7d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f7d6:	4422      	add	r2, r4
 800f7d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f7dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f7e0:	3302      	adds	r3, #2
 800f7e2:	e7c7      	b.n	800f774 <_printf_common+0x58>
 800f7e4:	2301      	movs	r3, #1
 800f7e6:	4622      	mov	r2, r4
 800f7e8:	4649      	mov	r1, r9
 800f7ea:	4638      	mov	r0, r7
 800f7ec:	47c0      	blx	r8
 800f7ee:	3001      	adds	r0, #1
 800f7f0:	d0e6      	beq.n	800f7c0 <_printf_common+0xa4>
 800f7f2:	3601      	adds	r6, #1
 800f7f4:	e7d9      	b.n	800f7aa <_printf_common+0x8e>
	...

0800f7f8 <_printf_i>:
 800f7f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f7fc:	460c      	mov	r4, r1
 800f7fe:	4691      	mov	r9, r2
 800f800:	7e27      	ldrb	r7, [r4, #24]
 800f802:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f804:	2f78      	cmp	r7, #120	; 0x78
 800f806:	4680      	mov	r8, r0
 800f808:	469a      	mov	sl, r3
 800f80a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f80e:	d807      	bhi.n	800f820 <_printf_i+0x28>
 800f810:	2f62      	cmp	r7, #98	; 0x62
 800f812:	d80a      	bhi.n	800f82a <_printf_i+0x32>
 800f814:	2f00      	cmp	r7, #0
 800f816:	f000 80d8 	beq.w	800f9ca <_printf_i+0x1d2>
 800f81a:	2f58      	cmp	r7, #88	; 0x58
 800f81c:	f000 80a3 	beq.w	800f966 <_printf_i+0x16e>
 800f820:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f824:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f828:	e03a      	b.n	800f8a0 <_printf_i+0xa8>
 800f82a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f82e:	2b15      	cmp	r3, #21
 800f830:	d8f6      	bhi.n	800f820 <_printf_i+0x28>
 800f832:	a001      	add	r0, pc, #4	; (adr r0, 800f838 <_printf_i+0x40>)
 800f834:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800f838:	0800f891 	.word	0x0800f891
 800f83c:	0800f8a5 	.word	0x0800f8a5
 800f840:	0800f821 	.word	0x0800f821
 800f844:	0800f821 	.word	0x0800f821
 800f848:	0800f821 	.word	0x0800f821
 800f84c:	0800f821 	.word	0x0800f821
 800f850:	0800f8a5 	.word	0x0800f8a5
 800f854:	0800f821 	.word	0x0800f821
 800f858:	0800f821 	.word	0x0800f821
 800f85c:	0800f821 	.word	0x0800f821
 800f860:	0800f821 	.word	0x0800f821
 800f864:	0800f9b1 	.word	0x0800f9b1
 800f868:	0800f8d5 	.word	0x0800f8d5
 800f86c:	0800f993 	.word	0x0800f993
 800f870:	0800f821 	.word	0x0800f821
 800f874:	0800f821 	.word	0x0800f821
 800f878:	0800f9d3 	.word	0x0800f9d3
 800f87c:	0800f821 	.word	0x0800f821
 800f880:	0800f8d5 	.word	0x0800f8d5
 800f884:	0800f821 	.word	0x0800f821
 800f888:	0800f821 	.word	0x0800f821
 800f88c:	0800f99b 	.word	0x0800f99b
 800f890:	680b      	ldr	r3, [r1, #0]
 800f892:	1d1a      	adds	r2, r3, #4
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	600a      	str	r2, [r1, #0]
 800f898:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f89c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f8a0:	2301      	movs	r3, #1
 800f8a2:	e0a3      	b.n	800f9ec <_printf_i+0x1f4>
 800f8a4:	6825      	ldr	r5, [r4, #0]
 800f8a6:	6808      	ldr	r0, [r1, #0]
 800f8a8:	062e      	lsls	r6, r5, #24
 800f8aa:	f100 0304 	add.w	r3, r0, #4
 800f8ae:	d50a      	bpl.n	800f8c6 <_printf_i+0xce>
 800f8b0:	6805      	ldr	r5, [r0, #0]
 800f8b2:	600b      	str	r3, [r1, #0]
 800f8b4:	2d00      	cmp	r5, #0
 800f8b6:	da03      	bge.n	800f8c0 <_printf_i+0xc8>
 800f8b8:	232d      	movs	r3, #45	; 0x2d
 800f8ba:	426d      	negs	r5, r5
 800f8bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f8c0:	485e      	ldr	r0, [pc, #376]	; (800fa3c <_printf_i+0x244>)
 800f8c2:	230a      	movs	r3, #10
 800f8c4:	e019      	b.n	800f8fa <_printf_i+0x102>
 800f8c6:	f015 0f40 	tst.w	r5, #64	; 0x40
 800f8ca:	6805      	ldr	r5, [r0, #0]
 800f8cc:	600b      	str	r3, [r1, #0]
 800f8ce:	bf18      	it	ne
 800f8d0:	b22d      	sxthne	r5, r5
 800f8d2:	e7ef      	b.n	800f8b4 <_printf_i+0xbc>
 800f8d4:	680b      	ldr	r3, [r1, #0]
 800f8d6:	6825      	ldr	r5, [r4, #0]
 800f8d8:	1d18      	adds	r0, r3, #4
 800f8da:	6008      	str	r0, [r1, #0]
 800f8dc:	0628      	lsls	r0, r5, #24
 800f8de:	d501      	bpl.n	800f8e4 <_printf_i+0xec>
 800f8e0:	681d      	ldr	r5, [r3, #0]
 800f8e2:	e002      	b.n	800f8ea <_printf_i+0xf2>
 800f8e4:	0669      	lsls	r1, r5, #25
 800f8e6:	d5fb      	bpl.n	800f8e0 <_printf_i+0xe8>
 800f8e8:	881d      	ldrh	r5, [r3, #0]
 800f8ea:	4854      	ldr	r0, [pc, #336]	; (800fa3c <_printf_i+0x244>)
 800f8ec:	2f6f      	cmp	r7, #111	; 0x6f
 800f8ee:	bf0c      	ite	eq
 800f8f0:	2308      	moveq	r3, #8
 800f8f2:	230a      	movne	r3, #10
 800f8f4:	2100      	movs	r1, #0
 800f8f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f8fa:	6866      	ldr	r6, [r4, #4]
 800f8fc:	60a6      	str	r6, [r4, #8]
 800f8fe:	2e00      	cmp	r6, #0
 800f900:	bfa2      	ittt	ge
 800f902:	6821      	ldrge	r1, [r4, #0]
 800f904:	f021 0104 	bicge.w	r1, r1, #4
 800f908:	6021      	strge	r1, [r4, #0]
 800f90a:	b90d      	cbnz	r5, 800f910 <_printf_i+0x118>
 800f90c:	2e00      	cmp	r6, #0
 800f90e:	d04d      	beq.n	800f9ac <_printf_i+0x1b4>
 800f910:	4616      	mov	r6, r2
 800f912:	fbb5 f1f3 	udiv	r1, r5, r3
 800f916:	fb03 5711 	mls	r7, r3, r1, r5
 800f91a:	5dc7      	ldrb	r7, [r0, r7]
 800f91c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f920:	462f      	mov	r7, r5
 800f922:	42bb      	cmp	r3, r7
 800f924:	460d      	mov	r5, r1
 800f926:	d9f4      	bls.n	800f912 <_printf_i+0x11a>
 800f928:	2b08      	cmp	r3, #8
 800f92a:	d10b      	bne.n	800f944 <_printf_i+0x14c>
 800f92c:	6823      	ldr	r3, [r4, #0]
 800f92e:	07df      	lsls	r7, r3, #31
 800f930:	d508      	bpl.n	800f944 <_printf_i+0x14c>
 800f932:	6923      	ldr	r3, [r4, #16]
 800f934:	6861      	ldr	r1, [r4, #4]
 800f936:	4299      	cmp	r1, r3
 800f938:	bfde      	ittt	le
 800f93a:	2330      	movle	r3, #48	; 0x30
 800f93c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f940:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f944:	1b92      	subs	r2, r2, r6
 800f946:	6122      	str	r2, [r4, #16]
 800f948:	f8cd a000 	str.w	sl, [sp]
 800f94c:	464b      	mov	r3, r9
 800f94e:	aa03      	add	r2, sp, #12
 800f950:	4621      	mov	r1, r4
 800f952:	4640      	mov	r0, r8
 800f954:	f7ff fee2 	bl	800f71c <_printf_common>
 800f958:	3001      	adds	r0, #1
 800f95a:	d14c      	bne.n	800f9f6 <_printf_i+0x1fe>
 800f95c:	f04f 30ff 	mov.w	r0, #4294967295
 800f960:	b004      	add	sp, #16
 800f962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f966:	4835      	ldr	r0, [pc, #212]	; (800fa3c <_printf_i+0x244>)
 800f968:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f96c:	6823      	ldr	r3, [r4, #0]
 800f96e:	680e      	ldr	r6, [r1, #0]
 800f970:	061f      	lsls	r7, r3, #24
 800f972:	f856 5b04 	ldr.w	r5, [r6], #4
 800f976:	600e      	str	r6, [r1, #0]
 800f978:	d514      	bpl.n	800f9a4 <_printf_i+0x1ac>
 800f97a:	07d9      	lsls	r1, r3, #31
 800f97c:	bf44      	itt	mi
 800f97e:	f043 0320 	orrmi.w	r3, r3, #32
 800f982:	6023      	strmi	r3, [r4, #0]
 800f984:	b91d      	cbnz	r5, 800f98e <_printf_i+0x196>
 800f986:	6823      	ldr	r3, [r4, #0]
 800f988:	f023 0320 	bic.w	r3, r3, #32
 800f98c:	6023      	str	r3, [r4, #0]
 800f98e:	2310      	movs	r3, #16
 800f990:	e7b0      	b.n	800f8f4 <_printf_i+0xfc>
 800f992:	6823      	ldr	r3, [r4, #0]
 800f994:	f043 0320 	orr.w	r3, r3, #32
 800f998:	6023      	str	r3, [r4, #0]
 800f99a:	2378      	movs	r3, #120	; 0x78
 800f99c:	4828      	ldr	r0, [pc, #160]	; (800fa40 <_printf_i+0x248>)
 800f99e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f9a2:	e7e3      	b.n	800f96c <_printf_i+0x174>
 800f9a4:	065e      	lsls	r6, r3, #25
 800f9a6:	bf48      	it	mi
 800f9a8:	b2ad      	uxthmi	r5, r5
 800f9aa:	e7e6      	b.n	800f97a <_printf_i+0x182>
 800f9ac:	4616      	mov	r6, r2
 800f9ae:	e7bb      	b.n	800f928 <_printf_i+0x130>
 800f9b0:	680b      	ldr	r3, [r1, #0]
 800f9b2:	6826      	ldr	r6, [r4, #0]
 800f9b4:	6960      	ldr	r0, [r4, #20]
 800f9b6:	1d1d      	adds	r5, r3, #4
 800f9b8:	600d      	str	r5, [r1, #0]
 800f9ba:	0635      	lsls	r5, r6, #24
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	d501      	bpl.n	800f9c4 <_printf_i+0x1cc>
 800f9c0:	6018      	str	r0, [r3, #0]
 800f9c2:	e002      	b.n	800f9ca <_printf_i+0x1d2>
 800f9c4:	0671      	lsls	r1, r6, #25
 800f9c6:	d5fb      	bpl.n	800f9c0 <_printf_i+0x1c8>
 800f9c8:	8018      	strh	r0, [r3, #0]
 800f9ca:	2300      	movs	r3, #0
 800f9cc:	6123      	str	r3, [r4, #16]
 800f9ce:	4616      	mov	r6, r2
 800f9d0:	e7ba      	b.n	800f948 <_printf_i+0x150>
 800f9d2:	680b      	ldr	r3, [r1, #0]
 800f9d4:	1d1a      	adds	r2, r3, #4
 800f9d6:	600a      	str	r2, [r1, #0]
 800f9d8:	681e      	ldr	r6, [r3, #0]
 800f9da:	6862      	ldr	r2, [r4, #4]
 800f9dc:	2100      	movs	r1, #0
 800f9de:	4630      	mov	r0, r6
 800f9e0:	f7f0 fc16 	bl	8000210 <memchr>
 800f9e4:	b108      	cbz	r0, 800f9ea <_printf_i+0x1f2>
 800f9e6:	1b80      	subs	r0, r0, r6
 800f9e8:	6060      	str	r0, [r4, #4]
 800f9ea:	6863      	ldr	r3, [r4, #4]
 800f9ec:	6123      	str	r3, [r4, #16]
 800f9ee:	2300      	movs	r3, #0
 800f9f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f9f4:	e7a8      	b.n	800f948 <_printf_i+0x150>
 800f9f6:	6923      	ldr	r3, [r4, #16]
 800f9f8:	4632      	mov	r2, r6
 800f9fa:	4649      	mov	r1, r9
 800f9fc:	4640      	mov	r0, r8
 800f9fe:	47d0      	blx	sl
 800fa00:	3001      	adds	r0, #1
 800fa02:	d0ab      	beq.n	800f95c <_printf_i+0x164>
 800fa04:	6823      	ldr	r3, [r4, #0]
 800fa06:	079b      	lsls	r3, r3, #30
 800fa08:	d413      	bmi.n	800fa32 <_printf_i+0x23a>
 800fa0a:	68e0      	ldr	r0, [r4, #12]
 800fa0c:	9b03      	ldr	r3, [sp, #12]
 800fa0e:	4298      	cmp	r0, r3
 800fa10:	bfb8      	it	lt
 800fa12:	4618      	movlt	r0, r3
 800fa14:	e7a4      	b.n	800f960 <_printf_i+0x168>
 800fa16:	2301      	movs	r3, #1
 800fa18:	4632      	mov	r2, r6
 800fa1a:	4649      	mov	r1, r9
 800fa1c:	4640      	mov	r0, r8
 800fa1e:	47d0      	blx	sl
 800fa20:	3001      	adds	r0, #1
 800fa22:	d09b      	beq.n	800f95c <_printf_i+0x164>
 800fa24:	3501      	adds	r5, #1
 800fa26:	68e3      	ldr	r3, [r4, #12]
 800fa28:	9903      	ldr	r1, [sp, #12]
 800fa2a:	1a5b      	subs	r3, r3, r1
 800fa2c:	42ab      	cmp	r3, r5
 800fa2e:	dcf2      	bgt.n	800fa16 <_printf_i+0x21e>
 800fa30:	e7eb      	b.n	800fa0a <_printf_i+0x212>
 800fa32:	2500      	movs	r5, #0
 800fa34:	f104 0619 	add.w	r6, r4, #25
 800fa38:	e7f5      	b.n	800fa26 <_printf_i+0x22e>
 800fa3a:	bf00      	nop
 800fa3c:	08012ca9 	.word	0x08012ca9
 800fa40:	08012cba 	.word	0x08012cba

0800fa44 <_sbrk_r>:
 800fa44:	b538      	push	{r3, r4, r5, lr}
 800fa46:	4d06      	ldr	r5, [pc, #24]	; (800fa60 <_sbrk_r+0x1c>)
 800fa48:	2300      	movs	r3, #0
 800fa4a:	4604      	mov	r4, r0
 800fa4c:	4608      	mov	r0, r1
 800fa4e:	602b      	str	r3, [r5, #0]
 800fa50:	f7f3 fb04 	bl	800305c <_sbrk>
 800fa54:	1c43      	adds	r3, r0, #1
 800fa56:	d102      	bne.n	800fa5e <_sbrk_r+0x1a>
 800fa58:	682b      	ldr	r3, [r5, #0]
 800fa5a:	b103      	cbz	r3, 800fa5e <_sbrk_r+0x1a>
 800fa5c:	6023      	str	r3, [r4, #0]
 800fa5e:	bd38      	pop	{r3, r4, r5, pc}
 800fa60:	20002bb4 	.word	0x20002bb4

0800fa64 <__utoa>:
 800fa64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa66:	4c1f      	ldr	r4, [pc, #124]	; (800fae4 <__utoa+0x80>)
 800fa68:	b08b      	sub	sp, #44	; 0x2c
 800fa6a:	4605      	mov	r5, r0
 800fa6c:	460b      	mov	r3, r1
 800fa6e:	466e      	mov	r6, sp
 800fa70:	f104 0c20 	add.w	ip, r4, #32
 800fa74:	6820      	ldr	r0, [r4, #0]
 800fa76:	6861      	ldr	r1, [r4, #4]
 800fa78:	4637      	mov	r7, r6
 800fa7a:	c703      	stmia	r7!, {r0, r1}
 800fa7c:	3408      	adds	r4, #8
 800fa7e:	4564      	cmp	r4, ip
 800fa80:	463e      	mov	r6, r7
 800fa82:	d1f7      	bne.n	800fa74 <__utoa+0x10>
 800fa84:	7921      	ldrb	r1, [r4, #4]
 800fa86:	7139      	strb	r1, [r7, #4]
 800fa88:	1e91      	subs	r1, r2, #2
 800fa8a:	6820      	ldr	r0, [r4, #0]
 800fa8c:	6038      	str	r0, [r7, #0]
 800fa8e:	2922      	cmp	r1, #34	; 0x22
 800fa90:	f04f 0100 	mov.w	r1, #0
 800fa94:	d904      	bls.n	800faa0 <__utoa+0x3c>
 800fa96:	7019      	strb	r1, [r3, #0]
 800fa98:	460b      	mov	r3, r1
 800fa9a:	4618      	mov	r0, r3
 800fa9c:	b00b      	add	sp, #44	; 0x2c
 800fa9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800faa0:	1e58      	subs	r0, r3, #1
 800faa2:	4684      	mov	ip, r0
 800faa4:	fbb5 f7f2 	udiv	r7, r5, r2
 800faa8:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800faac:	fb02 5617 	mls	r6, r2, r7, r5
 800fab0:	4476      	add	r6, lr
 800fab2:	460c      	mov	r4, r1
 800fab4:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800fab8:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800fabc:	462e      	mov	r6, r5
 800fabe:	42b2      	cmp	r2, r6
 800fac0:	f101 0101 	add.w	r1, r1, #1
 800fac4:	463d      	mov	r5, r7
 800fac6:	d9ed      	bls.n	800faa4 <__utoa+0x40>
 800fac8:	2200      	movs	r2, #0
 800faca:	545a      	strb	r2, [r3, r1]
 800facc:	1919      	adds	r1, r3, r4
 800face:	1aa5      	subs	r5, r4, r2
 800fad0:	42aa      	cmp	r2, r5
 800fad2:	dae2      	bge.n	800fa9a <__utoa+0x36>
 800fad4:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800fad8:	780e      	ldrb	r6, [r1, #0]
 800fada:	7006      	strb	r6, [r0, #0]
 800fadc:	3201      	adds	r2, #1
 800fade:	f801 5901 	strb.w	r5, [r1], #-1
 800fae2:	e7f4      	b.n	800face <__utoa+0x6a>
 800fae4:	08012ccb 	.word	0x08012ccb

0800fae8 <__swbuf_r>:
 800fae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800faea:	460e      	mov	r6, r1
 800faec:	4614      	mov	r4, r2
 800faee:	4605      	mov	r5, r0
 800faf0:	b118      	cbz	r0, 800fafa <__swbuf_r+0x12>
 800faf2:	6983      	ldr	r3, [r0, #24]
 800faf4:	b90b      	cbnz	r3, 800fafa <__swbuf_r+0x12>
 800faf6:	f000 f9d9 	bl	800feac <__sinit>
 800fafa:	4b21      	ldr	r3, [pc, #132]	; (800fb80 <__swbuf_r+0x98>)
 800fafc:	429c      	cmp	r4, r3
 800fafe:	d12b      	bne.n	800fb58 <__swbuf_r+0x70>
 800fb00:	686c      	ldr	r4, [r5, #4]
 800fb02:	69a3      	ldr	r3, [r4, #24]
 800fb04:	60a3      	str	r3, [r4, #8]
 800fb06:	89a3      	ldrh	r3, [r4, #12]
 800fb08:	071a      	lsls	r2, r3, #28
 800fb0a:	d52f      	bpl.n	800fb6c <__swbuf_r+0x84>
 800fb0c:	6923      	ldr	r3, [r4, #16]
 800fb0e:	b36b      	cbz	r3, 800fb6c <__swbuf_r+0x84>
 800fb10:	6923      	ldr	r3, [r4, #16]
 800fb12:	6820      	ldr	r0, [r4, #0]
 800fb14:	1ac0      	subs	r0, r0, r3
 800fb16:	6963      	ldr	r3, [r4, #20]
 800fb18:	b2f6      	uxtb	r6, r6
 800fb1a:	4283      	cmp	r3, r0
 800fb1c:	4637      	mov	r7, r6
 800fb1e:	dc04      	bgt.n	800fb2a <__swbuf_r+0x42>
 800fb20:	4621      	mov	r1, r4
 800fb22:	4628      	mov	r0, r5
 800fb24:	f000 f92e 	bl	800fd84 <_fflush_r>
 800fb28:	bb30      	cbnz	r0, 800fb78 <__swbuf_r+0x90>
 800fb2a:	68a3      	ldr	r3, [r4, #8]
 800fb2c:	3b01      	subs	r3, #1
 800fb2e:	60a3      	str	r3, [r4, #8]
 800fb30:	6823      	ldr	r3, [r4, #0]
 800fb32:	1c5a      	adds	r2, r3, #1
 800fb34:	6022      	str	r2, [r4, #0]
 800fb36:	701e      	strb	r6, [r3, #0]
 800fb38:	6963      	ldr	r3, [r4, #20]
 800fb3a:	3001      	adds	r0, #1
 800fb3c:	4283      	cmp	r3, r0
 800fb3e:	d004      	beq.n	800fb4a <__swbuf_r+0x62>
 800fb40:	89a3      	ldrh	r3, [r4, #12]
 800fb42:	07db      	lsls	r3, r3, #31
 800fb44:	d506      	bpl.n	800fb54 <__swbuf_r+0x6c>
 800fb46:	2e0a      	cmp	r6, #10
 800fb48:	d104      	bne.n	800fb54 <__swbuf_r+0x6c>
 800fb4a:	4621      	mov	r1, r4
 800fb4c:	4628      	mov	r0, r5
 800fb4e:	f000 f919 	bl	800fd84 <_fflush_r>
 800fb52:	b988      	cbnz	r0, 800fb78 <__swbuf_r+0x90>
 800fb54:	4638      	mov	r0, r7
 800fb56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb58:	4b0a      	ldr	r3, [pc, #40]	; (800fb84 <__swbuf_r+0x9c>)
 800fb5a:	429c      	cmp	r4, r3
 800fb5c:	d101      	bne.n	800fb62 <__swbuf_r+0x7a>
 800fb5e:	68ac      	ldr	r4, [r5, #8]
 800fb60:	e7cf      	b.n	800fb02 <__swbuf_r+0x1a>
 800fb62:	4b09      	ldr	r3, [pc, #36]	; (800fb88 <__swbuf_r+0xa0>)
 800fb64:	429c      	cmp	r4, r3
 800fb66:	bf08      	it	eq
 800fb68:	68ec      	ldreq	r4, [r5, #12]
 800fb6a:	e7ca      	b.n	800fb02 <__swbuf_r+0x1a>
 800fb6c:	4621      	mov	r1, r4
 800fb6e:	4628      	mov	r0, r5
 800fb70:	f000 f80c 	bl	800fb8c <__swsetup_r>
 800fb74:	2800      	cmp	r0, #0
 800fb76:	d0cb      	beq.n	800fb10 <__swbuf_r+0x28>
 800fb78:	f04f 37ff 	mov.w	r7, #4294967295
 800fb7c:	e7ea      	b.n	800fb54 <__swbuf_r+0x6c>
 800fb7e:	bf00      	nop
 800fb80:	08012d10 	.word	0x08012d10
 800fb84:	08012d30 	.word	0x08012d30
 800fb88:	08012cf0 	.word	0x08012cf0

0800fb8c <__swsetup_r>:
 800fb8c:	4b32      	ldr	r3, [pc, #200]	; (800fc58 <__swsetup_r+0xcc>)
 800fb8e:	b570      	push	{r4, r5, r6, lr}
 800fb90:	681d      	ldr	r5, [r3, #0]
 800fb92:	4606      	mov	r6, r0
 800fb94:	460c      	mov	r4, r1
 800fb96:	b125      	cbz	r5, 800fba2 <__swsetup_r+0x16>
 800fb98:	69ab      	ldr	r3, [r5, #24]
 800fb9a:	b913      	cbnz	r3, 800fba2 <__swsetup_r+0x16>
 800fb9c:	4628      	mov	r0, r5
 800fb9e:	f000 f985 	bl	800feac <__sinit>
 800fba2:	4b2e      	ldr	r3, [pc, #184]	; (800fc5c <__swsetup_r+0xd0>)
 800fba4:	429c      	cmp	r4, r3
 800fba6:	d10f      	bne.n	800fbc8 <__swsetup_r+0x3c>
 800fba8:	686c      	ldr	r4, [r5, #4]
 800fbaa:	89a3      	ldrh	r3, [r4, #12]
 800fbac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fbb0:	0719      	lsls	r1, r3, #28
 800fbb2:	d42c      	bmi.n	800fc0e <__swsetup_r+0x82>
 800fbb4:	06dd      	lsls	r5, r3, #27
 800fbb6:	d411      	bmi.n	800fbdc <__swsetup_r+0x50>
 800fbb8:	2309      	movs	r3, #9
 800fbba:	6033      	str	r3, [r6, #0]
 800fbbc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800fbc0:	81a3      	strh	r3, [r4, #12]
 800fbc2:	f04f 30ff 	mov.w	r0, #4294967295
 800fbc6:	e03e      	b.n	800fc46 <__swsetup_r+0xba>
 800fbc8:	4b25      	ldr	r3, [pc, #148]	; (800fc60 <__swsetup_r+0xd4>)
 800fbca:	429c      	cmp	r4, r3
 800fbcc:	d101      	bne.n	800fbd2 <__swsetup_r+0x46>
 800fbce:	68ac      	ldr	r4, [r5, #8]
 800fbd0:	e7eb      	b.n	800fbaa <__swsetup_r+0x1e>
 800fbd2:	4b24      	ldr	r3, [pc, #144]	; (800fc64 <__swsetup_r+0xd8>)
 800fbd4:	429c      	cmp	r4, r3
 800fbd6:	bf08      	it	eq
 800fbd8:	68ec      	ldreq	r4, [r5, #12]
 800fbda:	e7e6      	b.n	800fbaa <__swsetup_r+0x1e>
 800fbdc:	0758      	lsls	r0, r3, #29
 800fbde:	d512      	bpl.n	800fc06 <__swsetup_r+0x7a>
 800fbe0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fbe2:	b141      	cbz	r1, 800fbf6 <__swsetup_r+0x6a>
 800fbe4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fbe8:	4299      	cmp	r1, r3
 800fbea:	d002      	beq.n	800fbf2 <__swsetup_r+0x66>
 800fbec:	4630      	mov	r0, r6
 800fbee:	f7ff fb91 	bl	800f314 <_free_r>
 800fbf2:	2300      	movs	r3, #0
 800fbf4:	6363      	str	r3, [r4, #52]	; 0x34
 800fbf6:	89a3      	ldrh	r3, [r4, #12]
 800fbf8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fbfc:	81a3      	strh	r3, [r4, #12]
 800fbfe:	2300      	movs	r3, #0
 800fc00:	6063      	str	r3, [r4, #4]
 800fc02:	6923      	ldr	r3, [r4, #16]
 800fc04:	6023      	str	r3, [r4, #0]
 800fc06:	89a3      	ldrh	r3, [r4, #12]
 800fc08:	f043 0308 	orr.w	r3, r3, #8
 800fc0c:	81a3      	strh	r3, [r4, #12]
 800fc0e:	6923      	ldr	r3, [r4, #16]
 800fc10:	b94b      	cbnz	r3, 800fc26 <__swsetup_r+0x9a>
 800fc12:	89a3      	ldrh	r3, [r4, #12]
 800fc14:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fc18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fc1c:	d003      	beq.n	800fc26 <__swsetup_r+0x9a>
 800fc1e:	4621      	mov	r1, r4
 800fc20:	4630      	mov	r0, r6
 800fc22:	f000 fa07 	bl	8010034 <__smakebuf_r>
 800fc26:	89a0      	ldrh	r0, [r4, #12]
 800fc28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fc2c:	f010 0301 	ands.w	r3, r0, #1
 800fc30:	d00a      	beq.n	800fc48 <__swsetup_r+0xbc>
 800fc32:	2300      	movs	r3, #0
 800fc34:	60a3      	str	r3, [r4, #8]
 800fc36:	6963      	ldr	r3, [r4, #20]
 800fc38:	425b      	negs	r3, r3
 800fc3a:	61a3      	str	r3, [r4, #24]
 800fc3c:	6923      	ldr	r3, [r4, #16]
 800fc3e:	b943      	cbnz	r3, 800fc52 <__swsetup_r+0xc6>
 800fc40:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fc44:	d1ba      	bne.n	800fbbc <__swsetup_r+0x30>
 800fc46:	bd70      	pop	{r4, r5, r6, pc}
 800fc48:	0781      	lsls	r1, r0, #30
 800fc4a:	bf58      	it	pl
 800fc4c:	6963      	ldrpl	r3, [r4, #20]
 800fc4e:	60a3      	str	r3, [r4, #8]
 800fc50:	e7f4      	b.n	800fc3c <__swsetup_r+0xb0>
 800fc52:	2000      	movs	r0, #0
 800fc54:	e7f7      	b.n	800fc46 <__swsetup_r+0xba>
 800fc56:	bf00      	nop
 800fc58:	200000ac 	.word	0x200000ac
 800fc5c:	08012d10 	.word	0x08012d10
 800fc60:	08012d30 	.word	0x08012d30
 800fc64:	08012cf0 	.word	0x08012cf0

0800fc68 <abort>:
 800fc68:	b508      	push	{r3, lr}
 800fc6a:	2006      	movs	r0, #6
 800fc6c:	f000 fa56 	bl	801011c <raise>
 800fc70:	2001      	movs	r0, #1
 800fc72:	f7f3 f97b 	bl	8002f6c <_exit>
	...

0800fc78 <__sflush_r>:
 800fc78:	898a      	ldrh	r2, [r1, #12]
 800fc7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc7e:	4605      	mov	r5, r0
 800fc80:	0710      	lsls	r0, r2, #28
 800fc82:	460c      	mov	r4, r1
 800fc84:	d458      	bmi.n	800fd38 <__sflush_r+0xc0>
 800fc86:	684b      	ldr	r3, [r1, #4]
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	dc05      	bgt.n	800fc98 <__sflush_r+0x20>
 800fc8c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	dc02      	bgt.n	800fc98 <__sflush_r+0x20>
 800fc92:	2000      	movs	r0, #0
 800fc94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fc9a:	2e00      	cmp	r6, #0
 800fc9c:	d0f9      	beq.n	800fc92 <__sflush_r+0x1a>
 800fc9e:	2300      	movs	r3, #0
 800fca0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fca4:	682f      	ldr	r7, [r5, #0]
 800fca6:	602b      	str	r3, [r5, #0]
 800fca8:	d032      	beq.n	800fd10 <__sflush_r+0x98>
 800fcaa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fcac:	89a3      	ldrh	r3, [r4, #12]
 800fcae:	075a      	lsls	r2, r3, #29
 800fcb0:	d505      	bpl.n	800fcbe <__sflush_r+0x46>
 800fcb2:	6863      	ldr	r3, [r4, #4]
 800fcb4:	1ac0      	subs	r0, r0, r3
 800fcb6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fcb8:	b10b      	cbz	r3, 800fcbe <__sflush_r+0x46>
 800fcba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fcbc:	1ac0      	subs	r0, r0, r3
 800fcbe:	2300      	movs	r3, #0
 800fcc0:	4602      	mov	r2, r0
 800fcc2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fcc4:	6a21      	ldr	r1, [r4, #32]
 800fcc6:	4628      	mov	r0, r5
 800fcc8:	47b0      	blx	r6
 800fcca:	1c43      	adds	r3, r0, #1
 800fccc:	89a3      	ldrh	r3, [r4, #12]
 800fcce:	d106      	bne.n	800fcde <__sflush_r+0x66>
 800fcd0:	6829      	ldr	r1, [r5, #0]
 800fcd2:	291d      	cmp	r1, #29
 800fcd4:	d82c      	bhi.n	800fd30 <__sflush_r+0xb8>
 800fcd6:	4a2a      	ldr	r2, [pc, #168]	; (800fd80 <__sflush_r+0x108>)
 800fcd8:	40ca      	lsrs	r2, r1
 800fcda:	07d6      	lsls	r6, r2, #31
 800fcdc:	d528      	bpl.n	800fd30 <__sflush_r+0xb8>
 800fcde:	2200      	movs	r2, #0
 800fce0:	6062      	str	r2, [r4, #4]
 800fce2:	04d9      	lsls	r1, r3, #19
 800fce4:	6922      	ldr	r2, [r4, #16]
 800fce6:	6022      	str	r2, [r4, #0]
 800fce8:	d504      	bpl.n	800fcf4 <__sflush_r+0x7c>
 800fcea:	1c42      	adds	r2, r0, #1
 800fcec:	d101      	bne.n	800fcf2 <__sflush_r+0x7a>
 800fcee:	682b      	ldr	r3, [r5, #0]
 800fcf0:	b903      	cbnz	r3, 800fcf4 <__sflush_r+0x7c>
 800fcf2:	6560      	str	r0, [r4, #84]	; 0x54
 800fcf4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fcf6:	602f      	str	r7, [r5, #0]
 800fcf8:	2900      	cmp	r1, #0
 800fcfa:	d0ca      	beq.n	800fc92 <__sflush_r+0x1a>
 800fcfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fd00:	4299      	cmp	r1, r3
 800fd02:	d002      	beq.n	800fd0a <__sflush_r+0x92>
 800fd04:	4628      	mov	r0, r5
 800fd06:	f7ff fb05 	bl	800f314 <_free_r>
 800fd0a:	2000      	movs	r0, #0
 800fd0c:	6360      	str	r0, [r4, #52]	; 0x34
 800fd0e:	e7c1      	b.n	800fc94 <__sflush_r+0x1c>
 800fd10:	6a21      	ldr	r1, [r4, #32]
 800fd12:	2301      	movs	r3, #1
 800fd14:	4628      	mov	r0, r5
 800fd16:	47b0      	blx	r6
 800fd18:	1c41      	adds	r1, r0, #1
 800fd1a:	d1c7      	bne.n	800fcac <__sflush_r+0x34>
 800fd1c:	682b      	ldr	r3, [r5, #0]
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d0c4      	beq.n	800fcac <__sflush_r+0x34>
 800fd22:	2b1d      	cmp	r3, #29
 800fd24:	d001      	beq.n	800fd2a <__sflush_r+0xb2>
 800fd26:	2b16      	cmp	r3, #22
 800fd28:	d101      	bne.n	800fd2e <__sflush_r+0xb6>
 800fd2a:	602f      	str	r7, [r5, #0]
 800fd2c:	e7b1      	b.n	800fc92 <__sflush_r+0x1a>
 800fd2e:	89a3      	ldrh	r3, [r4, #12]
 800fd30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fd34:	81a3      	strh	r3, [r4, #12]
 800fd36:	e7ad      	b.n	800fc94 <__sflush_r+0x1c>
 800fd38:	690f      	ldr	r7, [r1, #16]
 800fd3a:	2f00      	cmp	r7, #0
 800fd3c:	d0a9      	beq.n	800fc92 <__sflush_r+0x1a>
 800fd3e:	0793      	lsls	r3, r2, #30
 800fd40:	680e      	ldr	r6, [r1, #0]
 800fd42:	bf08      	it	eq
 800fd44:	694b      	ldreq	r3, [r1, #20]
 800fd46:	600f      	str	r7, [r1, #0]
 800fd48:	bf18      	it	ne
 800fd4a:	2300      	movne	r3, #0
 800fd4c:	eba6 0807 	sub.w	r8, r6, r7
 800fd50:	608b      	str	r3, [r1, #8]
 800fd52:	f1b8 0f00 	cmp.w	r8, #0
 800fd56:	dd9c      	ble.n	800fc92 <__sflush_r+0x1a>
 800fd58:	6a21      	ldr	r1, [r4, #32]
 800fd5a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fd5c:	4643      	mov	r3, r8
 800fd5e:	463a      	mov	r2, r7
 800fd60:	4628      	mov	r0, r5
 800fd62:	47b0      	blx	r6
 800fd64:	2800      	cmp	r0, #0
 800fd66:	dc06      	bgt.n	800fd76 <__sflush_r+0xfe>
 800fd68:	89a3      	ldrh	r3, [r4, #12]
 800fd6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fd6e:	81a3      	strh	r3, [r4, #12]
 800fd70:	f04f 30ff 	mov.w	r0, #4294967295
 800fd74:	e78e      	b.n	800fc94 <__sflush_r+0x1c>
 800fd76:	4407      	add	r7, r0
 800fd78:	eba8 0800 	sub.w	r8, r8, r0
 800fd7c:	e7e9      	b.n	800fd52 <__sflush_r+0xda>
 800fd7e:	bf00      	nop
 800fd80:	20400001 	.word	0x20400001

0800fd84 <_fflush_r>:
 800fd84:	b538      	push	{r3, r4, r5, lr}
 800fd86:	690b      	ldr	r3, [r1, #16]
 800fd88:	4605      	mov	r5, r0
 800fd8a:	460c      	mov	r4, r1
 800fd8c:	b913      	cbnz	r3, 800fd94 <_fflush_r+0x10>
 800fd8e:	2500      	movs	r5, #0
 800fd90:	4628      	mov	r0, r5
 800fd92:	bd38      	pop	{r3, r4, r5, pc}
 800fd94:	b118      	cbz	r0, 800fd9e <_fflush_r+0x1a>
 800fd96:	6983      	ldr	r3, [r0, #24]
 800fd98:	b90b      	cbnz	r3, 800fd9e <_fflush_r+0x1a>
 800fd9a:	f000 f887 	bl	800feac <__sinit>
 800fd9e:	4b14      	ldr	r3, [pc, #80]	; (800fdf0 <_fflush_r+0x6c>)
 800fda0:	429c      	cmp	r4, r3
 800fda2:	d11b      	bne.n	800fddc <_fflush_r+0x58>
 800fda4:	686c      	ldr	r4, [r5, #4]
 800fda6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d0ef      	beq.n	800fd8e <_fflush_r+0xa>
 800fdae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fdb0:	07d0      	lsls	r0, r2, #31
 800fdb2:	d404      	bmi.n	800fdbe <_fflush_r+0x3a>
 800fdb4:	0599      	lsls	r1, r3, #22
 800fdb6:	d402      	bmi.n	800fdbe <_fflush_r+0x3a>
 800fdb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fdba:	f000 f915 	bl	800ffe8 <__retarget_lock_acquire_recursive>
 800fdbe:	4628      	mov	r0, r5
 800fdc0:	4621      	mov	r1, r4
 800fdc2:	f7ff ff59 	bl	800fc78 <__sflush_r>
 800fdc6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fdc8:	07da      	lsls	r2, r3, #31
 800fdca:	4605      	mov	r5, r0
 800fdcc:	d4e0      	bmi.n	800fd90 <_fflush_r+0xc>
 800fdce:	89a3      	ldrh	r3, [r4, #12]
 800fdd0:	059b      	lsls	r3, r3, #22
 800fdd2:	d4dd      	bmi.n	800fd90 <_fflush_r+0xc>
 800fdd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fdd6:	f000 f908 	bl	800ffea <__retarget_lock_release_recursive>
 800fdda:	e7d9      	b.n	800fd90 <_fflush_r+0xc>
 800fddc:	4b05      	ldr	r3, [pc, #20]	; (800fdf4 <_fflush_r+0x70>)
 800fdde:	429c      	cmp	r4, r3
 800fde0:	d101      	bne.n	800fde6 <_fflush_r+0x62>
 800fde2:	68ac      	ldr	r4, [r5, #8]
 800fde4:	e7df      	b.n	800fda6 <_fflush_r+0x22>
 800fde6:	4b04      	ldr	r3, [pc, #16]	; (800fdf8 <_fflush_r+0x74>)
 800fde8:	429c      	cmp	r4, r3
 800fdea:	bf08      	it	eq
 800fdec:	68ec      	ldreq	r4, [r5, #12]
 800fdee:	e7da      	b.n	800fda6 <_fflush_r+0x22>
 800fdf0:	08012d10 	.word	0x08012d10
 800fdf4:	08012d30 	.word	0x08012d30
 800fdf8:	08012cf0 	.word	0x08012cf0

0800fdfc <std>:
 800fdfc:	2300      	movs	r3, #0
 800fdfe:	b510      	push	{r4, lr}
 800fe00:	4604      	mov	r4, r0
 800fe02:	e9c0 3300 	strd	r3, r3, [r0]
 800fe06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fe0a:	6083      	str	r3, [r0, #8]
 800fe0c:	8181      	strh	r1, [r0, #12]
 800fe0e:	6643      	str	r3, [r0, #100]	; 0x64
 800fe10:	81c2      	strh	r2, [r0, #14]
 800fe12:	6183      	str	r3, [r0, #24]
 800fe14:	4619      	mov	r1, r3
 800fe16:	2208      	movs	r2, #8
 800fe18:	305c      	adds	r0, #92	; 0x5c
 800fe1a:	f7ff fa73 	bl	800f304 <memset>
 800fe1e:	4b05      	ldr	r3, [pc, #20]	; (800fe34 <std+0x38>)
 800fe20:	6263      	str	r3, [r4, #36]	; 0x24
 800fe22:	4b05      	ldr	r3, [pc, #20]	; (800fe38 <std+0x3c>)
 800fe24:	62a3      	str	r3, [r4, #40]	; 0x28
 800fe26:	4b05      	ldr	r3, [pc, #20]	; (800fe3c <std+0x40>)
 800fe28:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fe2a:	4b05      	ldr	r3, [pc, #20]	; (800fe40 <std+0x44>)
 800fe2c:	6224      	str	r4, [r4, #32]
 800fe2e:	6323      	str	r3, [r4, #48]	; 0x30
 800fe30:	bd10      	pop	{r4, pc}
 800fe32:	bf00      	nop
 800fe34:	08010155 	.word	0x08010155
 800fe38:	08010177 	.word	0x08010177
 800fe3c:	080101af 	.word	0x080101af
 800fe40:	080101d3 	.word	0x080101d3

0800fe44 <_cleanup_r>:
 800fe44:	4901      	ldr	r1, [pc, #4]	; (800fe4c <_cleanup_r+0x8>)
 800fe46:	f000 b8af 	b.w	800ffa8 <_fwalk_reent>
 800fe4a:	bf00      	nop
 800fe4c:	0800fd85 	.word	0x0800fd85

0800fe50 <__sfmoreglue>:
 800fe50:	b570      	push	{r4, r5, r6, lr}
 800fe52:	1e4a      	subs	r2, r1, #1
 800fe54:	2568      	movs	r5, #104	; 0x68
 800fe56:	4355      	muls	r5, r2
 800fe58:	460e      	mov	r6, r1
 800fe5a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800fe5e:	f7ff faa9 	bl	800f3b4 <_malloc_r>
 800fe62:	4604      	mov	r4, r0
 800fe64:	b140      	cbz	r0, 800fe78 <__sfmoreglue+0x28>
 800fe66:	2100      	movs	r1, #0
 800fe68:	e9c0 1600 	strd	r1, r6, [r0]
 800fe6c:	300c      	adds	r0, #12
 800fe6e:	60a0      	str	r0, [r4, #8]
 800fe70:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800fe74:	f7ff fa46 	bl	800f304 <memset>
 800fe78:	4620      	mov	r0, r4
 800fe7a:	bd70      	pop	{r4, r5, r6, pc}

0800fe7c <__sfp_lock_acquire>:
 800fe7c:	4801      	ldr	r0, [pc, #4]	; (800fe84 <__sfp_lock_acquire+0x8>)
 800fe7e:	f000 b8b3 	b.w	800ffe8 <__retarget_lock_acquire_recursive>
 800fe82:	bf00      	nop
 800fe84:	20002bb0 	.word	0x20002bb0

0800fe88 <__sfp_lock_release>:
 800fe88:	4801      	ldr	r0, [pc, #4]	; (800fe90 <__sfp_lock_release+0x8>)
 800fe8a:	f000 b8ae 	b.w	800ffea <__retarget_lock_release_recursive>
 800fe8e:	bf00      	nop
 800fe90:	20002bb0 	.word	0x20002bb0

0800fe94 <__sinit_lock_acquire>:
 800fe94:	4801      	ldr	r0, [pc, #4]	; (800fe9c <__sinit_lock_acquire+0x8>)
 800fe96:	f000 b8a7 	b.w	800ffe8 <__retarget_lock_acquire_recursive>
 800fe9a:	bf00      	nop
 800fe9c:	20002bab 	.word	0x20002bab

0800fea0 <__sinit_lock_release>:
 800fea0:	4801      	ldr	r0, [pc, #4]	; (800fea8 <__sinit_lock_release+0x8>)
 800fea2:	f000 b8a2 	b.w	800ffea <__retarget_lock_release_recursive>
 800fea6:	bf00      	nop
 800fea8:	20002bab 	.word	0x20002bab

0800feac <__sinit>:
 800feac:	b510      	push	{r4, lr}
 800feae:	4604      	mov	r4, r0
 800feb0:	f7ff fff0 	bl	800fe94 <__sinit_lock_acquire>
 800feb4:	69a3      	ldr	r3, [r4, #24]
 800feb6:	b11b      	cbz	r3, 800fec0 <__sinit+0x14>
 800feb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800febc:	f7ff bff0 	b.w	800fea0 <__sinit_lock_release>
 800fec0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800fec4:	6523      	str	r3, [r4, #80]	; 0x50
 800fec6:	4b13      	ldr	r3, [pc, #76]	; (800ff14 <__sinit+0x68>)
 800fec8:	4a13      	ldr	r2, [pc, #76]	; (800ff18 <__sinit+0x6c>)
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	62a2      	str	r2, [r4, #40]	; 0x28
 800fece:	42a3      	cmp	r3, r4
 800fed0:	bf04      	itt	eq
 800fed2:	2301      	moveq	r3, #1
 800fed4:	61a3      	streq	r3, [r4, #24]
 800fed6:	4620      	mov	r0, r4
 800fed8:	f000 f820 	bl	800ff1c <__sfp>
 800fedc:	6060      	str	r0, [r4, #4]
 800fede:	4620      	mov	r0, r4
 800fee0:	f000 f81c 	bl	800ff1c <__sfp>
 800fee4:	60a0      	str	r0, [r4, #8]
 800fee6:	4620      	mov	r0, r4
 800fee8:	f000 f818 	bl	800ff1c <__sfp>
 800feec:	2200      	movs	r2, #0
 800feee:	60e0      	str	r0, [r4, #12]
 800fef0:	2104      	movs	r1, #4
 800fef2:	6860      	ldr	r0, [r4, #4]
 800fef4:	f7ff ff82 	bl	800fdfc <std>
 800fef8:	68a0      	ldr	r0, [r4, #8]
 800fefa:	2201      	movs	r2, #1
 800fefc:	2109      	movs	r1, #9
 800fefe:	f7ff ff7d 	bl	800fdfc <std>
 800ff02:	68e0      	ldr	r0, [r4, #12]
 800ff04:	2202      	movs	r2, #2
 800ff06:	2112      	movs	r1, #18
 800ff08:	f7ff ff78 	bl	800fdfc <std>
 800ff0c:	2301      	movs	r3, #1
 800ff0e:	61a3      	str	r3, [r4, #24]
 800ff10:	e7d2      	b.n	800feb8 <__sinit+0xc>
 800ff12:	bf00      	nop
 800ff14:	08012c94 	.word	0x08012c94
 800ff18:	0800fe45 	.word	0x0800fe45

0800ff1c <__sfp>:
 800ff1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff1e:	4607      	mov	r7, r0
 800ff20:	f7ff ffac 	bl	800fe7c <__sfp_lock_acquire>
 800ff24:	4b1e      	ldr	r3, [pc, #120]	; (800ffa0 <__sfp+0x84>)
 800ff26:	681e      	ldr	r6, [r3, #0]
 800ff28:	69b3      	ldr	r3, [r6, #24]
 800ff2a:	b913      	cbnz	r3, 800ff32 <__sfp+0x16>
 800ff2c:	4630      	mov	r0, r6
 800ff2e:	f7ff ffbd 	bl	800feac <__sinit>
 800ff32:	3648      	adds	r6, #72	; 0x48
 800ff34:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ff38:	3b01      	subs	r3, #1
 800ff3a:	d503      	bpl.n	800ff44 <__sfp+0x28>
 800ff3c:	6833      	ldr	r3, [r6, #0]
 800ff3e:	b30b      	cbz	r3, 800ff84 <__sfp+0x68>
 800ff40:	6836      	ldr	r6, [r6, #0]
 800ff42:	e7f7      	b.n	800ff34 <__sfp+0x18>
 800ff44:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ff48:	b9d5      	cbnz	r5, 800ff80 <__sfp+0x64>
 800ff4a:	4b16      	ldr	r3, [pc, #88]	; (800ffa4 <__sfp+0x88>)
 800ff4c:	60e3      	str	r3, [r4, #12]
 800ff4e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ff52:	6665      	str	r5, [r4, #100]	; 0x64
 800ff54:	f000 f847 	bl	800ffe6 <__retarget_lock_init_recursive>
 800ff58:	f7ff ff96 	bl	800fe88 <__sfp_lock_release>
 800ff5c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ff60:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ff64:	6025      	str	r5, [r4, #0]
 800ff66:	61a5      	str	r5, [r4, #24]
 800ff68:	2208      	movs	r2, #8
 800ff6a:	4629      	mov	r1, r5
 800ff6c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ff70:	f7ff f9c8 	bl	800f304 <memset>
 800ff74:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ff78:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ff7c:	4620      	mov	r0, r4
 800ff7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ff80:	3468      	adds	r4, #104	; 0x68
 800ff82:	e7d9      	b.n	800ff38 <__sfp+0x1c>
 800ff84:	2104      	movs	r1, #4
 800ff86:	4638      	mov	r0, r7
 800ff88:	f7ff ff62 	bl	800fe50 <__sfmoreglue>
 800ff8c:	4604      	mov	r4, r0
 800ff8e:	6030      	str	r0, [r6, #0]
 800ff90:	2800      	cmp	r0, #0
 800ff92:	d1d5      	bne.n	800ff40 <__sfp+0x24>
 800ff94:	f7ff ff78 	bl	800fe88 <__sfp_lock_release>
 800ff98:	230c      	movs	r3, #12
 800ff9a:	603b      	str	r3, [r7, #0]
 800ff9c:	e7ee      	b.n	800ff7c <__sfp+0x60>
 800ff9e:	bf00      	nop
 800ffa0:	08012c94 	.word	0x08012c94
 800ffa4:	ffff0001 	.word	0xffff0001

0800ffa8 <_fwalk_reent>:
 800ffa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ffac:	4606      	mov	r6, r0
 800ffae:	4688      	mov	r8, r1
 800ffb0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ffb4:	2700      	movs	r7, #0
 800ffb6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ffba:	f1b9 0901 	subs.w	r9, r9, #1
 800ffbe:	d505      	bpl.n	800ffcc <_fwalk_reent+0x24>
 800ffc0:	6824      	ldr	r4, [r4, #0]
 800ffc2:	2c00      	cmp	r4, #0
 800ffc4:	d1f7      	bne.n	800ffb6 <_fwalk_reent+0xe>
 800ffc6:	4638      	mov	r0, r7
 800ffc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ffcc:	89ab      	ldrh	r3, [r5, #12]
 800ffce:	2b01      	cmp	r3, #1
 800ffd0:	d907      	bls.n	800ffe2 <_fwalk_reent+0x3a>
 800ffd2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ffd6:	3301      	adds	r3, #1
 800ffd8:	d003      	beq.n	800ffe2 <_fwalk_reent+0x3a>
 800ffda:	4629      	mov	r1, r5
 800ffdc:	4630      	mov	r0, r6
 800ffde:	47c0      	blx	r8
 800ffe0:	4307      	orrs	r7, r0
 800ffe2:	3568      	adds	r5, #104	; 0x68
 800ffe4:	e7e9      	b.n	800ffba <_fwalk_reent+0x12>

0800ffe6 <__retarget_lock_init_recursive>:
 800ffe6:	4770      	bx	lr

0800ffe8 <__retarget_lock_acquire_recursive>:
 800ffe8:	4770      	bx	lr

0800ffea <__retarget_lock_release_recursive>:
 800ffea:	4770      	bx	lr

0800ffec <__swhatbuf_r>:
 800ffec:	b570      	push	{r4, r5, r6, lr}
 800ffee:	460e      	mov	r6, r1
 800fff0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fff4:	2900      	cmp	r1, #0
 800fff6:	b096      	sub	sp, #88	; 0x58
 800fff8:	4614      	mov	r4, r2
 800fffa:	461d      	mov	r5, r3
 800fffc:	da07      	bge.n	801000e <__swhatbuf_r+0x22>
 800fffe:	2300      	movs	r3, #0
 8010000:	602b      	str	r3, [r5, #0]
 8010002:	89b3      	ldrh	r3, [r6, #12]
 8010004:	061a      	lsls	r2, r3, #24
 8010006:	d410      	bmi.n	801002a <__swhatbuf_r+0x3e>
 8010008:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801000c:	e00e      	b.n	801002c <__swhatbuf_r+0x40>
 801000e:	466a      	mov	r2, sp
 8010010:	f000 f906 	bl	8010220 <_fstat_r>
 8010014:	2800      	cmp	r0, #0
 8010016:	dbf2      	blt.n	800fffe <__swhatbuf_r+0x12>
 8010018:	9a01      	ldr	r2, [sp, #4]
 801001a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801001e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010022:	425a      	negs	r2, r3
 8010024:	415a      	adcs	r2, r3
 8010026:	602a      	str	r2, [r5, #0]
 8010028:	e7ee      	b.n	8010008 <__swhatbuf_r+0x1c>
 801002a:	2340      	movs	r3, #64	; 0x40
 801002c:	2000      	movs	r0, #0
 801002e:	6023      	str	r3, [r4, #0]
 8010030:	b016      	add	sp, #88	; 0x58
 8010032:	bd70      	pop	{r4, r5, r6, pc}

08010034 <__smakebuf_r>:
 8010034:	898b      	ldrh	r3, [r1, #12]
 8010036:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010038:	079d      	lsls	r5, r3, #30
 801003a:	4606      	mov	r6, r0
 801003c:	460c      	mov	r4, r1
 801003e:	d507      	bpl.n	8010050 <__smakebuf_r+0x1c>
 8010040:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010044:	6023      	str	r3, [r4, #0]
 8010046:	6123      	str	r3, [r4, #16]
 8010048:	2301      	movs	r3, #1
 801004a:	6163      	str	r3, [r4, #20]
 801004c:	b002      	add	sp, #8
 801004e:	bd70      	pop	{r4, r5, r6, pc}
 8010050:	ab01      	add	r3, sp, #4
 8010052:	466a      	mov	r2, sp
 8010054:	f7ff ffca 	bl	800ffec <__swhatbuf_r>
 8010058:	9900      	ldr	r1, [sp, #0]
 801005a:	4605      	mov	r5, r0
 801005c:	4630      	mov	r0, r6
 801005e:	f7ff f9a9 	bl	800f3b4 <_malloc_r>
 8010062:	b948      	cbnz	r0, 8010078 <__smakebuf_r+0x44>
 8010064:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010068:	059a      	lsls	r2, r3, #22
 801006a:	d4ef      	bmi.n	801004c <__smakebuf_r+0x18>
 801006c:	f023 0303 	bic.w	r3, r3, #3
 8010070:	f043 0302 	orr.w	r3, r3, #2
 8010074:	81a3      	strh	r3, [r4, #12]
 8010076:	e7e3      	b.n	8010040 <__smakebuf_r+0xc>
 8010078:	4b0d      	ldr	r3, [pc, #52]	; (80100b0 <__smakebuf_r+0x7c>)
 801007a:	62b3      	str	r3, [r6, #40]	; 0x28
 801007c:	89a3      	ldrh	r3, [r4, #12]
 801007e:	6020      	str	r0, [r4, #0]
 8010080:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010084:	81a3      	strh	r3, [r4, #12]
 8010086:	9b00      	ldr	r3, [sp, #0]
 8010088:	6163      	str	r3, [r4, #20]
 801008a:	9b01      	ldr	r3, [sp, #4]
 801008c:	6120      	str	r0, [r4, #16]
 801008e:	b15b      	cbz	r3, 80100a8 <__smakebuf_r+0x74>
 8010090:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010094:	4630      	mov	r0, r6
 8010096:	f000 f8d5 	bl	8010244 <_isatty_r>
 801009a:	b128      	cbz	r0, 80100a8 <__smakebuf_r+0x74>
 801009c:	89a3      	ldrh	r3, [r4, #12]
 801009e:	f023 0303 	bic.w	r3, r3, #3
 80100a2:	f043 0301 	orr.w	r3, r3, #1
 80100a6:	81a3      	strh	r3, [r4, #12]
 80100a8:	89a0      	ldrh	r0, [r4, #12]
 80100aa:	4305      	orrs	r5, r0
 80100ac:	81a5      	strh	r5, [r4, #12]
 80100ae:	e7cd      	b.n	801004c <__smakebuf_r+0x18>
 80100b0:	0800fe45 	.word	0x0800fe45

080100b4 <__malloc_lock>:
 80100b4:	4801      	ldr	r0, [pc, #4]	; (80100bc <__malloc_lock+0x8>)
 80100b6:	f7ff bf97 	b.w	800ffe8 <__retarget_lock_acquire_recursive>
 80100ba:	bf00      	nop
 80100bc:	20002bac 	.word	0x20002bac

080100c0 <__malloc_unlock>:
 80100c0:	4801      	ldr	r0, [pc, #4]	; (80100c8 <__malloc_unlock+0x8>)
 80100c2:	f7ff bf92 	b.w	800ffea <__retarget_lock_release_recursive>
 80100c6:	bf00      	nop
 80100c8:	20002bac 	.word	0x20002bac

080100cc <_raise_r>:
 80100cc:	291f      	cmp	r1, #31
 80100ce:	b538      	push	{r3, r4, r5, lr}
 80100d0:	4604      	mov	r4, r0
 80100d2:	460d      	mov	r5, r1
 80100d4:	d904      	bls.n	80100e0 <_raise_r+0x14>
 80100d6:	2316      	movs	r3, #22
 80100d8:	6003      	str	r3, [r0, #0]
 80100da:	f04f 30ff 	mov.w	r0, #4294967295
 80100de:	bd38      	pop	{r3, r4, r5, pc}
 80100e0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80100e2:	b112      	cbz	r2, 80100ea <_raise_r+0x1e>
 80100e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80100e8:	b94b      	cbnz	r3, 80100fe <_raise_r+0x32>
 80100ea:	4620      	mov	r0, r4
 80100ec:	f000 f830 	bl	8010150 <_getpid_r>
 80100f0:	462a      	mov	r2, r5
 80100f2:	4601      	mov	r1, r0
 80100f4:	4620      	mov	r0, r4
 80100f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80100fa:	f000 b817 	b.w	801012c <_kill_r>
 80100fe:	2b01      	cmp	r3, #1
 8010100:	d00a      	beq.n	8010118 <_raise_r+0x4c>
 8010102:	1c59      	adds	r1, r3, #1
 8010104:	d103      	bne.n	801010e <_raise_r+0x42>
 8010106:	2316      	movs	r3, #22
 8010108:	6003      	str	r3, [r0, #0]
 801010a:	2001      	movs	r0, #1
 801010c:	e7e7      	b.n	80100de <_raise_r+0x12>
 801010e:	2400      	movs	r4, #0
 8010110:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010114:	4628      	mov	r0, r5
 8010116:	4798      	blx	r3
 8010118:	2000      	movs	r0, #0
 801011a:	e7e0      	b.n	80100de <_raise_r+0x12>

0801011c <raise>:
 801011c:	4b02      	ldr	r3, [pc, #8]	; (8010128 <raise+0xc>)
 801011e:	4601      	mov	r1, r0
 8010120:	6818      	ldr	r0, [r3, #0]
 8010122:	f7ff bfd3 	b.w	80100cc <_raise_r>
 8010126:	bf00      	nop
 8010128:	200000ac 	.word	0x200000ac

0801012c <_kill_r>:
 801012c:	b538      	push	{r3, r4, r5, lr}
 801012e:	4d07      	ldr	r5, [pc, #28]	; (801014c <_kill_r+0x20>)
 8010130:	2300      	movs	r3, #0
 8010132:	4604      	mov	r4, r0
 8010134:	4608      	mov	r0, r1
 8010136:	4611      	mov	r1, r2
 8010138:	602b      	str	r3, [r5, #0]
 801013a:	f7f2 ff07 	bl	8002f4c <_kill>
 801013e:	1c43      	adds	r3, r0, #1
 8010140:	d102      	bne.n	8010148 <_kill_r+0x1c>
 8010142:	682b      	ldr	r3, [r5, #0]
 8010144:	b103      	cbz	r3, 8010148 <_kill_r+0x1c>
 8010146:	6023      	str	r3, [r4, #0]
 8010148:	bd38      	pop	{r3, r4, r5, pc}
 801014a:	bf00      	nop
 801014c:	20002bb4 	.word	0x20002bb4

08010150 <_getpid_r>:
 8010150:	f7f2 bef4 	b.w	8002f3c <_getpid>

08010154 <__sread>:
 8010154:	b510      	push	{r4, lr}
 8010156:	460c      	mov	r4, r1
 8010158:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801015c:	f000 f894 	bl	8010288 <_read_r>
 8010160:	2800      	cmp	r0, #0
 8010162:	bfab      	itete	ge
 8010164:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010166:	89a3      	ldrhlt	r3, [r4, #12]
 8010168:	181b      	addge	r3, r3, r0
 801016a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801016e:	bfac      	ite	ge
 8010170:	6563      	strge	r3, [r4, #84]	; 0x54
 8010172:	81a3      	strhlt	r3, [r4, #12]
 8010174:	bd10      	pop	{r4, pc}

08010176 <__swrite>:
 8010176:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801017a:	461f      	mov	r7, r3
 801017c:	898b      	ldrh	r3, [r1, #12]
 801017e:	05db      	lsls	r3, r3, #23
 8010180:	4605      	mov	r5, r0
 8010182:	460c      	mov	r4, r1
 8010184:	4616      	mov	r6, r2
 8010186:	d505      	bpl.n	8010194 <__swrite+0x1e>
 8010188:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801018c:	2302      	movs	r3, #2
 801018e:	2200      	movs	r2, #0
 8010190:	f000 f868 	bl	8010264 <_lseek_r>
 8010194:	89a3      	ldrh	r3, [r4, #12]
 8010196:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801019a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801019e:	81a3      	strh	r3, [r4, #12]
 80101a0:	4632      	mov	r2, r6
 80101a2:	463b      	mov	r3, r7
 80101a4:	4628      	mov	r0, r5
 80101a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80101aa:	f000 b817 	b.w	80101dc <_write_r>

080101ae <__sseek>:
 80101ae:	b510      	push	{r4, lr}
 80101b0:	460c      	mov	r4, r1
 80101b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80101b6:	f000 f855 	bl	8010264 <_lseek_r>
 80101ba:	1c43      	adds	r3, r0, #1
 80101bc:	89a3      	ldrh	r3, [r4, #12]
 80101be:	bf15      	itete	ne
 80101c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80101c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80101c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80101ca:	81a3      	strheq	r3, [r4, #12]
 80101cc:	bf18      	it	ne
 80101ce:	81a3      	strhne	r3, [r4, #12]
 80101d0:	bd10      	pop	{r4, pc}

080101d2 <__sclose>:
 80101d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80101d6:	f000 b813 	b.w	8010200 <_close_r>
	...

080101dc <_write_r>:
 80101dc:	b538      	push	{r3, r4, r5, lr}
 80101de:	4d07      	ldr	r5, [pc, #28]	; (80101fc <_write_r+0x20>)
 80101e0:	4604      	mov	r4, r0
 80101e2:	4608      	mov	r0, r1
 80101e4:	4611      	mov	r1, r2
 80101e6:	2200      	movs	r2, #0
 80101e8:	602a      	str	r2, [r5, #0]
 80101ea:	461a      	mov	r2, r3
 80101ec:	f7f2 fee5 	bl	8002fba <_write>
 80101f0:	1c43      	adds	r3, r0, #1
 80101f2:	d102      	bne.n	80101fa <_write_r+0x1e>
 80101f4:	682b      	ldr	r3, [r5, #0]
 80101f6:	b103      	cbz	r3, 80101fa <_write_r+0x1e>
 80101f8:	6023      	str	r3, [r4, #0]
 80101fa:	bd38      	pop	{r3, r4, r5, pc}
 80101fc:	20002bb4 	.word	0x20002bb4

08010200 <_close_r>:
 8010200:	b538      	push	{r3, r4, r5, lr}
 8010202:	4d06      	ldr	r5, [pc, #24]	; (801021c <_close_r+0x1c>)
 8010204:	2300      	movs	r3, #0
 8010206:	4604      	mov	r4, r0
 8010208:	4608      	mov	r0, r1
 801020a:	602b      	str	r3, [r5, #0]
 801020c:	f7f2 fef1 	bl	8002ff2 <_close>
 8010210:	1c43      	adds	r3, r0, #1
 8010212:	d102      	bne.n	801021a <_close_r+0x1a>
 8010214:	682b      	ldr	r3, [r5, #0]
 8010216:	b103      	cbz	r3, 801021a <_close_r+0x1a>
 8010218:	6023      	str	r3, [r4, #0]
 801021a:	bd38      	pop	{r3, r4, r5, pc}
 801021c:	20002bb4 	.word	0x20002bb4

08010220 <_fstat_r>:
 8010220:	b538      	push	{r3, r4, r5, lr}
 8010222:	4d07      	ldr	r5, [pc, #28]	; (8010240 <_fstat_r+0x20>)
 8010224:	2300      	movs	r3, #0
 8010226:	4604      	mov	r4, r0
 8010228:	4608      	mov	r0, r1
 801022a:	4611      	mov	r1, r2
 801022c:	602b      	str	r3, [r5, #0]
 801022e:	f7f2 feec 	bl	800300a <_fstat>
 8010232:	1c43      	adds	r3, r0, #1
 8010234:	d102      	bne.n	801023c <_fstat_r+0x1c>
 8010236:	682b      	ldr	r3, [r5, #0]
 8010238:	b103      	cbz	r3, 801023c <_fstat_r+0x1c>
 801023a:	6023      	str	r3, [r4, #0]
 801023c:	bd38      	pop	{r3, r4, r5, pc}
 801023e:	bf00      	nop
 8010240:	20002bb4 	.word	0x20002bb4

08010244 <_isatty_r>:
 8010244:	b538      	push	{r3, r4, r5, lr}
 8010246:	4d06      	ldr	r5, [pc, #24]	; (8010260 <_isatty_r+0x1c>)
 8010248:	2300      	movs	r3, #0
 801024a:	4604      	mov	r4, r0
 801024c:	4608      	mov	r0, r1
 801024e:	602b      	str	r3, [r5, #0]
 8010250:	f7f2 feeb 	bl	800302a <_isatty>
 8010254:	1c43      	adds	r3, r0, #1
 8010256:	d102      	bne.n	801025e <_isatty_r+0x1a>
 8010258:	682b      	ldr	r3, [r5, #0]
 801025a:	b103      	cbz	r3, 801025e <_isatty_r+0x1a>
 801025c:	6023      	str	r3, [r4, #0]
 801025e:	bd38      	pop	{r3, r4, r5, pc}
 8010260:	20002bb4 	.word	0x20002bb4

08010264 <_lseek_r>:
 8010264:	b538      	push	{r3, r4, r5, lr}
 8010266:	4d07      	ldr	r5, [pc, #28]	; (8010284 <_lseek_r+0x20>)
 8010268:	4604      	mov	r4, r0
 801026a:	4608      	mov	r0, r1
 801026c:	4611      	mov	r1, r2
 801026e:	2200      	movs	r2, #0
 8010270:	602a      	str	r2, [r5, #0]
 8010272:	461a      	mov	r2, r3
 8010274:	f7f2 fee4 	bl	8003040 <_lseek>
 8010278:	1c43      	adds	r3, r0, #1
 801027a:	d102      	bne.n	8010282 <_lseek_r+0x1e>
 801027c:	682b      	ldr	r3, [r5, #0]
 801027e:	b103      	cbz	r3, 8010282 <_lseek_r+0x1e>
 8010280:	6023      	str	r3, [r4, #0]
 8010282:	bd38      	pop	{r3, r4, r5, pc}
 8010284:	20002bb4 	.word	0x20002bb4

08010288 <_read_r>:
 8010288:	b538      	push	{r3, r4, r5, lr}
 801028a:	4d07      	ldr	r5, [pc, #28]	; (80102a8 <_read_r+0x20>)
 801028c:	4604      	mov	r4, r0
 801028e:	4608      	mov	r0, r1
 8010290:	4611      	mov	r1, r2
 8010292:	2200      	movs	r2, #0
 8010294:	602a      	str	r2, [r5, #0]
 8010296:	461a      	mov	r2, r3
 8010298:	f7f2 fe72 	bl	8002f80 <_read>
 801029c:	1c43      	adds	r3, r0, #1
 801029e:	d102      	bne.n	80102a6 <_read_r+0x1e>
 80102a0:	682b      	ldr	r3, [r5, #0]
 80102a2:	b103      	cbz	r3, 80102a6 <_read_r+0x1e>
 80102a4:	6023      	str	r3, [r4, #0]
 80102a6:	bd38      	pop	{r3, r4, r5, pc}
 80102a8:	20002bb4 	.word	0x20002bb4

080102ac <_init>:
 80102ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102ae:	bf00      	nop
 80102b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80102b2:	bc08      	pop	{r3}
 80102b4:	469e      	mov	lr, r3
 80102b6:	4770      	bx	lr

080102b8 <_fini>:
 80102b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102ba:	bf00      	nop
 80102bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80102be:	bc08      	pop	{r3}
 80102c0:	469e      	mov	lr, r3
 80102c2:	4770      	bx	lr
